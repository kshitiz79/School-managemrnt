{
    "sourceFile": "src/lib/httpClient.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755984965394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755984965394,
            "name": "Commit-0",
            "content": "// HTTP Client for API calls\n// This is a mock implementation that simulates HTTP requests\n\nconst delay = (ms = 500 + Math.random() * 1000) =>\n    new Promise(resolve => setTimeout(resolve, ms))\n\nconst shouldSimulateError = (errorRate = 0.05) => Math.random() < errorRate\n\nconst createError = (status, message) => {\n    const error = new Error(message)\n    error.status = status\n    return error\n}\n\n// Mock HTTP client that simulates axios-like behavior\nexport const httpClient = {\n    get: async(url, config = {}) => {\n        await delay()\n\n        if (shouldSimulateError()) {\n            throw createError(500, `Failed to GET ${url}`)\n        }\n\n        // Mock response based on URL\n        const mockResponse = {\n            data: getMockDataForUrl(url, config.params),\n            status: 200,\n            statusText: 'OK',\n        }\n\n        return mockResponse\n    },\n\n    post: async(url, data, config = {}) => {\n        await delay()\n\n        if (shouldSimulateError()) {\n            throw createError(500, `Failed to POST ${url}`)\n        }\n\n        const mockResponse = {\n            data: {\n                id: `mock-${Date.now()}`,\n                ...data,\n                createdAt: new Date().toISOString(),\n            },\n            status: 201,\n            statusText: 'Created',\n        }\n\n        return mockResponse\n    },\n\n    put: async(url, data, config = {}) => {\n        await delay()\n\n        if (shouldSimulateError()) {\n            throw createError(500, `Failed to PUT ${url}`)\n        }\n\n        const mockResponse = {\n            data: {\n                ...data,\n                updatedAt: new Date().toISOString(),\n            },\n            status: 200,\n            statusText: 'OK',\n        }\n\n        return mockResponse\n    },\n\n    delete: async(url, config = {}) => {\n        await delay()\n\n        if (shouldSimulateError()) {\n            throw createError(500, `Failed to DELETE ${url}`)\n        }\n\n        const mockResponse = {\n            data: { message: 'Deleted successfully' },\n            status: 200,\n            statusText: 'OK',\n        }\n\n        return mockResponse\n    },\n}\n\n// Mock data generator based on URL patterns\nfunction getMockDataForUrl(url, params = {}) {\n    // Communication endpoints\n    if (url.includes('/communication/scheduled')) {\n        return [{\n                id: 'sch-1',\n                type: 'whatsapp',\n                subject: 'School Event Reminder',\n                content: 'Reminder: Annual Sports Day is tomorrow at 9:00 AM. Please ensure your child comes in proper sports attire.',\n                recipientCount: 150,\n                scheduledAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow\n                createdAt: new Date().toISOString(),\n                createdBy: 'Sarah Johnson',\n                jobId: `job_${Math.random().toString(36).substr(2, 9)}`,\n                status: 'scheduled',\n            },\n            {\n                id: 'sch-2',\n                type: 'email',\n                subject: 'Monthly Fee Reminder',\n                content: 'Dear Parents, This is a reminder that the monthly fee payment is due on 10th of this month. Please make the payment to avoid late fees.',\n                recipientCount: 200,\n                scheduledAt: new Date(\n                    Date.now() + 7 * 24 * 60 * 60 * 1000,\n                ).toISOString(), // Next week\n                createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n                createdBy: 'Lisa Wilson',\n                jobId: `job_${Math.random().toString(36).substr(2, 9)}`,\n                status: 'scheduled',\n            },\n            {\n                id: 'sch-3',\n                type: 'sms',\n                subject: 'Exam Results',\n                content: 'Mid-term exam results have been published. Please check the student portal for detailed results.',\n                recipientCount: 180,\n                scheduledAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago\n                createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n                createdBy: 'John Smith',\n                jobId: `job_${Math.random().toString(36).substr(2, 9)}`,\n                status: 'sent',\n            },\n            {\n                id: 'sch-4',\n                type: 'whatsapp',\n                subject: 'Holiday Notice',\n                content: 'School will remain closed on 15th August for Independence Day. Regular classes will resume from 16th August.',\n                recipientCount: 250,\n                scheduledAt: new Date(\n                    Date.now() + 3 * 24 * 60 * 60 * 1000,\n                ).toISOString(),\n                createdAt: new Date().toISOString(),\n                createdBy: 'Sarah Johnson',\n                jobId: `job_${Math.random().toString(36).substr(2, 9)}`,\n                status: 'processing',\n            },\n            {\n                id: 'sch-5',\n                type: 'email',\n                subject: 'Parent-Teacher Meeting',\n                content: 'You are invited to attend the Parent-Teacher meeting scheduled for next Saturday at 10:00 AM in the school auditorium.',\n                recipientCount: 120,\n                scheduledAt: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 minutes ago\n                createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n                createdBy: 'Emily Davis',\n                jobId: `job_${Math.random().toString(36).substr(2, 9)}`,\n                status: 'failed',\n                error: 'SMTP server connection failed',\n            },\n        ]\n    }\n\n    if (url.includes('/communication/notices')) {\n        return [{\n                id: 'notice-1',\n                title: 'School Reopening After Winter Break',\n                content: 'School will reopen on January 8th, 2024 after winter break. All students are expected to attend classes regularly.',\n                type: 'general',\n                priority: 'high',\n                targetAudience: ['student', 'parent', 'staff'],\n                publishedBy: 'Sarah Johnson',\n                publishedAt: new Date().toISOString(),\n                validUntil: new Date(\n                    Date.now() + 30 * 24 * 60 * 60 * 1000,\n                ).toISOString(),\n                status: 'published',\n                attachments: [],\n                isPinned: true,\n            },\n            {\n                id: 'notice-2',\n                title: 'Parent-Teacher Meeting',\n                content: \"Parent-Teacher meeting is scheduled for February 10th, 2024. Parents are requested to meet their ward's class teacher.\",\n                type: 'meeting',\n                priority: 'medium',\n                targetAudience: ['parent'],\n                publishedBy: 'Sarah Johnson',\n                publishedAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n                validUntil: new Date(\n                    Date.now() + 15 * 24 * 60 * 60 * 1000,\n                ).toISOString(),\n                status: 'published',\n                attachments: [],\n                isPinned: false,\n            },\n        ]\n    }\n\n    if (url.includes('/communication/logs')) {\n        return [{\n                id: 'log-1',\n                type: 'whatsapp',\n                recipient: '+1234567890',\n                recipientName: 'John Doe',\n                subject: 'Fee Reminder',\n                content: 'Your monthly fee payment is due tomorrow.',\n                status: 'delivered',\n                timestamp: new Date().toISOString(),\n                gateway: 'WhatsApp',\n                cost: 0.05,\n            },\n            {\n                id: 'log-2',\n                type: 'email',\n                recipient: 'parent@example.com',\n                recipientName: 'Jane Smith',\n                subject: 'Exam Schedule',\n                content: 'Please find attached the exam schedule for your child.',\n                status: 'sent',\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                gateway: 'Email',\n                cost: 0.001,\n            },\n        ]\n    }\n\n    if (url.includes('/communication/templates/')) {\n        const type = url.split('/templates/')[1]\n        return [{\n            id: 'template-1',\n            name: `${type.toUpperCase()} Template 1`,\n            subject: `Sample ${type} Subject`,\n            content: `This is a sample ${type} template content.`,\n            type: type,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n        }, ]\n    }\n\n    if (url.includes('/communication/gateway-status')) {\n        return [{\n                type: 'whatsapp',\n                name: 'WhatsApp Gateway',\n                status: 'active',\n                successRate: 0.95,\n                rateLimitInfo: {\n                    remaining: 45,\n                    limit: 50,\n                    resetTime: Date.now() + 3600000,\n                },\n                lastUsed: new Date().toISOString(),\n            },\n            {\n                type: 'email',\n                name: 'Email Gateway',\n                status: 'active',\n                successRate: 0.98,\n                rateLimitInfo: {\n                    remaining: 450,\n                    limit: 500,\n                    resetTime: Date.now() + 3600000,\n                },\n                lastUsed: new Date().toISOString(),\n            },\n            {\n                type: 'sms',\n                name: 'SMS Gateway',\n                status: 'active',\n                successRate: 0.92,\n                rateLimitInfo: {\n                    remaining: 180,\n                    limit: 200,\n                    resetTime: Date.now() + 3600000,\n                },\n                lastUsed: new Date().toISOString(),\n            },\n        ]\n    }\n\n    if (url.includes('/classes')) {\n        return [\n            { id: 'class-1', name: 'Class 1', sections: ['A', 'B'] },\n            { id: 'class-2', name: 'Class 2', sections: ['A', 'B', 'C'] },\n            { id: 'class-3', name: 'Class 3', sections: ['A', 'B'] },\n            { id: 'class-4', name: 'Class 4', sections: ['A', 'B', 'C'] },\n            { id: 'class-5', name: 'Class 5', sections: ['A', 'B'] },\n            { id: 'class-6', name: 'Class 6', sections: ['A', 'B', 'C'] },\n            { id: 'class-7', name: 'Class 7', sections: ['A', 'B'] },\n            { id: 'class-8', name: 'Class 8', sections: ['A', 'B', 'C'] },\n            { id: 'class-9', name: 'Class 9', sections: ['A', 'B'] },\n            { id: 'class-10', name: 'Class 10', sections: ['A', 'B', 'C'] },\n        ]\n    }\n\n    if (url.includes('/users/')) {\n        const userType = url.split('/users/')[1]\n        return [{\n            id: 'user-1',\n            name: `Sample ${userType}`,\n            email: `${userType}@example.com`,\n            phone: '+1234567890',\n            type: userType,\n        }, ]\n    }\n\n    // Finance endpoints\n    if (url.includes('/finance/expense-heads')) {\n        return [{\n                id: 1,\n                name: 'Office Supplies',\n                description: 'Stationery and office materials',\n            },\n            { id: 2, name: 'Utilities', description: 'Electricity, water, internet' },\n            {\n                id: 3,\n                name: 'Maintenance',\n                description: 'Building and equipment maintenance',\n            },\n        ]\n    }\n\n    if (url.includes('/finance/income-heads')) {\n        return [\n            { id: 1, name: 'Tuition Fees', description: 'Student tuition payments' },\n            {\n                id: 2,\n                name: 'Admission Fees',\n                description: 'New student admission fees',\n            },\n            { id: 3, name: 'Other Income', description: 'Miscellaneous income' },\n        ]\n    }\n\n    if (url.includes('/finance/expenses')) {\n        return [{\n            id: 1,\n            date: '2024-03-15',\n            amount: 5000,\n            description: 'Office supplies purchase',\n            category: 'Office Supplies',\n        }, ]\n    }\n\n    if (url.includes('/finance/incomes')) {\n        return [{\n            id: 1,\n            date: '2024-03-15',\n            amount: 50000,\n            description: 'Monthly tuition collection',\n            category: 'Tuition Fees',\n        }, ]\n    }\n\n    // Default empty response\n    return []\n}\n\nexport default httpClient"
        }
    ]
}