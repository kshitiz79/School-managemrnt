{
    "sourceFile": "src/lib/api/subjects.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755988378368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755988438347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n       name: 'Computer Science',\n       code: 'CS',\n       type: 'elective',\n       classes: ['6', '7', '8', '9', '10', '11', '12'],\n+    },\n \n     // High school subjects (9-10)\n     {\n       name: 'Physics',\n@@ -153,8 +154,9 @@\n       name: 'Business Studies',\n       code: 'BS',\n       type: 'elective',\n       classes: ['11', '12'],\n+    },\n \n     // Additional subjects\n     {\n       name: 'Sanskrit',\n@@ -281,8 +283,9 @@\n   }\n \n   const defaultSyllabus = classes.map(\n     cls => `${subjectName} curriculum for Class ${cls}`\n+  )\n \n   return classes.reduce((acc, cls) => {\n     acc[cls] = syllabusTemplates[subjectName]?.[cls] || [\n       `${subjectName} topics for Class ${cls}`,\n@@ -294,324 +297,249 @@\n // Generate assessment pattern\n const generateAssessmentPattern = type => {\n   const patterns = {\n     core: {\n-      'Unit Tests': 20,\n-      'Mid-term Exam': 30,\n-      'Final Exam': 40,\n-      'Internal Assessment': 10,\n+      midterm: 30,\n+      final: 40,\n+      assignments: 15,\n+      practicals: 15,\n     },\n     elective: {\n-      'Unit Tests': 25,\n-      'Mid-term Exam': 35,\n-      'Final Exam': 40,\n+      midterm: 25,\n+      final: 35,\n+      assignments: 20,\n+      practicals: 20,\n     },\n     optional: {\n-      'Unit Tests': 30,\n-      'Final Exam': 70,\n-    }\n+      midterm: 20,\n+      final: 30,\n+      assignments: 25,\n+      practicals: 25,\n+    },\n   }\n \n   return patterns[type] || patterns.core\n }\n \n-// Initialize store\n-subjectsStore = generateSubjects()\n-nextId = subjectsStore.length + 1\n+// Initialize subjects\n+const initializeSubjects = () => {\n+  if (subjectsStore.length === 0) {\n+    subjectsStore = generateSubjects()\n+    nextId = subjectsStore.length + 1\n+  }\n+}\n \n-// API functions\n+// Initialize on module load\n+initializeSubjects()\n+\n+// Subject management API\n export const subjectsApi = {\n-  // Get all subjects with filtering and pagination\n-  getSubjects: async (params = {}) => {\n+  // Get all subjects\n+  getAll: async (options = {}) => {\n     await delay()\n-\n-    const {\n-      page = 1,\n-      limit = 10,\n-      search = '',\n-      type = '',\n-      classId = '',\n-      status = '',\n-      sortBy = 'name',\n-      sortOrder = 'asc',\n-    } = params\n-\n-    let filtered = [...subjectsStore]\n-\n+    \n+    let filteredSubjects = [...subjectsStore]\n+    \n     // Apply filters\n-    if (search) {\n-      const searchLower = search.toLowerCase()\n-      filtered = filtered.filter(\n-        subject =>\n-          subject.name.toLowerCase().includes(searchLower) ||\n-          subject.code.toLowerCase().includes(searchLower) ||\n-          subject.description.toLowerCase().includes(searchLower),\n+    if (options.type) {\n+      filteredSubjects = filteredSubjects.filter(subject => subject.type === options.type)\n+    }\n+    \n+    if (options.class) {\n+      filteredSubjects = filteredSubjects.filter(subject => \n+        subject.classes.includes(options.class)\n       )\n     }\n-\n-    if (type) {\n-      filtered = filtered.filter(subject => subject.type === type)\n+    \n+    if (options.status) {\n+      filteredSubjects = filteredSubjects.filter(subject => subject.status === options.status)\n     }\n \n-    if (classId) {\n-      filtered = filtered.filter(subject => subject.classes.includes(classId))\n-    }\n-\n-    if (status) {\n-      filtered = filtered.filter(subject => subject.status === status)\n-    }\n-\n-    // Apply sorting\n-    filtered.sort((a, b) => {\n-      let aValue = a[sortBy]\n-      let bValue = b[sortBy]\n-\n-      if (typeof aValue === 'string') {\n-        aValue = aValue.toLowerCase()\n-        bValue = bValue.toLowerCase()\n-      }\n-\n-      if (sortOrder === 'desc') {\n-        return bValue > aValue ? 1 : -1\n-      }\n-      return aValue > bValue ? 1 : -1\n-    })\n-\n-    // Apply pagination\n-    const startIndex = (page - 1) * limit\n-    const endIndex = startIndex + limit\n-    const paginatedData = filtered.slice(startIndex, endIndex)\n-\n     return {\n-      data: paginatedData,\n-      pagination: {\n-        page,\n-        limit,\n-        total: filtered.length,\n-        totalPages: Math.ceil(filtered.length / limit),\n-        hasNext: endIndex < filtered.length,\n-        hasPrev: page > 1,\n-      }\n+      data: filteredSubjects,\n+      total: filteredSubjects.length,\n+      page: 1,\n+      limit: filteredSubjects.length,\n     }\n   },\n \n   // Get subject by ID\n-  getSubject: async id => {\n+  getById: async id => {\n     await delay()\n-\n     const subject = subjectsStore.find(s => s.id === id)\n     if (!subject) {\n       throw new Error('Subject not found')\n     }\n-\n-    return subject\n+    return { data: subject }\n   },\n \n   // Create new subject\n-  createSubject: async subjectData => {\n+  create: async subjectData => {\n     await delay()\n-\n+    \n     // Validate data\n     const validatedData = subjectSchema.parse(subjectData)\n-\n+    \n     // Check for duplicate code\n-    const existingCode = subjectsStore.find(s => s.code === validatedData.code)\n-    if (existingCode) {\n+    if (subjectsStore.some(s => s.code === validatedData.code)) {\n       throw new Error('Subject code already exists')\n     }\n \n     const newSubject = {\n       id: `subject-${nextId++}`,\n       ...validatedData,\n       teachers: [],\n-      syllabus: generateSyllabus(\n-        validatedData.name,\n-        validatedData.classes || []\n-      ),\n+      syllabus: generateSyllabus(validatedData.name, validatedData.classes),\n       assessmentPattern: generateAssessmentPattern(validatedData.type),\n       status: 'active',\n       createdAt: new Date().toISOString(),\n       updatedAt: new Date().toISOString(),\n     }\n \n     subjectsStore.push(newSubject)\n-    return newSubject\n+    return { data: newSubject }\n   },\n \n   // Update subject\n-  updateSubject: async (id, updateData) => {\n+  update: async (id, updates) => {\n     await delay()\n-\n+    \n     const index = subjectsStore.findIndex(s => s.id === id)\n     if (index === -1) {\n       throw new Error('Subject not found')\n     }\n \n-    // Validate update data\n-    const validatedData = subjectSchema.partial().parse(updateData)\n-\n+    // Validate updates\n+    const validatedData = subjectSchema.partial().parse(updates)\n+    \n     // Check for duplicate code (excluding current subject)\n-    if (validatedData.code) {\n-      const existingCode = subjectsStore.find(\n-        s => s.code === validatedData.code && s.id !== id\n-      )\n-      if (existingCode) {\n-        throw new Error('Subject code already exists')\n-      }\n+    if (validatedData.code && subjectsStore.some(s => s.code === validatedData.code && s.id !== id)) {\n+      throw new Error('Subject code already exists')\n     }\n \n-    const updatedSubject = {\n+    subjectsStore[index] = {\n       ...subjectsStore[index],\n       ...validatedData,\n       updatedAt: new Date().toISOString(),\n     }\n \n-    subjectsStore[index] = updatedSubject\n-    return updatedSubject\n+    return { data: subjectsStore[index] }\n   },\n \n   // Delete subject\n-  deleteSubject: async id => {\n+  delete: async id => {\n     await delay()\n-\n+    \n     const index = subjectsStore.findIndex(s => s.id === id)\n     if (index === -1) {\n       throw new Error('Subject not found')\n     }\n \n-    subjectsStore.splice(index, 1)\n-    return { success: true }\n+    const deleted = subjectsStore.splice(index, 1)[0]\n+    return { data: deleted }\n   },\n \n   // Get subjects by class\n-  getSubjectsByClass: async classId => {\n+  getByClass: async classId => {\n     await delay()\n-\n-    return subjectsStore.filter(\n-      subject =>\n-        subject.classes.includes(classId) && subject.status === 'active',\n+    const subjects = subjectsStore.filter(subject => \n+      subject.classes.includes(classId)\n     )\n+    return { data: subjects }\n   },\n \n-  // Get subjects by type\n-  getSubjectsByType: async type => {\n-    await delay()\n-\n-    return subjectsStore.filter(subject => subject.type === type)\n-  },\n-\n-  // Assign teacher to subject\n-  assignTeacher: async (subjectId, teacherId) => {\n-    await delay()\n-\n-    const index = subjectsStore.findIndex(s => s.id === subjectId)\n-    if (index === -1) {\n-      throw new Error('Subject not found')\n-    }\n-\n-    if (!subjectsStore[index].teachers.includes(teacherId)) {\n-      subjectsStore[index].teachers.push(teacherId)\n-      subjectsStore[index].updatedAt = new Date().toISOString()\n-    }\n-\n-    return subjectsStore[index]\n-  },\n-\n-  // Remove teacher from subject\n-  removeTeacher: async (subjectId, teacherId) => {\n-    await delay()\n-\n-    const index = subjectsStore.findIndex(s => s.id === subjectId)\n-    if (index === -1) {\n-      throw new Error('Subject not found')\n-    }\n-\n-    subjectsStore[index].teachers = subjectsStore[index].teachers.filter(\n-      id => id !== teacherId\n-    )\n-    subjectsStore[index].updatedAt = new Date().toISOString()\n-\n-    return subjectsStore[index]\n-  },\n-\n   // Get subject statistics\n-  getSubjectStats: async () => {\n+  getStats: async () => {\n     await delay()\n-\n+    \n     const stats = {\n       total: subjectsStore.length,\n-      active: subjectsStore.filter(s => s.status === 'active').length,\n-      inactive: subjectsStore.filter(s => s.status === 'inactive').length,\n       byType: {},\n-      byClass: {},\n-      totalCredits: subjectsStore.reduce(\n-        (sum, subject) => sum + (subject.credits || 0),\n-        0\n-      ),\n+      byStatus: {},\n+      totalClasses: 0,\n+    }\n \n-    // Group by type\n     subjectsStore.forEach(subject => {\n+      // Count by type\n       stats.byType[subject.type] = (stats.byType[subject.type] || 0) + 1\n+      \n+      // Count by status\n+      stats.byStatus[subject.status] = (stats.byStatus[subject.status] || 0) + 1\n+      \n+      // Count total class associations\n+      stats.totalClasses += subject.classes.length\n     })\n \n-    // Group by class\n-    subjectsStore.forEach(subject => {\n-      subject.classes.forEach(classId => {\n-        stats.byClass[classId] = (stats.byClass[classId] || 0) + 1\n-      })\n-    })\n-\n-    return stats\n+    return { data: stats }\n   },\n \n   // Search subjects\n   searchSubjects: async query => {\n     await delay()\n+    \n+    const searchTerm = query.toLowerCase()\n+    const results = subjectsStore.filter(subject =>\n+      subject.name.toLowerCase().includes(searchTerm) ||\n+      subject.code.toLowerCase().includes(searchTerm) ||\n+      subject.description.toLowerCase().includes(searchTerm)\n+    )\n \n-    if (!query || query.length < 2) {\n-      return []\n+    return {\n+      data: results,\n+      total: results.length,\n+      query: query,\n     }\n+  },\n \n-    const searchLower = query.toLowerCase()\n-    return subjectsStore\n-      .filter(\n-        subject =>\n-          subject.name.toLowerCase().includes(searchLower) ||\n-          subject.code.toLowerCase().includes(searchLower) ||\n-          subject.description.toLowerCase().includes(searchLower),\n-      )\n-      .slice(0, 10) // Limit search results\n+  // Assign teacher to subject\n+  assignTeacher: async (subjectId, teacherId) => {\n+    await delay()\n+    \n+    const subject = subjectsStore.find(s => s.id === subjectId)\n+    if (!subject) {\n+      throw new Error('Subject not found')\n+    }\n+\n+    if (!subject.teachers.includes(teacherId)) {\n+      subject.teachers.push(teacherId)\n+      subject.updatedAt = new Date().toISOString()\n+    }\n+\n+    return { data: subject }\n   },\n \n-  // Get subject syllabus\n-  getSubjectSyllabus: async (subjectId, classId) => {\n+  // Remove teacher from subject\n+  removeTeacher: async (subjectId, teacherId) => {\n     await delay()\n-\n+    \n     const subject = subjectsStore.find(s => s.id === subjectId)\n     if (!subject) {\n       throw new Error('Subject not found')\n     }\n \n-    return subject.syllabus[classId] || []\n+    subject.teachers = subject.teachers.filter(id => id !== teacherId)\n+    subject.updatedAt = new Date().toISOString()\n+\n+    return { data: subject }\n   },\n \n   // Update subject syllabus\n   updateSubjectSyllabus: async (subjectId, classId, syllabus) => {\n     await delay()\n-\n-    const index = subjectsStore.findIndex(s => s.id === subjectId)\n-    if (index === -1) {\n+    \n+    const subject = subjectsStore.find(s => s.id === subjectId)\n+    if (!subject) {\n       throw new Error('Subject not found')\n     }\n \n-    if (!subjectsStore[index].syllabus) {\n-      subjectsStore[index].syllabus = {}\n+    if (!subject.classes.includes(classId)) {\n+      throw new Error('Subject not available for this class')\n     }\n \n-    subjectsStore[index].syllabus[classId] = syllabus\n-    subjectsStore[index].updatedAt = new Date().toISOString()\n+    subject.syllabus[classId] = syllabus\n+    subject.updatedAt = new Date().toISOString()\n \n-    return subjectsStore[index]\n+    return { data: subject }\n   },\n }\n \n-export default subjectsApi\n+export default subjectsApi\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755988587647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,537 +9,537 @@\n const delay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms))\n \n // Generate realistic subject data\n const generateSubjects = () => {\n-  const subjects = [\n-    // Primary subjects (KG-5)\n-    {\n-      name: 'English',\n-      code: 'ENG',\n-      type: 'core',\n-      classes: [\n-        'KG',\n-        '1',\n-        '2',\n-        '3',\n-        '4',\n-        '5',\n-        '6',\n-        '7',\n-        '8',\n-        '9',\n-        '10',\n-        '11',\n-        '12',\n-      ],\n-    },\n-    {\n-      name: 'Mathematics',\n-      code: 'MATH',\n-      type: 'core',\n-      classes: [\n-        'KG',\n-        '1',\n-        '2',\n-        '3',\n-        '4',\n-        '5',\n-        '6',\n-        '7',\n-        '8',\n-        '9',\n-        '10',\n-        '11',\n-        '12',\n-      ],\n-    },\n-    {\n-      name: 'Environmental Studies',\n-      code: 'EVS',\n-      type: 'core',\n-      classes: ['KG', '1', '2', '3', '4', '5'],\n-    },\n-    {\n-      name: 'Hindi',\n-      code: 'HIN',\n-      type: 'core',\n-      classes: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n-    },\n-    {\n-      name: 'Art & Craft',\n-      code: 'ART',\n-      type: 'elective',\n-      classes: ['KG', '1', '2', '3', '4', '5', '6', '7', '8'],\n-    },\n-    {\n-      name: 'Physical Education',\n-      code: 'PE',\n-      type: 'core',\n-      classes: [\n-        'KG',\n-        '1',\n-        '2',\n-        '3',\n-        '4',\n-        '5',\n-        '6',\n-        '7',\n-        '8',\n-        '9',\n-        '10',\n-        '11',\n-        '12',\n-      ],\n-    },\n+    const subjects = [\n+        // Primary subjects (KG-5)\n+        {\n+            name: 'English',\n+            code: 'ENG',\n+            type: 'core',\n+            classes: [\n+                'KG',\n+                '1',\n+                '2',\n+                '3',\n+                '4',\n+                '5',\n+                '6',\n+                '7',\n+                '8',\n+                '9',\n+                '10',\n+                '11',\n+                '12',\n+            ],\n+        },\n+        {\n+            name: 'Mathematics',\n+            code: 'MATH',\n+            type: 'core',\n+            classes: [\n+                'KG',\n+                '1',\n+                '2',\n+                '3',\n+                '4',\n+                '5',\n+                '6',\n+                '7',\n+                '8',\n+                '9',\n+                '10',\n+                '11',\n+                '12',\n+            ],\n+        },\n+        {\n+            name: 'Environmental Studies',\n+            code: 'EVS',\n+            type: 'core',\n+            classes: ['KG', '1', '2', '3', '4', '5'],\n+        },\n+        {\n+            name: 'Hindi',\n+            code: 'HIN',\n+            type: 'core',\n+            classes: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n+        },\n+        {\n+            name: 'Art & Craft',\n+            code: 'ART',\n+            type: 'elective',\n+            classes: ['KG', '1', '2', '3', '4', '5', '6', '7', '8'],\n+        },\n+        {\n+            name: 'Physical Education',\n+            code: 'PE',\n+            type: 'core',\n+            classes: [\n+                'KG',\n+                '1',\n+                '2',\n+                '3',\n+                '4',\n+                '5',\n+                '6',\n+                '7',\n+                '8',\n+                '9',\n+                '10',\n+                '11',\n+                '12',\n+            ],\n+        },\n \n-    // Middle school subjects (6-8)\n-    { name: 'Science', code: 'SCI', type: 'core', classes: ['6', '7', '8'] },\n-    {\n-      name: 'Social Studies',\n-      code: 'SS',\n-      type: 'core',\n-      classes: ['6', '7', '8'],\n-    },\n-    {\n-      name: 'Computer Science',\n-      code: 'CS',\n-      type: 'elective',\n-      classes: ['6', '7', '8', '9', '10', '11', '12'],\n-    },\n+        // Middle school subjects (6-8)\n+        { name: 'Science', code: 'SCI', type: 'core', classes: ['6', '7', '8'] },\n+        {\n+            name: 'Social Studies',\n+            code: 'SS',\n+            type: 'core',\n+            classes: ['6', '7', '8'],\n+        },\n+        {\n+            name: 'Computer Science',\n+            code: 'CS',\n+            type: 'elective',\n+            classes: ['6', '7', '8', '9', '10', '11', '12'],\n+        },\n \n-    // High school subjects (9-10)\n-    {\n-      name: 'Physics',\n-      code: 'PHY',\n-      type: 'core',\n-      classes: ['9', '10', '11', '12'],\n-    },\n-    {\n-      name: 'Chemistry',\n-      code: 'CHEM',\n-      type: 'core',\n-      classes: ['9', '10', '11', '12'],\n-    },\n-    {\n-      name: 'Biology',\n-      code: 'BIO',\n-      type: 'core',\n-      classes: ['9', '10', '11', '12'],\n-    },\n-    {\n-      name: 'History',\n-      code: 'HIST',\n-      type: 'core',\n-      classes: ['9', '10', '11', '12'],\n-    },\n-    {\n-      name: 'Geography',\n-      code: 'GEO',\n-      type: 'core',\n-      classes: ['9', '10', '11', '12'],\n-    },\n-    { name: 'Economics', code: 'ECO', type: 'elective', classes: ['11', '12'] },\n-    {\n-      name: 'Political Science',\n-      code: 'POL',\n-      type: 'elective',\n-      classes: ['11', '12'],\n-    },\n-    {\n-      name: 'Accountancy',\n-      code: 'ACC',\n-      type: 'elective',\n-      classes: ['11', '12'],\n-    },\n-    {\n-      name: 'Business Studies',\n-      code: 'BS',\n-      type: 'elective',\n-      classes: ['11', '12'],\n-    },\n+        // High school subjects (9-10)\n+        {\n+            name: 'Physics',\n+            code: 'PHY',\n+            type: 'core',\n+            classes: ['9', '10', '11', '12'],\n+        },\n+        {\n+            name: 'Chemistry',\n+            code: 'CHEM',\n+            type: 'core',\n+            classes: ['9', '10', '11', '12'],\n+        },\n+        {\n+            name: 'Biology',\n+            code: 'BIO',\n+            type: 'core',\n+            classes: ['9', '10', '11', '12'],\n+        },\n+        {\n+            name: 'History',\n+            code: 'HIST',\n+            type: 'core',\n+            classes: ['9', '10', '11', '12'],\n+        },\n+        {\n+            name: 'Geography',\n+            code: 'GEO',\n+            type: 'core',\n+            classes: ['9', '10', '11', '12'],\n+        },\n+        { name: 'Economics', code: 'ECO', type: 'elective', classes: ['11', '12'] },\n+        {\n+            name: 'Political Science',\n+            code: 'POL',\n+            type: 'elective',\n+            classes: ['11', '12'],\n+        },\n+        {\n+            name: 'Accountancy',\n+            code: 'ACC',\n+            type: 'elective',\n+            classes: ['11', '12'],\n+        },\n+        {\n+            name: 'Business Studies',\n+            code: 'BS',\n+            type: 'elective',\n+            classes: ['11', '12'],\n+        },\n \n-    // Additional subjects\n-    {\n-      name: 'Sanskrit',\n-      code: 'SAN',\n-      type: 'optional',\n-      classes: ['6', '7', '8', '9', '10'],\n-    },\n-    {\n-      name: 'Music',\n-      code: 'MUS',\n-      type: 'elective',\n-      classes: ['6', '7', '8', '9', '10'],\n-    },\n-    {\n-      name: 'Dance',\n-      code: 'DAN',\n-      type: 'elective',\n-      classes: ['6', '7', '8', '9', '10'],\n-    },\n-    {\n-      name: 'Psychology',\n-      code: 'PSY',\n-      type: 'elective',\n-      classes: ['11', '12'],\n-    },\n-    {\n-      name: 'Philosophy',\n-      code: 'PHI',\n-      type: 'optional',\n-      classes: ['11', '12'],\n-    },\n-  ]\n+        // Additional subjects\n+        {\n+            name: 'Sanskrit',\n+            code: 'SAN',\n+            type: 'optional',\n+            classes: ['6', '7', '8', '9', '10'],\n+        },\n+        {\n+            name: 'Music',\n+            code: 'MUS',\n+            type: 'elective',\n+            classes: ['6', '7', '8', '9', '10'],\n+        },\n+        {\n+            name: 'Dance',\n+            code: 'DAN',\n+            type: 'elective',\n+            classes: ['6', '7', '8', '9', '10'],\n+        },\n+        {\n+            name: 'Psychology',\n+            code: 'PSY',\n+            type: 'elective',\n+            classes: ['11', '12'],\n+        },\n+        {\n+            name: 'Philosophy',\n+            code: 'PHI',\n+            type: 'optional',\n+            classes: ['11', '12'],\n+        },\n+    ]\n \n-  return subjects.map((subject, index) => ({\n-    id: `subject-${index + 1}`,\n-    name: subject.name,\n-    code: subject.code,\n-    type: subject.type,\n-    credits: subject.type === 'core' ? 4 : subject.type === 'elective' ? 3 : 2,\n-    description: `${subject.name} curriculum for classes ${subject.classes.join(', ')}`,\n-    classes: subject.classes,\n-    teachers: [], // Will be populated when teachers are assigned\n-    syllabus: generateSyllabus(subject.name, subject.classes),\n-    assessmentPattern: generateAssessmentPattern(subject.type),\n-    status: 'active',\n-    createdAt: new Date().toISOString(),\n-    updatedAt: new Date().toISOString(),\n-  }))\n+    return subjects.map((subject, index) => ({\n+        id: `subject-${index + 1}`,\n+        name: subject.name,\n+        code: subject.code,\n+        type: subject.type,\n+        credits: subject.type === 'core' ? 4 : subject.type === 'elective' ? 3 : 2,\n+        description: `${subject.name} curriculum for classes ${subject.classes.join(', ')}`,\n+        classes: subject.classes,\n+        teachers: [], // Will be populated when teachers are assigned\n+        syllabus: generateSyllabus(subject.name, subject.classes),\n+        assessmentPattern: generateAssessmentPattern(subject.type),\n+        status: 'active',\n+        createdAt: new Date().toISOString(),\n+        updatedAt: new Date().toISOString(),\n+    }))\n }\n \n // Generate syllabus for subjects\n const generateSyllabus = (subjectName, classes) => {\n-  const syllabusTemplates = {\n-    Mathematics: {\n-      KG: ['Numbers 1-10', 'Shapes', 'Colors', 'Patterns'],\n-      1: ['Numbers 1-100', 'Addition', 'Subtraction', 'Shapes', 'Measurement'],\n-      2: [\n-        'Numbers 1-1000',\n-        'Addition & Subtraction',\n-        'Multiplication Tables',\n-        'Time',\n-        'Money',\n-      ],\n-      9: [\n-        'Number Systems',\n-        'Polynomials',\n-        'Linear Equations',\n-        'Geometry',\n-        'Statistics',\n-      ],\n-      10: [\n-        'Real Numbers',\n-        'Polynomials',\n-        'Linear Equations',\n-        'Quadratic Equations',\n-        'Arithmetic Progressions',\n-        'Triangles',\n-        'Coordinate Geometry',\n-        'Trigonometry',\n-        'Circles',\n-        'Surface Areas and Volumes',\n-        'Statistics',\n-        'Probability',\n-      ],\n-    },\n-    English: {\n-      KG: ['Alphabets', 'Phonics', 'Simple Words', 'Rhymes'],\n-      1: ['Reading', 'Writing', 'Grammar Basics', 'Vocabulary'],\n-      9: ['Literature', 'Grammar', 'Writing Skills', 'Reading Comprehension'],\n-      10: [\n-        'Literature',\n-        'Grammar',\n-        'Writing Skills',\n-        'Reading Comprehension',\n-        'Poetry',\n-      ],\n-    },\n-    Science: {\n-      6: [\n-        'Food',\n-        'Components of Food',\n-        'Fibre to Fabric',\n-        'Sorting Materials',\n-        'Separation of Substances',\n-        'Changes Around Us',\n-      ],\n-      7: [\n-        'Nutrition in Plants',\n-        'Nutrition in Animals',\n-        'Fibre to Fabric',\n-        'Heat',\n-        'Acids, Bases and Salts',\n-        'Physical and Chemical Changes',\n-      ],\n-      8: [\n-        'Crop Production',\n-        'Microorganisms',\n-        'Synthetic Fibres',\n-        'Materials',\n-        'Coal and Petroleum',\n-        'Combustion and Flame',\n-      ],\n-    },\n-  }\n+    const syllabusTemplates = {\n+        Mathematics: {\n+            KG: ['Numbers 1-10', 'Shapes', 'Colors', 'Patterns'],\n+            1: ['Numbers 1-100', 'Addition', 'Subtraction', 'Shapes', 'Measurement'],\n+            2: [\n+                'Numbers 1-1000',\n+                'Addition & Subtraction',\n+                'Multiplication Tables',\n+                'Time',\n+                'Money',\n+            ],\n+            9: [\n+                'Number Systems',\n+                'Polynomials',\n+                'Linear Equations',\n+                'Geometry',\n+                'Statistics',\n+            ],\n+            10: [\n+                'Real Numbers',\n+                'Polynomials',\n+                'Linear Equations',\n+                'Quadratic Equations',\n+                'Arithmetic Progressions',\n+                'Triangles',\n+                'Coordinate Geometry',\n+                'Trigonometry',\n+                'Circles',\n+                'Surface Areas and Volumes',\n+                'Statistics',\n+                'Probability',\n+            ],\n+        },\n+        English: {\n+            KG: ['Alphabets', 'Phonics', 'Simple Words', 'Rhymes'],\n+            1: ['Reading', 'Writing', 'Grammar Basics', 'Vocabulary'],\n+            9: ['Literature', 'Grammar', 'Writing Skills', 'Reading Comprehension'],\n+            10: [\n+                'Literature',\n+                'Grammar',\n+                'Writing Skills',\n+                'Reading Comprehension',\n+                'Poetry',\n+            ],\n+        },\n+        Science: {\n+            6: [\n+                'Food',\n+                'Components of Food',\n+                'Fibre to Fabric',\n+                'Sorting Materials',\n+                'Separation of Substances',\n+                'Changes Around Us',\n+            ],\n+            7: [\n+                'Nutrition in Plants',\n+                'Nutrition in Animals',\n+                'Fibre to Fabric',\n+                'Heat',\n+                'Acids, Bases and Salts',\n+                'Physical and Chemical Changes',\n+            ],\n+            8: [\n+                'Crop Production',\n+                'Microorganisms',\n+                'Synthetic Fibres',\n+                'Materials',\n+                'Coal and Petroleum',\n+                'Combustion and Flame',\n+            ],\n+        },\n+    }\n \n-  const defaultSyllabus = classes.map(\n-    cls => `${subjectName} curriculum for Class ${cls}`\n-  )\n+    const defaultSyllabus = classes.map(\n+        cls => `${subjectName} curriculum for Class ${cls}`\n+    )\n \n-  return classes.reduce((acc, cls) => {\n-    acc[cls] = syllabusTemplates[subjectName]?.[cls] || [\n-      `${subjectName} topics for Class ${cls}`,\n-    ]\n-    return acc\n-  }, {})\n+    return classes.reduce((acc, cls) => {\n+        acc[cls] = syllabusTemplates[subjectName] ? .[cls] || [\n+            `${subjectName} topics for Class ${cls}`,\n+        ]\n+        return acc\n+    }, {})\n }\n \n // Generate assessment pattern\n const generateAssessmentPattern = type => {\n-  const patterns = {\n-    core: {\n-      midterm: 30,\n-      final: 40,\n-      assignments: 15,\n-      practicals: 15,\n-    },\n-    elective: {\n-      midterm: 25,\n-      final: 35,\n-      assignments: 20,\n-      practicals: 20,\n-    },\n-    optional: {\n-      midterm: 20,\n-      final: 30,\n-      assignments: 25,\n-      practicals: 25,\n-    },\n-  }\n+    const patterns = {\n+        core: {\n+            midterm: 30,\n+            final: 40,\n+            assignments: 15,\n+            practicals: 15,\n+        },\n+        elective: {\n+            midterm: 25,\n+            final: 35,\n+            assignments: 20,\n+            practicals: 20,\n+        },\n+        optional: {\n+            midterm: 20,\n+            final: 30,\n+            assignments: 25,\n+            practicals: 25,\n+        },\n+    }\n \n-  return patterns[type] || patterns.core\n+    return patterns[type] || patterns.core\n }\n \n // Initialize subjects\n const initializeSubjects = () => {\n-  if (subjectsStore.length === 0) {\n-    subjectsStore = generateSubjects()\n-    nextId = subjectsStore.length + 1\n-  }\n+    if (subjectsStore.length === 0) {\n+        subjectsStore = generateSubjects()\n+        nextId = subjectsStore.length + 1\n+    }\n }\n \n // Initialize on module load\n initializeSubjects()\n \n // Subject management API\n export const subjectsApi = {\n-  // Get all subjects\n-  getAll: async (options = {}) => {\n-    await delay()\n-    \n-    let filteredSubjects = [...subjectsStore]\n-    \n-    // Apply filters\n-    if (options.type) {\n-      filteredSubjects = filteredSubjects.filter(subject => subject.type === options.type)\n-    }\n-    \n-    if (options.class) {\n-      filteredSubjects = filteredSubjects.filter(subject => \n-        subject.classes.includes(options.class)\n-      )\n-    }\n-    \n-    if (options.status) {\n-      filteredSubjects = filteredSubjects.filter(subject => subject.status === options.status)\n-    }\n+    // Get all subjects\n+    getAll: async(options = {}) => {\n+        await delay()\n \n-    return {\n-      data: filteredSubjects,\n-      total: filteredSubjects.length,\n-      page: 1,\n-      limit: filteredSubjects.length,\n-    }\n-  },\n+        let filteredSubjects = [...subjectsStore]\n \n-  // Get subject by ID\n-  getById: async id => {\n-    await delay()\n-    const subject = subjectsStore.find(s => s.id === id)\n-    if (!subject) {\n-      throw new Error('Subject not found')\n-    }\n-    return { data: subject }\n-  },\n+        // Apply filters\n+        if (options.type) {\n+            filteredSubjects = filteredSubjects.filter(subject => subject.type === options.type)\n+        }\n \n-  // Create new subject\n-  create: async subjectData => {\n-    await delay()\n-    \n-    // Validate data\n-    const validatedData = subjectSchema.parse(subjectData)\n-    \n-    // Check for duplicate code\n-    if (subjectsStore.some(s => s.code === validatedData.code)) {\n-      throw new Error('Subject code already exists')\n-    }\n+        if (options.class) {\n+            filteredSubjects = filteredSubjects.filter(subject =>\n+                subject.classes.includes(options.class)\n+            )\n+        }\n \n-    const newSubject = {\n-      id: `subject-${nextId++}`,\n-      ...validatedData,\n-      teachers: [],\n-      syllabus: generateSyllabus(validatedData.name, validatedData.classes),\n-      assessmentPattern: generateAssessmentPattern(validatedData.type),\n-      status: 'active',\n-      createdAt: new Date().toISOString(),\n-      updatedAt: new Date().toISOString(),\n-    }\n+        if (options.status) {\n+            filteredSubjects = filteredSubjects.filter(subject => subject.status === options.status)\n+        }\n \n-    subjectsStore.push(newSubject)\n-    return { data: newSubject }\n-  },\n+        return {\n+            data: filteredSubjects,\n+            total: filteredSubjects.length,\n+            page: 1,\n+            limit: filteredSubjects.length,\n+        }\n+    },\n \n-  // Update subject\n-  update: async (id, updates) => {\n-    await delay()\n-    \n-    const index = subjectsStore.findIndex(s => s.id === id)\n-    if (index === -1) {\n-      throw new Error('Subject not found')\n-    }\n+    // Get subject by ID\n+    getById: async id => {\n+        await delay()\n+        const subject = subjectsStore.find(s => s.id === id)\n+        if (!subject) {\n+            throw new Error('Subject not found')\n+        }\n+        return { data: subject }\n+    },\n \n-    // Validate updates\n-    const validatedData = subjectSchema.partial().parse(updates)\n-    \n-    // Check for duplicate code (excluding current subject)\n-    if (validatedData.code && subjectsStore.some(s => s.code === validatedData.code && s.id !== id)) {\n-      throw new Error('Subject code already exists')\n-    }\n+    // Create new subject\n+    create: async subjectData => {\n+        await delay()\n \n-    subjectsStore[index] = {\n-      ...subjectsStore[index],\n-      ...validatedData,\n-      updatedAt: new Date().toISOString(),\n-    }\n+        // Validate data\n+        const validatedData = subjectSchema.parse(subjectData)\n \n-    return { data: subjectsStore[index] }\n-  },\n+        // Check for duplicate code\n+        if (subjectsStore.some(s => s.code === validatedData.code)) {\n+            throw new Error('Subject code already exists')\n+        }\n \n-  // Delete subject\n-  delete: async id => {\n-    await delay()\n-    \n-    const index = subjectsStore.findIndex(s => s.id === id)\n-    if (index === -1) {\n-      throw new Error('Subject not found')\n-    }\n+        const newSubject = {\n+            id: `subject-${nextId++}`,\n+            ...validatedData,\n+            teachers: [],\n+            syllabus: generateSyllabus(validatedData.name, validatedData.classes),\n+            assessmentPattern: generateAssessmentPattern(validatedData.type),\n+            status: 'active',\n+            createdAt: new Date().toISOString(),\n+            updatedAt: new Date().toISOString(),\n+        }\n \n-    const deleted = subjectsStore.splice(index, 1)[0]\n-    return { data: deleted }\n-  },\n+        subjectsStore.push(newSubject)\n+        return { data: newSubject }\n+    },\n \n-  // Get subjects by class\n-  getByClass: async classId => {\n-    await delay()\n-    const subjects = subjectsStore.filter(subject => \n-      subject.classes.includes(classId)\n-    )\n-    return { data: subjects }\n-  },\n+    // Update subject\n+    update: async(id, updates) => {\n+        await delay()\n \n-  // Get subject statistics\n-  getStats: async () => {\n-    await delay()\n-    \n-    const stats = {\n-      total: subjectsStore.length,\n-      byType: {},\n-      byStatus: {},\n-      totalClasses: 0,\n-    }\n+        const index = subjectsStore.findIndex(s => s.id === id)\n+        if (index === -1) {\n+            throw new Error('Subject not found')\n+        }\n \n-    subjectsStore.forEach(subject => {\n-      // Count by type\n-      stats.byType[subject.type] = (stats.byType[subject.type] || 0) + 1\n-      \n-      // Count by status\n-      stats.byStatus[subject.status] = (stats.byStatus[subject.status] || 0) + 1\n-      \n-      // Count total class associations\n-      stats.totalClasses += subject.classes.length\n-    })\n+        // Validate updates\n+        const validatedData = subjectSchema.partial().parse(updates)\n \n-    return { data: stats }\n-  },\n+        // Check for duplicate code (excluding current subject)\n+        if (validatedData.code && subjectsStore.some(s => s.code === validatedData.code && s.id !== id)) {\n+            throw new Error('Subject code already exists')\n+        }\n \n-  // Search subjects\n-  searchSubjects: async query => {\n-    await delay()\n-    \n-    const searchTerm = query.toLowerCase()\n-    const results = subjectsStore.filter(subject =>\n-      subject.name.toLowerCase().includes(searchTerm) ||\n-      subject.code.toLowerCase().includes(searchTerm) ||\n-      subject.description.toLowerCase().includes(searchTerm)\n-    )\n+        subjectsStore[index] = {\n+            ...subjectsStore[index],\n+            ...validatedData,\n+            updatedAt: new Date().toISOString(),\n+        }\n \n-    return {\n-      data: results,\n-      total: results.length,\n-      query: query,\n-    }\n-  },\n+        return { data: subjectsStore[index] }\n+    },\n \n-  // Assign teacher to subject\n-  assignTeacher: async (subjectId, teacherId) => {\n-    await delay()\n-    \n-    const subject = subjectsStore.find(s => s.id === subjectId)\n-    if (!subject) {\n-      throw new Error('Subject not found')\n-    }\n+    // Delete subject\n+    delete: async id => {\n+        await delay()\n \n-    if (!subject.teachers.includes(teacherId)) {\n-      subject.teachers.push(teacherId)\n-      subject.updatedAt = new Date().toISOString()\n-    }\n+        const index = subjectsStore.findIndex(s => s.id === id)\n+        if (index === -1) {\n+            throw new Error('Subject not found')\n+        }\n \n-    return { data: subject }\n-  },\n+        const deleted = subjectsStore.splice(index, 1)[0]\n+        return { data: deleted }\n+    },\n \n-  // Remove teacher from subject\n-  removeTeacher: async (subjectId, teacherId) => {\n-    await delay()\n-    \n-    const subject = subjectsStore.find(s => s.id === subjectId)\n-    if (!subject) {\n-      throw new Error('Subject not found')\n-    }\n+    // Get subjects by class\n+    getByClass: async classId => {\n+        await delay()\n+        const subjects = subjectsStore.filter(subject =>\n+            subject.classes.includes(classId)\n+        )\n+        return { data: subjects }\n+    },\n \n-    subject.teachers = subject.teachers.filter(id => id !== teacherId)\n-    subject.updatedAt = new Date().toISOString()\n+    // Get subject statistics\n+    getStats: async() => {\n+        await delay()\n \n-    return { data: subject }\n-  },\n+        const stats = {\n+            total: subjectsStore.length,\n+            byType: {},\n+            byStatus: {},\n+            totalClasses: 0,\n+        }\n \n-  // Update subject syllabus\n-  updateSubjectSyllabus: async (subjectId, classId, syllabus) => {\n-    await delay()\n-    \n-    const subject = subjectsStore.find(s => s.id === subjectId)\n-    if (!subject) {\n-      throw new Error('Subject not found')\n-    }\n+        subjectsStore.forEach(subject => {\n+            // Count by type\n+            stats.byType[subject.type] = (stats.byType[subject.type] || 0) + 1\n \n-    if (!subject.classes.includes(classId)) {\n-      throw new Error('Subject not available for this class')\n-    }\n+            // Count by status\n+            stats.byStatus[subject.status] = (stats.byStatus[subject.status] || 0) + 1\n \n-    subject.syllabus[classId] = syllabus\n-    subject.updatedAt = new Date().toISOString()\n+            // Count total class associations\n+            stats.totalClasses += subject.classes.length\n+        })\n \n-    return { data: subject }\n-  },\n+        return { data: stats }\n+    },\n+\n+    // Search subjects\n+    searchSubjects: async query => {\n+        await delay()\n+\n+        const searchTerm = query.toLowerCase()\n+        const results = subjectsStore.filter(subject =>\n+            subject.name.toLowerCase().includes(searchTerm) ||\n+            subject.code.toLowerCase().includes(searchTerm) ||\n+            subject.description.toLowerCase().includes(searchTerm)\n+        )\n+\n+        return {\n+            data: results,\n+            total: results.length,\n+            query: query,\n+        }\n+    },\n+\n+    // Assign teacher to subject\n+    assignTeacher: async(subjectId, teacherId) => {\n+        await delay()\n+\n+        const subject = subjectsStore.find(s => s.id === subjectId)\n+        if (!subject) {\n+            throw new Error('Subject not found')\n+        }\n+\n+        if (!subject.teachers.includes(teacherId)) {\n+            subject.teachers.push(teacherId)\n+            subject.updatedAt = new Date().toISOString()\n+        }\n+\n+        return { data: subject }\n+    },\n+\n+    // Remove teacher from subject\n+    removeTeacher: async(subjectId, teacherId) => {\n+        await delay()\n+\n+        const subject = subjectsStore.find(s => s.id === subjectId)\n+        if (!subject) {\n+            throw new Error('Subject not found')\n+        }\n+\n+        subject.teachers = subject.teachers.filter(id => id !== teacherId)\n+        subject.updatedAt = new Date().toISOString()\n+\n+        return { data: subject }\n+    },\n+\n+    // Update subject syllabus\n+    updateSubjectSyllabus: async(subjectId, classId, syllabus) => {\n+        await delay()\n+\n+        const subject = subjectsStore.find(s => s.id === subjectId)\n+        if (!subject) {\n+            throw new Error('Subject not found')\n+        }\n+\n+        if (!subject.classes.includes(classId)) {\n+            throw new Error('Subject not available for this class')\n+        }\n+\n+        subject.syllabus[classId] = syllabus\n+        subject.updatedAt = new Date().toISOString()\n+\n+        return { data: subject }\n+    },\n }\n \n export default subjectsApi\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755994925721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,9 @@\n         cls => `${subjectName} curriculum for Class ${cls}`\n     )\n \n     return classes.reduce((acc, cls) => {\n-        acc[cls] = syllabusTemplates[subjectName]?.[cls] || [\n+        acc[cls] = syllabusTemplates[subjectName] ? .[cls] || [\n             `${subjectName} topics for Class ${cls}`,\n         ]\n         return acc\n     }, {})\n"
                }
            ],
            "date": 1755988378368,
            "name": "Commit-0",
            "content": "// Mock API for subject management\nimport { subjectSchema } from '../validators.js'\n\n// In-memory store\nlet subjectsStore = []\nlet nextId = 1\n\n// Simulate API latency\nconst delay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms))\n\n// Generate realistic subject data\nconst generateSubjects = () => {\n  const subjects = [\n    // Primary subjects (KG-5)\n    {\n      name: 'English',\n      code: 'ENG',\n      type: 'core',\n      classes: [\n        'KG',\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        '10',\n        '11',\n        '12',\n      ],\n    },\n    {\n      name: 'Mathematics',\n      code: 'MATH',\n      type: 'core',\n      classes: [\n        'KG',\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        '10',\n        '11',\n        '12',\n      ],\n    },\n    {\n      name: 'Environmental Studies',\n      code: 'EVS',\n      type: 'core',\n      classes: ['KG', '1', '2', '3', '4', '5'],\n    },\n    {\n      name: 'Hindi',\n      code: 'HIN',\n      type: 'core',\n      classes: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n    },\n    {\n      name: 'Art & Craft',\n      code: 'ART',\n      type: 'elective',\n      classes: ['KG', '1', '2', '3', '4', '5', '6', '7', '8'],\n    },\n    {\n      name: 'Physical Education',\n      code: 'PE',\n      type: 'core',\n      classes: [\n        'KG',\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        '10',\n        '11',\n        '12',\n      ],\n    },\n\n    // Middle school subjects (6-8)\n    { name: 'Science', code: 'SCI', type: 'core', classes: ['6', '7', '8'] },\n    {\n      name: 'Social Studies',\n      code: 'SS',\n      type: 'core',\n      classes: ['6', '7', '8'],\n    },\n    {\n      name: 'Computer Science',\n      code: 'CS',\n      type: 'elective',\n      classes: ['6', '7', '8', '9', '10', '11', '12'],\n\n    // High school subjects (9-10)\n    {\n      name: 'Physics',\n      code: 'PHY',\n      type: 'core',\n      classes: ['9', '10', '11', '12'],\n    },\n    {\n      name: 'Chemistry',\n      code: 'CHEM',\n      type: 'core',\n      classes: ['9', '10', '11', '12'],\n    },\n    {\n      name: 'Biology',\n      code: 'BIO',\n      type: 'core',\n      classes: ['9', '10', '11', '12'],\n    },\n    {\n      name: 'History',\n      code: 'HIST',\n      type: 'core',\n      classes: ['9', '10', '11', '12'],\n    },\n    {\n      name: 'Geography',\n      code: 'GEO',\n      type: 'core',\n      classes: ['9', '10', '11', '12'],\n    },\n    { name: 'Economics', code: 'ECO', type: 'elective', classes: ['11', '12'] },\n    {\n      name: 'Political Science',\n      code: 'POL',\n      type: 'elective',\n      classes: ['11', '12'],\n    },\n    {\n      name: 'Accountancy',\n      code: 'ACC',\n      type: 'elective',\n      classes: ['11', '12'],\n    },\n    {\n      name: 'Business Studies',\n      code: 'BS',\n      type: 'elective',\n      classes: ['11', '12'],\n\n    // Additional subjects\n    {\n      name: 'Sanskrit',\n      code: 'SAN',\n      type: 'optional',\n      classes: ['6', '7', '8', '9', '10'],\n    },\n    {\n      name: 'Music',\n      code: 'MUS',\n      type: 'elective',\n      classes: ['6', '7', '8', '9', '10'],\n    },\n    {\n      name: 'Dance',\n      code: 'DAN',\n      type: 'elective',\n      classes: ['6', '7', '8', '9', '10'],\n    },\n    {\n      name: 'Psychology',\n      code: 'PSY',\n      type: 'elective',\n      classes: ['11', '12'],\n    },\n    {\n      name: 'Philosophy',\n      code: 'PHI',\n      type: 'optional',\n      classes: ['11', '12'],\n    },\n  ]\n\n  return subjects.map((subject, index) => ({\n    id: `subject-${index + 1}`,\n    name: subject.name,\n    code: subject.code,\n    type: subject.type,\n    credits: subject.type === 'core' ? 4 : subject.type === 'elective' ? 3 : 2,\n    description: `${subject.name} curriculum for classes ${subject.classes.join(', ')}`,\n    classes: subject.classes,\n    teachers: [], // Will be populated when teachers are assigned\n    syllabus: generateSyllabus(subject.name, subject.classes),\n    assessmentPattern: generateAssessmentPattern(subject.type),\n    status: 'active',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }))\n}\n\n// Generate syllabus for subjects\nconst generateSyllabus = (subjectName, classes) => {\n  const syllabusTemplates = {\n    Mathematics: {\n      KG: ['Numbers 1-10', 'Shapes', 'Colors', 'Patterns'],\n      1: ['Numbers 1-100', 'Addition', 'Subtraction', 'Shapes', 'Measurement'],\n      2: [\n        'Numbers 1-1000',\n        'Addition & Subtraction',\n        'Multiplication Tables',\n        'Time',\n        'Money',\n      ],\n      9: [\n        'Number Systems',\n        'Polynomials',\n        'Linear Equations',\n        'Geometry',\n        'Statistics',\n      ],\n      10: [\n        'Real Numbers',\n        'Polynomials',\n        'Linear Equations',\n        'Quadratic Equations',\n        'Arithmetic Progressions',\n        'Triangles',\n        'Coordinate Geometry',\n        'Trigonometry',\n        'Circles',\n        'Surface Areas and Volumes',\n        'Statistics',\n        'Probability',\n      ],\n    },\n    English: {\n      KG: ['Alphabets', 'Phonics', 'Simple Words', 'Rhymes'],\n      1: ['Reading', 'Writing', 'Grammar Basics', 'Vocabulary'],\n      9: ['Literature', 'Grammar', 'Writing Skills', 'Reading Comprehension'],\n      10: [\n        'Literature',\n        'Grammar',\n        'Writing Skills',\n        'Reading Comprehension',\n        'Poetry',\n      ],\n    },\n    Science: {\n      6: [\n        'Food',\n        'Components of Food',\n        'Fibre to Fabric',\n        'Sorting Materials',\n        'Separation of Substances',\n        'Changes Around Us',\n      ],\n      7: [\n        'Nutrition in Plants',\n        'Nutrition in Animals',\n        'Fibre to Fabric',\n        'Heat',\n        'Acids, Bases and Salts',\n        'Physical and Chemical Changes',\n      ],\n      8: [\n        'Crop Production',\n        'Microorganisms',\n        'Synthetic Fibres',\n        'Materials',\n        'Coal and Petroleum',\n        'Combustion and Flame',\n      ],\n    },\n  }\n\n  const defaultSyllabus = classes.map(\n    cls => `${subjectName} curriculum for Class ${cls}`\n\n  return classes.reduce((acc, cls) => {\n    acc[cls] = syllabusTemplates[subjectName]?.[cls] || [\n      `${subjectName} topics for Class ${cls}`,\n    ]\n    return acc\n  }, {})\n}\n\n// Generate assessment pattern\nconst generateAssessmentPattern = type => {\n  const patterns = {\n    core: {\n      'Unit Tests': 20,\n      'Mid-term Exam': 30,\n      'Final Exam': 40,\n      'Internal Assessment': 10,\n    },\n    elective: {\n      'Unit Tests': 25,\n      'Mid-term Exam': 35,\n      'Final Exam': 40,\n    },\n    optional: {\n      'Unit Tests': 30,\n      'Final Exam': 70,\n    }\n  }\n\n  return patterns[type] || patterns.core\n}\n\n// Initialize store\nsubjectsStore = generateSubjects()\nnextId = subjectsStore.length + 1\n\n// API functions\nexport const subjectsApi = {\n  // Get all subjects with filtering and pagination\n  getSubjects: async (params = {}) => {\n    await delay()\n\n    const {\n      page = 1,\n      limit = 10,\n      search = '',\n      type = '',\n      classId = '',\n      status = '',\n      sortBy = 'name',\n      sortOrder = 'asc',\n    } = params\n\n    let filtered = [...subjectsStore]\n\n    // Apply filters\n    if (search) {\n      const searchLower = search.toLowerCase()\n      filtered = filtered.filter(\n        subject =>\n          subject.name.toLowerCase().includes(searchLower) ||\n          subject.code.toLowerCase().includes(searchLower) ||\n          subject.description.toLowerCase().includes(searchLower),\n      )\n    }\n\n    if (type) {\n      filtered = filtered.filter(subject => subject.type === type)\n    }\n\n    if (classId) {\n      filtered = filtered.filter(subject => subject.classes.includes(classId))\n    }\n\n    if (status) {\n      filtered = filtered.filter(subject => subject.status === status)\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      let aValue = a[sortBy]\n      let bValue = b[sortBy]\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase()\n        bValue = bValue.toLowerCase()\n      }\n\n      if (sortOrder === 'desc') {\n        return bValue > aValue ? 1 : -1\n      }\n      return aValue > bValue ? 1 : -1\n    })\n\n    // Apply pagination\n    const startIndex = (page - 1) * limit\n    const endIndex = startIndex + limit\n    const paginatedData = filtered.slice(startIndex, endIndex)\n\n    return {\n      data: paginatedData,\n      pagination: {\n        page,\n        limit,\n        total: filtered.length,\n        totalPages: Math.ceil(filtered.length / limit),\n        hasNext: endIndex < filtered.length,\n        hasPrev: page > 1,\n      }\n    }\n  },\n\n  // Get subject by ID\n  getSubject: async id => {\n    await delay()\n\n    const subject = subjectsStore.find(s => s.id === id)\n    if (!subject) {\n      throw new Error('Subject not found')\n    }\n\n    return subject\n  },\n\n  // Create new subject\n  createSubject: async subjectData => {\n    await delay()\n\n    // Validate data\n    const validatedData = subjectSchema.parse(subjectData)\n\n    // Check for duplicate code\n    const existingCode = subjectsStore.find(s => s.code === validatedData.code)\n    if (existingCode) {\n      throw new Error('Subject code already exists')\n    }\n\n    const newSubject = {\n      id: `subject-${nextId++}`,\n      ...validatedData,\n      teachers: [],\n      syllabus: generateSyllabus(\n        validatedData.name,\n        validatedData.classes || []\n      ),\n      assessmentPattern: generateAssessmentPattern(validatedData.type),\n      status: 'active',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }\n\n    subjectsStore.push(newSubject)\n    return newSubject\n  },\n\n  // Update subject\n  updateSubject: async (id, updateData) => {\n    await delay()\n\n    const index = subjectsStore.findIndex(s => s.id === id)\n    if (index === -1) {\n      throw new Error('Subject not found')\n    }\n\n    // Validate update data\n    const validatedData = subjectSchema.partial().parse(updateData)\n\n    // Check for duplicate code (excluding current subject)\n    if (validatedData.code) {\n      const existingCode = subjectsStore.find(\n        s => s.code === validatedData.code && s.id !== id\n      )\n      if (existingCode) {\n        throw new Error('Subject code already exists')\n      }\n    }\n\n    const updatedSubject = {\n      ...subjectsStore[index],\n      ...validatedData,\n      updatedAt: new Date().toISOString(),\n    }\n\n    subjectsStore[index] = updatedSubject\n    return updatedSubject\n  },\n\n  // Delete subject\n  deleteSubject: async id => {\n    await delay()\n\n    const index = subjectsStore.findIndex(s => s.id === id)\n    if (index === -1) {\n      throw new Error('Subject not found')\n    }\n\n    subjectsStore.splice(index, 1)\n    return { success: true }\n  },\n\n  // Get subjects by class\n  getSubjectsByClass: async classId => {\n    await delay()\n\n    return subjectsStore.filter(\n      subject =>\n        subject.classes.includes(classId) && subject.status === 'active',\n    )\n  },\n\n  // Get subjects by type\n  getSubjectsByType: async type => {\n    await delay()\n\n    return subjectsStore.filter(subject => subject.type === type)\n  },\n\n  // Assign teacher to subject\n  assignTeacher: async (subjectId, teacherId) => {\n    await delay()\n\n    const index = subjectsStore.findIndex(s => s.id === subjectId)\n    if (index === -1) {\n      throw new Error('Subject not found')\n    }\n\n    if (!subjectsStore[index].teachers.includes(teacherId)) {\n      subjectsStore[index].teachers.push(teacherId)\n      subjectsStore[index].updatedAt = new Date().toISOString()\n    }\n\n    return subjectsStore[index]\n  },\n\n  // Remove teacher from subject\n  removeTeacher: async (subjectId, teacherId) => {\n    await delay()\n\n    const index = subjectsStore.findIndex(s => s.id === subjectId)\n    if (index === -1) {\n      throw new Error('Subject not found')\n    }\n\n    subjectsStore[index].teachers = subjectsStore[index].teachers.filter(\n      id => id !== teacherId\n    )\n    subjectsStore[index].updatedAt = new Date().toISOString()\n\n    return subjectsStore[index]\n  },\n\n  // Get subject statistics\n  getSubjectStats: async () => {\n    await delay()\n\n    const stats = {\n      total: subjectsStore.length,\n      active: subjectsStore.filter(s => s.status === 'active').length,\n      inactive: subjectsStore.filter(s => s.status === 'inactive').length,\n      byType: {},\n      byClass: {},\n      totalCredits: subjectsStore.reduce(\n        (sum, subject) => sum + (subject.credits || 0),\n        0\n      ),\n\n    // Group by type\n    subjectsStore.forEach(subject => {\n      stats.byType[subject.type] = (stats.byType[subject.type] || 0) + 1\n    })\n\n    // Group by class\n    subjectsStore.forEach(subject => {\n      subject.classes.forEach(classId => {\n        stats.byClass[classId] = (stats.byClass[classId] || 0) + 1\n      })\n    })\n\n    return stats\n  },\n\n  // Search subjects\n  searchSubjects: async query => {\n    await delay()\n\n    if (!query || query.length < 2) {\n      return []\n    }\n\n    const searchLower = query.toLowerCase()\n    return subjectsStore\n      .filter(\n        subject =>\n          subject.name.toLowerCase().includes(searchLower) ||\n          subject.code.toLowerCase().includes(searchLower) ||\n          subject.description.toLowerCase().includes(searchLower),\n      )\n      .slice(0, 10) // Limit search results\n  },\n\n  // Get subject syllabus\n  getSubjectSyllabus: async (subjectId, classId) => {\n    await delay()\n\n    const subject = subjectsStore.find(s => s.id === subjectId)\n    if (!subject) {\n      throw new Error('Subject not found')\n    }\n\n    return subject.syllabus[classId] || []\n  },\n\n  // Update subject syllabus\n  updateSubjectSyllabus: async (subjectId, classId, syllabus) => {\n    await delay()\n\n    const index = subjectsStore.findIndex(s => s.id === subjectId)\n    if (index === -1) {\n      throw new Error('Subject not found')\n    }\n\n    if (!subjectsStore[index].syllabus) {\n      subjectsStore[index].syllabus = {}\n    }\n\n    subjectsStore[index].syllabus[classId] = syllabus\n    subjectsStore[index].updatedAt = new Date().toISOString()\n\n    return subjectsStore[index]\n  },\n}\n\nexport default subjectsApi\n"
        }
    ]
}