{
    "sourceFile": "src/pages/masters/AssignClassTeacher.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755995169592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755995169592,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Search,\n  Filter,\n  Save,\n  AlertTriangle,\n  CheckCircle,\n  User,\n  Users,\n} from 'lucide-react'\nimport { Table } from '../../components/ui/Table'\nimport Input from '../../components/ui/Input'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport { classTeacherApi } from '../../lib/api/classTeacher'\nimport { classesApi } from '../../lib/api/classes'\nimport { sectionsApi } from '../../lib/api/sections'\nimport { staffApi } from '../../lib/api/staff'\n\nconst AssignClassTeacher = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedClass, setSelectedClass] = useState('')\n  const [assignments, setAssignments] = useState([])\n  const [conflicts, setConflicts] = useState([])\n  const [hasChanges, setHasChanges] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => classesApi.getAll({ all: true }),\n  })\n\n  const { data: sectionsData, isLoading: sectionsLoading } = useQuery({\n    queryKey: ['sections', 'by-class', selectedClass],\n    queryFn: () => sectionsApi.getByClass(selectedClass),\n    enabled: !!selectedClass,\n  })\n\n  const { data: teachersData } = useQuery({\n    queryKey: ['staff', 'teachers'],\n    queryFn: () => staffApi.getTeachers(),\n  })\n\n  const { data: currentAssignments, isLoading: assignmentsLoading } = useQuery({\n    queryKey: ['classTeacher', 'assignments', selectedClass],\n    queryFn: () => classTeacherApi.getAssignments(selectedClass),\n    enabled: !!selectedClass,\n  })\n\n  const saveAssignmentsMutation = useMutation({\n    mutationFn: classTeacherApi.saveAssignments,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['classTeacher'])\n      setHasChanges(false)\n      setConflicts([])\n    },\n  })\n\n  const checkConflictsMutation = useMutation({\n    mutationFn: classTeacherApi.checkConflicts,\n    onSuccess: data => {\n      setConflicts(data.conflicts || [])\n    },\n  })\n\n  // Initialize assignments when data loads\n  React.useEffect(() => {\n    if (sectionsData?.data && currentAssignments?.data) {\n      const initialAssignments = sectionsData.data.map(section => {\n        const existing = currentAssignments.data.find(\n          a => a.sectionId === section.id,\n        )\n        return {\n          sectionId: section.id,\n          sectionName: section.name,\n          className: section.class?.name,\n          teacherId: existing?.teacherId || '',\n          teacherName: existing?.teacher?.name || '',\n          isNew: !existing,\n        }\n      })\n      setAssignments(initialAssignments)\n    }\n  }, [sectionsData, currentAssignments])\n\n  const handleTeacherChange = (sectionId, teacherId) => {\n    const teacher = teachersData?.data?.find(t => t.id === teacherId)\n\n    setAssignments(prev =>\n      prev.map(assignment =>\n        assignment.sectionId === sectionId\n          ? {\n              ...assignment,\n              teacherId,\n              teacherName: teacher?.name || '',\n              isModified: true,\n            }\n          : assignment\n      ),\n    )\n\n    setHasChanges(true)\n\n    // Check for conflicts\n    const updatedAssignments = assignments.map(assignment =>\n      assignment.sectionId === sectionId\n        ? { ...assignment, teacherId }\n        : assignment\n    )\n\n    checkConflictsMutation.mutate({\n      classId: selectedClass,\n      assignments: updatedAssignments,\n    })\n  }\n\n  const handleSaveAssignments = () => {\n    const assignmentsToSave = assignments\n      .filter(a => a.teacherId)\n      .map(a => ({\n        sectionId: a.sectionId,\n        teacherId: a.teacherId,\n      }))\n\n    saveAssignmentsMutation.mutate({\n      classId: selectedClass,\n      assignments: assignmentsToSave,\n    })\n  }\n\n  const getConflictForSection = sectionId => {\n    return conflicts.find(c => c.sectionId === sectionId)\n  }\n\n  const getTeacherWorkload = teacherId => {\n    if (!teacherId) return 0\n    return assignments.filter(a => a.teacherId === teacherId).length\n  }\n\n  const columns = [\n    {\n      key: 'sectionName',\n      header: 'Section',\n      render: item => (\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"w-4 h-4 text-gray-400\" />\n          <div>\n            <div className=\"font-medium\">{item.sectionName}</div>\n            <div className=\"text-sm text-gray-500\">{item.className}</div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'currentTeacher',\n      header: 'Current Teacher',\n      render: item => (\n        <div className=\"flex items-center gap-2\">\n          {item.teacherName ? (\n            <>\n              <User className=\"w-4 h-4 text-gray-400\" />\n              <span>{item.teacherName}</span>\n              {!item.isNew && (\n                <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full\">\n                  Assigned\n                </span>\n              )}\n            </>\n          ) : (\n            <span className=\"text-gray-400 italic\">Not assigned</span>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'assignTeacher',\n      header: 'Assign Teacher',\n      render: item => {\n        const conflict = getConflictForSection(item.sectionId)\n        return (\n          <div className=\"space-y-2\">\n            <select\n              value={item.teacherId}\n              onChange={e =>\n                handleTeacherChange(item.sectionId, e.target.value)\n              }\n              className={`w-full border rounded-lg px-3 py-2 ${\n                conflict ? 'border-red-500' : ''\n              }`}\n            >\n              <option value=\"\">Select Teacher</option>\n              {Array.isArray(teachersData?.data) &&\n                teachersData.data.map(teacher => {\n                  const workload = getTeacherWorkload(teacher.id)\n                  return (\n                    <option key={teacher.id} value={teacher.id}>\n                      {teacher.name} {workload > 0 && `(${workload} sections)`}\n                    </option>\n                  )\n                })}\n            </select>\n            {conflict && (\n              <div className=\"flex items-center gap-2 text-red-600 text-sm\">\n                <AlertTriangle className=\"w-4 h-4\" />\n                <span>{conflict.message}</span>\n              </div>\n            )}\n          </div>\n        )\n      },\n    },\n    {\n      key: 'status',\n      header: 'Status',\n      render: item => {\n        const conflict = getConflictForSection(item.sectionId)\n\n        if (conflict) {\n          return (\n            <span className=\"px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full flex items-center gap-1\">\n              <AlertTriangle className=\"w-3 h-3\" />\n              Conflict\n            </span>\n          )\n        }\n\n        if (item.teacherId) {\n          return (\n            <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full flex items-center gap-1\">\n              <CheckCircle className=\"w-3 h-3\" />\n              {item.isModified ? 'Modified' : 'Assigned'}\n            </span>\n          )\n        }\n\n        return (\n          <span className=\"px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full\">\n            Unassigned\n          </span>\n        )\n      },\n    },\n  ]\n\n  const isLoading = sectionsLoading || assignmentsLoading\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Assign Class Teachers</h1>\n        {hasChanges && (\n          <button\n            onClick={handleSaveAssignments}\n            disabled={saveAssignmentsMutation.isPending || conflicts.length > 0}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700 disabled:opacity-50\"\n          >\n            <Save className=\"w-4 h-4\" />\n            {saveAssignmentsMutation.isPending ? 'Saving...' : 'Save Changes'}\n          </button>\n        )}\n      </div>\n\n      {/* Class Selection */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Select Class\n            </label>\n            <select\n              value={selectedClass}\n              onChange={e => setSelectedClass(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">Choose a class</option>\n              {Array.isArray(classesData?.data) &&\n                classesData.data.map(cls => (\n                  <option key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n          <div>\n            <Input\n              label=\"Search Sections\"\n              placeholder=\"Search sections...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              icon={Search}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Conflicts Summary */}\n      {conflicts.length > 0 && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <div className=\"flex items-center gap-2 text-red-800 font-medium mb-2\">\n            <AlertTriangle className=\"w-5 h-5\" />\n            Assignment Conflicts Detected\n          </div>\n          <div className=\"text-red-700 text-sm\">\n            Please resolve the following conflicts before saving:\n            <ul className=\"list-disc list-inside mt-2\">\n              {Array.isArray(conflicts) &&\n                conflicts.map((conflict, index) => (\n                  <li key={index}>{conflict.message}</li>\n                ))}\n            </ul>\n          </div>\n        </div>\n      )}\n\n      {/* Teacher Workload Summary */}\n      {selectedClass && teachersData?.data && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <h3 className=\"font-medium text-blue-800 mb-2\">\n            Teacher Workload Summary\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {teachersData.data\n              .filter(teacher => getTeacherWorkload(teacher.id) > 0)\n              .map(teacher => (\n                <div key={teacher.id} className=\"text-sm\">\n                  <span className=\"font-medium\">{teacher.name}</span>\n                  <span className=\"text-blue-600 ml-2\">\n                    ({getTeacherWorkload(teacher.id)} sections)\n                  </span>\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n\n      {/* Assignments Table */}\n      <div className=\"bg-white rounded-lg shadow\">\n        {!selectedClass ? (\n          <EmptyState\n            title=\"Select a class to assign teachers\"\n            description=\"Choose a class from the dropdown above to view and manage section assignments\"\n          />\n        ) : isLoading ? (\n          <LoadingSkeleton />\n        ) : assignments.length === 0 ? (\n          <EmptyState\n            title=\"No sections found\"\n            description=\"This class doesn't have any sections yet\"\n          />\n        ) : (\n          <>\n            <div className=\"p-6 border-b\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-medium\">\n                  Section Assignments -{' '}\n                  {classesData?.data?.find(c => c.id === selectedClass)?.name}\n                </h2>\n                <div className=\"text-sm text-gray-500\">\n                  {assignments.filter(a => a.teacherId).length} of{' '}\n                  {assignments.length} sections assigned\n                </div>\n              </div>\n            </div>\n            <Table\n              data={assignments.filter(\n                assignment =>\n                  assignment.sectionName\n                    .toLowerCase()\n                    .includes(searchTerm.toLowerCase()) ||\n                  assignment.teacherName\n                    .toLowerCase()\n                    .includes(searchTerm.toLowerCase())\n              )}\n              columns={columns}\n            />\n          </>\n        )}\n      </div>\n\n      {/* Instructions */}\n      <div className=\"bg-gray-50 rounded-lg p-4\">\n        <h3 className=\"font-medium mb-2\">Instructions</h3>\n        <ul className=\"text-sm text-gray-600 space-y-1\">\n          <li>\n            • Select a class to view its sections and current teacher\n            assignments\n          </li>\n          <li>• Choose a teacher for each section from the dropdown</li>\n          <li>\n            • The system will automatically check for conflicts (e.g., teacher\n            already assigned to another section)\n          </li>\n          <li>• Resolve any conflicts before saving the assignments</li>\n          <li>• Teacher workload is displayed to help balance assignments</li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default AssignClassTeacher\n"
        }
    ]
}