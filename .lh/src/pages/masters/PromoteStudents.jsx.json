{
    "sourceFile": "src/pages/masters/PromoteStudents.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1755985211800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755995169882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   Upload,\n } from 'lucide-react'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n-import Table from '../../components/ui/Table'\n+import { Table } from '../../components/ui/Table'\n import { promotionApi } from '../../lib/api/promotion'\n import { classesApi } from '../../lib/api/classes'\n import { sectionsApi } from '../../lib/api/sections'\n import { studentsApi } from '../../lib/api/students'\n@@ -56,27 +56,27 @@\n     mutationFn: promotionApi.preview,\n     onSuccess: data => {\n       setPromotionData(data)\n       setCurrentStep(3)\n-    }\n+    },\n   })\n \n   const executePromotionMutation = useMutation({\n     mutationFn: promotionApi.execute,\n     onSuccess: data => {\n       setPromotionResult(data)\n       setCurrentStep(4)\n       queryClient.invalidateQueries(['students'])\n-    }\n+    },\n   })\n \n   const rollbackPromotionMutation = useMutation({\n     mutationFn: promotionApi.rollback,\n     onSuccess: () => {\n       queryClient.invalidateQueries(['students'])\n       setCurrentStep(1)\n       resetForm()\n-    }\n+    },\n   })\n \n   const resetForm = () => {\n     setSourceClass('')\n@@ -85,21 +85,21 @@\n     setTargetSection('')\n     setSelectedStudents([])\n     setPromotionData(null)\n     setPromotionResult(null)\n-  };\n+  }\n \n   const handleNext = () => {\n     if (currentStep === 1) {\n       if (!sourceClass || !sourceSection || !targetClass || !targetSection) {\n         alert('Please select both source and target class/section')\n-        return;\n+        return\n       }\n       setCurrentStep(2)\n     } else if (currentStep === 2) {\n       if (selectedStudents.length === 0) {\n         alert('Please select at least one student to promote')\n-        return;\n+        return\n       }\n \n       previewPromotionMutation.mutate({\n         sourceClassId: sourceClass,\n@@ -123,9 +123,9 @@\n \n   const handleRollback = () => {\n     if (\n       window.confirm(\n-        'Are you sure you want to rollback this promotion? This action cannot be undone.'\n+        'Are you sure you want to rollback this promotion? This action cannot be undone.',\n       )\n     ) {\n       rollbackPromotionMutation.mutate(promotionResult.promotionId)\n     }\n@@ -143,9 +143,9 @@\n       description: 'Choose students to promote',\n     },\n     { number: 3, title: 'Preview', description: 'Review promotion details' },\n     { number: 4, title: 'Complete', description: 'Promotion completed' },\n-  ];\n+  ]\n \n   const renderStepIndicator = () => (\n     <div className=\"flex items-center justify-center mb-8\">\n       {Array.isArray(steps) &&\n@@ -297,9 +297,9 @@\n               if (e.target.checked) {\n                 setSelectedStudents(\n                   Array.isArray(studentsData?.data)\n                     ? studentsData.data.map(s => s.id)\n-                    : []\n+                    : [],\n                 )\n               } else {\n                 setSelectedStudents([])\n               }\n@@ -314,9 +314,9 @@\n               if (e.target.checked) {\n                 setSelectedStudents([...selectedStudents, student.id])\n               } else {\n                 setSelectedStudents(\n-                  selectedStudents.filter(id => id !== student.id)\n+                  selectedStudents.filter(id => id !== student.id),\n                 )\n               }\n             }}\n           />\n@@ -338,9 +338,9 @@\n           >\n             {student.isActive ? 'Active' : 'Inactive'}\n           </span>\n         ),\n-      }\n+      },\n     ]\n \n     return (\n       <div className=\"bg-white rounded-lg shadow\">\n@@ -395,9 +395,9 @@\n           </button>\n         </div>\n       </div>\n     )\n-  };\n+  }\n \n   const renderStep3 = () => (\n     <div className=\"space-y-6\">\n       <div className=\"bg-white rounded-lg shadow p-6\">\n@@ -570,7 +570,7 @@\n       {currentStep === 3 && renderStep3()}\n       {currentStep === 4 && renderStep4()}\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default PromoteStudents\n+export default PromoteStudents\n"
                }
            ],
            "date": 1755985211800,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  ArrowRight,\n  Users,\n  CheckCircle,\n  AlertTriangle,\n  RotateCcw,\n  Download,\n  Upload,\n} from 'lucide-react'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport Table from '../../components/ui/Table'\nimport { promotionApi } from '../../lib/api/promotion'\nimport { classesApi } from '../../lib/api/classes'\nimport { sectionsApi } from '../../lib/api/sections'\nimport { studentsApi } from '../../lib/api/students'\n\nconst PromoteStudents = () => {\n  const [currentStep, setCurrentStep] = useState(1)\n  const [sourceClass, setSourceClass] = useState('')\n  const [sourceSection, setSourceSection] = useState('')\n  const [targetClass, setTargetClass] = useState('')\n  const [targetSection, setTargetSection] = useState('')\n  const [selectedStudents, setSelectedStudents] = useState([])\n  const [promotionData, setPromotionData] = useState(null)\n  const [promotionResult, setPromotionResult] = useState(null)\n\n  const queryClient = useQueryClient()\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => classesApi.getAll({ all: true }),\n  })\n\n  const { data: sourceSections } = useQuery({\n    queryKey: ['sections', 'by-class', sourceClass],\n    queryFn: () => sectionsApi.getByClass(sourceClass),\n    enabled: !!sourceClass,\n  })\n\n  const { data: targetSections } = useQuery({\n    queryKey: ['sections', 'by-class', targetClass],\n    queryFn: () => sectionsApi.getByClass(targetClass),\n    enabled: !!targetClass,\n  })\n\n  const { data: studentsData, isLoading: studentsLoading } = useQuery({\n    queryKey: ['students', 'by-section', sourceSection],\n    queryFn: () => studentsApi.getBySection(sourceSection),\n    enabled: !!sourceSection && currentStep >= 2,\n  })\n\n  const previewPromotionMutation = useMutation({\n    mutationFn: promotionApi.preview,\n    onSuccess: data => {\n      setPromotionData(data)\n      setCurrentStep(3)\n    }\n  })\n\n  const executePromotionMutation = useMutation({\n    mutationFn: promotionApi.execute,\n    onSuccess: data => {\n      setPromotionResult(data)\n      setCurrentStep(4)\n      queryClient.invalidateQueries(['students'])\n    }\n  })\n\n  const rollbackPromotionMutation = useMutation({\n    mutationFn: promotionApi.rollback,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['students'])\n      setCurrentStep(1)\n      resetForm()\n    }\n  })\n\n  const resetForm = () => {\n    setSourceClass('')\n    setSourceSection('')\n    setTargetClass('')\n    setTargetSection('')\n    setSelectedStudents([])\n    setPromotionData(null)\n    setPromotionResult(null)\n  };\n\n  const handleNext = () => {\n    if (currentStep === 1) {\n      if (!sourceClass || !sourceSection || !targetClass || !targetSection) {\n        alert('Please select both source and target class/section')\n        return;\n      }\n      setCurrentStep(2)\n    } else if (currentStep === 2) {\n      if (selectedStudents.length === 0) {\n        alert('Please select at least one student to promote')\n        return;\n      }\n\n      previewPromotionMutation.mutate({\n        sourceClassId: sourceClass,\n        sourceSectionId: sourceSection,\n        targetClassId: targetClass,\n        targetSectionId: targetSection,\n        studentIds: selectedStudents,\n      })\n    }\n  }\n\n  const handleExecutePromotion = () => {\n    executePromotionMutation.mutate({\n      sourceClassId: sourceClass,\n      sourceSectionId: sourceSection,\n      targetClassId: targetClass,\n      targetSectionId: targetSection,\n      studentIds: selectedStudents,\n    })\n  }\n\n  const handleRollback = () => {\n    if (\n      window.confirm(\n        'Are you sure you want to rollback this promotion? This action cannot be undone.'\n      )\n    ) {\n      rollbackPromotionMutation.mutate(promotionResult.promotionId)\n    }\n  }\n\n  const steps = [\n    {\n      number: 1,\n      title: 'Select Classes',\n      description: 'Choose source and target class/section',\n    },\n    {\n      number: 2,\n      title: 'Select Students',\n      description: 'Choose students to promote',\n    },\n    { number: 3, title: 'Preview', description: 'Review promotion details' },\n    { number: 4, title: 'Complete', description: 'Promotion completed' },\n  ];\n\n  const renderStepIndicator = () => (\n    <div className=\"flex items-center justify-center mb-8\">\n      {Array.isArray(steps) &&\n        steps.map((step, index) => (\n          <div key={step.number} className=\"flex items-center\">\n            <div\n              className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                currentStep >= step.number\n                  ? 'bg-blue-600 border-blue-600 text-white'\n                  : 'border-gray-300 text-gray-400'\n              }`}\n            >\n              {currentStep > step.number ? (\n                <CheckCircle className=\"w-5 h-5\" />\n              ) : (\n                step.number\n              )}\n            </div>\n            <div className=\"ml-3 text-sm\">\n              <div\n                className={`font-medium ${currentStep >= step.number ? 'text-blue-600' : 'text-gray-400'}`}\n              >\n                {step.title}\n              </div>\n              <div className=\"text-gray-500\">{step.description}</div>\n            </div>\n            {index < steps.length - 1 && (\n              <ArrowRight className=\"w-5 h-5 text-gray-400 mx-6\" />\n            )}\n          </div>\n        ))}\n    </div>\n  )\n\n  const renderStep1 = () => (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h2 className=\"text-xl font-semibold mb-6\">\n        Select Source and Target Classes\n      </h2>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        {/* Source Selection */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-medium text-gray-700\">From (Source)</h3>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Class</label>\n            <select\n              value={sourceClass}\n              onChange={e => {\n                setSourceClass(e.target.value)\n                setSourceSection('')\n              }}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">Select Source Class</option>\n              {Array.isArray(classesData?.data) &&\n                classesData.data.map(cls => (\n                  <option key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Section</label>\n            <select\n              value={sourceSection}\n              onChange={e => setSourceSection(e.target.value)}\n              disabled={!sourceClass}\n              className=\"w-full border rounded-lg px-3 py-2 disabled:bg-gray-100\"\n            >\n              <option value=\"\">Select Source Section</option>\n              {sourceSections?.data?.map(section => (\n                <option key={section.id} value={section.id}>\n                  {section.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Target Selection */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-medium text-gray-700\">To (Target)</h3>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Class</label>\n            <select\n              value={targetClass}\n              onChange={e => {\n                setTargetClass(e.target.value)\n                setTargetSection('')\n              }}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">Select Target Class</option>\n              {Array.isArray(classesData?.data) &&\n                classesData.data.map(cls => (\n                  <option key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Section</label>\n            <select\n              value={targetSection}\n              onChange={e => setTargetSection(e.target.value)}\n              disabled={!targetClass}\n              className=\"w-full border rounded-lg px-3 py-2 disabled:bg-gray-100\"\n            >\n              <option value=\"\">Select Target Section</option>\n              {targetSections?.data?.map(section => (\n                <option key={section.id} value={section.id}>\n                  {section.name} (Capacity: {section.capacity || 'Unlimited'})\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end mt-6\">\n        <button\n          onClick={handleNext}\n          disabled={\n            !sourceClass || !sourceSection || !targetClass || !targetSection\n          }\n          className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n        >\n          Next: Select Students\n          <ArrowRight className=\"w-4 h-4\" />\n        </button>\n      </div>\n    </div>\n  )\n\n  const renderStep2 = () => {\n    if (studentsLoading) return <LoadingSkeleton />\n\n    const columns = [\n      {\n        key: 'select',\n        header: (\n          <input\n            type=\"checkbox\"\n            checked={selectedStudents.length === studentsData?.data?.length}\n            onChange={e => {\n              if (e.target.checked) {\n                setSelectedStudents(\n                  Array.isArray(studentsData?.data)\n                    ? studentsData.data.map(s => s.id)\n                    : []\n                )\n              } else {\n                setSelectedStudents([])\n              }\n            }}\n          />\n        ),\n        render: student => (\n          <input\n            type=\"checkbox\"\n            checked={selectedStudents.includes(student.id)}\n            onChange={e => {\n              if (e.target.checked) {\n                setSelectedStudents([...selectedStudents, student.id])\n              } else {\n                setSelectedStudents(\n                  selectedStudents.filter(id => id !== student.id)\n                )\n              }\n            }}\n          />\n        ),\n      },\n      { key: 'rollNumber', header: 'Roll No.' },\n      { key: 'name', header: 'Student Name' },\n      { key: 'fatherName', header: 'Father Name' },\n      {\n        key: 'status',\n        header: 'Status',\n        render: student => (\n          <span\n            className={`px-2 py-1 rounded-full text-xs ${\n              student.isActive\n                ? 'bg-green-100 text-green-800'\n                : 'bg-red-100 text-red-800'\n            }`}\n          >\n            {student.isActive ? 'Active' : 'Inactive'}\n          </span>\n        ),\n      }\n    ]\n\n    return (\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6 border-b\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">\n              Select Students to Promote\n            </h2>\n            <div className=\"text-sm text-gray-500\">\n              {selectedStudents.length} of {studentsData?.data?.length || 0}{' '}\n              students selected\n            </div>\n          </div>\n          <div className=\"mt-2 text-sm text-gray-600\">\n            From: {classesData?.data?.find(c => c.id === sourceClass)?.name} -{' '}\n            {sourceSections?.data?.find(s => s.id === sourceSection)?.name}\n            <br />\n            To: {\n              classesData?.data?.find(c => c.id === targetClass)?.name\n            } - {targetSections?.data?.find(s => s.id === targetSection)?.name}\n          </div>\n        </div>\n\n        {studentsData?.data?.length === 0 ? (\n          <div className=\"p-8 text-center text-gray-500\">\n            <Users className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <p>No students found in the selected section</p>\n          </div>\n        ) : (\n          <Table data={studentsData?.data || []} columns={columns} />\n        )}\n\n        <div className=\"p-6 border-t flex justify-between\">\n          <button\n            onClick={() => setCurrentStep(1)}\n            className=\"border px-6 py-2 rounded-lg hover:bg-gray-50\"\n          >\n            Back\n          </button>\n          <button\n            onClick={handleNext}\n            disabled={\n              selectedStudents.length === 0 ||\n              previewPromotionMutation.isPending\n            }\n            className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            {previewPromotionMutation.isPending\n              ? 'Loading...'\n              : 'Preview Promotion'}\n            <ArrowRight className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    )\n  };\n\n  const renderStep3 = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-xl font-semibold mb-6\">Promotion Preview</h2>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h3 className=\"font-medium text-blue-800 mb-2\">Source</h3>\n            <p className=\"text-blue-700\">\n              {promotionData?.sourceClass} - {promotionData?.sourceSection}\n            </p>\n            <p className=\"text-sm text-blue-600 mt-1\">\n              {selectedStudents.length} students selected\n            </p>\n          </div>\n          <div className=\"bg-green-50 p-4 rounded-lg\">\n            <h3 className=\"font-medium text-green-800 mb-2\">Target</h3>\n            <p className=\"text-green-700\">\n              {promotionData?.targetClass} - {promotionData?.targetSection}\n            </p>\n            <p className=\"text-sm text-green-600 mt-1\">\n              Available capacity:{' '}\n              {promotionData?.availableCapacity || 'Unlimited'}\n            </p>\n          </div>\n        </div>\n\n        {promotionData?.warnings?.length > 0 && (\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center gap-2 text-yellow-800 font-medium mb-2\">\n              <AlertTriangle className=\"w-5 h-5\" />\n              Warnings\n            </div>\n            <ul className=\"text-yellow-700 text-sm space-y-1\">\n              {Array.isArray(promotionData.warnings) &&\n                promotionData.warnings.map((warning, index) => (\n                  <li key={index}>• {warning}</li>\n                ))}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"font-medium mb-2\">Summary</h3>\n          <ul className=\"text-sm space-y-1\">\n            <li>• {selectedStudents.length} students will be promoted</li>\n            <li>• Academic year: {promotionData?.academicYear}</li>\n            <li>• Promotion date: {new Date().toLocaleDateString()}</li>\n            <li>• This action can be rolled back within 24 hours</li>\n          </ul>\n        </div>\n\n        <div className=\"flex justify-between mt-6\">\n          <button\n            onClick={() => setCurrentStep(2)}\n            className=\"border px-6 py-2 rounded-lg hover:bg-gray-50\"\n          >\n            Back\n          </button>\n          <button\n            onClick={handleExecutePromotion}\n            disabled={executePromotionMutation.isPending}\n            className=\"bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            {executePromotionMutation.isPending\n              ? 'Processing...'\n              : 'Execute Promotion'}\n            <CheckCircle className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n\n  const renderStep4 = () => (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"text-center mb-6\">\n        <CheckCircle className=\"w-16 h-16 text-green-600 mx-auto mb-4\" />\n        <h2 className=\"text-2xl font-semibold text-green-800\">\n          Promotion Completed Successfully!\n        </h2>\n        <p className=\"text-gray-600 mt-2\">\n          {promotionResult?.promotedCount} students have been promoted\n          successfully\n        </p>\n      </div>\n\n      <div className=\"bg-green-50 p-4 rounded-lg mb-6\">\n        <h3 className=\"font-medium text-green-800 mb-2\">Promotion Details</h3>\n        <div className=\"text-sm text-green-700 space-y-1\">\n          <p>Promotion ID: {promotionResult?.promotionId}</p>\n          <p>\n            Date: {new Date(promotionResult?.promotionDate).toLocaleString()}\n          </p>\n          <p>Students Promoted: {promotionResult?.promotedCount}</p>\n          <p>\n            From: {promotionResult?.sourceClass} -{' '}\n            {promotionResult?.sourceSection}\n          </p>\n          <p>\n            To: {promotionResult?.targetClass} -{' '}\n            {promotionResult?.targetSection}\n          </p>\n        </div>\n      </div>\n\n      {promotionResult?.canRollback && (\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n          <div className=\"flex items-center gap-2 text-yellow-800 font-medium mb-2\">\n            <AlertTriangle className=\"w-5 h-5\" />\n            Rollback Available\n          </div>\n          <p className=\"text-yellow-700 text-sm mb-3\">\n            You can rollback this promotion within 24 hours if needed.\n          </p>\n          <button\n            onClick={handleRollback}\n            disabled={rollbackPromotionMutation.isPending}\n            className=\"bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <RotateCcw className=\"w-4 h-4\" />\n            {rollbackPromotionMutation.isPending\n              ? 'Rolling back...'\n              : 'Rollback Promotion'}\n          </button>\n        </div>\n      )}\n\n      <div className=\"flex justify-center gap-4\">\n        <button\n          onClick={() => {\n            setCurrentStep(1)\n            resetForm()\n          }}\n          className=\"border px-6 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n        >\n          Promote More Students\n        </button>\n        <button\n          onClick={() => console.log('Download report')}\n          className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <Download className=\"w-4 h-4\" />\n          Download Report\n        </button>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Promote Students</h1>\n        <div className=\"flex gap-2\">\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Upload className=\"w-4 h-4\" />\n            Bulk Import\n          </button>\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export Template\n          </button>\n        </div>\n      </div>\n\n      {renderStepIndicator()}\n\n      {currentStep === 1 && renderStep1()}\n      {currentStep === 2 && renderStep2()}\n      {currentStep === 3 && renderStep3()}\n      {currentStep === 4 && renderStep4()}\n    </div>\n  )\n};\n\nexport default PromoteStudents"
        }
    ]
}