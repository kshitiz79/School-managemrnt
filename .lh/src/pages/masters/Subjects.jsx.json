{
    "sourceFile": "src/pages/masters/Subjects.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755994925598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755995169612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   Edit,\n   Trash2,\n   BookOpen,\n } from 'lucide-react'\n-import Table from '../../components/ui/Table'\n+import { Table } from '../../components/ui/Table'\n import Input from '../../components/ui/Input'\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n"
                },
                {
                    "date": 1756039695823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,10 @@\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n-import Dropdown from '../../components/ui/Dropdown'\n+import { Dropdown } from '../../components/ui/Dropdown'\n import { subjectsApi } from '../../lib/api/subjects'\n-import { validateRequired, validateNumeric } from '../../lib/validators'\n \n const Subjects = () => {\n   const [searchTerm, setSearchTerm] = useState('')\n   const [currentPage, setCurrentPage] = useState(1)\n"
                },
                {
                    "date": 1756039749598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,21 +85,21 @@\n \n   const validateForm = () => {\n     const newErrors = {}\n \n-    if (!validateRequired(formData.name)) {\n+    if (!formData.name || formData.name.trim() === '') {\n       newErrors.name = 'Subject name is required'\n     }\n \n-    if (!validateRequired(formData.code)) {\n+    if (!formData.code || formData.code.trim() === '') {\n       newErrors.code = 'Subject code is required'\n     }\n \n-    if (formData.maxMarks && !validateNumeric(formData.maxMarks)) {\n+    if (formData.maxMarks && isNaN(Number(formData.maxMarks))) {\n       newErrors.maxMarks = 'Max marks must be a number'\n     }\n \n-    if (formData.passMarks && !validateNumeric(formData.passMarks)) {\n+    if (formData.passMarks && isNaN(Number(formData.passMarks))) {\n       newErrors.passMarks = 'Pass marks must be a number'\n     }\n \n     if (\n"
                }
            ],
            "date": 1755994925598,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  BookOpen,\n} from 'lucide-react'\nimport Table from '../../components/ui/Table'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport Pagination from '../../components/ui/Pagination'\nimport Dropdown from '../../components/ui/Dropdown'\nimport { subjectsApi } from '../../lib/api/subjects'\nimport { validateRequired, validateNumeric } from '../../lib/validators'\n\nconst Subjects = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [pageSize] = useState(10)\n  const [showCreateDialog, setShowCreateDialog] = useState(false)\n  const [showEditDialog, setShowEditDialog] = useState(false)\n  const [selectedSubject, setSelectedSubject] = useState(null)\n  const [selectedItems, setSelectedItems] = useState([])\n  const [formData, setFormData] = useState({\n    name: '',\n    code: '',\n    description: '',\n    type: 'core',\n    maxMarks: '',\n    passMarks: '',\n    isActive: true,\n  })\n  const [errors, setErrors] = useState({})\n\n  const queryClient = useQueryClient()\n\n  const {\n    data: subjectsData,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: ['subjects', { page: currentPage, pageSize, search: searchTerm }],\n    queryFn: () =>\n      subjectsApi.getAll({ page: currentPage, pageSize, search: searchTerm }),\n  })\n\n  const createMutation = useMutation({\n    mutationFn: subjectsApi.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['subjects'])\n      setShowCreateDialog(false)\n      resetForm()\n    },\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }) => subjectsApi.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['subjects'])\n      setShowEditDialog(false)\n      resetForm()\n    },\n  })\n\n  const deleteMutation = useMutation({\n    mutationFn: subjectsApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['subjects'])\n    },\n  })\n\n  const bulkDeleteMutation = useMutation({\n    mutationFn: subjectsApi.bulkDelete,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['subjects'])\n      setSelectedItems([])\n    },\n  })\n\n  const validateForm = () => {\n    const newErrors = {}\n\n    if (!validateRequired(formData.name)) {\n      newErrors.name = 'Subject name is required'\n    }\n\n    if (!validateRequired(formData.code)) {\n      newErrors.code = 'Subject code is required'\n    }\n\n    if (formData.maxMarks && !validateNumeric(formData.maxMarks)) {\n      newErrors.maxMarks = 'Max marks must be a number'\n    }\n\n    if (formData.passMarks && !validateNumeric(formData.passMarks)) {\n      newErrors.passMarks = 'Pass marks must be a number'\n    }\n\n    if (\n      formData.maxMarks &&\n      formData.passMarks &&\n      parseInt(formData.passMarks) > parseInt(formData.maxMarks)\n    ) {\n      newErrors.passMarks = 'Pass marks cannot be greater than max marks'\n    }\n\n    setErrors(newErrors)\n    return Object.keys(newErrors).length === 0\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    if (!validateForm()) return\n\n    const submitData = {\n      ...formData,\n      maxMarks: formData.maxMarks ? parseInt(formData.maxMarks) : null,\n      passMarks: formData.passMarks ? parseInt(formData.passMarks) : null,\n    }\n\n    if (selectedSubject) {\n      updateMutation.mutate({ id: selectedSubject.id, data: submitData })\n    } else {\n      createMutation.mutate(submitData)\n    }\n  }\n\n  const handleEdit = subject => {\n    setSelectedSubject(subject)\n    setFormData({\n      name: subject.name,\n      code: subject.code,\n      description: subject.description || '',\n      type: subject.type || 'core',\n      maxMarks: subject.maxMarks?.toString() || '',\n      passMarks: subject.passMarks?.toString() || '',\n      isActive: subject.isActive,\n    })\n    setShowEditDialog(true)\n  }\n\n  const handleDelete = id => {\n    if (window.confirm('Are you sure you want to delete this subject?')) {\n      deleteMutation.mutate(id)\n    }\n  }\n\n  const handleBulkDelete = () => {\n    if (\n      window.confirm(\n        `Are you sure you want to delete ${selectedItems.length} subjects?`,\n      )\n    ) {\n      bulkDeleteMutation.mutate(selectedItems)\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      code: '',\n      description: '',\n      type: 'core',\n      maxMarks: '',\n      passMarks: '',\n      isActive: true,\n    })\n    setErrors({})\n    setSelectedSubject(null)\n  }\n\n  const subjectTypes = [\n    { value: 'core', label: 'Core Subject' },\n    { value: 'elective', label: 'Elective' },\n    { value: 'optional', label: 'Optional' },\n    { value: 'extracurricular', label: 'Extra-curricular' },\n  ]\n\n  const columns = [\n    {\n      key: 'select',\n      header: (\n        <input\n          type=\"checkbox\"\n          checked={selectedItems.length === subjectsData?.data?.length}\n          onChange={e => {\n            if (e.target.checked) {\n              setSelectedItems(\n                Array.isArray(subjectsData?.data)\n                  ? subjectsData.data.map(item => item.id)\n                  : [],\n              )\n            } else {\n              setSelectedItems([])\n            }\n          }}\n        />\n      ),\n      render: item => (\n        <input\n          type=\"checkbox\"\n          checked={selectedItems.includes(item.id)}\n          onChange={e => {\n            if (e.target.checked) {\n              setSelectedItems([...selectedItems, item.id])\n            } else {\n              setSelectedItems(selectedItems.filter(id => id !== item.id))\n            }\n          }}\n        />\n      ),\n    },\n    { key: 'code', header: 'Code', sortable: true },\n    { key: 'name', header: 'Name', sortable: true },\n    {\n      key: 'type',\n      header: 'Type',\n      render: item => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${\n            item.type === 'core'\n              ? 'bg-blue-100 text-blue-800'\n              : item.type === 'elective'\n                ? 'bg-green-100 text-green-800'\n                : item.type === 'optional'\n                  ? 'bg-yellow-100 text-yellow-800'\n                  : 'bg-purple-100 text-purple-800'\n          }`}\n        >\n          {subjectTypes.find(t => t.value === item.type)?.label || item.type}\n        </span>\n      ),\n    },\n    { key: 'maxMarks', header: 'Max Marks' },\n    { key: 'passMarks', header: 'Pass Marks' },\n    {\n      key: 'isActive',\n      header: 'Status',\n      render: item => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${\n            item.isActive\n              ? 'bg-green-100 text-green-800'\n              : 'bg-red-100 text-red-800'\n          }`}\n        >\n          {item.isActive ? 'Active' : 'Inactive'}\n        </span>\n      ),\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      render: item => (\n        <Dropdown\n          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n          items={[\n            {\n              label: 'Edit',\n              icon: Edit,\n              onClick: () => handleEdit(item),\n            },\n            {\n              label: 'View Details',\n              icon: BookOpen,\n              onClick: () => console.log('View details for', item.id),\n            },\n            {\n              label: 'Delete',\n              icon: Trash2,\n              onClick: () => handleDelete(item.id),\n              className: 'text-red-600',\n            },\n          ]}\n        />\n      ),\n    },\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n  if (error) return <ErrorState message=\"Failed to load subjects\" />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Subjects</h1>\n        <button\n          onClick={() => setShowCreateDialog(true)}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Subject\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6 border-b\">\n          <div className=\"flex gap-4 items-center\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Search subjects...\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n                icon={Search}\n              />\n            </div>\n            <button className=\"p-2 border rounded-lg hover:bg-gray-50\">\n              <Filter className=\"w-4 h-4\" />\n            </button>\n            {selectedItems.length > 0 && (\n              <button\n                onClick={handleBulkDelete}\n                className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700\"\n              >\n                Delete Selected ({selectedItems.length})\n              </button>\n            )}\n          </div>\n        </div>\n\n        {subjectsData?.data?.length === 0 ? (\n          <EmptyState\n            title=\"No subjects found\"\n            description=\"Get started by creating your first subject\"\n            action={{\n              label: 'Add Subject',\n              onClick: () => setShowCreateDialog(true),\n            }}\n          />\n        ) : (\n          <>\n            <Table data={subjectsData?.data || []} columns={columns} />\n            <div className=\"p-6 border-t\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={Math.ceil((subjectsData?.total || 0) / pageSize)}\n                onPageChange={setCurrentPage}\n              />\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Create Dialog */}\n      <Dialog\n        open={showCreateDialog}\n        onClose={() => {\n          setShowCreateDialog(false)\n          resetForm()\n        }}\n        title=\"Add New Subject\"\n      >\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <Input\n            label=\"Subject Name\"\n            value={formData.name}\n            onChange={e => setFormData({ ...formData, name: e.target.value })}\n            error={errors.name}\n            required\n          />\n          <Input\n            label=\"Subject Code\"\n            value={formData.code}\n            onChange={e => setFormData({ ...formData, code: e.target.value })}\n            error={errors.code}\n            required\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Subject Type\n            </label>\n            <select\n              value={formData.type}\n              onChange={e => setFormData({ ...formData, type: e.target.value })}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              {Array.isArray(subjectTypes) &&\n                subjectTypes.map(type => (\n                  <option key={type.value} value={type.value}>\n                    {type.label}\n                  </option>\n                ))}\n            </select>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"Max Marks\"\n              type=\"number\"\n              value={formData.maxMarks}\n              onChange={e =>\n                setFormData({ ...formData, maxMarks: e.target.value })\n              }\n              error={errors.maxMarks}\n            />\n            <Input\n              label=\"Pass Marks\"\n              type=\"number\"\n              value={formData.passMarks}\n              onChange={e =>\n                setFormData({ ...formData, passMarks: e.target.value })\n              }\n              error={errors.passMarks}\n            />\n          </div>\n          <Input\n            label=\"Description\"\n            value={formData.description}\n            onChange={e =>\n              setFormData({ ...formData, description: e.target.value })\n            }\n            multiline\n            rows={3}\n          />\n          <div className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              id=\"isActive\"\n              checked={formData.isActive}\n              onChange={e =>\n                setFormData({ ...formData, isActive: e.target.checked })\n              }\n            />\n            <label htmlFor=\"isActive\">Active</label>\n          </div>\n          <div className=\"flex gap-2 pt-4\">\n            <button\n              type=\"submit\"\n              disabled={createMutation.isPending}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {createMutation.isPending ? 'Creating...' : 'Create Subject'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setShowCreateDialog(false)\n                resetForm()\n              }}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </Dialog>\n\n      {/* Edit Dialog */}\n      <Dialog\n        open={showEditDialog}\n        onClose={() => {\n          setShowEditDialog(false)\n          resetForm()\n        }}\n        title=\"Edit Subject\"\n      >\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <Input\n            label=\"Subject Name\"\n            value={formData.name}\n            onChange={e => setFormData({ ...formData, name: e.target.value })}\n            error={errors.name}\n            required\n          />\n          <Input\n            label=\"Subject Code\"\n            value={formData.code}\n            onChange={e => setFormData({ ...formData, code: e.target.value })}\n            error={errors.code}\n            required\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Subject Type\n            </label>\n            <select\n              value={formData.type}\n              onChange={e => setFormData({ ...formData, type: e.target.value })}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              {Array.isArray(subjectTypes) &&\n                subjectTypes.map(type => (\n                  <option key={type.value} value={type.value}>\n                    {type.label}\n                  </option>\n                ))}\n            </select>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"Max Marks\"\n              type=\"number\"\n              value={formData.maxMarks}\n              onChange={e =>\n                setFormData({ ...formData, maxMarks: e.target.value })\n              }\n              error={errors.maxMarks}\n            />\n            <Input\n              label=\"Pass Marks\"\n              type=\"number\"\n              value={formData.passMarks}\n              onChange={e =>\n                setFormData({ ...formData, passMarks: e.target.value })\n              }\n              error={errors.passMarks}\n            />\n          </div>\n          <Input\n            label=\"Description\"\n            value={formData.description}\n            onChange={e =>\n              setFormData({ ...formData, description: e.target.value })\n            }\n            multiline\n            rows={3}\n          />\n          <div className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              id=\"editIsActive\"\n              checked={formData.isActive}\n              onChange={e =>\n                setFormData({ ...formData, isActive: e.target.checked })\n              }\n            />\n            <label htmlFor=\"editIsActive\">Active</label>\n          </div>\n          <div className=\"flex gap-2 pt-4\">\n            <button\n              type=\"submit\"\n              disabled={updateMutation.isPending}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {updateMutation.isPending ? 'Updating...' : 'Update Subject'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setShowEditDialog(false)\n                resetForm()\n              }}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default Subjects\n"
        }
    ]
}