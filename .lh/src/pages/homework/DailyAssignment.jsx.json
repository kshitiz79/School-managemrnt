{
    "sourceFile": "src/pages/homework/DailyAssignment.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755986163481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755991017913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState } from 'react'\n-import { useState } from 'react'\n+import React, { useState } from 'react'\n import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n import { homeworkApi } from '../../lib/api/homework'\n import Button from '../../components/Button'\n import { exportToCSV, exportToPDF } from '../../lib/export'\n"
                },
                {
                    "date": 1755991132352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState } from 'react'\n-import React, { useState } from 'react'\n import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n import { homeworkApi } from '../../lib/api/homework'\n import Button from '../../components/Button'\n import { exportToCSV, exportToPDF } from '../../lib/export'\n"
                },
                {
                    "date": 1755993033874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,10 +262,10 @@\n                           <div>\n                             <span className=\"font-medium\">Max Marks:</span>{' '}\n                             {assignment.maxMarks || 'N/A'}\n                           </div>\n+                        </div>\n \n-\n                         <p className=\"text-sm text-gray-700 mb-3\">\n                           {assignment.description}\n                         </p>\n                       </div>\n@@ -277,18 +277,17 @@\n                         <h4 className=\"font-medium\">Submission Progress</h4>\n                         <span className=\"text-sm font-medium\">\n                           {completionRate}% Complete\n                         </span>\n-\n-\n+                      </div>\n                       <div className=\"w-full bg-gray-200 rounded-full h-2 mb-3\">\n                         <div\n                           className=\"bg-blue-600 h-2 rounded-full\"\n                           style={{ width: `${completionRate}%` }}\n                         ></div>\n                       </div>\n \n-                    <div className=\"grid grid-cols-4 gap-4 text-center text-sm\">\n+                      <div className=\"grid grid-cols-4 gap-4 text-center text-sm\">\n                         <div>\n                           <div className=\"font-bold text-lg text-gray-700\">\n                             {stats.total}\n                           </div>\n@@ -332,9 +331,9 @@\n                           Grade Submissions\n                         </Button>\n                       )}\n \n-\n+                      <Button\n                         onClick={() =>\n                           window.open(\n                             `/homework/assignment/${assignment.id}`,\n                             '_blank'\n"
                }
            ],
            "date": 1755986163481,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { homeworkApi } from '../../lib/api/homework'\nimport Button from '../../components/Button'\nimport { exportToCSV, exportToPDF } from '../../lib/export'\n\nconst DailyAssignment = () => {\n  const [selectedDate, setSelectedDate] = useState(\n    new Date().toISOString().split('T')[0]\n  )\n  const [filters, setFilters] = useState({\n    class: 'all',\n    subject: 'all',\n    status: 'all',\n  })\n  const [selectedAssignment, setSelectedAssignment] = useState(null)\n  const [gradingMode, setGradingMode] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const { data: assignments = [], isLoading } = useQuery({\n    queryKey: ['dailyAssignments', selectedDate, filters],\n    queryFn: () => homeworkApi.getDailyAssignments(selectedDate, filters),\n  })\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['classes'],\n    queryFn: homeworkApi.getClasses,\n  })\n\n  const { data: subjects = [] } = useQuery({\n    queryKey: ['subjects'],\n    queryFn: homeworkApi.getSubjects,\n  })\n\n  const { data: submissions = [], isLoading: isLoadingSubmissions } = useQuery({\n    queryKey: ['submissions', selectedAssignment],\n    queryFn: () => homeworkApi.getSubmissions(selectedAssignment),\n    enabled: !!selectedAssignment,\n  })\n\n  const gradeSubmissionMutation = useMutation({\n    mutationFn: ({ submissionId, grade, feedback }) =>\n      homeworkApi.gradeSubmission(submissionId, grade, feedback),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['submissions'])\n      alert('Grade submitted successfully!')\n    }\n  })\n\n  const bulkGradeMutation = useMutation({\n    mutationFn: homeworkApi.bulkGradeSubmissions,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['submissions'])\n      alert('Bulk grading completed!')\n    }\n  })\n\n  const handleFilterChange = e => {\n    const { name, value } = e.target\n    setFilters(prev => ({ ...prev, [name]: value }))\n  };\n\n  const handleGradeSubmission = (submissionId, grade, feedback) => {\n    gradeSubmissionMutation.mutate({ submissionId, grade, feedback })\n  };\n\n  const handleExportSubmissions = () => {\n    const exportData = Array.isArray(submissions)\n      ? submissions.map(sub => ({\n          'Student Name': sub.studentName,\n          'Roll Number': sub.rollNumber,\n          'Submission Date': sub.submittedAt,\n          Status: sub.status,\n          Grade: sub.grade || 'Not Graded',\n          Feedback: sub.feedback || '',\n        }))\n      : []\n    exportToCSV(exportData, `submissions-${selectedAssignment}`)\n  };\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'submitted':\n        return 'bg-green-100 text-green-800'\n      case 'late':\n        return 'bg-orange-100 text-orange-800'\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'graded':\n        return 'bg-blue-100 text-blue-800'\n      case 'overdue':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getPriorityColor = priority => {\n    switch (priority) {\n      case 'high':\n        return 'border-l-red-500 bg-red-50'\n      case 'medium':\n        return 'border-l-yellow-500 bg-yellow-50'\n      case 'low':\n        return 'border-l-green-500 bg-green-50'\n      default:\n        return 'border-l-gray-500 bg-gray-50'\n    }\n  }\n\n  const getSubmissionStats = assignment => {\n    const total = assignment.totalStudents || 0\n    const submitted = assignment.submittedCount || 0\n    const graded = assignment.gradedCount || 0\n    const pending = total - submitted\n    \n    return { total, submitted, graded, pending }\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-3xl\">ðŸ“‹</span>\n            <h2 className=\"text-2xl font-bold\">Daily Assignment Tracking</h2>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <input\n              type=\"date\"\n              value={selectedDate}\n              onChange={e => setSelectedDate(e.target.value)}\n              className=\"p-2 border rounded-md\"\n            />\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Class</label>\n            <select\n              name=\"class\"\n              value={filters.class}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Classes</option>\n              {Array.isArray(classes) &&\n                classes.map(cls => (\n                  <option key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Subject</label>\n            <select\n              name=\"subject\"\n              value={filters.subject}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Subjects</option>\n              {Array.isArray(subjects) &&\n                subjects.map(subject => (\n                  <option key={subject.id} value={subject.id}>\n                    {subject.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Status</label>\n            <select\n              name=\"status\"\n              value={filters.status}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"active\">Active</option>\n              <option value=\"due_today\">Due Today</option>\n              <option value=\"overdue\">Overdue</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-end\">\n            <Button\n              onClick={() => setGradingMode(!gradingMode)}\n              className={`px-4 py-2 rounded-md ${\n                gradingMode\n                  ? 'bg-green-600 text-white hover:bg-green-700'\n                  : 'bg-gray-600 text-white hover:bg-gray-700'\n              }`}\n            >\n              {gradingMode ? 'âœ“ Grading Mode' : 'Enable Grading'}\n            </Button>\n          </div>\n        </div>\n\n        {/* Assignments List */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">Loading assignments...</div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Array.isArray(assignments) &&\n              assignments.map(assignment => {\n                const stats = getSubmissionStats(assignment)\n                const completionRate =\n                  stats.total > 0\n                    ? ((stats.submitted / stats.total) * 100).toFixed(1)\n                    : 0\n\n                return (\n                  <div\n                    key={assignment.id}\n                    className={`border-l-4 rounded-lg p-4 ${getPriorityColor(assignment.priority)}`}\n                  >\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <h3 className=\"text-lg font-semibold\">\n                            {assignment.title}\n                          </h3>\n                          <span\n                            className={`px-2 py-1 rounded text-xs ${\n                              assignment.priority === 'high'\n                                ? 'bg-red-100 text-red-800'\n                                : assignment.priority === 'medium'\n                                  ? 'bg-yellow-100 text-yellow-800'\n                                  : 'bg-green-100 text-green-800'\n                            }`}\n                          >\n                            {assignment.priority.toUpperCase()}\n                          </span>\n                          <span\n                            className={`px-2 py-1 rounded text-xs ${getStatusColor(assignment.status)}`}\n                          >\n                            {assignment.status.toUpperCase()}\n                          </span>\n                        </div>\n\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600 mb-2\">\n                          <div>\n                            <span className=\"font-medium\">Subject:</span>{' '}\n                            {assignment.subjectName}\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Class:</span>{' '}\n                            {assignment.className}\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Due:</span>{' '}\n                            {assignment.dueDate}\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Max Marks:</span>{' '}\n                            {assignment.maxMarks || 'N/A'}\n                          </div>\n\n\n                        <p className=\"text-sm text-gray-700 mb-3\">\n                          {assignment.description}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Submission Statistics */}\n                    <div className=\"bg-white p-3 rounded border mb-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">Submission Progress</h4>\n                        <span className=\"text-sm font-medium\">\n                          {completionRate}% Complete\n                        </span>\n\n\n                      <div className=\"w-full bg-gray-200 rounded-full h-2 mb-3\">\n                        <div\n                          className=\"bg-blue-600 h-2 rounded-full\"\n                          style={{ width: `${completionRate}%` }}\n                        ></div>\n                      </div>\n\n                    <div className=\"grid grid-cols-4 gap-4 text-center text-sm\">\n                        <div>\n                          <div className=\"font-bold text-lg text-gray-700\">\n                            {stats.total}\n                          </div>\n                          <div className=\"text-gray-600\">Total</div>\n                        </div>\n                        <div>\n                          <div className=\"font-bold text-lg text-green-600\">\n                            {stats.submitted}\n                          </div>\n                          <div className=\"text-gray-600\">Submitted</div>\n                        </div>\n                        <div>\n                          <div className=\"font-bold text-lg text-blue-600\">\n                            {stats.graded}\n                          </div>\n                          <div className=\"text-gray-600\">Graded</div>\n                        </div>\n                        <div>\n                          <div className=\"font-bold text-lg text-orange-600\">\n                            {stats.pending}\n                          </div>\n                          <div className=\"text-gray-600\">Pending</div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex gap-2 flex-wrap\">\n                      <Button\n                        onClick={() => setSelectedAssignment(assignment.id)}\n                        className=\"bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700\"\n                      >\n                        View Submissions ({stats.submitted})\n                      </Button>\n\n                    {gradingMode && stats.submitted > 0 && (\n                        <Button\n                          onClick={() => setSelectedAssignment(assignment.id)}\n                          className=\"bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700\"\n                        >\n                          Grade Submissions\n                        </Button>\n                      )}\n\n\n                        onClick={() =>\n                          window.open(\n                            `/homework/assignment/${assignment.id}`,\n                            '_blank'\n                          )\n                        }\n                        className=\"bg-gray-600 text-white px-3 py-1 rounded text-sm hover:bg-gray-700\"\n                      >\n                        View Details\n                      </Button>\n                    </div>\n                  </div>\n                )\n              })}\n          </div>\n        )}\n\n        {assignments.length === 0 && !isLoading && (\n          <div className=\"text-center py-8 text-gray-500\">\n            <div className=\"text-6xl mb-4\">ðŸ“š</div>\n            <div className=\"text-xl mb-2\">No assignments found</div>\n            <div className=\"text-sm\">\n              No assignments are due for the selected date and filters\n            </div>\n          </div>\n        )}\n\n        {/* Submissions Modal */}\n        {selectedAssignment && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 max-w-6xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-semibold\">\n                  Assignment Submissions\n                </h3>\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={handleExportSubmissions}\n                    className=\"bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700\"\n                  >\n                    Export CSV\n                  </Button>\n                  <Button\n                    onClick={() => setSelectedAssignment(null)}\n                    className=\"bg-gray-500 text-white px-3 py-1 rounded hover:bg-gray-600\"\n                  >\n                    Close\n                  </Button>\n                </div>\n              </div>\n\n              {isLoadingSubmissions ? (\n                <div className=\"text-center py-4\">Loading submissions...</div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse border border-gray-300\">\n                    <thead>\n                      <tr className=\"bg-gray-50\">\n                        <th className=\"border border-gray-300 px-4 py-2 text-left\">\n                          Student\n                        </th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-left\">\n                          Roll No.\n                        </th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-center\">\n                          Status\n                        </th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-center\">\n                          Submitted At\n                        </th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-center\">\n                          Attachments\n                        </th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-center\">\n                          Grade\n                        </th>\n                        {gradingMode && (\n                          <th className=\"border border-gray-300 px-4 py-2 text-center\">\n                            Actions\n                          </th>\n                        )}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {Array.isArray(submissions) &&\n                        submissions.map(submission => (\n                          <tr key={submission.id} className=\"hover:bg-gray-50\">\n                            <td className=\"border border-gray-300 px-4 py-2\">\n                              <div>\n                                <div className=\"font-medium\">\n                                  {submission.studentName}\n                                </div>\n                                <div className=\"text-sm text-gray-600\">\n                                  {submission.className}\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"border border-gray-300 px-4 py-2 text-center\">\n                              {submission.rollNumber}\n                            </td>\n                            <td className=\"border border-gray-300 px-4 py-2 text-center\">\n                              <span\n                                className={`px-2 py-1 rounded text-xs ${getStatusColor(submission.status)}`}\n                              >\n                                {submission.status.toUpperCase()}\n                              </span>\n                            </td>\n                            <td className=\"border border-gray-300 px-4 py-2 text-center text-sm\">\n                              {submission.submittedAt\n                                ? new Date(\n                                    submission.submittedAt\n                                  ).toLocaleString()\n                                : '-'}\n                            </td>\n                            <td className=\"border border-gray-300 px-4 py-2 text-center\">\n                              {submission.attachments &&\n                              submission.attachments.length > 0 ? (\n                                <div className=\"space-y-1\">\n                                  {Array.isArray(submission.attachments) &&\n                                    submission.attachments.map(\n                                      (file, index) => (\n                                        <a\n                                          key={index}\n                                          href={file.url}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                          className=\"text-blue-600 hover:underline text-xs block\"\n                                        >\n                                          ðŸ“Ž {file.name}\n                                        </a>\n                                      )\n                                    )}\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-400\">No files</span>\n                              )}\n                            </td>\n                            <td className=\"border border-gray-300 px-4 py-2 text-center\">\n                              {submission.grade ? (\n                                <div>\n                                  <div className=\"font-bold text-lg\">\n                                    {submission.grade}\n                                  </div>\n                                  {submission.maxMarks && (\n                                    <div className=\"text-xs text-gray-600\">\n                                      / {submission.maxMarks}\n                                    </div>\n                                  )}\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-400\">\n                                  Not graded\n                                </span>\n                              )}\n                            </td>\n                            {gradingMode && (\n                              <td className=\"border border-gray-300 px-4 py-2 text-center\">\n                                {submission.status === 'submitted' ||\n                                submission.status === 'late' ? (\n                                  <GradingForm\n                                    submission={submission}\n                                    onGrade={handleGradeSubmission}\n                                    isLoading={\n                                      gradeSubmissionMutation.isPending\n                                    }\n                                  />\n                                ) : (\n                                  <span className=\"text-gray-400\">N/A</span>\n                                )}\n                              </td>\n                            )}\n                          </tr>\n                        ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n\n              {submissions.length === 0 && !isLoadingSubmissions && (\n                <div className=\"text-center py-8 text-gray-500\">\n                  No submissions found for this assignment.\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n};\n\n// Grading Form Component\nconst GradingForm = ({ submission, onGrade, isLoading }) => {\n  const [grade, setGrade] = useState(submission.grade || '')\n  const [feedback, setFeedback] = useState(submission.feedback || '')\n  const [showForm, setShowForm] = useState(false)\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    onGrade(submission.id, grade, feedback)\n    setShowForm(false)\n  };\n\n  if (!showForm) {\n    return (\n      <Button\n        onClick={() => setShowForm(true)}\n        className=\"bg-green-600 text-white px-2 py-1 rounded text-xs hover:bg-green-700\"\n      >\n        Grade\n      </Button>\n    )\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-2\">\n      <input\n        type=\"number\"\n        value={grade}\n        onChange={e => setGrade(e.target.value)}\n        placeholder=\"Grade\"\n        className=\"w-16 p-1 border rounded text-xs\"\n        min=\"0\"\n        max={submission.maxMarks || 100}\n        required\n      />\n      <textarea\n        value={feedback}\n        onChange={e => setFeedback(e.target.value)}\n        placeholder=\"Feedback\"\n        className=\"w-full p-1 border rounded text-xs\"\n        rows=\"2\"\n      />\n      <div className=\"flex gap-1\">\n        <Button\n          type=\"submit\"\n          disabled={isLoading}\n          className=\"bg-blue-600 text-white px-2 py-1 rounded text-xs hover:bg-blue-700\"\n        >\n          Save\n        </Button>\n        <Button\n          type=\"button\"\n          onClick={() => setShowForm(false)}\n          className=\"bg-gray-500 text-white px-2 py-1 rounded text-xs hover:bg-gray-600\"\n        >\n          Cancel\n        </Button>\n      </div>\n    </form>\n  )\n};\n\nexport default DailyAssignment"
        }
    ]
}