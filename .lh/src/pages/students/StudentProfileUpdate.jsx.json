{
    "sourceFile": "src/pages/students/StudentProfileUpdate.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925600,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Save,\n  Camera,\n  Upload,\n  FileText,\n  Eye,\n  X,\n  User,\n  Phone,\n  Mail,\n  MapPin,\n  Users,\n  GraduationCap,\n  AlertTriangle,\n  CheckCircle,\n  History,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport { studentsApi } from '../../lib/api/students'\nimport { classesApi } from '../../lib/api/classes'\nimport { sectionsApi } from '../../lib/api/sections'\nimport { studentCategoriesApi } from '../../lib/api/studentCategories'\nimport { studentHousesApi } from '../../lib/api/studentHouses'\n\n// Validation Schema\nconst profileUpdateSchema = z.object({\n  // Personal Information\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  dateOfBirth: z.string().min(1, 'Date of birth is required'),\n  gender: z.enum(['male', 'female', 'other'], {\n    required_error: 'Gender is required',\n  }),\n  bloodGroup: z.string().optional(),\n  religion: z.string().optional(),\n  nationality: z.string().min(1, 'Nationality is required'),\n\n  // Contact Information\n  mobile: z.string().min(10, 'Valid mobile number is required'),\n  email: z\n    .string()\n    .email('Valid email is required')\n    .optional()\n    .or(z.literal('')),\n  emergencyContact: z.string().min(10, 'Emergency contact is required'),\n\n  // Address\n  currentAddress: z.string().min(1, 'Current address is required'),\n  permanentAddress: z.string().min(1, 'Permanent address is required'),\n  city: z.string().min(1, 'City is required'),\n  state: z.string().min(1, 'State is required'),\n  pincode: z.string().min(6, 'Valid pincode is required'),\n\n  // Academic Information\n  classId: z.string().min(1, 'Class is required'),\n  sectionId: z.string().min(1, 'Section is required'),\n  rollNumber: z.string().min(1, 'Roll number is required'),\n\n  // Guardian Information\n  fatherName: z.string().min(1, 'Father name is required'),\n  fatherOccupation: z.string().optional(),\n  fatherMobile: z.string().min(10, 'Father mobile is required'),\n  fatherEmail: z.string().email().optional().or(z.literal('')),\n\n  motherName: z.string().min(1, 'Mother name is required'),\n  motherOccupation: z.string().optional(),\n  motherMobile: z.string().min(10, 'Mother mobile is required'),\n  motherEmail: z.string().email().optional().or(z.literal('')),\n\n  guardianName: z.string().optional(),\n  guardianRelation: z.string().optional(),\n  guardianMobile: z.string().optional(),\n\n  // Optional Information\n  categoryId: z.string().optional(),\n  houseId: z.string().optional(),\n  transportRequired: z.boolean().default(false),\n  hostelRequired: z.boolean().default(false),\n})\n\nconst PhotoUpload = ({ currentPhoto, onPhotoChange }) => {\n  const [preview, setPreview] = useState(currentPhoto)\n  const [showCamera, setShowCamera] = useState(false)\n\n  const handleFileSelect = e => {\n    const file = e.target.files[0]\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) {\n        alert('File size should be less than 5MB')\n        return\n      }\n\n      const reader = new FileReader()\n      reader.onload = e => {\n        setPreview(e.target.result)\n        onPhotoChange(file)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4\">\n      <div className=\"relative\">\n        {preview ? (\n          <img\n            src={preview}\n            alt=\"Student\"\n            className=\"w-32 h-32 rounded-full object-cover border-4 border-gray-200\"\n          />\n        ) : (\n          <div className=\"w-32 h-32 rounded-full bg-gray-200 flex items-center justify-center border-4 border-gray-200\">\n            <User className=\"w-12 h-12 text-gray-400\" />\n          </div>\n        )}\n        <button\n          type=\"button\"\n          className=\"absolute bottom-0 right-0 bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700\"\n          onClick={() => document.getElementById('photo-upload').click()}\n        >\n          <Camera className=\"w-4 h-4\" />\n        </button>\n      </div>\n\n      <input\n        id=\"photo-upload\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileSelect}\n        className=\"hidden\"\n      />\n\n      <div className=\"flex gap-2\">\n        <label className=\"bg-gray-600 text-white px-4 py-2 rounded-lg cursor-pointer hover:bg-gray-700 text-sm\">\n          Upload Photo\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n        </label>\n        {preview && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              setPreview(null)\n              onPhotoChange(null)\n            }}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 text-sm\"\n          >\n            Remove\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst DocumentManager = ({ documents, onDocumentAdd, onDocumentRemove }) => {\n  const [showPreview, setShowPreview] = useState(false)\n  const [previewDocument, setPreviewDocument] = useState(null)\n\n  const handleFileSelect = e => {\n    const files = Array.from(e.target.files)\n    files.forEach(file => {\n      if (file.size > 5 * 1024 * 1024) {\n        alert(`File ${file.name} is too large. Maximum size is 5MB.`)\n        return\n      }\n      onDocumentAdd(file)\n    })\n  }\n\n  const handlePreview = doc => {\n    setPreviewDocument(doc)\n    setShowPreview(true)\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-medium\">Documents</h3>\n        <label className=\"bg-blue-600 text-white px-4 py-2 rounded-lg cursor-pointer hover:bg-blue-700 text-sm flex items-center gap-2\">\n          <Upload className=\"w-4 h-4\" />\n          Add Document\n          <input\n            type=\"file\"\n            multiple\n            accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n        </label>\n      </div>\n\n      {documents.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {Array.isArray(documents) &&\n            documents.map((doc, index) => (\n              <div\n                key={index}\n                className=\"border rounded-lg p-4 flex items-center justify-between\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <FileText className=\"w-8 h-8 text-gray-400\" />\n                  <div>\n                    <p className=\"font-medium text-sm\">{doc.name}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {doc.size\n                        ? `${(doc.size / 1024 / 1024).toFixed(2)} MB`\n                        : 'Unknown size'}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <button\n                    type=\"button\"\n                    onClick={() => handlePreview(doc)}\n                    className=\"text-blue-600 hover:text-blue-800\"\n                  >\n                    <Eye className=\"w-4 h-4\" />\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => onDocumentRemove(index)}\n                    className=\"text-red-600 hover:text-red-800\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-8 text-gray-500\">\n          <FileText className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n          <p>No documents uploaded</p>\n        </div>\n      )}\n\n      {/* Document Preview Dialog */}\n      <Dialog\n        open={showPreview}\n        onClose={() => setShowPreview(false)}\n        title=\"Document Preview\"\n        size=\"lg\"\n      >\n        {previewDocument && (\n          <div className=\"text-center\">\n            <p className=\"mb-4\">Document: {previewDocument.name}</p>\n            {previewDocument.type?.startsWith('image/') ? (\n              <img\n                src={URL.createObjectURL(previewDocument)}\n                alt=\"Document preview\"\n                className=\"max-w-full max-h-96 mx-auto\"\n              />\n            ) : (\n              <div className=\"py-12\">\n                <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                <p className=\"text-gray-600\">\n                  Preview not available for this file type\n                </p>\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  File: {previewDocument.name}\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n      </Dialog>\n    </div>\n  )\n}\n\nconst ChangeHistory = ({ studentId }) => {\n  const { data: historyData, isLoading } = useQuery({\n    queryKey: ['student', 'history', studentId],\n    queryFn: () => studentsApi.getUpdateHistory(studentId),\n    enabled: !!studentId,\n  })\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-medium flex items-center gap-2\">\n        <History className=\"w-5 h-5\" />\n        Change History\n      </h3>\n\n      {historyData?.data?.length > 0 ? (\n        <div className=\"space-y-3\">\n          {Array.isArray(historyData.data) &&\n            historyData.data.map((change, index) => (\n              <div key={index} className=\"border rounded-lg p-4\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <p className=\"font-medium\">{change.field} Updated</p>\n                    <p className=\"text-sm text-gray-600\">\n                      By {change.updatedBy} on{' '}\n                      {new Date(change.updatedAt).toLocaleString()}\n                    </p>\n                  </div>\n                  <span\n                    className={`px-2 py-1 rounded-full text-xs ${\n                      change.status === 'approved'\n                        ? 'bg-green-100 text-green-800'\n                        : change.status === 'pending'\n                          ? 'bg-yellow-100 text-yellow-800'\n                          : 'bg-red-100 text-red-800'\n                    }`}\n                  >\n                    {change.status}\n                  </span>\n                </div>\n                <div className=\"text-sm\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <span className=\"text-gray-600\">From:</span>\n                      <p className=\"font-mono bg-gray-100 p-2 rounded mt-1\">\n                        {change.oldValue || 'N/A'}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">To:</span>\n                      <p className=\"font-mono bg-gray-100 p-2 rounded mt-1\">\n                        {change.newValue}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-8 text-gray-500\">\n          <History className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n          <p>No change history available</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst StudentProfileUpdate = ({ studentId: propStudentId }) => {\n  const [studentId, setStudentId] = useState(propStudentId || '')\n  const [currentTab, setCurrentTab] = useState('personal')\n  const [photo, setPhoto] = useState(null)\n  const [documents, setDocuments] = useState([])\n  const [showHistory, setShowHistory] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    watch,\n    setValue,\n    formState: { errors, isDirty },\n  } = useForm({\n    resolver: zodResolver(profileUpdateSchema),\n    mode: 'onChange',\n  })\n\n  const selectedClass = watch('classId')\n\n  // Queries\n  const { data: studentData, isLoading: studentLoading } = useQuery({\n    queryKey: ['student', studentId],\n    queryFn: () => studentsApi.getById(studentId),\n    enabled: !!studentId,\n  })\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => classesApi.getAll({ all: true }),\n  })\n\n  const { data: sectionsData } = useQuery({\n    queryKey: ['sections', 'by-class', selectedClass],\n    queryFn: () => sectionsApi.getByClass(selectedClass),\n    enabled: !!selectedClass,\n  })\n\n  const { data: categoriesData } = useQuery({\n    queryKey: ['studentCategories', 'all'],\n    queryFn: () => studentCategoriesApi.getAll({ all: true }),\n  })\n\n  const { data: housesData } = useQuery({\n    queryKey: ['studentHouses', 'all'],\n    queryFn: () => studentHousesApi.getAll({ all: true }),\n  })\n\n  // Mutations\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }) => studentsApi.updateProfile(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['student', studentId])\n      alert('Profile updated successfully!')\n    },\n  })\n\n  // Initialize form with student data\n  React.useEffect(() => {\n    if (studentData?.data) {\n      const student = studentData.data\n      reset({\n        firstName: student.firstName || '',\n        lastName: student.lastName || '',\n        dateOfBirth: student.dateOfBirth\n          ? student.dateOfBirth.split('T')[0]\n          : '',\n        gender: student.gender || 'male',\n        bloodGroup: student.bloodGroup || '',\n        religion: student.religion || '',\n        nationality: student.nationality || 'Indian',\n        mobile: student.mobile || '',\n        email: student.email || '',\n        emergencyContact: student.emergencyContact || '',\n        currentAddress: student.currentAddress || '',\n        permanentAddress: student.permanentAddress || '',\n        city: student.city || '',\n        state: student.state || '',\n        pincode: student.pincode || '',\n        classId: student.classId || '',\n        sectionId: student.sectionId || '',\n        rollNumber: student.rollNumber || '',\n        fatherName: student.fatherName || '',\n        fatherOccupation: student.fatherOccupation || '',\n        fatherMobile: student.fatherMobile || '',\n        fatherEmail: student.fatherEmail || '',\n        motherName: student.motherName || '',\n        motherOccupation: student.motherOccupation || '',\n        motherMobile: student.motherMobile || '',\n        motherEmail: student.motherEmail || '',\n        guardianName: student.guardianName || '',\n        guardianRelation: student.guardianRelation || '',\n        guardianMobile: student.guardianMobile || '',\n        categoryId: student.categoryId || '',\n        houseId: student.houseId || '',\n        transportRequired: student.transportRequired || false,\n        hostelRequired: student.hostelRequired || false,\n      })\n\n      setPhoto(student.photo)\n      setDocuments(student.documents || [])\n    }\n  }, [studentData, reset])\n\n  const handleDocumentAdd = file => {\n    setDocuments(prev => [...prev, file])\n  }\n\n  const handleDocumentRemove = index => {\n    setDocuments(prev => prev.filter((_, i) => i !== index))\n  }\n\n  const onSubmit = data => {\n    const formData = new FormData()\n\n    // Add form data\n    Object.keys(data).forEach(key => {\n      formData.append(key, data[key])\n    })\n\n    // Add photo if changed\n    if (photo && typeof photo !== 'string') {\n      formData.append('photo', photo)\n    }\n\n    // Add documents\n    documents.forEach((doc, index) => {\n      if (doc instanceof File) {\n        formData.append(`documents[${index}]`, doc)\n      }\n    })\n\n    updateMutation.mutate({ id: studentId, data: formData })\n  }\n\n  const tabs = [\n    { id: 'personal', label: 'Personal Info', icon: User },\n    { id: 'contact', label: 'Contact & Address', icon: MapPin },\n    { id: 'academic', label: 'Academic Info', icon: GraduationCap },\n    { id: 'guardian', label: 'Guardian Info', icon: Users },\n    { id: 'documents', label: 'Documents', icon: FileText },\n  ]\n\n  if (!studentId) {\n    return (\n      <div className=\"max-w-md mx-auto mt-12\">\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Select Student</h2>\n          <Input\n            label=\"Student ID\"\n            value={studentId}\n            onChange={e => setStudentId(e.target.value)}\n            placeholder=\"Enter student ID\"\n          />\n          <button\n            onClick={() => setStudentId(studentId)}\n            disabled={!studentId}\n            className=\"w-full mt-4 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n          >\n            Load Student Profile\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  if (studentLoading) return <LoadingSkeleton />\n  if (!studentData) return <ErrorState message=\"Student not found\" />\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Update Student Profile</h1>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setShowHistory(true)}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n          >\n            <History className=\"w-4 h-4\" />\n            View History\n          </button>\n          {isDirty && (\n            <div className=\"flex items-center gap-2 text-orange-600\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              <span className=\"text-sm\">Unsaved changes</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Student Info Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"w-16 h-16 rounded-full overflow-hidden bg-gray-200\">\n            {studentData.data.photo ? (\n              <img\n                src={studentData.data.photo}\n                alt=\"Student\"\n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-full h-full flex items-center justify-center\">\n                <User className=\"w-8 h-8 text-gray-400\" />\n              </div>\n            )}\n          </div>\n          <div>\n            <h2 className=\"text-xl font-semibold\">{studentData.data.name}</h2>\n            <p className=\"text-gray-600\">\n              Roll No: {studentData.data.rollNumber} |\n              {studentData.data.class?.name} - {studentData.data.section?.name}\n            </p>\n            <div className=\"flex gap-2 mt-2\">\n              <span\n                className={`px-2 py-1 rounded-full text-xs ${\n                  studentData.data.isActive\n                    ? 'bg-green-100 text-green-800'\n                    : 'bg-red-100 text-red-800'\n                }`}\n              >\n                {studentData.data.isActive ? 'Active' : 'Inactive'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"border-b\">\n          <nav className=\"flex space-x-8 px-6\">\n            {Array.isArray(tabs) &&\n              tabs.map(tab => (\n                <button\n                  key={tab.id}\n                  onClick={() => setCurrentTab(tab.id)}\n                  className={`py-4 px-2 border-b-2 font-medium text-sm flex items-center gap-2 ${\n                    currentTab === tab.id\n                      ? 'border-blue-500 text-blue-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700'\n                  }`}\n                >\n                  <tab.icon className=\"w-4 h-4\" />\n                  {tab.label}\n                </button>\n              ))}\n          </nav>\n        </div>\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"p-6\">\n          {/* Personal Information Tab */}\n          {currentTab === 'personal' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex justify-center mb-8\">\n                <PhotoUpload currentPhoto={photo} onPhotoChange={setPhoto} />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Controller\n                  name=\"firstName\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"First Name *\"\n                      {...field}\n                      error={errors.firstName?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"lastName\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Last Name *\"\n                      {...field}\n                      error={errors.lastName?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"dateOfBirth\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Date of Birth *\"\n                      type=\"date\"\n                      {...field}\n                      error={errors.dateOfBirth?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"gender\"\n                  control={control}\n                  render={({ field }) => (\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">\n                        Gender *\n                      </label>\n                      <select\n                        {...field}\n                        className={`w-full border rounded-lg px-3 py-2 ${\n                          errors.gender ? 'border-red-500' : ''\n                        }`}\n                      >\n                        <option value=\"male\">Male</option>\n                        <option value=\"female\">Female</option>\n                        <option value=\"other\">Other</option>\n                      </select>\n                      {errors.gender && (\n                        <p className=\"text-red-500 text-sm mt-1\">\n                          {errors.gender.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                />\n                <Controller\n                  name=\"bloodGroup\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Blood Group\"\n                      {...field}\n                      error={errors.bloodGroup?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"religion\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Religion\"\n                      {...field}\n                      error={errors.religion?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"nationality\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Nationality *\"\n                      {...field}\n                      error={errors.nationality?.message}\n                    />\n                  )}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Contact & Address Tab */}\n          {currentTab === 'contact' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium\">Contact Information</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Controller\n                  name=\"mobile\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Mobile Number *\"\n                      {...field}\n                      error={errors.mobile?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"email\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Email\"\n                      type=\"email\"\n                      {...field}\n                      error={errors.email?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"emergencyContact\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Emergency Contact *\"\n                      {...field}\n                      error={errors.emergencyContact?.message}\n                    />\n                  )}\n                />\n              </div>\n\n              <h3 className=\"text-lg font-medium\">Address Information</h3>\n              <Controller\n                name=\"currentAddress\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Current Address *\"\n                    multiline\n                    rows={3}\n                    {...field}\n                    error={errors.currentAddress?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"permanentAddress\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Permanent Address *\"\n                    multiline\n                    rows={3}\n                    {...field}\n                    error={errors.permanentAddress?.message}\n                  />\n                )}\n              />\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Controller\n                  name=\"city\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"City *\"\n                      {...field}\n                      error={errors.city?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"state\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"State *\"\n                      {...field}\n                      error={errors.state?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"pincode\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Pincode *\"\n                      {...field}\n                      error={errors.pincode?.message}\n                    />\n                  )}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Academic Information Tab */}\n          {currentTab === 'academic' && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Controller\n                  name=\"classId\"\n                  control={control}\n                  render={({ field }) => (\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">\n                        Class *\n                      </label>\n                      <select\n                        {...field}\n                        onChange={e => {\n                          field.onChange(e)\n                          setValue('sectionId', '')\n                        }}\n                        className={`w-full border rounded-lg px-3 py-2 ${\n                          errors.classId ? 'border-red-500' : ''\n                        }`}\n                      >\n                        <option value=\"\">Select Class</option>\n                        {Array.isArray(classesData?.data) &&\n                          classesData.data.map(cls => (\n                            <option key={cls.id} value={cls.id}>\n                              {cls.name}\n                            </option>\n                          ))}\n                      </select>\n                      {errors.classId && (\n                        <p className=\"text-red-500 text-sm mt-1\">\n                          {errors.classId.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                />\n                <Controller\n                  name=\"sectionId\"\n                  control={control}\n                  render={({ field }) => (\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">\n                        Section *\n                      </label>\n                      <select\n                        {...field}\n                        disabled={!selectedClass}\n                        className={`w-full border rounded-lg px-3 py-2 disabled:bg-gray-100 ${\n                          errors.sectionId ? 'border-red-500' : ''\n                        }`}\n                      >\n                        <option value=\"\">Select Section</option>\n                        {Array.isArray(sectionsData?.data) &&\n                          sectionsData.data.map(section => (\n                            <option key={section.id} value={section.id}>\n                              {section.name}\n                            </option>\n                          ))}\n                      </select>\n                      {errors.sectionId && (\n                        <p className=\"text-red-500 text-sm mt-1\">\n                          {errors.sectionId.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                />\n                <Controller\n                  name=\"rollNumber\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Roll Number *\"\n                      {...field}\n                      error={errors.rollNumber?.message}\n                    />\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Controller\n                  name=\"categoryId\"\n                  control={control}\n                  render={({ field }) => (\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">\n                        Category\n                      </label>\n                      <select\n                        {...field}\n                        className=\"w-full border rounded-lg px-3 py-2\"\n                      >\n                        <option value=\"\">Select Category</option>\n                        {Array.isArray(categoriesData?.data) &&\n                          categoriesData.data.map(category => (\n                            <option key={category.id} value={category.id}>\n                              {category.name}\n                            </option>\n                          ))}\n                      </select>\n                    </div>\n                  )}\n                />\n                <Controller\n                  name=\"houseId\"\n                  control={control}\n                  render={({ field }) => (\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">\n                        House\n                      </label>\n                      <select\n                        {...field}\n                        className=\"w-full border rounded-lg px-3 py-2\"\n                      >\n                        <option value=\"\">Select House</option>\n                        {housesData?.data?.map(house => (\n                          <option key={house.id} value={house.id}>\n                            {house.name}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex gap-6\">\n                <Controller\n                  name=\"transportRequired\"\n                  control={control}\n                  render={({ field }) => (\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"checkbox\"\n                        checked={field.value}\n                        onChange={field.onChange}\n                      />\n                      Transport Required\n                    </label>\n                  )}\n                />\n                <Controller\n                  name=\"hostelRequired\"\n                  control={control}\n                  render={({ field }) => (\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"checkbox\"\n                        checked={field.value}\n                        onChange={field.onChange}\n                      />\n                      Hostel Required\n                    </label>\n                  )}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Guardian Information Tab */}\n          {currentTab === 'guardian' && (\n            <div className=\"space-y-8\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Father Details</h3>\n                  <Controller\n                    name=\"fatherName\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Father Name *\"\n                        {...field}\n                        error={errors.fatherName?.message}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name=\"fatherOccupation\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Father Occupation\"\n                        {...field}\n                        error={errors.fatherOccupation?.message}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name=\"fatherMobile\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Father Mobile *\"\n                        {...field}\n                        error={errors.fatherMobile?.message}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name=\"fatherEmail\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Father Email\"\n                        type=\"email\"\n                        {...field}\n                        error={errors.fatherEmail?.message}\n                      />\n                    )}\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Mother Details</h3>\n                  <Controller\n                    name=\"motherName\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Mother Name *\"\n                        {...field}\n                        error={errors.motherName?.message}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name=\"motherOccupation\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Mother Occupation\"\n                        {...field}\n                        error={errors.motherOccupation?.message}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name=\"motherMobile\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Mother Mobile *\"\n                        {...field}\n                        error={errors.motherMobile?.message}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name=\"motherEmail\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Mother Email\"\n                        type=\"email\"\n                        {...field}\n                        error={errors.motherEmail?.message}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">\n                  Guardian Details (if different)\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Controller\n                    name=\"guardianName\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Guardian Name\"\n                        {...field}\n                        error={errors.guardianName?.message}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name=\"guardianRelation\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Relation\"\n                        {...field}\n                        error={errors.guardianRelation?.message}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name=\"guardianMobile\"\n                    control={control}\n                    render={({ field }) => (\n                      <Input\n                        label=\"Guardian Mobile\"\n                        {...field}\n                        error={errors.guardianMobile?.message}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Documents Tab */}\n          {currentTab === 'documents' && (\n            <DocumentManager\n              documents={documents}\n              onDocumentAdd={handleDocumentAdd}\n              onDocumentRemove={handleDocumentRemove}\n            />\n          )}\n\n          {/* Form Actions */}\n          <div className=\"flex justify-between items-center pt-6 border-t mt-8\">\n            <div className=\"flex items-center gap-2\">\n              {isDirty && (\n                <div className=\"flex items-center gap-2 text-orange-600\">\n                  <AlertTriangle className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">You have unsaved changes</span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex gap-2\">\n              <button\n                type=\"button\"\n                onClick={() => reset()}\n                disabled={!isDirty}\n                className=\"border px-6 py-2 rounded-lg hover:bg-gray-50 disabled:opacity-50\"\n              >\n                Reset\n              </button>\n              <button\n                type=\"submit\"\n                disabled={updateMutation.isPending || !isDirty}\n                className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n              >\n                <Save className=\"w-4 h-4\" />\n                {updateMutation.isPending ? 'Updating...' : 'Update Profile'}\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n\n      {/* Change History Dialog */}\n      <Dialog\n        open={showHistory}\n        onClose={() => setShowHistory(false)}\n        title=\"Profile Change History\"\n        size=\"lg\"\n      >\n        <ChangeHistory studentId={studentId} />\n      </Dialog>\n    </div>\n  )\n}\n\nexport default StudentProfileUpdate\n"
        }
    ]
}