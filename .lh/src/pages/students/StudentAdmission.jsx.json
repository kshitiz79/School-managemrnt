{
    "sourceFile": "src/pages/students/StudentAdmission.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1755994275309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755994925740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   DollarSign,\n   Calendar,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { studentsApi } from '../../lib/api/students'\n import { classesApi } from '../../lib/api/classes'\n import { sectionsApi } from '../../lib/api/sections'\n"
                }
            ],
            "date": 1755994275309,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\nimport {\n  Save,\n  Upload,\n  Camera,\n  FileText,\n  Eye,\n  X,\n  User,\n  Users,\n  GraduationCap,\n  MapPin,\n  Phone,\n  DollarSign,\n  Calendar,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport Dialog from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { studentsApi } from '../../lib/api/students'\nimport { classesApi } from '../../lib/api/classes'\nimport { sectionsApi } from '../../lib/api/sections'\nimport { studentCategoriesApi } from '../../lib/api/studentCategories'\nimport { studentHousesApi } from '../../lib/api/studentHouses'\nimport { feesApi } from '../../lib/api/fees'\n\n// Validation Schema\nconst admissionSchema = z.object({\n  // Personal Information\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  dateOfBirth: z.string().min(1, 'Date of birth is required'),\n  gender: z.enum(['male', 'female', 'other'], {\n    required_error: 'Gender is required',\n  }),\n  bloodGroup: z.string().optional(),\n  religion: z.string().optional(),\n  nationality: z.string().min(1, 'Nationality is required'),\n\n  // Contact Information\n  mobile: z.string().min(10, 'Valid mobile number is required'),\n  email: z\n    .string()\n    .email('Valid email is required')\n    .optional()\n    .or(z.literal('')),\n  emergencyContact: z.string().min(10, 'Emergency contact is required'),\n\n  // Address\n  currentAddress: z.string().min(1, 'Current address is required'),\n  permanentAddress: z.string().min(1, 'Permanent address is required'),\n  city: z.string().min(1, 'City is required'),\n  state: z.string().min(1, 'State is required'),\n  pincode: z.string().min(6, 'Valid pincode is required'),\n\n  // Academic Information\n  classId: z.string().min(1, 'Class is required'),\n  sectionId: z.string().min(1, 'Section is required'),\n  rollNumber: z.string().min(1, 'Roll number is required'),\n  admissionDate: z.string().min(1, 'Admission date is required'),\n  academicYear: z.string().min(1, 'Academic year is required'),\n  previousSchool: z.string().optional(),\n\n  // Guardian Information\n  fatherName: z.string().min(1, 'Father name is required'),\n  fatherOccupation: z.string().optional(),\n  fatherMobile: z.string().min(10, 'Father mobile is required'),\n  fatherEmail: z.string().email().optional().or(z.literal('')),\n\n  motherName: z.string().min(1, 'Mother name is required'),\n  motherOccupation: z.string().optional(),\n  motherMobile: z.string().min(10, 'Mother mobile is required'),\n  motherEmail: z.string().email().optional().or(z.literal('')),\n\n  guardianName: z.string().optional(),\n  guardianRelation: z.string().optional(),\n  guardianMobile: z.string().optional(),\n\n  // Optional Information\n  categoryId: z.string().optional(),\n  houseId: z.string().optional(),\n  transportRequired: z.boolean().default(false),\n  hostelRequired: z.boolean().default(false),\n\n  // Fee Information\n  feeStructureId: z.string().min(1, 'Fee structure is required'),\n  discount: z.number().min(0).max(100).default(0),\n  scholarshipApplied: z.boolean().default(false),\n})\n\nconst DocumentUpload = ({ documents, onDocumentAdd, onDocumentRemove }) => {\n  const [dragOver, setDragOver] = useState(false)\n\n  const handleDrop = e => {\n    e.preventDefault()\n    setDragOver(false)\n    const files = Array.from(e.dataTransfer.files)\n    files.forEach(file => onDocumentAdd(file))\n  }\n\n  const handleFileSelect = e => {\n    const files = Array.from(e.target.files)\n    files.forEach(file => onDocumentAdd(file))\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div\n        className={`border-2 border-dashed rounded-lg p-6 text-center ${\n          dragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300'\n        }`}\n        onDragOver={e => {\n          e.preventDefault()\n          setDragOver(true)\n        }}\n        onDragLeave={() => setDragOver(false)}\n        onDrop={handleDrop}\n      >\n        <Upload className=\"w-8 h-8 mx-auto mb-2 text-gray-400\" />\n        <p className=\"text-gray-600 mb-2\">Drag and drop files here or</p>\n        <label className=\"bg-blue-600 text-white px-4 py-2 rounded-lg cursor-pointer hover:bg-blue-700\">\n          Browse Files\n          <input\n            type=\"file\"\n            multiple\n            accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n        </label>\n        <p className=\"text-xs text-gray-500 mt-2\">\n          Supported formats: PDF, JPG, PNG, DOC, DOCX (Max 5MB each)\n        </p>\n      </div>\n\n      {documents.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {Array.isArray(documents) &&\n            documents.map((doc, index) => (\n              <div\n                key={index}\n                className=\"border rounded-lg p-4 flex items-center justify-between\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <FileText className=\"w-8 h-8 text-gray-400\" />\n                  <div>\n                    <p className=\"font-medium text-sm\">{doc.name}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {(doc.size / 1024 / 1024).toFixed(2)} MB\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <button\n                    type=\"button\"\n                    className=\"text-blue-600 hover:text-blue-800\"\n                  >\n                    <Eye className=\"w-4 h-4\" />\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => onDocumentRemove(index)}\n                    className=\"text-red-600 hover:text-red-800\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst PhotoCapture = ({ photo, onPhotoChange }) => {\n  const [showCamera, setShowCamera] = useState(false)\n\n  const handleFileSelect = e => {\n    const file = e.target.files[0]\n    if (file) {\n      const reader = new FileReader()\n      reader.onload = e => onPhotoChange(e.target.result)\n      reader.readAsDataURL(file)\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4\">\n      <div className=\"relative\">\n        {photo ? (\n          <img\n            src={photo}\n            alt=\"Student\"\n            className=\"w-32 h-32 rounded-full object-cover border-4 border-gray-200\"\n          />\n        ) : (\n          <div className=\"w-32 h-32 rounded-full bg-gray-200 flex items-center justify-center border-4 border-gray-200\">\n            <User className=\"w-12 h-12 text-gray-400\" />\n          </div>\n        )}\n        <button\n          type=\"button\"\n          className=\"absolute bottom-0 right-0 bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700\"\n          onClick={() => setShowCamera(true)}\n        >\n          <Camera className=\"w-4 h-4\" />\n        </button>\n      </div>\n\n      <div className=\"flex gap-2\">\n        <label className=\"bg-gray-600 text-white px-4 py-2 rounded-lg cursor-pointer hover:bg-gray-700 text-sm\">\n          Upload Photo\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n        </label>\n        {photo && (\n          <button\n            type=\"button\"\n            onClick={() => onPhotoChange(null)}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 text-sm\"\n          >\n            Remove\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst StudentAdmission = () => {\n  const [currentStep, setCurrentStep] = useState(1)\n  const [documents, setDocuments] = useState([])\n  const [photo, setPhoto] = useState(null)\n  const [showPreview, setShowPreview] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    formState: { errors, isValid },\n  } = useForm({\n    resolver: zodResolver(admissionSchema),\n    mode: 'onChange',\n    defaultValues: {\n      gender: 'male',\n      nationality: 'Indian',\n      transportRequired: false,\n      hostelRequired: false,\n      scholarshipApplied: false,\n      discount: 0,\n    },\n  })\n\n  const selectedClass = watch('classId')\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => classesApi.getAll({ all: true }),\n  })\n\n  const { data: sectionsData } = useQuery({\n    queryKey: ['sections', 'by-class', selectedClass],\n    queryFn: () => sectionsApi.getByClass(selectedClass),\n    enabled: !!selectedClass,\n  })\n\n  const { data: categoriesData } = useQuery({\n    queryKey: ['studentCategories', 'all'],\n    queryFn: () => studentCategoriesApi.getAll({ all: true }),\n  })\n\n  const { data: housesData } = useQuery({\n    queryKey: ['studentHouses', 'all'],\n    queryFn: () => studentHousesApi.getAll({ all: true }),\n  })\n\n  const { data: feeStructuresData } = useQuery({\n    queryKey: ['fees', 'structures', selectedClass],\n    queryFn: () => feesApi.getStructuresByClass(selectedClass),\n    enabled: !!selectedClass,\n  })\n\n  const admissionMutation = useMutation({\n    mutationFn: studentsApi.createAdmission,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['students'])\n      // Reset form or redirect\n    },\n  })\n\n  const handleDocumentAdd = file => {\n    if (file.size > 5 * 1024 * 1024) {\n      alert('File size should be less than 5MB')\n      return\n    }\n    setDocuments(prev => [...prev, file])\n  }\n\n  const handleDocumentRemove = index => {\n    setDocuments(prev => prev.filter((_, i) => i !== index))\n  }\n\n  const onSubmit = data => {\n    const formData = new FormData()\n\n    // Add form data\n    Object.keys(data).forEach(key => {\n      formData.append(key, data[key])\n    })\n\n    // Add photo\n    if (photo) {\n      formData.append('photo', photo)\n    }\n\n    // Add documents\n    documents.forEach((doc, index) => {\n      formData.append(`documents[${index}]`, doc)\n    })\n\n    admissionMutation.mutate(formData)\n  }\n\n  const steps = [\n    { number: 1, title: 'Personal Info', icon: User },\n    { number: 2, title: 'Contact & Address', icon: MapPin },\n    { number: 3, title: 'Academic Info', icon: GraduationCap },\n    { number: 4, title: 'Guardian Info', icon: Users },\n    { number: 5, title: 'Documents & Photo', icon: FileText },\n    { number: 6, title: 'Fee Structure', icon: DollarSign },\n  ]\n\n  const renderStepIndicator = () => (\n    <div className=\"flex items-center justify-center mb-8 overflow-x-auto\">\n      {Array.isArray(steps) &&\n        steps.map((step, index) => (\n          <div key={step.number} className=\"flex items-center\">\n            <div\n              className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                currentStep >= step.number\n                  ? 'bg-blue-600 border-blue-600 text-white'\n                  : 'border-gray-300 text-gray-400'\n              }`}\n            >\n              <step.icon className=\"w-5 h-5\" />\n            </div>\n            <div className=\"ml-2 text-sm font-medium\">{step.title}</div>\n            {index < steps.length - 1 && (\n              <div\n                className={`w-8 h-0.5 mx-4 ${\n                  currentStep > step.number ? 'bg-blue-600' : 'bg-gray-300'\n                }`}\n              />\n            )}\n          </div>\n        ))}\n    </div>\n  )\n\n  const renderStep1 = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold\">Personal Information</h2>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Controller\n          name=\"firstName\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"First Name *\"\n              {...field}\n              error={errors.firstName?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"lastName\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Last Name *\"\n              {...field}\n              error={errors.lastName?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"dateOfBirth\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Date of Birth *\"\n              type=\"date\"\n              {...field}\n              error={errors.dateOfBirth?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"gender\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Gender *</label>\n              <select\n                {...field}\n                className={`w-full border rounded-lg px-3 py-2 ${\n                  errors.gender ? 'border-red-500' : ''\n                }`}\n              >\n                <option value=\"male\">Male</option>\n                <option value=\"female\">Female</option>\n                <option value=\"other\">Other</option>\n              </select>\n              {errors.gender && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {errors.gender.message}\n                </p>\n              )}\n            </div>\n          )}\n        />\n        <Controller\n          name=\"bloodGroup\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Blood Group\"\n              {...field}\n              error={errors.bloodGroup?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"religion\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Religion\"\n              {...field}\n              error={errors.religion?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"nationality\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Nationality *\"\n              {...field}\n              error={errors.nationality?.message}\n            />\n          )}\n        />\n      </div>\n    </div>\n  )\n\n  const renderStep2 = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold\">Contact & Address Information</h2>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Controller\n          name=\"mobile\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Mobile Number *\"\n              {...field}\n              error={errors.mobile?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"email\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Email\"\n              type=\"email\"\n              {...field}\n              error={errors.email?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"emergencyContact\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Emergency Contact *\"\n              {...field}\n              error={errors.emergencyContact?.message}\n            />\n          )}\n        />\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Address Details</h3>\n        <Controller\n          name=\"currentAddress\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Current Address *\"\n              multiline\n              rows={3}\n              {...field}\n              error={errors.currentAddress?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"permanentAddress\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Permanent Address *\"\n              multiline\n              rows={3}\n              {...field}\n              error={errors.permanentAddress?.message}\n            />\n          )}\n        />\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Controller\n            name=\"city\"\n            control={control}\n            render={({ field }) => (\n              <Input label=\"City *\" {...field} error={errors.city?.message} />\n            )}\n          />\n          <Controller\n            name=\"state\"\n            control={control}\n            render={({ field }) => (\n              <Input label=\"State *\" {...field} error={errors.state?.message} />\n            )}\n          />\n          <Controller\n            name=\"pincode\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Pincode *\"\n                {...field}\n                error={errors.pincode?.message}\n              />\n            )}\n          />\n        </div>\n      </div>\n    </div>\n  )\n\n  const renderStep3 = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold\">Academic Information</h2>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Controller\n          name=\"classId\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Class *</label>\n              <select\n                {...field}\n                onChange={e => {\n                  field.onChange(e)\n                  setValue('sectionId', '')\n                }}\n                className={`w-full border rounded-lg px-3 py-2 ${\n                  errors.classId ? 'border-red-500' : ''\n                }`}\n              >\n                <option value=\"\">Select Class</option>\n                {Array.isArray(classesData?.data) &&\n                  classesData.data.map(cls => (\n                    <option key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </option>\n                  ))}\n              </select>\n              {errors.classId && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {errors.classId.message}\n                </p>\n              )}\n            </div>\n          )}\n        />\n        <Controller\n          name=\"sectionId\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Section *\n              </label>\n              <select\n                {...field}\n                disabled={!selectedClass}\n                className={`w-full border rounded-lg px-3 py-2 disabled:bg-gray-100 ${\n                  errors.sectionId ? 'border-red-500' : ''\n                }`}\n              >\n                <option value=\"\">Select Section</option>\n                {Array.isArray(sectionsData?.data) &&\n                  sectionsData.data.map(section => (\n                    <option key={section.id} value={section.id}>\n                      {section.name}\n                    </option>\n                  ))}\n              </select>\n              {errors.sectionId && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {errors.sectionId.message}\n                </p>\n              )}\n            </div>\n          )}\n        />\n        <Controller\n          name=\"rollNumber\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Roll Number *\"\n              {...field}\n              error={errors.rollNumber?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"admissionDate\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Admission Date *\"\n              type=\"date\"\n              {...field}\n              error={errors.admissionDate?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"academicYear\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Academic Year *\"\n              {...field}\n              error={errors.academicYear?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"previousSchool\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Previous School\"\n              {...field}\n              error={errors.previousSchool?.message}\n            />\n          )}\n        />\n        <Controller\n          name=\"categoryId\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Category</label>\n              <select {...field} className=\"w-full border rounded-lg px-3 py-2\">\n                <option value=\"\">Select Category</option>\n                {Array.isArray(categoriesData?.data) &&\n                  categoriesData.data.map(category => (\n                    <option key={category.id} value={category.id}>\n                      {category.name}\n                    </option>\n                  ))}\n              </select>\n            </div>\n          )}\n        />\n        <Controller\n          name=\"houseId\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">House</label>\n              <select {...field} className=\"w-full border rounded-lg px-3 py-2\">\n                <option value=\"\">Select House</option>\n                {housesData?.data?.map(house => (\n                  <option key={house.id} value={house.id}>\n                    {house.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n        />\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Additional Requirements</h3>\n        <div className=\"flex gap-6\">\n          <Controller\n            name=\"transportRequired\"\n            control={control}\n            render={({ field }) => (\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={field.value}\n                  onChange={field.onChange}\n                />\n                Transport Required\n              </label>\n            )}\n          />\n          <Controller\n            name=\"hostelRequired\"\n            control={control}\n            render={({ field }) => (\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={field.value}\n                  onChange={field.onChange}\n                />\n                Hostel Required\n              </label>\n            )}\n          />\n        </div>\n      </div>\n    </div>\n  )\n\n  const renderStep4 = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold\">Guardian Information</h2>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-medium\">Father Details</h3>\n          <Controller\n            name=\"fatherName\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Father Name *\"\n                {...field}\n                error={errors.fatherName?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"fatherOccupation\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Father Occupation\"\n                {...field}\n                error={errors.fatherOccupation?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"fatherMobile\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Father Mobile *\"\n                {...field}\n                error={errors.fatherMobile?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"fatherEmail\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Father Email\"\n                type=\"email\"\n                {...field}\n                error={errors.fatherEmail?.message}\n              />\n            )}\n          />\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-medium\">Mother Details</h3>\n          <Controller\n            name=\"motherName\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Mother Name *\"\n                {...field}\n                error={errors.motherName?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"motherOccupation\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Mother Occupation\"\n                {...field}\n                error={errors.motherOccupation?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"motherMobile\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Mother Mobile *\"\n                {...field}\n                error={errors.motherMobile?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"motherEmail\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Mother Email\"\n                type=\"email\"\n                {...field}\n                error={errors.motherEmail?.message}\n              />\n            )}\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Guardian Details (if different)</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Controller\n            name=\"guardianName\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Guardian Name\"\n                {...field}\n                error={errors.guardianName?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"guardianRelation\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Relation\"\n                {...field}\n                error={errors.guardianRelation?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"guardianMobile\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Guardian Mobile\"\n                {...field}\n                error={errors.guardianMobile?.message}\n              />\n            )}\n          />\n        </div>\n      </div>\n    </div>\n  )\n\n  const renderStep5 = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold\">Documents & Photo</h2>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-medium\">Student Photo</h3>\n          <PhotoCapture photo={photo} onPhotoChange={setPhoto} />\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-medium\">Required Documents</h3>\n          <div className=\"text-sm text-gray-600 space-y-1\">\n            <p>• Birth Certificate</p>\n            <p>• Previous School Transfer Certificate</p>\n            <p>• Previous School Mark Sheet</p>\n            <p>• Aadhar Card Copy</p>\n            <p>• Passport Size Photos</p>\n            <p>• Caste Certificate (if applicable)</p>\n            <p>• Income Certificate (if applicable)</p>\n          </div>\n        </div>\n      </div>\n\n      <DocumentUpload\n        documents={documents}\n        onDocumentAdd={handleDocumentAdd}\n        onDocumentRemove={handleDocumentRemove}\n      />\n    </div>\n  )\n\n  const renderStep6 = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold\">Fee Structure</h2>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Controller\n          name=\"feeStructureId\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Fee Structure *\n              </label>\n              <select\n                {...field}\n                className={`w-full border rounded-lg px-3 py-2 ${\n                  errors.feeStructureId ? 'border-red-500' : ''\n                }`}\n              >\n                <option value=\"\">Select Fee Structure</option>\n                {feeStructuresData?.data?.map(structure => (\n                  <option key={structure.id} value={structure.id}>\n                    {structure.name} - ₹{structure.totalAmount}\n                  </option>\n                ))}\n              </select>\n              {errors.feeStructureId && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {errors.feeStructureId.message}\n                </p>\n              )}\n            </div>\n          )}\n        />\n\n        <Controller\n          name=\"discount\"\n          control={control}\n          render={({ field }) => (\n            <Input\n              label=\"Discount (%)\"\n              type=\"number\"\n              min=\"0\"\n              max=\"100\"\n              {...field}\n              onChange={e => field.onChange(Number(e.target.value))}\n              error={errors.discount?.message}\n            />\n          )}\n        />\n      </div>\n\n      <Controller\n        name=\"scholarshipApplied\"\n        control={control}\n        render={({ field }) => (\n          <label className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              checked={field.value}\n              onChange={field.onChange}\n            />\n            Scholarship Applied\n          </label>\n        )}\n      />\n\n      {/* Fee Summary */}\n      <div className=\"bg-gray-50 p-4 rounded-lg\">\n        <h3 className=\"font-medium mb-2\">Fee Summary</h3>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span>Base Fee:</span>\n            <span>₹10,000</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Discount:</span>\n            <span>-₹500</span>\n          </div>\n          <div className=\"flex justify-between font-medium border-t pt-2\">\n            <span>Total Amount:</span>\n            <span>₹9,500</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Student Admission</h1>\n        <button\n          onClick={() => setShowPreview(true)}\n          className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n        >\n          <Eye className=\"w-4 h-4\" />\n          Preview\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        {renderStepIndicator()}\n\n        <form onSubmit={handleSubmit(onSubmit)}>\n          {currentStep === 1 && renderStep1()}\n          {currentStep === 2 && renderStep2()}\n          {currentStep === 3 && renderStep3()}\n          {currentStep === 4 && renderStep4()}\n          {currentStep === 5 && renderStep5()}\n          {currentStep === 6 && renderStep6()}\n\n          <div className=\"flex justify-between mt-8 pt-6 border-t\">\n            <button\n              type=\"button\"\n              onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n              disabled={currentStep === 1}\n              className=\"border px-6 py-2 rounded-lg hover:bg-gray-50 disabled:opacity-50\"\n            >\n              Previous\n            </button>\n\n            {currentStep < 6 ? (\n              <button\n                type=\"button\"\n                onClick={() => setCurrentStep(Math.min(6, currentStep + 1))}\n                className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700\"\n              >\n                Next\n              </button>\n            ) : (\n              <button\n                type=\"submit\"\n                disabled={admissionMutation.isPending}\n                className=\"bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center gap-2\"\n              >\n                <Save className=\"w-4 h-4\" />\n                {admissionMutation.isPending\n                  ? 'Submitting...'\n                  : 'Submit Admission'}\n              </button>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default StudentAdmission\n"
        }
    ]
}