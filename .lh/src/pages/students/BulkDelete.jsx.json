{
    "sourceFile": "src/pages/students/BulkDelete.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1755994925599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755995169883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   Download,\n   History,\n   Lock,\n } from 'lucide-react'\n-import Table from '../../components/ui/Table'\n+import { Table } from '../../components/ui/Table'\n import Input from '../../components/ui/Input'\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n"
                }
            ],
            "date": 1755994925599,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Trash2,\n  Search,\n  Filter,\n  AlertTriangle,\n  Shield,\n  Key,\n  Eye,\n  EyeOff,\n  CheckCircle,\n  X,\n  User,\n  Calendar,\n  FileText,\n  Clock,\n  Users,\n  Download,\n  History,\n  Lock,\n} from 'lucide-react'\nimport Table from '../../components/ui/Table'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport Pagination from '../../components/ui/Pagination'\nimport { studentsApi } from '../../lib/api/students'\nimport { classesApi } from '../../lib/api/classes'\nimport { sectionsApi } from '../../lib/api/sections'\nimport { auditLogApi } from '../../lib/api/auditLog'\nimport { authApi } from '../../lib/api/auth'\n\n// Validation Schema for Authorization\nconst authorizationSchema = z.object({\n  password: z.string().min(1, 'Password is required'),\n  reason: z.string().min(10, 'Reason must be at least 10 characters'),\n  confirmText: z.string().refine(val => val === 'DELETE STUDENTS', {\n    message: 'You must type \"DELETE STUDENTS\" to confirm',\n  }),\n  backupConfirmed: z.boolean().refine(val => val === true, {\n    message: 'You must confirm that backup has been taken',\n  }),\n  consequencesUnderstood: z.boolean().refine(val => val === true, {\n    message: 'You must acknowledge the consequences',\n  }),\n})\n\nconst DeletionImpactAnalysis = ({ selectedStudents }) => {\n  const { data: impactData, isLoading } = useQuery({\n    queryKey: ['bulkDelete', 'impact', selectedStudents],\n    queryFn: () => studentsApi.analyzeDeletionImpact(selectedStudents),\n    enabled: selectedStudents.length > 0,\n  })\n\n  if (isLoading) return <LoadingSkeleton />\n\n  if (!impactData?.data) return null\n\n  const impact = impactData.data\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-medium text-red-800 flex items-center gap-2\">\n        <AlertTriangle className=\"w-5 h-5\" />\n        Deletion Impact Analysis\n      </h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <h4 className=\"font-medium text-red-800 mb-2\">Direct Impact</h4>\n          <div className=\"space-y-2 text-sm text-red-700\">\n            <div className=\"flex justify-between\">\n              <span>Students to be deleted:</span>\n              <span className=\"font-medium\">{impact.studentsCount}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Academic records:</span>\n              <span className=\"font-medium\">{impact.academicRecords}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Fee records:</span>\n              <span className=\"font-medium\">{impact.feeRecords}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Attendance records:</span>\n              <span className=\"font-medium\">{impact.attendanceRecords}</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n          <h4 className=\"font-medium text-yellow-800 mb-2\">Related Data</h4>\n          <div className=\"space-y-2 text-sm text-yellow-700\">\n            <div className=\"flex justify-between\">\n              <span>Exam results:</span>\n              <span className=\"font-medium\">{impact.examResults}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Library records:</span>\n              <span className=\"font-medium\">{impact.libraryRecords}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Transport records:</span>\n              <span className=\"font-medium\">{impact.transportRecords}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Medical records:</span>\n              <span className=\"font-medium\">{impact.medicalRecords}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {impact.warnings && impact.warnings.length > 0 && (\n        <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n          <h4 className=\"font-medium text-orange-800 mb-2\">Warnings</h4>\n          <ul className=\"space-y-1 text-sm text-orange-700\">\n            {Array.isArray(impact.warnings) &&\n              impact.warnings.map((warning, index) => (\n                <li key={index} className=\"flex items-start gap-2\">\n                  <AlertTriangle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                  <span>{warning}</span>\n                </li>\n              ))}\n          </ul>\n        </div>\n      )}\n\n      {impact.blockers && impact.blockers.length > 0 && (\n        <div className=\"bg-red-100 border border-red-300 rounded-lg p-4\">\n          <h4 className=\"font-medium text-red-800 mb-2\">Deletion Blockers</h4>\n          <ul className=\"space-y-1 text-sm text-red-700\">\n            {Array.isArray(impact.blockers) &&\n              impact.blockers.map((blocker, index) => (\n                <li key={index} className=\"flex items-start gap-2\">\n                  <X className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                  <span>{blocker}</span>\n                </li>\n              ))}\n          </ul>\n          <div className=\"mt-3 p-3 bg-red-200 rounded text-red-800 text-sm\">\n            <strong>Action Required:</strong> These issues must be resolved\n            before deletion can proceed.\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst AuthorizationStep = ({ onAuthorize, isLoading }) => {\n  const [showPassword, setShowPassword] = useState(false)\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(authorizationSchema),\n    mode: 'onChange',\n  })\n\n  const onSubmit = data => {\n    onAuthorize(data)\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Shield className=\"w-8 h-8 text-red-600\" />\n        </div>\n        <h2 className=\"text-xl font-semibold text-red-800\">\n          Authorization Required\n        </h2>\n        <p className=\"text-gray-600 mt-2\">\n          This action requires administrative authorization due to its\n          irreversible nature.\n        </p>\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n        <Controller\n          name=\"password\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Administrator Password *\n              </label>\n              <div className=\"relative\">\n                <input\n                  type={showPassword ? 'text' : 'password'}\n                  {...field}\n                  className={`w-full border rounded-lg px-3 py-2 pr-10 ${\n                    errors.password ? 'border-red-500' : ''\n                  }`}\n                  placeholder=\"Enter your password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"w-4 h-4\" />\n                  ) : (\n                    <Eye className=\"w-4 h-4\" />\n                  )}\n                </button>\n              </div>\n              {errors.password && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {errors.password.message}\n                </p>\n              )}\n            </div>\n          )}\n        />\n\n        <Controller\n          name=\"reason\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Reason for Deletion *\n              </label>\n              <textarea\n                {...field}\n                rows={4}\n                className={`w-full border rounded-lg px-3 py-2 resize-none ${\n                  errors.reason ? 'border-red-500' : ''\n                }`}\n                placeholder=\"Provide a detailed reason for this bulk deletion operation...\"\n              />\n              {errors.reason && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {errors.reason.message}\n                </p>\n              )}\n            </div>\n          )}\n        />\n\n        <Controller\n          name=\"confirmText\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Type \"DELETE STUDENTS\" to confirm *\n              </label>\n              <input\n                type=\"text\"\n                {...field}\n                className={`w-full border rounded-lg px-3 py-2 ${\n                  errors.confirmText ? 'border-red-500' : ''\n                }`}\n                placeholder=\"DELETE STUDENTS\"\n              />\n              {errors.confirmText && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {errors.confirmText.message}\n                </p>\n              )}\n            </div>\n          )}\n        />\n\n        <div className=\"space-y-3\">\n          <Controller\n            name=\"backupConfirmed\"\n            control={control}\n            render={({ field }) => (\n              <label className=\"flex items-start gap-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={field.value}\n                  onChange={field.onChange}\n                  className=\"mt-1\"\n                />\n                <div>\n                  <span className=\"text-sm font-medium\">\n                    I confirm that a complete database backup has been taken\n                  </span>\n                  <p className=\"text-xs text-gray-600 mt-1\">\n                    This backup can be used to restore data if needed\n                  </p>\n                </div>\n              </label>\n            )}\n          />\n          {errors.backupConfirmed && (\n            <p className=\"text-red-500 text-sm\">\n              {errors.backupConfirmed.message}\n            </p>\n          )}\n\n          <Controller\n            name=\"consequencesUnderstood\"\n            control={control}\n            render={({ field }) => (\n              <label className=\"flex items-start gap-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={field.value}\n                  onChange={field.onChange}\n                  className=\"mt-1\"\n                />\n                <div>\n                  <span className=\"text-sm font-medium\">\n                    I understand that this action is irreversible\n                  </span>\n                  <p className=\"text-xs text-gray-600 mt-1\">\n                    All student data and related records will be permanently\n                    deleted\n                  </p>\n                </div>\n              </label>\n            )}\n          />\n          {errors.consequencesUnderstood && (\n            <p className=\"text-red-500 text-sm\">\n              {errors.consequencesUnderstood.message}\n            </p>\n          )}\n        </div>\n\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <div className=\"flex items-start gap-3\">\n            <AlertTriangle className=\"w-5 h-5 text-red-600 mt-0.5 flex-shrink-0\" />\n            <div className=\"text-sm text-red-800\">\n              <p className=\"font-medium mb-1\">\n                Warning: This action cannot be undone\n              </p>\n              <p>\n                Once confirmed, all selected student records and their\n                associated data will be permanently removed from the system.\n                This includes academic records, attendance data, fee\n                information, and all other related information.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3 pt-4\">\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Key className=\"w-4 h-4\" />\n            {isLoading ? 'Authorizing...' : 'Authorize Deletion'}\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nconst AuditLogViewer = ({ operation }) => {\n  const { data: auditLogs, isLoading } = useQuery({\n    queryKey: ['auditLog', 'bulk-delete', operation?.id],\n    queryFn: () => auditLogApi.getOperationLogs('bulk_delete', operation?.id),\n    enabled: !!operation?.id,\n  })\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-medium flex items-center gap-2\">\n        <History className=\"w-5 h-5\" />\n        Operation Audit Log\n      </h3>\n\n      {auditLogs?.data?.length > 0 ? (\n        <div className=\"space-y-3\">\n          {Array.isArray(auditLogs.data) &&\n            auditLogs.data.map((log, index) => (\n              <div key={index} className=\"border rounded-lg p-4\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <p className=\"font-medium\">{log.action}</p>\n                    <p className=\"text-sm text-gray-600\">\n                      By {log.performedBy} on{' '}\n                      {new Date(log.timestamp).toLocaleString()}\n                    </p>\n                  </div>\n                  <span\n                    className={`px-2 py-1 rounded-full text-xs ${\n                      log.severity === 'critical'\n                        ? 'bg-red-100 text-red-800'\n                        : log.severity === 'high'\n                          ? 'bg-orange-100 text-orange-800'\n                          : log.severity === 'medium'\n                            ? 'bg-yellow-100 text-yellow-800'\n                            : 'bg-green-100 text-green-800'\n                    }`}\n                  >\n                    {log.severity}\n                  </span>\n                </div>\n                {log.details && (\n                  <div className=\"text-sm text-gray-700 bg-gray-50 p-2 rounded\">\n                    {log.details}\n                  </div>\n                )}\n                {log.metadata && (\n                  <div className=\"text-xs text-gray-500 mt-2\">\n                    IP: {log.metadata.ipAddress} | Session:{' '}\n                    {log.metadata.sessionId}\n                  </div>\n                )}\n              </div>\n            ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-8 text-gray-500\">\n          <History className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n          <p>No audit logs available</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst BulkDelete = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedClass, setSelectedClass] = useState('')\n  const [selectedSection, setSelectedSection] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [pageSize] = useState(20)\n  const [selectedStudents, setSelectedStudents] = useState([])\n  const [currentStep, setCurrentStep] = useState(1) // 1: Selection, 2: Analysis, 3: Authorization, 4: Execution, 5: Complete\n  const [showAuditLog, setShowAuditLog] = useState(false)\n  const [deletionResult, setDeletionResult] = useState(null)\n\n  const queryClient = useQueryClient()\n\n  const {\n    data: studentsData,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\n      'students',\n      {\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        classId: selectedClass,\n        sectionId: selectedSection,\n      },\n    ],\n    queryFn: () =>\n      studentsApi.getAll({\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        classId: selectedClass,\n        sectionId: selectedSection,\n      }),\n  })\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => classesApi.getAll({ all: true }),\n  })\n\n  const { data: sectionsData } = useQuery({\n    queryKey: ['sections', 'by-class', selectedClass],\n    queryFn: () => sectionsApi.getByClass(selectedClass),\n    enabled: !!selectedClass,\n  })\n\n  const authorizeMutation = useMutation({\n    mutationFn: authApi.verifyAdminPassword,\n    onSuccess: data => {\n      if (data.authorized) {\n        setCurrentStep(4)\n        executeDeletion()\n      }\n    },\n  })\n\n  const deleteMutation = useMutation({\n    mutationFn: studentsApi.bulkDelete,\n    onSuccess: data => {\n      setDeletionResult(data)\n      setCurrentStep(5)\n      queryClient.invalidateQueries(['students'])\n\n      // Log critical audit entry\n      auditLogApi.log({\n        action: 'BULK_DELETE_STUDENTS',\n        entityType: 'student',\n        severity: 'critical',\n        details: `Bulk deleted ${selectedStudents.length} students`,\n        metadata: {\n          studentIds: selectedStudents,\n          deletedCount: data.deletedCount,\n          operationId: data.operationId,\n        },\n      })\n    },\n  })\n\n  const handleAuthorize = authData => {\n    authorizeMutation.mutate({\n      password: authData.password,\n      operation: 'bulk_delete_students',\n      reason: authData.reason,\n      metadata: {\n        studentCount: selectedStudents.length,\n        confirmText: authData.confirmText,\n        backupConfirmed: authData.backupConfirmed,\n        consequencesUnderstood: authData.consequencesUnderstood,\n      },\n    })\n  }\n\n  const executeDeletion = () => {\n    deleteMutation.mutate({\n      studentIds: selectedStudents,\n      reason: 'Bulk deletion operation',\n      performedBy: 'current_user', // This would come from auth context\n    })\n  }\n\n  const handleSelectAll = checked => {\n    if (checked) {\n      setSelectedStudents(studentsData.data.map(student => student.id))\n    } else {\n      setSelectedStudents([])\n    }\n  }\n\n  const handleSelectStudent = (studentId, checked) => {\n    if (checked) {\n      setSelectedStudents([...selectedStudents, studentId])\n    } else {\n      setSelectedStudents(selectedStudents.filter(id => id !== studentId))\n    }\n  }\n\n  const resetOperation = () => {\n    setCurrentStep(1)\n    setSelectedStudents([])\n    setDeletionResult(null)\n  }\n\n  const columns = [\n    {\n      key: 'select',\n      header: (\n        <input\n          type=\"checkbox\"\n          checked={\n            selectedStudents.length === studentsData?.data?.length &&\n            studentsData?.data?.length > 0\n          }\n          onChange={e => handleSelectAll(e.target.checked)}\n        />\n      ),\n      render: student => (\n        <input\n          type=\"checkbox\"\n          checked={selectedStudents.includes(student.id)}\n          onChange={e => handleSelectStudent(student.id, e.target.checked)}\n        />\n      ),\n    },\n    {\n      key: 'student',\n      header: 'Student',\n      render: student => (\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 rounded-full overflow-hidden bg-gray-200\">\n            {student.photo ? (\n              <img\n                src={student.photo}\n                alt={student.name}\n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-full h-full flex items-center justify-center\">\n                <User className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            )}\n          </div>\n          <div>\n            <p className=\"font-medium\">{student.name}</p>\n            <p className=\"text-sm text-gray-500\">{student.rollNumber}</p>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'class',\n      header: 'Class',\n      render: student => `${student.class?.name} - ${student.section?.name}`,\n    },\n    { key: 'fatherName', header: 'Father Name' },\n    { key: 'mobile', header: 'Mobile' },\n    {\n      key: 'admissionDate',\n      header: 'Admission Date',\n      render: student => new Date(student.admissionDate).toLocaleDateString(),\n    },\n    {\n      key: 'status',\n      header: 'Status',\n      render: student => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${\n            student.isActive\n              ? 'bg-green-100 text-green-800'\n              : 'bg-red-100 text-red-800'\n          }`}\n        >\n          {student.isActive ? 'Active' : 'Inactive'}\n        </span>\n      ),\n    },\n  ]\n\n  const renderStepIndicator = () => (\n    <div className=\"flex items-center justify-center mb-8\">\n      {[\n        { number: 1, title: 'Select Students', icon: Users },\n        { number: 2, title: 'Impact Analysis', icon: AlertTriangle },\n        { number: 3, title: 'Authorization', icon: Shield },\n        { number: 4, title: 'Execution', icon: Trash2 },\n        { number: 5, title: 'Complete', icon: CheckCircle },\n      ].map((step, index) => (\n        <div key={step.number} className=\"flex items-center\">\n          <div\n            className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n              currentStep >= step.number\n                ? 'bg-red-600 border-red-600 text-white'\n                : 'border-gray-300 text-gray-400'\n            }`}\n          >\n            {currentStep > step.number ? (\n              <CheckCircle className=\"w-5 h-5\" />\n            ) : (\n              <step.icon className=\"w-5 h-5\" />\n            )}\n          </div>\n          <div className=\"ml-2 text-sm font-medium\">{step.title}</div>\n          {index < 4 && (\n            <div\n              className={`w-8 h-0.5 mx-4 ${\n                currentStep > step.number ? 'bg-red-600' : 'bg-gray-300'\n              }`}\n            />\n          )}\n        </div>\n      ))}\n    </div>\n  )\n\n  if (isLoading) return <LoadingSkeleton />\n  if (error) return <ErrorState message=\"Failed to load students data\" />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-red-800\">\n            Bulk Delete Students\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Permanently remove multiple student records from the system\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          {currentStep > 1 && (\n            <button\n              onClick={resetOperation}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n            >\n              <X className=\"w-4 h-4\" />\n              Cancel Operation\n            </button>\n          )}\n          {deletionResult && (\n            <button\n              onClick={() => setShowAuditLog(true)}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n            >\n              <History className=\"w-4 h-4\" />\n              View Audit Log\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Security Warning */}\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n        <div className=\"flex items-start gap-3\">\n          <Lock className=\"w-6 h-6 text-red-600 mt-0.5 flex-shrink-0\" />\n          <div>\n            <h3 className=\"font-medium text-red-800\">\n              High-Security Operation\n            </h3>\n            <p className=\"text-red-700 text-sm mt-1\">\n              This operation requires multi-step authorization and will\n              permanently delete student data. All actions are logged and\n              monitored for security compliance.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {renderStepIndicator()}\n\n      {/* Step 1: Student Selection */}\n      {currentStep === 1 && (\n        <div className=\"space-y-6\">\n          {/* Filters */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"md:col-span-2\">\n                <Input\n                  placeholder=\"Search students...\"\n                  value={searchTerm}\n                  onChange={e => setSearchTerm(e.target.value)}\n                  icon={Search}\n                />\n              </div>\n              <div>\n                <select\n                  value={selectedClass}\n                  onChange={e => {\n                    setSelectedClass(e.target.value)\n                    setSelectedSection('')\n                  }}\n                  className=\"w-full border rounded-lg px-3 py-2\"\n                >\n                  <option value=\"\">All Classes</option>\n                  {Array.isArray(classesData?.data) &&\n                    classesData.data.map(cls => (\n                      <option key={cls.id} value={cls.id}>\n                        {cls.name}\n                      </option>\n                    ))}\n                </select>\n              </div>\n              <div>\n                <select\n                  value={selectedSection}\n                  onChange={e => setSelectedSection(e.target.value)}\n                  disabled={!selectedClass}\n                  className=\"w-full border rounded-lg px-3 py-2 disabled:bg-gray-100\"\n                >\n                  <option value=\"\">All Sections</option>\n                  {Array.isArray(sectionsData?.data) &&\n                    sectionsData.data.map(section => (\n                      <option key={section.id} value={section.id}>\n                        {section.name}\n                      </option>\n                    ))}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* Selection Summary */}\n          {selectedStudents.length > 0 && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex items-center gap-2\">\n                  <Trash2 className=\"w-5 h-5 text-red-600\" />\n                  <span className=\"font-medium text-red-800\">\n                    {selectedStudents.length} students selected for deletion\n                  </span>\n                </div>\n                <button\n                  onClick={() => setCurrentStep(2)}\n                  className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 flex items-center gap-2\"\n                >\n                  Proceed to Analysis\n                  <AlertTriangle className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* Students Table */}\n          <div className=\"bg-white rounded-lg shadow\">\n            {studentsData?.data?.length === 0 ? (\n              <EmptyState\n                title=\"No students found\"\n                description=\"No students match your current filters\"\n              />\n            ) : (\n              <>\n                <Table data={studentsData?.data || []} columns={columns} />\n                <div className=\"p-6 border-t\">\n                  <Pagination\n                    currentPage={currentPage}\n                    totalPages={Math.ceil(\n                      (studentsData?.total || 0) / pageSize,\n                    )}\n                    onPageChange={setCurrentPage}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Step 2: Impact Analysis */}\n      {currentStep === 2 && (\n        <div className=\"space-y-6\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <DeletionImpactAnalysis selectedStudents={selectedStudents} />\n\n            <div className=\"flex justify-between mt-6 pt-6 border-t\">\n              <button\n                onClick={() => setCurrentStep(1)}\n                className=\"border px-6 py-2 rounded-lg hover:bg-gray-50\"\n              >\n                Back to Selection\n              </button>\n              <button\n                onClick={() => setCurrentStep(3)}\n                className=\"bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 flex items-center gap-2\"\n              >\n                Proceed to Authorization\n                <Shield className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Step 3: Authorization */}\n      {currentStep === 3 && (\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <AuthorizationStep\n            onAuthorize={handleAuthorize}\n            isLoading={authorizeMutation.isPending}\n          />\n        </div>\n      )}\n\n      {/* Step 4: Execution */}\n      {currentStep === 4 && (\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              {deleteMutation.isPending ? (\n                <Clock className=\"w-8 h-8 text-red-600 animate-spin\" />\n              ) : (\n                <Trash2 className=\"w-8 h-8 text-red-600\" />\n              )}\n            </div>\n            <h2 className=\"text-xl font-semibold text-red-800\">\n              {deleteMutation.isPending\n                ? 'Deleting Students...'\n                : 'Executing Deletion'}\n            </h2>\n            <p className=\"text-gray-600 mt-2\">\n              {deleteMutation.isPending\n                ? 'Please wait while we process the deletion. This may take a few minutes.'\n                : 'The deletion process is about to begin.'}\n            </p>\n            {deleteMutation.isPending && (\n              <div className=\"mt-4\">\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div\n                    className=\"bg-red-600 h-2 rounded-full animate-pulse\"\n                    style={{ width: '60%' }}\n                  ></div>\n                </div>\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  Processing student records...\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Step 5: Complete */}\n      {currentStep === 5 && deletionResult && (\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <h2 className=\"text-xl font-semibold text-green-800\">\n              Deletion Completed\n            </h2>\n            <p className=\"text-gray-600 mt-2\">\n              The bulk deletion operation has been completed successfully.\n            </p>\n          </div>\n\n          <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">\n                {deletionResult.deletedCount}\n              </p>\n              <p className=\"text-sm text-green-800\">Students Deleted</p>\n            </div>\n            <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">\n                {deletionResult.recordsRemoved}\n              </p>\n              <p className=\"text-sm text-blue-800\">Records Removed</p>\n            </div>\n            <div className=\"bg-purple-50 p-4 rounded-lg text-center\">\n              <p className=\"text-2xl font-bold text-purple-600\">\n                {deletionResult.backupSize}\n              </p>\n              <p className=\"text-sm text-purple-800\">Backup Size (MB)</p>\n            </div>\n          </div>\n\n          <div className=\"mt-6 bg-gray-50 p-4 rounded-lg\">\n            <h3 className=\"font-medium mb-2\">Operation Details</h3>\n            <div className=\"text-sm text-gray-700 space-y-1\">\n              <p>\n                <strong>Operation ID:</strong> {deletionResult.operationId}\n              </p>\n              <p>\n                <strong>Completed At:</strong>{' '}\n                {new Date(deletionResult.completedAt).toLocaleString()}\n              </p>\n              <p>\n                <strong>Backup Location:</strong> {deletionResult.backupPath}\n              </p>\n              <p>\n                <strong>Recovery Window:</strong> 30 days (contact system\n                administrator)\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex justify-center gap-4 mt-6\">\n            <button\n              onClick={() => setShowAuditLog(true)}\n              className=\"border px-6 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n            >\n              <History className=\"w-4 h-4\" />\n              View Audit Log\n            </button>\n            <button\n              onClick={resetOperation}\n              className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700\"\n            >\n              Start New Operation\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Audit Log Dialog */}\n      <Dialog\n        open={showAuditLog}\n        onClose={() => setShowAuditLog(false)}\n        title=\"Bulk Delete Audit Log\"\n        size=\"lg\"\n      >\n        <AuditLogViewer operation={deletionResult} />\n      </Dialog>\n    </div>\n  )\n}\n\nexport default BulkDelete\n"
        }
    ]
}