{
    "sourceFile": "src/pages/students/OnlineAdmission.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1755994925599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755995169882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   MessageSquare,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n-import Table from '../../components/ui/Table'\n+import { Table } from '../../components/ui/Table'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n"
                }
            ],
            "date": 1755994925599,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Send,\n  Eye,\n  Check,\n  X,\n  Clock,\n  FileText,\n  User,\n  Phone,\n  Mail,\n  Calendar,\n  GraduationCap,\n  AlertTriangle,\n  Download,\n  MessageSquare,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport Table from '../../components/ui/Table'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport Pagination from '../../components/ui/Pagination'\nimport { onlineAdmissionApi } from '../../lib/api/onlineAdmission'\nimport { classesApi } from '../../lib/api/classes'\n\n// Public Form Schema\nconst publicAdmissionSchema = z.object({\n  studentName: z.string().min(1, 'Student name is required'),\n  dateOfBirth: z.string().min(1, 'Date of birth is required'),\n  gender: z.enum(['male', 'female', 'other'], {\n    required_error: 'Gender is required',\n  }),\n  classAppliedFor: z.string().min(1, 'Class is required'),\n\n  fatherName: z.string().min(1, 'Father name is required'),\n  fatherMobile: z.string().min(10, 'Valid mobile number is required'),\n  fatherEmail: z.string().email('Valid email is required'),\n  fatherOccupation: z.string().optional(),\n\n  motherName: z.string().min(1, 'Mother name is required'),\n  motherMobile: z.string().min(10, 'Valid mobile number is required'),\n  motherEmail: z.string().email().optional().or(z.literal('')),\n  motherOccupation: z.string().optional(),\n\n  currentAddress: z.string().min(1, 'Address is required'),\n  city: z.string().min(1, 'City is required'),\n  state: z.string().min(1, 'State is required'),\n  pincode: z.string().min(6, 'Valid pincode is required'),\n\n  previousSchool: z.string().optional(),\n  previousClass: z.string().optional(),\n\n  additionalInfo: z.string().optional(),\n})\n\n// Public Admission Form Component\nconst PublicAdmissionForm = ({ onSubmit, isSubmitting }) => {\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(publicAdmissionSchema),\n    mode: 'onChange',\n  })\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'public'],\n    queryFn: () => classesApi.getPublicClasses(),\n  })\n\n  return (\n    <div className=\"max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-8\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Online Admission Form\n        </h1>\n        <p className=\"text-gray-600\">\n          Please fill in all the required information carefully\n        </p>\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-8\">\n        {/* Student Information */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 border-b pb-2\">\n            Student Information\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Controller\n              name=\"studentName\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Student Name *\"\n                  {...field}\n                  error={errors.studentName?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"dateOfBirth\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Date of Birth *\"\n                  type=\"date\"\n                  {...field}\n                  error={errors.dateOfBirth?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"gender\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Gender *\n                  </label>\n                  <select\n                    {...field}\n                    className={`w-full border rounded-lg px-3 py-2 ${\n                      errors.gender ? 'border-red-500' : ''\n                    }`}\n                  >\n                    <option value=\"\">Select Gender</option>\n                    <option value=\"male\">Male</option>\n                    <option value=\"female\">Female</option>\n                    <option value=\"other\">Other</option>\n                  </select>\n                  {errors.gender && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {errors.gender.message}\n                    </p>\n                  )}\n                </div>\n              )}\n            />\n            <Controller\n              name=\"classAppliedFor\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Class Applied For *\n                  </label>\n                  <select\n                    {...field}\n                    className={`w-full border rounded-lg px-3 py-2 ${\n                      errors.classAppliedFor ? 'border-red-500' : ''\n                    }`}\n                  >\n                    <option value=\"\">Select Class</option>\n                    {Array.isArray(classesData?.data) &&\n                      classesData.data.map(cls => (\n                        <option key={cls.id} value={cls.id}>\n                          {cls.name}\n                        </option>\n                      ))}\n                  </select>\n                  {errors.classAppliedFor && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {errors.classAppliedFor.message}\n                    </p>\n                  )}\n                </div>\n              )}\n            />\n          </div>\n        </div>\n\n        {/* Father Information */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 border-b pb-2\">\n            Father Information\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Controller\n              name=\"fatherName\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Father Name *\"\n                  {...field}\n                  error={errors.fatherName?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"fatherMobile\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Father Mobile *\"\n                  {...field}\n                  error={errors.fatherMobile?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"fatherEmail\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Father Email *\"\n                  type=\"email\"\n                  {...field}\n                  error={errors.fatherEmail?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"fatherOccupation\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Father Occupation\"\n                  {...field}\n                  error={errors.fatherOccupation?.message}\n                />\n              )}\n            />\n          </div>\n        </div>\n\n        {/* Mother Information */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 border-b pb-2\">\n            Mother Information\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Controller\n              name=\"motherName\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Mother Name *\"\n                  {...field}\n                  error={errors.motherName?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"motherMobile\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Mother Mobile *\"\n                  {...field}\n                  error={errors.motherMobile?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"motherEmail\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Mother Email\"\n                  type=\"email\"\n                  {...field}\n                  error={errors.motherEmail?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"motherOccupation\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Mother Occupation\"\n                  {...field}\n                  error={errors.motherOccupation?.message}\n                />\n              )}\n            />\n          </div>\n        </div>\n\n        {/* Address Information */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 border-b pb-2\">\n            Address Information\n          </h2>\n          <Controller\n            name=\"currentAddress\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Current Address *\"\n                multiline\n                rows={3}\n                {...field}\n                error={errors.currentAddress?.message}\n              />\n            )}\n          />\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Controller\n              name=\"city\"\n              control={control}\n              render={({ field }) => (\n                <Input label=\"City *\" {...field} error={errors.city?.message} />\n              )}\n            />\n            <Controller\n              name=\"state\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"State *\"\n                  {...field}\n                  error={errors.state?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"pincode\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Pincode *\"\n                  {...field}\n                  error={errors.pincode?.message}\n                />\n              )}\n            />\n          </div>\n        </div>\n\n        {/* Previous School Information */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 border-b pb-2\">\n            Previous School Information\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Controller\n              name=\"previousSchool\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Previous School Name\"\n                  {...field}\n                  error={errors.previousSchool?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"previousClass\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Previous Class\"\n                  {...field}\n                  error={errors.previousClass?.message}\n                />\n              )}\n            />\n          </div>\n        </div>\n\n        {/* Additional Information */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 border-b pb-2\">\n            Additional Information\n          </h2>\n          <Controller\n            name=\"additionalInfo\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Additional Information (Optional)\"\n                multiline\n                rows={4}\n                placeholder=\"Any additional information you would like to share...\"\n                {...field}\n                error={errors.additionalInfo?.message}\n              />\n            )}\n          />\n        </div>\n\n        {/* Terms and Conditions */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"font-medium mb-2\">Terms and Conditions</h3>\n          <ul className=\"text-sm text-gray-600 space-y-1\">\n            <li>• All information provided must be accurate and complete</li>\n            <li>• Documents will be verified during the admission process</li>\n            <li>• Admission is subject to availability and school policies</li>\n            <li>• The school reserves the right to reject any application</li>\n          </ul>\n          <label className=\"flex items-center gap-2 mt-4\">\n            <input type=\"checkbox\" required className=\"rounded\" />\n            <span className=\"text-sm\">I agree to the terms and conditions</span>\n          </label>\n        </div>\n\n        <div className=\"text-center\">\n          <button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2 mx-auto\"\n          >\n            <Send className=\"w-5 h-5\" />\n            {isSubmitting ? 'Submitting...' : 'Submit Application'}\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\n// Admin Review Queue Component\nconst AdminReviewQueue = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n  const [pageSize] = useState(10)\n  const [statusFilter, setStatusFilter] = useState('')\n  const [selectedApplication, setSelectedApplication] = useState(null)\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n  const [showRejectDialog, setShowRejectDialog] = useState(false)\n  const [rejectReason, setRejectReason] = useState('')\n\n  const queryClient = useQueryClient()\n\n  const { data: applicationsData, isLoading } = useQuery({\n    queryKey: [\n      'onlineAdmissions',\n      { page: currentPage, pageSize, status: statusFilter },\n    ],\n    queryFn: () =>\n      onlineAdmissionApi.getApplications({\n        page: currentPage,\n        pageSize,\n        status: statusFilter,\n      }),\n  })\n\n  const approveMutation = useMutation({\n    mutationFn: onlineAdmissionApi.approveApplication,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['onlineAdmissions'])\n    },\n  })\n\n  const rejectMutation = useMutation({\n    mutationFn: ({ id, reason }) =>\n      onlineAdmissionApi.rejectApplication(id, reason),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['onlineAdmissions'])\n      setShowRejectDialog(false)\n      setRejectReason('')\n    },\n  })\n\n  const handleApprove = application => {\n    if (window.confirm('Are you sure you want to approve this application?')) {\n      approveMutation.mutate(application.id)\n    }\n  }\n\n  const handleReject = application => {\n    setSelectedApplication(application)\n    setShowRejectDialog(true)\n  }\n\n  const handleRejectSubmit = () => {\n    if (!rejectReason.trim()) {\n      alert('Please provide a reason for rejection')\n      return\n    }\n    rejectMutation.mutate({\n      id: selectedApplication.id,\n      reason: rejectReason,\n    })\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'approved':\n        return 'bg-green-100 text-green-800'\n      case 'rejected':\n        return 'bg-red-100 text-red-800'\n      case 'under_review':\n        return 'bg-blue-100 text-blue-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const columns = [\n    { key: 'applicationId', header: 'App ID', sortable: true },\n    { key: 'studentName', header: 'Student Name', sortable: true },\n    {\n      key: 'classAppliedFor',\n      header: 'Class',\n      render: app => app.class?.name || app.classAppliedFor,\n    },\n    { key: 'fatherName', header: 'Father Name' },\n    { key: 'fatherMobile', header: 'Mobile' },\n    {\n      key: 'submittedAt',\n      header: 'Submitted',\n      render: app => new Date(app.submittedAt).toLocaleDateString(),\n    },\n    {\n      key: 'status',\n      header: 'Status',\n      render: app => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${getStatusColor(app.status)}`}\n        >\n          {app.status.replace('_', ' ').toUpperCase()}\n        </span>\n      ),\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      render: app => (\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => {\n              setSelectedApplication(app)\n              setShowDetailsDialog(true)\n            }}\n            className=\"text-blue-600 hover:text-blue-800\"\n            title=\"View Details\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          {app.status === 'pending' && (\n            <>\n              <button\n                onClick={() => handleApprove(app)}\n                className=\"text-green-600 hover:text-green-800\"\n                title=\"Approve\"\n                disabled={approveMutation.isPending}\n              >\n                <Check className=\"w-4 h-4\" />\n              </button>\n              <button\n                onClick={() => handleReject(app)}\n                className=\"text-red-600 hover:text-red-800\"\n                title=\"Reject\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            </>\n          )}\n        </div>\n      ),\n    },\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold\">Online Admission Applications</h2>\n        <div className=\"flex gap-2\">\n          <select\n            value={statusFilter}\n            onChange={e => setStatusFilter(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"\">All Status</option>\n            <option value=\"pending\">Pending</option>\n            <option value=\"under_review\">Under Review</option>\n            <option value=\"approved\">Approved</option>\n            <option value=\"rejected\">Rejected</option>\n          </select>\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">24</p>\n              <p className=\"text-sm text-gray-600\">Pending</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Eye className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">12</p>\n              <p className=\"text-sm text-gray-600\">Under Review</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Check className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">156</p>\n              <p className=\"text-sm text-gray-600\">Approved</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <X className=\"w-8 h-8 text-red-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">8</p>\n              <p className=\"text-sm text-gray-600\">Rejected</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Applications Table */}\n      <div className=\"bg-white rounded-lg shadow\">\n        {applicationsData?.data?.length === 0 ? (\n          <EmptyState\n            title=\"No applications found\"\n            description=\"No online admission applications match your current filters\"\n          />\n        ) : (\n          <>\n            <Table data={applicationsData?.data || []} columns={columns} />\n            <div className=\"p-6 border-t\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={Math.ceil(\n                  (applicationsData?.total || 0) / pageSize,\n                )}\n                onPageChange={setCurrentPage}\n              />\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Application Details Dialog */}\n      <Dialog\n        open={showDetailsDialog}\n        onClose={() => setShowDetailsDialog(false)}\n        title=\"Application Details\"\n        size=\"lg\"\n      >\n        {selectedApplication && (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-medium mb-3\">Student Information</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Name:</span>\n                    <span>{selectedApplication.studentName}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Date of Birth:</span>\n                    <span>\n                      {new Date(\n                        selectedApplication.dateOfBirth,\n                      ).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Gender:</span>\n                    <span className=\"capitalize\">\n                      {selectedApplication.gender}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Class Applied:</span>\n                    <span>\n                      {selectedApplication.class?.name ||\n                        selectedApplication.classAppliedFor}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-medium mb-3\">Contact Information</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Father:</span>\n                    <span>{selectedApplication.fatherName}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Father Mobile:</span>\n                    <span>{selectedApplication.fatherMobile}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Father Email:</span>\n                    <span>{selectedApplication.fatherEmail}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Mother:</span>\n                    <span>{selectedApplication.motherName}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"font-medium mb-3\">Address</h3>\n              <p className=\"text-sm text-gray-700\">\n                {selectedApplication.currentAddress}\n              </p>\n              <p className=\"text-sm text-gray-700\">\n                {selectedApplication.city}, {selectedApplication.state} -{' '}\n                {selectedApplication.pincode}\n              </p>\n            </div>\n\n            {selectedApplication.additionalInfo && (\n              <div>\n                <h3 className=\"font-medium mb-3\">Additional Information</h3>\n                <p className=\"text-sm text-gray-700\">\n                  {selectedApplication.additionalInfo}\n                </p>\n              </div>\n            )}\n\n            <div className=\"flex justify-end gap-2 pt-4 border-t\">\n              <button\n                onClick={() => setShowDetailsDialog(false)}\n                className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n              >\n                Close\n              </button>\n              {selectedApplication.status === 'pending' && (\n                <>\n                  <button\n                    onClick={() => {\n                      handleApprove(selectedApplication)\n                      setShowDetailsDialog(false)\n                    }}\n                    className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700\"\n                  >\n                    Approve\n                  </button>\n                  <button\n                    onClick={() => {\n                      setShowDetailsDialog(false)\n                      handleReject(selectedApplication)\n                    }}\n                    className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700\"\n                  >\n                    Reject\n                  </button>\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </Dialog>\n\n      {/* Reject Dialog */}\n      <Dialog\n        open={showRejectDialog}\n        onClose={() => setShowRejectDialog(false)}\n        title=\"Reject Application\"\n      >\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2 text-red-600\">\n            <AlertTriangle className=\"w-5 h-5\" />\n            <span className=\"font-medium\">Reject Application</span>\n          </div>\n          <p className=\"text-gray-600\">\n            Please provide a reason for rejecting this application. This will be\n            communicated to the applicant.\n          </p>\n          <textarea\n            value={rejectReason}\n            onChange={e => setRejectReason(e.target.value)}\n            placeholder=\"Enter rejection reason...\"\n            className=\"w-full border rounded-lg px-3 py-2 h-24 resize-none\"\n          />\n          <div className=\"flex justify-end gap-2\">\n            <button\n              onClick={() => setShowRejectDialog(false)}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleRejectSubmit}\n              disabled={rejectMutation.isPending}\n              className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 disabled:opacity-50\"\n            >\n              {rejectMutation.isPending ? 'Rejecting...' : 'Reject Application'}\n            </button>\n          </div>\n        </div>\n      </Dialog>\n    </div>\n  )\n}\n\nconst OnlineAdmission = () => {\n  const [viewMode, setViewMode] = useState('public') // 'public' or 'admin'\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false)\n\n  const submitApplicationMutation = useMutation({\n    mutationFn: onlineAdmissionApi.submitApplication,\n    onSuccess: () => {\n      setShowSuccessMessage(true)\n    },\n  })\n\n  const handlePublicSubmit = data => {\n    submitApplicationMutation.mutate(data)\n  }\n\n  if (showSuccessMessage) {\n    return (\n      <div className=\"max-w-2xl mx-auto text-center py-12\">\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-8\">\n          <Check className=\"w-16 h-16 text-green-600 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-green-800 mb-2\">\n            Application Submitted Successfully!\n          </h2>\n          <p className=\"text-green-700 mb-4\">\n            Thank you for your application. We have received your information\n            and will review it shortly.\n          </p>\n          <p className=\"text-green-600 text-sm mb-6\">\n            You will receive an email confirmation with your application ID and\n            further instructions.\n          </p>\n          <button\n            onClick={() => {\n              setShowSuccessMessage(false)\n              setViewMode('public')\n            }}\n            className=\"bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700\"\n          >\n            Submit Another Application\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* View Mode Toggle (for demo purposes) */}\n      <div className=\"flex justify-center\">\n        <div className=\"flex border rounded-lg\">\n          <button\n            onClick={() => setViewMode('public')}\n            className={`px-4 py-2 text-sm ${\n              viewMode === 'public'\n                ? 'bg-blue-600 text-white'\n                : 'text-gray-600 hover:bg-gray-50'\n            }`}\n          >\n            Public Form\n          </button>\n          <button\n            onClick={() => setViewMode('admin')}\n            className={`px-4 py-2 text-sm ${\n              viewMode === 'admin'\n                ? 'bg-blue-600 text-white'\n                : 'text-gray-600 hover:bg-gray-50'\n            }`}\n          >\n            Admin Review\n          </button>\n        </div>\n      </div>\n\n      {viewMode === 'public' ? (\n        <PublicAdmissionForm\n          onSubmit={handlePublicSubmit}\n          isSubmitting={submitApplicationMutation.isPending}\n        />\n      ) : (\n        <AdminReviewQueue />\n      )}\n    </div>\n  )\n}\n\nexport default OnlineAdmission\n"
        }
    ]
}