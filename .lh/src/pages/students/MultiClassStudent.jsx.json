{
    "sourceFile": "src/pages/students/MultiClassStudent.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755994925599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755995171510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   X,\n   Save,\n   History,\n } from 'lucide-react'\n-import Table from '../../components/ui/Table'\n+import { Table } from '../../components/ui/Table'\n import Input from '../../components/ui/Input'\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n"
                },
                {
                    "date": 1756039695824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n-import Dropdown from '../../components/ui/Dropdown'\n+import { Dropdown } from '../../components/ui/Dropdown'\n import { multiClassStudentApi } from '../../lib/api/multiClassStudent'\n import { studentsApi } from '../../lib/api/students'\n import { classesApi } from '../../lib/api/classes'\n import { sectionsApi } from '../../lib/api/sections'\n"
                }
            ],
            "date": 1755994925599,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Edit,\n  Eye,\n  Trash2,\n  Users,\n  BookOpen,\n  Calendar,\n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  User,\n  GraduationCap,\n  ArrowRight,\n  X,\n  Save,\n  History,\n} from 'lucide-react'\nimport Table from '../../components/ui/Table'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport Pagination from '../../components/ui/Pagination'\nimport Dropdown from '../../components/ui/Dropdown'\nimport { multiClassStudentApi } from '../../lib/api/multiClassStudent'\nimport { studentsApi } from '../../lib/api/students'\nimport { classesApi } from '../../lib/api/classes'\nimport { sectionsApi } from '../../lib/api/sections'\nimport { subjectsApi } from '../../lib/api/subjects'\nimport { auditLogApi } from '../../lib/api/auditLog'\n\n// Validation Schema\nconst multiClassEnrollmentSchema = z.object({\n  studentId: z.string().min(1, 'Student is required'),\n  primaryClassId: z.string().min(1, 'Primary class is required'),\n  primarySectionId: z.string().min(1, 'Primary section is required'),\n  enrollments: z\n    .array(\n      z.object({\n        classId: z.string().min(1, 'Class is required'),\n        sectionId: z.string().min(1, 'Section is required'),\n        subjectIds: z\n          .array(z.string())\n          .min(1, 'At least one subject is required'),\n        enrollmentType: z.enum(\n          ['elective', 'advanced', 'remedial', 'special'],\n          {\n            required_error: 'Enrollment type is required',\n          },\n        ),\n        startDate: z.string().min(1, 'Start date is required'),\n        endDate: z.string().optional(),\n        isActive: z.boolean().default(true),\n      }),\n    )\n    .min(1, 'At least one enrollment is required'),\n  reason: z.string().min(1, 'Reason for multi-class enrollment is required'),\n  approvedBy: z.string().min(1, 'Approval authority is required'),\n  approvalDate: z.string().min(1, 'Approval date is required'),\n  parentConsent: z.boolean().refine(val => val === true, {\n    message: 'Parent consent is required',\n  }),\n  isActive: z.boolean().default(true),\n})\n\nconst EnrollmentCard = ({ enrollment, onEdit, onRemove }) => {\n  const getTypeColor = type => {\n    switch (type) {\n      case 'elective':\n        return 'bg-blue-100 text-blue-800'\n      case 'advanced':\n        return 'bg-green-100 text-green-800'\n      case 'remedial':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'special':\n        return 'bg-purple-100 text-purple-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  return (\n    <div className=\"border rounded-lg p-4 space-y-3\">\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h4 className=\"font-medium\">\n            {enrollment.class?.name} - {enrollment.section?.name}\n          </h4>\n          <span\n            className={`px-2 py-1 rounded-full text-xs ${getTypeColor(enrollment.enrollmentType)}`}\n          >\n            {enrollment.enrollmentType?.charAt(0).toUpperCase() +\n              enrollment.enrollmentType?.slice(1)}\n          </span>\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onEdit(enrollment)}\n            className=\"text-blue-600 hover:text-blue-800\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onRemove(enrollment)}\n            className=\"text-red-600 hover:text-red-800\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <div className=\"text-sm\">\n          <span className=\"text-gray-600\">Subjects:</span>\n          <div className=\"flex flex-wrap gap-1 mt-1\">\n            {enrollment.subjects?.map(subject => (\n              <span\n                key={subject.id}\n                className=\"px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded\"\n              >\n                {subject.name}\n              </span>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"text-sm text-gray-600\">\n          <span>Period: </span>\n          {new Date(enrollment.startDate).toLocaleDateString()} -\n          {enrollment.endDate\n            ? new Date(enrollment.endDate).toLocaleDateString()\n            : 'Ongoing'}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst TimetableConflictChecker = ({ studentId, enrollments }) => {\n  const { data: conflicts, isLoading } = useQuery({\n    queryKey: ['multiClass', 'conflicts', studentId, enrollments],\n    queryFn: () =>\n      multiClassStudentApi.checkTimetableConflicts(studentId, enrollments),\n    enabled: !!studentId && enrollments.length > 0,\n  })\n\n  if (isLoading)\n    return <div className=\"text-sm text-gray-500\">Checking conflicts...</div>\n\n  if (!conflicts?.data || conflicts.data.length === 0) {\n    return (\n      <div className=\"flex items-center gap-2 text-green-600 text-sm\">\n        <CheckCircle className=\"w-4 h-4\" />\n        No timetable conflicts detected\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center gap-2 text-red-600 text-sm font-medium\">\n        <AlertTriangle className=\"w-4 h-4\" />\n        Timetable Conflicts Detected\n      </div>\n      <div className=\"space-y-1\">\n        {Array.isArray(conflicts.data) &&\n          conflicts.data.map((conflict, index) => (\n            <div\n              key={index}\n              className=\"text-sm text-red-600 bg-red-50 p-2 rounded\"\n            >\n              {conflict.message}\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nconst StudentScheduleView = ({ student, isOpen, onClose }) => {\n  const { data: scheduleData, isLoading } = useQuery({\n    queryKey: ['multiClass', 'schedule', student?.id],\n    queryFn: () => multiClassStudentApi.getStudentSchedule(student.id),\n    enabled: !!student?.id && isOpen,\n  })\n\n  if (!student) return null\n\n  const DAYS = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ]\n  const PERIODS = [\n    { id: 1, name: 'Period 1', time: '08:00-08:45' },\n    { id: 2, name: 'Period 2', time: '08:45-09:30' },\n    { id: 3, name: 'Period 3', time: '09:30-10:15' },\n    { id: 4, name: 'Break', time: '10:15-10:30', isBreak: true },\n    { id: 5, name: 'Period 4', time: '10:30-11:15' },\n    { id: 6, name: 'Period 5', time: '11:15-12:00' },\n    { id: 7, name: 'Period 6', time: '12:00-12:45' },\n    { id: 8, name: 'Lunch', time: '12:45-13:30', isBreak: true },\n    { id: 9, name: 'Period 7', time: '13:30-14:15' },\n    { id: 10, name: 'Period 8', time: '14:15-15:00' },\n  ]\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={onClose}\n      title={`${student.name} - Multi-Class Schedule`}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6\">\n        {/* Student Info */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-12 h-12 rounded-full overflow-hidden bg-gray-200\">\n              {student.photo ? (\n                <img\n                  src={student.photo}\n                  alt={student.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <User className=\"w-6 h-6 text-gray-400 m-3\" />\n              )}\n            </div>\n            <div>\n              <h3 className=\"font-semibold\">{student.name}</h3>\n              <p className=\"text-sm text-gray-600\">\n                Primary: {student.primaryClass?.name} -{' '}\n                {student.primarySection?.name}\n              </p>\n              <p className=\"text-sm text-gray-600\">\n                {student.enrollments?.length || 0} additional enrollments\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Schedule Grid */}\n        {isLoading ? (\n          <LoadingSkeleton />\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse border border-gray-300\">\n              <thead>\n                <tr>\n                  <th className=\"border border-gray-300 bg-gray-50 p-2 text-left font-medium\">\n                    Day / Period\n                  </th>\n                  {Array.isArray(PERIODS) &&\n                    PERIODS.map(period => (\n                      <th\n                        key={period.id}\n                        className={`border border-gray-300 p-2 text-center text-sm font-medium ${\n                          period.isBreak ? 'bg-gray-100' : 'bg-gray-50'\n                        }`}\n                      >\n                        <div>{period.name}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          {period.time}\n                        </div>\n                      </th>\n                    ))}\n                </tr>\n              </thead>\n              <tbody>\n                {Array.isArray(DAYS) &&\n                  DAYS.map(day => (\n                    <tr key={day}>\n                      <td className=\"border border-gray-300 bg-gray-50 p-2 font-medium\">\n                        {day}\n                      </td>\n                      {Array.isArray(PERIODS) &&\n                        PERIODS.map(period => {\n                          if (period.isBreak) {\n                            return (\n                              <td\n                                key={period.id}\n                                className=\"border border-gray-300 bg-gray-100 text-center text-gray-500 text-sm p-2\"\n                              >\n                                {period.name}\n                              </td>\n                            )\n                          }\n\n                          const scheduleEntry = scheduleData?.data?.find(\n                            entry =>\n                              entry.day === day && entry.periodId === period.id\n                          )\n\n                          return (\n                            <td\n                              key={period.id}\n                              className=\"border border-gray-300 p-1 h-16\"\n                            >\n                              {scheduleEntry ? (\n                                <div\n                                  className={`p-2 rounded text-xs ${\n                                    scheduleEntry.isPrimary\n                                      ? 'bg-blue-100 text-blue-800'\n                                      : 'bg-green-100 text-green-800'\n                                  }`}\n                                >\n                                  <div className=\"font-medium\">\n                                    {scheduleEntry.subject}\n                                  </div>\n                                  <div>\n                                    {scheduleEntry.class} -{' '}\n                                    {scheduleEntry.section}\n                                  </div>\n                                  {scheduleEntry.room && (\n                                    <div className=\"text-gray-600\">\n                                      {scheduleEntry.room}\n                                    </div>\n                                  )}\n                                </div>\n                              ) : (\n                                <div className=\"h-full flex items-center justify-center text-gray-400 text-xs\">\n                                  Free\n                                </div>\n                              )}\n                            </td>\n                          )\n                        })}\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n\n        {/* Legend */}\n        <div className=\"flex gap-4 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-blue-100 border border-blue-300 rounded\"></div>\n            <span>Primary Class</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-green-100 border border-green-300 rounded\"></div>\n            <span>Additional Enrollment</span>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst MultiClassStudent = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState('')\n  const [typeFilter, setTypeFilter] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [pageSize] = useState(10)\n  const [showCreateDialog, setShowCreateDialog] = useState(false)\n  const [showEditDialog, setShowEditDialog] = useState(false)\n  const [showScheduleDialog, setShowScheduleDialog] = useState(false)\n  const [selectedRecord, setSelectedRecord] = useState(null)\n  const [currentEnrollments, setCurrentEnrollments] = useState([])\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    watch,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(multiClassEnrollmentSchema),\n    mode: 'onChange',\n    defaultValues: {\n      enrollments: [],\n      parentConsent: false,\n      isActive: true,\n    },\n  })\n\n  const selectedStudent = watch('studentId')\n  const selectedPrimaryClass = watch('primaryClassId')\n\n  const {\n    data: multiClassData,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\n      'multiClassStudents',\n      {\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        status: statusFilter,\n        type: typeFilter,\n      },\n    ],\n    queryFn: () =>\n      multiClassStudentApi.getAll({\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        status: statusFilter,\n        type: typeFilter,\n      }),\n  })\n\n  const { data: studentsData } = useQuery({\n    queryKey: ['students', 'available'],\n    queryFn: () => studentsApi.getAll({ all: true }),\n  })\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => classesApi.getAll({ all: true }),\n  })\n\n  const { data: primarySectionsData } = useQuery({\n    queryKey: ['sections', 'by-class', selectedPrimaryClass],\n    queryFn: () => sectionsApi.getByClass(selectedPrimaryClass),\n    enabled: !!selectedPrimaryClass,\n  })\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'all'],\n    queryFn: () => subjectsApi.getAll({ all: true }),\n  })\n\n  const createMutation = useMutation({\n    mutationFn: multiClassStudentApi.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['multiClassStudents'])\n      setShowCreateDialog(false)\n      reset()\n      setCurrentEnrollments([])\n      // Log audit entry\n      auditLogApi.log({\n        action: 'CREATE_MULTI_CLASS_ENROLLMENT',\n        entityType: 'multi_class_student',\n        severity: 'medium',\n        details: 'New multi-class enrollment created',\n      })\n    },\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }) => multiClassStudentApi.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['multiClassStudents'])\n      setShowEditDialog(false)\n      reset()\n      setCurrentEnrollments([])\n      // Log audit entry\n      auditLogApi.log({\n        action: 'UPDATE_MULTI_CLASS_ENROLLMENT',\n        entityType: 'multi_class_student',\n        entityId: selectedRecord?.id,\n        severity: 'medium',\n        details: 'Multi-class enrollment updated',\n      })\n    },\n  })\n\n  const deleteMutation = useMutation({\n    mutationFn: multiClassStudentApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['multiClassStudents'])\n      // Log audit entry\n      auditLogApi.log({\n        action: 'DELETE_MULTI_CLASS_ENROLLMENT',\n        entityType: 'multi_class_student',\n        severity: 'high',\n        details: 'Multi-class enrollment deleted',\n      })\n    },\n  })\n\n  const handleAddEnrollment = () => {\n    const newEnrollment = {\n      id: Date.now(), // Temporary ID\n      classId: '',\n      sectionId: '',\n      subjectIds: [],\n      enrollmentType: 'elective',\n      startDate: new Date().toISOString().split('T')[0],\n      endDate: '',\n      isActive: true,\n    }\n    setCurrentEnrollments([...currentEnrollments, newEnrollment])\n  }\n\n  const handleUpdateEnrollment = (index, updatedEnrollment) => {\n    const updated = [...currentEnrollments]\n    updated[index] = updatedEnrollment\n    setCurrentEnrollments(updated)\n    setValue('enrollments', updated)\n  }\n\n  const handleRemoveEnrollment = index => {\n    const updated = currentEnrollments.filter((_, i) => i !== index)\n    setCurrentEnrollments(updated)\n    setValue('enrollments', updated)\n  }\n\n  const handleEdit = record => {\n    setSelectedRecord(record)\n    setCurrentEnrollments(record.enrollments || [])\n    reset({\n      studentId: record.studentId,\n      primaryClassId: record.primaryClassId,\n      primarySectionId: record.primarySectionId,\n      enrollments: record.enrollments || [],\n      reason: record.reason,\n      approvedBy: record.approvedBy,\n      approvalDate: record.approvalDate?.split('T')[0],\n      parentConsent: record.parentConsent,\n      isActive: record.isActive,\n    })\n    setShowEditDialog(true)\n  }\n\n  const handleDelete = id => {\n    if (\n      window.confirm(\n        'Are you sure you want to delete this multi-class enrollment?',\n      )\n    ) {\n      deleteMutation.mutate(id)\n    }\n  }\n\n  const handleViewSchedule = record => {\n    setSelectedRecord(record)\n    setShowScheduleDialog(true)\n  }\n\n  const onSubmit = data => {\n    const submitData = {\n      ...data,\n      enrollments: currentEnrollments,\n    }\n\n    if (selectedRecord) {\n      updateMutation.mutate({ id: selectedRecord.id, data: submitData })\n    } else {\n      createMutation.mutate(submitData)\n    }\n  }\n\n  const columns = [\n    {\n      key: 'student',\n      header: 'Student',\n      render: item => (\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 rounded-full overflow-hidden bg-gray-200\">\n            {item.student?.photo ? (\n              <img\n                src={item.student.photo}\n                alt={item.student.name}\n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-full h-full flex items-center justify-center\">\n                <User className=\"w-5 h-5 text-gray-400\" />\n              </div>\n            )}\n          </div>\n          <div>\n            <p className=\"font-medium\">{item.student?.name}</p>\n            <p className=\"text-sm text-gray-500\">{item.student?.rollNumber}</p>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'primaryClass',\n      header: 'Primary Class',\n      render: item => (\n        <div>\n          <p className=\"font-medium\">{item.primaryClass?.name}</p>\n          <p className=\"text-sm text-gray-500\">{item.primarySection?.name}</p>\n        </div>\n      ),\n    },\n    {\n      key: 'enrollments',\n      header: 'Additional Enrollments',\n      render: item => (\n        <div className=\"space-y-1\">\n          {item.enrollments?.slice(0, 2).map((enrollment, index) => (\n            <div key={index} className=\"text-sm\">\n              <span className=\"font-medium\">\n                {enrollment.class?.name}-{enrollment.section?.name}\n              </span>\n              <span\n                className={`ml-2 px-2 py-1 rounded-full text-xs ${\n                  enrollment.enrollmentType === 'elective'\n                    ? 'bg-blue-100 text-blue-800'\n                    : enrollment.enrollmentType === 'advanced'\n                      ? 'bg-green-100 text-green-800'\n                      : enrollment.enrollmentType === 'remedial'\n                        ? 'bg-yellow-100 text-yellow-800'\n                        : 'bg-purple-100 text-purple-800'\n                }`}\n              >\n                {enrollment.enrollmentType}\n              </span>\n            </div>\n          ))}\n          {item.enrollments?.length > 2 && (\n            <div className=\"text-xs text-gray-500\">\n              +{item.enrollments.length - 2} more\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'subjects',\n      header: 'Total Subjects',\n      render: item => {\n        const totalSubjects =\n          item.enrollments?.reduce(\n            (total, enrollment) => total + (enrollment.subjects?.length || 0),\n            0\n          ) || 0\n        return (\n          <div className=\"flex items-center gap-1\">\n            <BookOpen className=\"w-4 h-4 text-gray-400\" />\n            <span>{totalSubjects}</span>\n          </div>\n        )\n      },\n    },\n    {\n      key: 'approvalStatus',\n      header: 'Status',\n      render: item => (\n        <div className=\"space-y-1\">\n          <span\n            className={`px-2 py-1 rounded-full text-xs ${\n              item.isActive\n                ? 'bg-green-100 text-green-800'\n                : 'bg-red-100 text-red-800'\n            }`}\n          >\n            {item.isActive ? 'Active' : 'Inactive'}\n          </span>\n          <div className=\"text-xs text-gray-500\">\n            Approved by {item.approvedBy}\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      render: item => (\n        <Dropdown\n          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n          items={[\n            {\n              label: 'View Schedule',\n              icon: Calendar,\n              onClick: () => handleViewSchedule(item),\n            },\n            {\n              label: 'Edit Enrollment',\n              icon: Edit,\n              onClick: () => handleEdit(item),\n            },\n            {\n              label: 'Check Conflicts',\n              icon: AlertTriangle,\n              onClick: () => console.log('Check conflicts for', item.id),\n            },\n            {\n              label: 'Delete',\n              icon: Trash2,\n              onClick: () => handleDelete(item.id),\n              className: 'text-red-600',\n            },\n          ]}\n        />\n      ),\n    },\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n  if (error)\n    return <ErrorState message=\"Failed to load multi-class student data\" />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Multi-Class Students</h1>\n        <button\n          onClick={() => {\n            reset()\n            setSelectedRecord(null)\n            setCurrentEnrollments([])\n            setShowCreateDialog(true)\n          }}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Enrollment\n        </button>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Users className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{multiClassData?.total || 0}</p>\n              <p className=\"text-sm text-gray-600\">Multi-Class Students</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <BookOpen className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {multiClassData?.data?.filter(s =>\n                  s.enrollments?.some(e => e.enrollmentType === 'elective')\n                ).length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Elective Enrollments</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <GraduationCap className=\"w-8 h-8 text-purple-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {multiClassData?.data?.filter(s =>\n                  s.enrollments?.some(e => e.enrollmentType === 'advanced')\n                ).length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Advanced Placements</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <AlertTriangle className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">3</p>\n              <p className=\"text-sm text-gray-600\">Schedule Conflicts</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"md:col-span-2\">\n            <Input\n              placeholder=\"Search students...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              icon={Search}\n            />\n          </div>\n          <div>\n            <select\n              value={statusFilter}\n              onChange={e => setStatusFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">All Status</option>\n              <option value=\"active\">Active</option>\n              <option value=\"inactive\">Inactive</option>\n            </select>\n          </div>\n          <div>\n            <select\n              value={typeFilter}\n              onChange={e => setTypeFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">All Types</option>\n              <option value=\"elective\">Elective</option>\n              <option value=\"advanced\">Advanced</option>\n              <option value=\"remedial\">Remedial</option>\n              <option value=\"special\">Special</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Students Table */}\n      <div className=\"bg-white rounded-lg shadow\">\n        {multiClassData?.data?.length === 0 ? (\n          <EmptyState\n            title=\"No multi-class enrollments found\"\n            description=\"No students are currently enrolled in multiple classes\"\n            action={{\n              label: 'Add Enrollment',\n              onClick: () => setShowCreateDialog(true),\n            }}\n          />\n        ) : (\n          <>\n            <Table data={multiClassData?.data || []} columns={columns} />\n            <div className=\"p-6 border-t\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={Math.ceil((multiClassData?.total || 0) / pageSize)}\n                onPageChange={setCurrentPage}\n              />\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog\n        open={showCreateDialog || showEditDialog}\n        onClose={() => {\n          setShowCreateDialog(false)\n          setShowEditDialog(false)\n          reset()\n          setSelectedRecord(null)\n          setCurrentEnrollments([])\n        }}\n        title={\n          selectedRecord\n            ? 'Edit Multi-Class Enrollment'\n            : 'Add Multi-Class Enrollment'\n        }\n        size=\"xl\"\n      >\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Student and Primary Class */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Student Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Controller\n                name=\"studentId\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Student *\n                    </label>\n                    <select\n                      {...field}\n                      disabled={!!selectedRecord}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.studentId ? 'border-red-500' : ''\n                      } ${selectedRecord ? 'bg-gray-100' : ''}`}\n                    >\n                      <option value=\"\">Select Student</option>\n                      {Array.isArray(studentsData?.data) &&\n                        studentsData.data.map(student => (\n                          <option key={student.id} value={student.id}>\n                            {student.name} - {student.rollNumber}\n                          </option>\n                        ))}\n                    </select>\n                    {errors.studentId && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.studentId.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n              <Controller\n                name=\"primaryClassId\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Primary Class *\n                    </label>\n                    <select\n                      {...field}\n                      onChange={e => {\n                        field.onChange(e)\n                        setValue('primarySectionId', '')\n                      }}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.primaryClassId ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"\">Select Class</option>\n                      {Array.isArray(classesData?.data) &&\n                        classesData.data.map(cls => (\n                          <option key={cls.id} value={cls.id}>\n                            {cls.name}\n                          </option>\n                        ))}\n                    </select>\n                    {errors.primaryClassId && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.primaryClassId.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n              <Controller\n                name=\"primarySectionId\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Primary Section *\n                    </label>\n                    <select\n                      {...field}\n                      disabled={!selectedPrimaryClass}\n                      className={`w-full border rounded-lg px-3 py-2 disabled:bg-gray-100 ${\n                        errors.primarySectionId ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"\">Select Section</option>\n                      {primarySectionsData?.data?.map(section => (\n                        <option key={section.id} value={section.id}>\n                          {section.name}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.primarySectionId && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.primarySectionId.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Additional Enrollments */}\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-lg font-medium\">Additional Enrollments</h3>\n              <button\n                type=\"button\"\n                onClick={handleAddEnrollment}\n                className=\"bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700 flex items-center gap-1\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                Add Enrollment\n              </button>\n            </div>\n\n            {currentEnrollments.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                <BookOpen className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n                <p>No additional enrollments added</p>\n                <button\n                  type=\"button\"\n                  onClick={handleAddEnrollment}\n                  className=\"text-blue-600 hover:text-blue-800 text-sm mt-2\"\n                >\n                  Add your first enrollment\n                </button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {Array.isArray(currentEnrollments) &&\n                  currentEnrollments.map((enrollment, index) => (\n                    <div\n                      key={enrollment.id || index}\n                      className=\"border rounded-lg p-4 space-y-4\"\n                    >\n                      <div className=\"flex justify-between items-center\">\n                        <h4 className=\"font-medium\">Enrollment {index + 1}</h4>\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveEnrollment(index)}\n                          className=\"text-red-600 hover:text-red-800\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">\n                            Class *\n                          </label>\n                          <select\n                            value={enrollment.classId}\n                            onChange={e =>\n                              handleUpdateEnrollment(index, {\n                                ...enrollment,\n                                classId: e.target.value,\n                                sectionId: '',\n                              })\n                            }\n                            className=\"w-full border rounded-lg px-3 py-2\"\n                          >\n                            <option value=\"\">Select Class</option>\n                            {Array.isArray(classesData?.data) &&\n                              classesData.data.map(cls => (\n                                <option key={cls.id} value={cls.id}>\n                                  {cls.name}\n                                </option>\n                              ))}\n                          </select>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">\n                            Section *\n                          </label>\n                          <select\n                            value={enrollment.sectionId}\n                            onChange={e =>\n                              handleUpdateEnrollment(index, {\n                                ...enrollment,\n                                sectionId: e.target.value,\n                              })\n                            }\n                            disabled={!enrollment.classId}\n                            className=\"w-full border rounded-lg px-3 py-2 disabled:bg-gray-100\"\n                          >\n                            <option value=\"\">Select Section</option>\n                            {/* You would need to fetch sections for the selected class */}\n                          </select>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">\n                            Type *\n                          </label>\n                          <select\n                            value={enrollment.enrollmentType}\n                            onChange={e =>\n                              handleUpdateEnrollment(index, {\n                                ...enrollment,\n                                enrollmentType: e.target.value,\n                              })\n                            }\n                            className=\"w-full border rounded-lg px-3 py-2\"\n                          >\n                            <option value=\"elective\">Elective</option>\n                            <option value=\"advanced\">Advanced</option>\n                            <option value=\"remedial\">Remedial</option>\n                            <option value=\"special\">Special</option>\n                          </select>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">\n                            Start Date *\n                          </label>\n                          <input\n                            type=\"date\"\n                            value={enrollment.startDate}\n                            onChange={e =>\n                              handleUpdateEnrollment(index, {\n                                ...enrollment,\n                                startDate: e.target.value,\n                              })\n                            }\n                            className=\"w-full border rounded-lg px-3 py-2\"\n                          />\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium mb-1\">\n                          Subjects *\n                        </label>\n                        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto border rounded p-2\">\n                          {Array.isArray(subjectsData?.data) &&\n                            subjectsData.data.map(subject => (\n                              <label\n                                key={subject.id}\n                                className=\"flex items-center gap-2 text-sm\"\n                              >\n                                <input\n                                  type=\"checkbox\"\n                                  checked={\n                                    enrollment.subjectIds?.includes(\n                                      subject.id,\n                                    ) || false\n                                  }\n                                  onChange={e => {\n                                    const subjectIds =\n                                      enrollment.subjectIds || []\n                                    const updated = e.target.checked\n                                      ? [...subjectIds, subject.id]\n                                      : subjectIds.filter(\n                                          id => id !== subject.id,\n                                        )\n                                    handleUpdateEnrollment(index, {\n                                      ...enrollment,\n                                      subjectIds: updated,\n                                    })\n                                  }}\n                                />\n                                <span>{subject.name}</span>\n                              </label>\n                            ))}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            )}\n          </div>\n\n          {/* Conflict Check */}\n          {selectedStudent && currentEnrollments.length > 0 && (\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Timetable Conflict Check</h4>\n              <TimetableConflictChecker\n                studentId={selectedStudent}\n                enrollments={currentEnrollments}\n              />\n            </div>\n          )}\n\n          {/* Approval Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Approval Information\n            </h3>\n            <Controller\n              name=\"reason\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Reason for Multi-Class Enrollment *\"\n                  multiline\n                  rows={3}\n                  {...field}\n                  error={errors.reason?.message}\n                  placeholder=\"Explain why this student needs multi-class enrollment\"\n                />\n              )}\n            />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"approvedBy\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Approved By *\"\n                    {...field}\n                    error={errors.approvedBy?.message}\n                    placeholder=\"Name of approving authority\"\n                  />\n                )}\n              />\n              <Controller\n                name=\"approvalDate\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Approval Date *\"\n                    type=\"date\"\n                    {...field}\n                    error={errors.approvalDate?.message}\n                  />\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Consent */}\n          <div className=\"space-y-3\">\n            <Controller\n              name=\"parentConsent\"\n              control={control}\n              render={({ field }) => (\n                <label className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={field.value}\n                    onChange={field.onChange}\n                  />\n                  <span>\n                    Parent/Guardian consent obtained for multi-class enrollment\n                    *\n                  </span>\n                </label>\n              )}\n            />\n            {errors.parentConsent && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.parentConsent.message}\n              </p>\n            )}\n\n            <Controller\n              name=\"isActive\"\n              control={control}\n              render={({ field }) => (\n                <label className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={field.value}\n                    onChange={field.onChange}\n                  />\n                  <span>Enrollment is active</span>\n                </label>\n              )}\n            />\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n            >\n              <Save className=\"w-4 h-4\" />\n              {createMutation.isPending || updateMutation.isPending\n                ? 'Saving...'\n                : selectedRecord\n                  ? 'Update Enrollment'\n                  : 'Create Enrollment'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setShowCreateDialog(false)\n                setShowEditDialog(false)\n                reset()\n                setSelectedRecord(null)\n                setCurrentEnrollments([])\n              }}\n              className=\"border px-6 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </Dialog>\n\n      {/* Schedule View Dialog */}\n      <StudentScheduleView\n        student={selectedRecord}\n        isOpen={showScheduleDialog}\n        onClose={() => {\n          setShowScheduleDialog(false)\n          setSelectedRecord(null)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default MultiClassStudent\n"
        }
    ]
}