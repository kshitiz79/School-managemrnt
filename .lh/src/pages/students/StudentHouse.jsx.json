{
    "sourceFile": "src/pages/students/StudentHouse.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1755990676747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755991003411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState } from 'react'\n-import React, { useState } from 'react'\n import { useForm, Controller } from 'react-hook-form'\n import { zodResolver } from '@hookform/resolvers/zod'\n import { z } from 'zod'\n import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n"
                },
                {
                    "date": 1755994925741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   User,\n } from 'lucide-react'\n import Table from '../../components/ui/Table'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n"
                },
                {
                    "date": 1755995169573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   Users,\n   Trophy,\n   User,\n } from 'lucide-react'\n-import Table from '../../components/ui/Table'\n+import { Table } from '../../components/ui/Table'\n import Input from '../../components/ui/Input'\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n"
                },
                {
                    "date": 1756039695720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n-import Dropdown from '../../components/ui/Dropdown'\n+import { Dropdown } from '../../components/ui/Dropdown'\n import { studentHousesApi } from '../../lib/api/studentHouses'\n import { staffApi } from '../../lib/api/staff'\n import { studentsApi } from '../../lib/api/students'\n \n"
                }
            ],
            "date": 1755990676747,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  Home,\n  Users,\n  Trophy,\n  User,\n} from 'lucide-react'\nimport Table from '../../components/ui/Table'\nimport Input from '../../components/ui/Input'\nimport Dialog from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport Pagination from '../../components/ui/Pagination'\nimport Dropdown from '../../components/ui/Dropdown'\nimport { studentHousesApi } from '../../lib/api/studentHouses'\nimport { staffApi } from '../../lib/api/staff'\nimport { studentsApi } from '../../lib/api/students'\n\n// Validation Schema\nconst houseSchema = z.object({\n  name: z.string().min(1, 'House name is required'),\n  code: z.string().min(1, 'House code is required'),\n  description: z.string().optional(),\n  color: z.string().min(1, 'Color is required'),\n  motto: z.string().optional(),\n  houseTeacherId: z.string().optional(),\n  captainId: z.string().optional(),\n  viceCaptainId: z.string().optional(),\n  maxCapacity: z.number().min(1).optional(),\n  isActive: z.boolean().default(true),\n})\n\nconst StudentHouse = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [pageSize] = useState(10)\n  const [showCreateDialog, setShowCreateDialog] = useState(false)\n  const [showEditDialog, setShowEditDialog] = useState(false)\n  const [selectedHouse, setSelectedHouse] = useState(null)\n  const [selectedItems, setSelectedItems] = useState([])\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(houseSchema),\n    mode: 'onChange',\n    defaultValues: {\n      isActive: true,\n      color: '#3B82F6',\n    },\n  })\n\n  const {\n    data: housesData,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\n      'studentHouses',\n      { page: currentPage, pageSize, search: searchTerm },\n    ],\n    queryFn: () =>\n      studentHousesApi.getAll({\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n      }),\n  })\n\n  const { data: teachersData } = useQuery({\n    queryKey: ['staff', 'teachers'],\n    queryFn: () => staffApi.getTeachers(),\n  })\n\n  const { data: studentsData } = useQuery({\n    queryKey: ['students', 'all'],\n    queryFn: () => studentsApi.getAll({ all: true }),\n  })\n\n  const createMutation = useMutation({\n    mutationFn: studentHousesApi.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['studentHouses'])\n      setShowCreateDialog(false)\n      reset()\n    },\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }) => studentHousesApi.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['studentHouses'])\n      setShowEditDialog(false)\n      reset()\n    },\n  })\n\n  const deleteMutation = useMutation({\n    mutationFn: studentHousesApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['studentHouses'])\n    },\n  })\n\n  const bulkDeleteMutation = useMutation({\n    mutationFn: studentHousesApi.bulkDelete,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['studentHouses'])\n      setSelectedItems([])\n    },\n  })\n\n  const handleEdit = house => {\n    setSelectedHouse(house)\n    reset({\n      name: house.name,\n      code: house.code,\n      description: house.description || '',\n      color: house.color || '#3B82F6',\n      motto: house.motto || '',\n      houseTeacherId: house.houseTeacherId || '',\n      captainId: house.captainId || '',\n      viceCaptainId: house.viceCaptainId || '',\n      maxCapacity: house.maxCapacity || '',\n      isActive: house.isActive,\n    })\n    setShowEditDialog(true)\n  }\n\n  const handleDelete = id => {\n    if (window.confirm('Are you sure you want to delete this house?')) {\n      deleteMutation.mutate(id)\n    }\n  }\n\n  const handleBulkDelete = () => {\n    if (\n      window.confirm(\n        `Are you sure you want to delete ${selectedItems.length} houses?`,\n      )\n    ) {\n      bulkDeleteMutation.mutate(selectedItems)\n    }\n  }\n\n  const onSubmit = data => {\n    const submitData = {\n      ...data,\n      maxCapacity: data.maxCapacity ? Number(data.maxCapacity) : null,\n    }\n\n    if (selectedHouse) {\n      updateMutation.mutate({ id: selectedHouse.id, data: submitData })\n    } else {\n      createMutation.mutate(submitData)\n    }\n  }\n\n  const predefinedColors = [\n    '#DC2626',\n    '#2563EB',\n    '#16A34A',\n    '#CA8A04',\n    '#9333EA',\n    '#C2410C',\n    '#0891B2',\n    '#65A30D',\n    '#E11D48',\n    '#7C3AED',\n  ]\n\n  const columns = [\n    {\n      key: 'select',\n      header: (\n        <input\n          type=\"checkbox\"\n          checked={selectedItems.length === housesData?.data?.length}\n          onChange={e => {\n            if (e.target.checked) {\n              setSelectedItems(housesData.data.map(item => item.id))\n            } else {\n              setSelectedItems([])\n            }\n          }}\n        />\n      ),\n      render: item => (\n        <input\n          type=\"checkbox\"\n          checked={selectedItems.includes(item.id)}\n          onChange={e => {\n            if (e.target.checked) {\n              setSelectedItems([...selectedItems, item.id])\n            } else {\n              setSelectedItems(selectedItems.filter(id => id !== item.id))\n            }\n          }}\n        />\n      ),\n    },\n    {\n      key: 'color',\n      header: 'Color',\n      render: item => (\n        <div\n          className=\"w-6 h-6 rounded-full border-2 border-gray-300\"\n          style={{ backgroundColor: item.color }}\n        />\n      ),\n    },\n    { key: 'code', header: 'Code', sortable: true },\n    { key: 'name', header: 'Name', sortable: true },\n    { key: 'motto', header: 'Motto' },\n    {\n      key: 'houseTeacher',\n      header: 'House Teacher',\n      render: item => item.houseTeacher?.name || 'Not Assigned',\n    },\n    {\n      key: 'captain',\n      header: 'Captain',\n      render: item => item.captain?.name || 'Not Assigned',\n    },\n    {\n      key: 'studentCount',\n      header: 'Students',\n      render: item => (\n        <div className=\"flex items-center gap-1\">\n          <Users className=\"w-4 h-4 text-gray-400\" />\n          <span>{item.studentCount || 0}</span>\n          {item.maxCapacity && (\n            <span className=\"text-gray-500\">/ {item.maxCapacity}</span>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: 'points',\n      header: 'Points',\n      render: item => (\n        <div className=\"flex items-center gap-1\">\n          <Trophy className=\"w-4 h-4 text-yellow-500\" />\n          <span className=\"font-medium\">{item.totalPoints || 0}</span>\n        </div>\n      ),\n    },\n    {\n      key: 'isActive',\n      header: 'Status',\n      render: item => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${\n            item.isActive\n              ? 'bg-green-100 text-green-800'\n              : 'bg-red-100 text-red-800'\n          }`}\n        >\n          {item.isActive ? 'Active' : 'Inactive'}\n        </span>\n      ),\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      render: item => (\n        <Dropdown\n          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n          items={[\n            {\n              label: 'Edit',\n              icon: Edit,\n              onClick: () => handleEdit(item),\n            },\n            {\n              label: 'View Students',\n              icon: Users,\n              onClick: () => console.log('View students for', item.id),\n            },\n            {\n              label: 'House Activities',\n              icon: Trophy,\n              onClick: () => console.log('View activities for', item.id),\n            },\n            {\n              label: 'Delete',\n              icon: Trash2,\n              onClick: () => handleDelete(item.id),\n              className: 'text-red-600',\n            },\n          ]}\n        />\n      ),\n    },\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n  if (error) return <ErrorState message=\"Failed to load student houses\" />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Student Houses</h1>\n        <button\n          onClick={() => {\n            reset()\n            setSelectedHouse(null)\n            setShowCreateDialog(true)\n          }}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add House\n        </button>\n      </div>\n\n      {/* House Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Home className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{housesData?.total || 0}</p>\n              <p className=\"text-sm text-gray-600\">Total Houses</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Users className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">1,245</p>\n              <p className=\"text-sm text-gray-600\">Total Students</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <User className=\"w-8 h-8 text-purple-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">24</p>\n              <p className=\"text-sm text-gray-600\">House Teachers</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Trophy className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">48</p>\n              <p className=\"text-sm text-gray-600\">House Captains</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6 border-b\">\n          <div className=\"flex gap-4 items-center\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Search houses...\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n                icon={Search}\n              />\n            </div>\n            <button className=\"p-2 border rounded-lg hover:bg-gray-50\">\n              <Filter className=\"w-4 h-4\" />\n            </button>\n            {selectedItems.length > 0 && (\n              <button\n                onClick={handleBulkDelete}\n                className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700\"\n              >\n                Delete Selected ({selectedItems.length})\n              </button>\n            )}\n          </div>\n        </div>\n\n        {housesData?.data?.length === 0 ? (\n          <EmptyState\n            title=\"No houses found\"\n            description=\"Get started by creating your first student house\"\n            action={{\n              label: 'Add House',\n              onClick: () => setShowCreateDialog(true),\n            }}\n          />\n        ) : (\n          <>\n            <Table data={housesData?.data || []} columns={columns} />\n            <div className=\"p-6 border-t\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={Math.ceil((housesData?.total || 0) / pageSize)}\n                onPageChange={setCurrentPage}\n              />\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog\n        open={showCreateDialog || showEditDialog}\n        onClose={() => {\n          setShowCreateDialog(false)\n          setShowEditDialog(false)\n          reset()\n          setSelectedHouse(null)\n        }}\n        title={selectedHouse ? 'Edit House' : 'Add New House'}\n        size=\"lg\"\n      >\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Controller\n              name=\"name\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"House Name *\"\n                  {...field}\n                  error={errors.name?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"code\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"House Code *\"\n                  {...field}\n                  error={errors.code?.message}\n                />\n              )}\n            />\n          </div>\n\n          <Controller\n            name=\"description\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Description\"\n                multiline\n                rows={3}\n                {...field}\n                error={errors.description?.message}\n              />\n            )}\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Controller\n              name=\"motto\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"House Motto\"\n                  {...field}\n                  error={errors.motto?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"maxCapacity\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Maximum Capacity\"\n                  type=\"number\"\n                  min=\"1\"\n                  {...field}\n                  error={errors.maxCapacity?.message}\n                />\n              )}\n            />\n          </div>\n\n          <Controller\n            name=\"color\"\n            control={control}\n            render={({ field }) => (\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  House Color *\n                </label>\n                <div className=\"flex gap-2 mb-2\">\n                  {Array.isArray(predefinedColors) &&\n                    predefinedColors.map(color => (\n                      <button\n                        key={color}\n                        type=\"button\"\n                        onClick={() => field.onChange(color)}\n                        className={`w-8 h-8 rounded-full border-2 ${\n                          field.value === color\n                            ? 'border-gray-800'\n                            : 'border-gray-300'\n                        }`}\n                        style={{ backgroundColor: color }}\n                      />\n                    ))}\n                </div>\n                <input\n                  type=\"color\"\n                  {...field}\n                  className=\"w-full h-10 border rounded-lg\"\n                />\n                {errors.color && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.color.message}\n                  </p>\n                )}\n              </div>\n            )}\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Controller\n              name=\"houseTeacherId\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    House Teacher\n                  </label>\n                  <select\n                    {...field}\n                    className=\"w-full border rounded-lg px-3 py-2\"\n                  >\n                    <option value=\"\">Select Teacher</option>\n                    {Array.isArray(teachersData?.data) &&\n                      teachersData.data.map(teacher => (\n                        <option key={teacher.id} value={teacher.id}>\n                          {teacher.name}\n                        </option>\n                      ))}\n                  </select>\n                  {errors.houseTeacherId && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {errors.houseTeacherId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n            />\n            <Controller\n              name=\"captainId\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    House Captain\n                  </label>\n                  <select\n                    {...field}\n                    className=\"w-full border rounded-lg px-3 py-2\"\n                  >\n                    <option value=\"\">Select Captain</option>\n                    {Array.isArray(studentsData?.data) &&\n                      studentsData.data.map(student => (\n                        <option key={student.id} value={student.id}>\n                          {student.name} - {student.class?.name}\n                        </option>\n                      ))}\n                  </select>\n                </div>\n              )}\n            />\n            <Controller\n              name=\"viceCaptainId\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Vice Captain\n                  </label>\n                  <select\n                    {...field}\n                    className=\"w-full border rounded-lg px-3 py-2\"\n                  >\n                    <option value=\"\">Select Vice Captain</option>\n                    {Array.isArray(studentsData?.data) &&\n                      studentsData.data.map(student => (\n                        <option key={student.id} value={student.id}>\n                          {student.name} - {student.class?.name}\n                        </option>\n                      ))}\n                  </select>\n                </div>\n              )}\n            />\n          </div>\n\n          <Controller\n            name=\"isActive\"\n            control={control}\n            render={({ field }) => (\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={field.value}\n                  onChange={field.onChange}\n                />\n                <span>Active</span>\n              </label>\n            )}\n          />\n\n          <div className=\"flex gap-2 pt-4\">\n            <button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {createMutation.isPending || updateMutation.isPending\n                ? 'Saving...'\n                : selectedHouse\n                  ? 'Update House'\n                  : 'Create House'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setShowCreateDialog(false)\n                setShowEditDialog(false)\n                reset()\n                setSelectedHouse(null)\n              }}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default StudentHouse\n"
        }
    ]
}