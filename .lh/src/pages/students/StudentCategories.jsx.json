{
    "sourceFile": "src/pages/students/StudentCategories.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755994925598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755995169612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   Trash2,\n   Tag,\n   Users,\n } from 'lucide-react'\n-import Table from '../../components/ui/Table'\n+import { Table } from '../../components/ui/Table'\n import Input from '../../components/ui/Input'\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n"
                },
                {
                    "date": 1756039695823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,10 @@\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n-import Dropdown from '../../components/ui/Dropdown'\n+import { Dropdown } from '../../components/ui/Dropdown'\n import { studentCategoriesApi } from '../../lib/api/studentCategories'\n-import { validateRequired } from '../../lib/validators'\n \n // Validation Schema\n const categorySchema = z.object({\n   name: z.string().min(1, 'Category name is required'),\n"
                }
            ],
            "date": 1755994925598,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  Tag,\n  Users,\n} from 'lucide-react'\nimport Table from '../../components/ui/Table'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport Pagination from '../../components/ui/Pagination'\nimport Dropdown from '../../components/ui/Dropdown'\nimport { studentCategoriesApi } from '../../lib/api/studentCategories'\nimport { validateRequired } from '../../lib/validators'\n\n// Validation Schema\nconst categorySchema = z.object({\n  name: z.string().min(1, 'Category name is required'),\n  code: z.string().min(1, 'Category code is required'),\n  description: z.string().optional(),\n  color: z.string().min(1, 'Color is required'),\n  feeDiscount: z.number().min(0).max(100).default(0),\n  scholarshipEligible: z.boolean().default(false),\n  reservationQuota: z.number().min(0).max(100).default(0),\n  isActive: z.boolean().default(true),\n})\n\nconst StudentCategories = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [pageSize] = useState(10)\n  const [showCreateDialog, setShowCreateDialog] = useState(false)\n  const [showEditDialog, setShowEditDialog] = useState(false)\n  const [selectedCategory, setSelectedCategory] = useState(null)\n  const [selectedItems, setSelectedItems] = useState([])\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(categorySchema),\n    mode: 'onChange',\n    defaultValues: {\n      feeDiscount: 0,\n      scholarshipEligible: false,\n      reservationQuota: 0,\n      isActive: true,\n      color: '#3B82F6',\n    },\n  })\n\n  const {\n    data: categoriesData,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\n      'studentCategories',\n      { page: currentPage, pageSize, search: searchTerm },\n    ],\n    queryFn: () =>\n      studentCategoriesApi.getAll({\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n      }),\n  })\n\n  const createMutation = useMutation({\n    mutationFn: studentCategoriesApi.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['studentCategories'])\n      setShowCreateDialog(false)\n      reset()\n    },\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }) => studentCategoriesApi.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['studentCategories'])\n      setShowEditDialog(false)\n      reset()\n    },\n  })\n\n  const deleteMutation = useMutation({\n    mutationFn: studentCategoriesApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['studentCategories'])\n    },\n  })\n\n  const bulkDeleteMutation = useMutation({\n    mutationFn: studentCategoriesApi.bulkDelete,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['studentCategories'])\n      setSelectedItems([])\n    },\n  })\n\n  const handleEdit = category => {\n    setSelectedCategory(category)\n    reset({\n      name: category.name,\n      code: category.code,\n      description: category.description || '',\n      color: category.color || '#3B82F6',\n      feeDiscount: category.feeDiscount || 0,\n      scholarshipEligible: category.scholarshipEligible || false,\n      reservationQuota: category.reservationQuota || 0,\n      isActive: category.isActive,\n    })\n    setShowEditDialog(true)\n  }\n\n  const handleDelete = id => {\n    if (window.confirm('Are you sure you want to delete this category?')) {\n      deleteMutation.mutate(id)\n    }\n  }\n\n  const handleBulkDelete = () => {\n    if (\n      window.confirm(\n        `Are you sure you want to delete ${selectedItems.length} categories?`,\n      )\n    ) {\n      bulkDeleteMutation.mutate(selectedItems)\n    }\n  }\n\n  const onSubmit = data => {\n    if (selectedCategory) {\n      updateMutation.mutate({ id: selectedCategory.id, data })\n    } else {\n      createMutation.mutate(data)\n    }\n  }\n\n  const predefinedColors = [\n    '#3B82F6',\n    '#EF4444',\n    '#10B981',\n    '#F59E0B',\n    '#8B5CF6',\n    '#EC4899',\n    '#06B6D4',\n    '#84CC16',\n    '#F97316',\n    '#6366F1',\n  ]\n\n  const columns = [\n    {\n      key: 'select',\n      header: (\n        <input\n          type=\"checkbox\"\n          checked={selectedItems.length === categoriesData?.data?.length}\n          onChange={e => {\n            if (e.target.checked) {\n              setSelectedItems(categoriesData.data.map(item => item.id))\n            } else {\n              setSelectedItems([])\n            }\n          }}\n        />\n      ),\n      render: item => (\n        <input\n          type=\"checkbox\"\n          checked={selectedItems.includes(item.id)}\n          onChange={e => {\n            if (e.target.checked) {\n              setSelectedItems([...selectedItems, item.id])\n            } else {\n              setSelectedItems(selectedItems.filter(id => id !== item.id))\n            }\n          }}\n        />\n      ),\n    },\n    {\n      key: 'color',\n      header: 'Color',\n      render: item => (\n        <div\n          className=\"w-6 h-6 rounded-full border-2 border-gray-300\"\n          style={{ backgroundColor: item.color }}\n        />\n      ),\n    },\n    { key: 'code', header: 'Code', sortable: true },\n    { key: 'name', header: 'Name', sortable: true },\n    {\n      key: 'feeDiscount',\n      header: 'Fee Discount',\n      render: item => `${item.feeDiscount || 0}%`,\n    },\n    {\n      key: 'reservationQuota',\n      header: 'Reservation',\n      render: item => `${item.reservationQuota || 0}%`,\n    },\n    {\n      key: 'scholarshipEligible',\n      header: 'Scholarship',\n      render: item => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${\n            item.scholarshipEligible\n              ? 'bg-green-100 text-green-800'\n              : 'bg-gray-100 text-gray-800'\n          }`}\n        >\n          {item.scholarshipEligible ? 'Eligible' : 'Not Eligible'}\n        </span>\n      ),\n    },\n    {\n      key: 'studentCount',\n      header: 'Students',\n      render: item => (\n        <div className=\"flex items-center gap-1\">\n          <Users className=\"w-4 h-4 text-gray-400\" />\n          <span>{item.studentCount || 0}</span>\n        </div>\n      ),\n    },\n    {\n      key: 'isActive',\n      header: 'Status',\n      render: item => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${\n            item.isActive\n              ? 'bg-green-100 text-green-800'\n              : 'bg-red-100 text-red-800'\n          }`}\n        >\n          {item.isActive ? 'Active' : 'Inactive'}\n        </span>\n      ),\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      render: item => (\n        <Dropdown\n          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n          items={[\n            {\n              label: 'Edit',\n              icon: Edit,\n              onClick: () => handleEdit(item),\n            },\n            {\n              label: 'View Students',\n              icon: Users,\n              onClick: () => console.log('View students for', item.id),\n            },\n            {\n              label: 'Delete',\n              icon: Trash2,\n              onClick: () => handleDelete(item.id),\n              className: 'text-red-600',\n            },\n          ]}\n        />\n      ),\n    },\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n  if (error) return <ErrorState message=\"Failed to load student categories\" />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Student Categories</h1>\n        <button\n          onClick={() => {\n            reset()\n            setSelectedCategory(null)\n            setShowCreateDialog(true)\n          }}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Category\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6 border-b\">\n          <div className=\"flex gap-4 items-center\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Search categories...\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n                icon={Search}\n              />\n            </div>\n            <button className=\"p-2 border rounded-lg hover:bg-gray-50\">\n              <Filter className=\"w-4 h-4\" />\n            </button>\n            {selectedItems.length > 0 && (\n              <button\n                onClick={handleBulkDelete}\n                className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700\"\n              >\n                Delete Selected ({selectedItems.length})\n              </button>\n            )}\n          </div>\n        </div>\n\n        {categoriesData?.data?.length === 0 ? (\n          <EmptyState\n            title=\"No categories found\"\n            description=\"Get started by creating your first student category\"\n            action={{\n              label: 'Add Category',\n              onClick: () => setShowCreateDialog(true),\n            }}\n          />\n        ) : (\n          <>\n            <Table data={categoriesData?.data || []} columns={columns} />\n            <div className=\"p-6 border-t\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={Math.ceil((categoriesData?.total || 0) / pageSize)}\n                onPageChange={setCurrentPage}\n              />\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog\n        open={showCreateDialog || showEditDialog}\n        onClose={() => {\n          setShowCreateDialog(false)\n          setShowEditDialog(false)\n          reset()\n          setSelectedCategory(null)\n        }}\n        title={selectedCategory ? 'Edit Category' : 'Add New Category'}\n      >\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Controller\n              name=\"name\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Category Name *\"\n                  {...field}\n                  error={errors.name?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"code\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Category Code *\"\n                  {...field}\n                  error={errors.code?.message}\n                />\n              )}\n            />\n          </div>\n\n          <Controller\n            name=\"description\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Description\"\n                multiline\n                rows={3}\n                {...field}\n                error={errors.description?.message}\n              />\n            )}\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Controller\n              name=\"color\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Color *\n                  </label>\n                  <div className=\"flex gap-2 mb-2\">\n                    {Array.isArray(predefinedColors) &&\n                      predefinedColors.map(color => (\n                        <button\n                          key={color}\n                          type=\"button\"\n                          onClick={() => field.onChange(color)}\n                          className={`w-8 h-8 rounded-full border-2 ${\n                            field.value === color\n                              ? 'border-gray-800'\n                              : 'border-gray-300'\n                          }`}\n                          style={{ backgroundColor: color }}\n                        />\n                      ))}\n                  </div>\n                  <input\n                    type=\"color\"\n                    {...field}\n                    className=\"w-full h-10 border rounded-lg\"\n                  />\n                  {errors.color && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {errors.color.message}\n                    </p>\n                  )}\n                </div>\n              )}\n            />\n            <Controller\n              name=\"feeDiscount\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Fee Discount (%)\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  {...field}\n                  onChange={e => field.onChange(Number(e.target.value))}\n                  error={errors.feeDiscount?.message}\n                />\n              )}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Controller\n              name=\"reservationQuota\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Reservation Quota (%)\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  {...field}\n                  onChange={e => field.onChange(Number(e.target.value))}\n                  error={errors.reservationQuota?.message}\n                />\n              )}\n            />\n          </div>\n\n          <div className=\"space-y-3\">\n            <Controller\n              name=\"scholarshipEligible\"\n              control={control}\n              render={({ field }) => (\n                <label className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={field.value}\n                    onChange={field.onChange}\n                  />\n                  <span>Eligible for Scholarship</span>\n                </label>\n              )}\n            />\n            <Controller\n              name=\"isActive\"\n              control={control}\n              render={({ field }) => (\n                <label className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={field.value}\n                    onChange={field.onChange}\n                  />\n                  <span>Active</span>\n                </label>\n              )}\n            />\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {createMutation.isPending || updateMutation.isPending\n                ? 'Saving...'\n                : selectedCategory\n                  ? 'Update Category'\n                  : 'Create Category'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setShowCreateDialog(false)\n                setShowEditDialog(false)\n                reset()\n                setSelectedCategory(null)\n              }}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default StudentCategories\n"
        }
    ]
}