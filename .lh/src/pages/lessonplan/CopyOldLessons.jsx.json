{
    "sourceFile": "src/pages/lessonplan/CopyOldLessons.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755985893077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755985893077,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { lessonPlanApi } from '../../lib/api/lessonPlan'\nimport Button from '../../components/Button'\n\nconst CopyOldLessons = () => {\n  const [sourceFilters, setSourceFilters] = useState({\n    academicYear: new Date().getFullYear() - 1,\n    subject: 'all',\n    class: 'all',\n    teacher: 'all',\n  })\n  const [targetFilters, setTargetFilters] = useState({\n    academicYear: new Date().getFullYear(),\n    subject: '',\n    class: '',\n    teacher: '',\n  })\n  const [selectedLessons, setSelectedLessons] = useState([])\n  const [copyOptions, setCopyOptions] = useState({\n    copyContent: true,\n    copyAttachments: false,\n    updateDates: true,\n    preserveStatus: false,\n    adjustSchedule: true,\n  })\n\n  const queryClient = useQueryClient()\n\n  const { data: sourceLessons = [], isLoading: isLoadingSource } = useQuery({\n    queryKey: ['oldLessons', sourceFilters],\n    queryFn: () => lessonPlanApi.getOldLessons(sourceFilters),\n  })\n\n  const { data: subjects = [] } = useQuery({\n    queryKey: ['subjects'],\n    queryFn: lessonPlanApi.getSubjects,\n  })\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['classes'],\n    queryFn: lessonPlanApi.getClasses,\n  })\n\n  const { data: teachers = [] } = useQuery({\n    queryKey: ['teachers'],\n    queryFn: lessonPlanApi.getTeachers,\n  })\n\n  const copyLessonsMutation = useMutation({\n    mutationFn: ({ lessons, target, options }) =>\n      lessonPlanApi.copyLessons(lessons, target, options),\n    onSuccess: result => {\n      queryClient.invalidateQueries(['lessons'])\n      alert(`Successfully copied ${result.copiedCount} lessons!`)\n      setSelectedLessons([])\n    },\n    onError: error => {\n      alert(`Failed to copy lessons: ${error.message}`)\n    }\n  })\n\n  const previewCopyMutation = useMutation({\n    mutationFn: ({ lessons, target, options }) =>\n      lessonPlanApi.previewCopy(lessons, target, options),\n  })\n\n  const handleSourceFilterChange = e => {\n    const { name, value } = e.target\n    setSourceFilters(prev => ({ ...prev, [name]: value }))\n  };\n\n  const handleTargetFilterChange = e => {\n    const { name, value } = e.target\n    setTargetFilters(prev => ({ ...prev, [name]: value }))\n  };\n\n  const handleLessonSelect = lessonId => {\n    setSelectedLessons(prev =>\n      prev.includes(lessonId)\n        ? prev.filter(id => id !== lessonId)\n        : [...prev, lessonId],\n    );\n  }\n\n  const handleSelectAll = () => {\n    if (selectedLessons.length === sourceLessons.length) {\n      setSelectedLessons([])\n    } else {\n      setSelectedLessons(\n        Array.isArray(sourceLessons)\n          ? sourceLessons.map(lesson => lesson.id)\n          : []\n      )\n    }\n  }\n\n  const handleCopyOptionsChange = e => {\n    const { name, checked } = e.target\n    setCopyOptions(prev => ({ ...prev, [name]: checked }))\n  };\n\n  const handlePreviewCopy = () => {\n    if (selectedLessons.length === 0) {\n      alert('Please select lessons to copy')\n      return;\n    }\n    if (!targetFilters.subject || !targetFilters.class) {\n      alert('Please select target subject and class')\n      return;\n    }\n\n    previewCopyMutation.mutate({\n      lessons: selectedLessons,\n      target: targetFilters,\n      options: copyOptions,\n    })\n  }\n\n  const handleCopyLessons = () => {\n    if (selectedLessons.length === 0) {\n      alert('Please select lessons to copy')\n      return;\n    }\n    if (!targetFilters.subject || !targetFilters.class) {\n      alert('Please select target subject and class')\n      return;\n    }\n\n    const confirmMessage = `Are you sure you want to copy ${selectedLessons.length} lesson(s) to ${targetFilters.academicYear}?`\n    if (window.confirm(confirmMessage)) {\n      copyLessonsMutation.mutate({\n        lessons: selectedLessons,\n        target: targetFilters,\n        options: copyOptions,\n      })\n    }\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800'\n      case 'in_progress':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'planned':\n        return 'bg-blue-100 text-blue-800'\n      case 'cancelled':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const groupLessonsBySubject = () => {\n    const grouped = {}\n    sourceLessons.forEach(lesson => {\n      const key = `${lesson.subjectName} - ${lesson.className}`\n      if (!grouped[key]) {\n        grouped[key] = []\n      }\n      grouped[key].push(lesson)\n    })\n    return grouped\n  };\n\n  const groupedLessons = groupLessonsBySubject()\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <span className=\"text-3xl\">📋</span>\n          <h2 className=\"text-2xl font-bold\">Copy Old Lessons</h2>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Source Selection */}\n          <div className=\"space-y-6\">\n            <div className=\"bg-blue-50 p-4 rounded-md\">\n              <h3 className=\"text-lg font-semibold mb-4\">\n                📚 Source (Copy From)\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Academic Year\n                  </label>\n                  <select\n                    name=\"academicYear\"\n                    value={sourceFilters.academicYear}\n                    onChange={handleSourceFilterChange}\n                    className=\"w-full p-2 border rounded-md\"\n                  >\n                    <option value={new Date().getFullYear() - 2}>\n                      {new Date().getFullYear() - 2}\n                    </option>\n                    <option value={new Date().getFullYear() - 1}>\n                      {new Date().getFullYear() - 1}\n                    </option>\n                    <option value={new Date().getFullYear()}>\n                      {new Date().getFullYear()}\n                    </option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Subject\n                  </label>\n                  <select\n                    name=\"subject\"\n                    value={sourceFilters.subject}\n                    onChange={handleSourceFilterChange}\n                    className=\"w-full p-2 border rounded-md\"\n                  >\n                    <option value=\"all\">All Subjects</option>\n                    {Array.isArray(subjects) &&\n                      subjects.map(subject => (\n                        <option key={subject.id} value={subject.id}>\n                          {subject.name}\n                        </option>\n                      ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Class\n                  </label>\n                  <select\n                    name=\"class\"\n                    value={sourceFilters.class}\n                    onChange={handleSourceFilterChange}\n                    className=\"w-full p-2 border rounded-md\"\n                  >\n                    <option value=\"all\">All Classes</option>\n                    {Array.isArray(classes) &&\n                      classes.map(cls => (\n                        <option key={cls.id} value={cls.id}>\n                          {cls.name}\n                        </option>\n                      ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Teacher\n                  </label>\n                  <select\n                    name=\"teacher\"\n                    value={sourceFilters.teacher}\n                    onChange={handleSourceFilterChange}\n                    className=\"w-full p-2 border rounded-md\"\n                  >\n                    <option value=\"all\">All Teachers</option>\n                    {Array.isArray(teachers) &&\n                      teachers.map(teacher => (\n                        <option key={teacher.id} value={teacher.id}>\n                          {teacher.name}\n                        </option>\n                      ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            {/* Source Lessons List */}\n            <div className=\"bg-gray-50 p-4 rounded-md max-h-96 overflow-y-auto\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h4 className=\"font-semibold\">\n                  Available Lessons ({sourceLessons.length})\n                </h4>\n                <Button\n                  onClick={handleSelectAll}\n                  className=\"bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700\"\n                >\n                  {selectedLessons.length === sourceLessons.length\n                    ? 'Deselect All'\n                    : 'Select All'}\n                </Button>\n              </div>\n\n              {isLoadingSource ? (\n                <div className=\"text-center py-4\">Loading lessons...</div>\n              ) : Object.keys(groupedLessons).length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <div className=\"text-4xl mb-2\">📚</div>\n                  <div>No lessons found for the selected criteria</div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {Array.isArray(Object.entries(groupedLessons)) &&\n                    Object.entries(groupedLessons).map(\n                      ([subjectClass, lessons]) => (\n                        <div\n                          key={subjectClass}\n                          className=\"bg-white p-3 rounded border\"\n                        >\n                          <h5 className=\"font-medium mb-2 text-blue-700\">\n                            {subjectClass}\n                          </h5>\n                          <div className=\"space-y-2\">\n                            {Array.isArray(lessons) &&\n                              lessons.map(lesson => (\n                                <div\n                                  key={lesson.id}\n                                  className=\"flex items-center gap-3 p-2 hover:bg-gray-50 rounded\"\n                                >\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={selectedLessons.includes(\n                                      lesson.id\n                                    )}\n                                    onChange={() =>\n                                      handleLessonSelect(lesson.id)\n                                    }\n                                    className=\"rounded\"\n                                  />\n                                  <div className=\"flex-1\">\n                                    <div className=\"font-medium text-sm\">\n                                      {lesson.title}\n                                    </div>\n                                    <div className=\"text-xs text-gray-600\">\n                                      {lesson.date} • {lesson.duration || 'N/A'}{' '}\n                                      min\n                                    </div>\n                                  </div>\n                                  <span\n                                    className={`px-2 py-1 rounded text-xs ${getStatusColor(lesson.status)}`}\n                                  >\n                                    {lesson.status.toUpperCase()}\n                                  </span>\n                                </div>\n                              ))}\n                          </div>\n                        </div>\n                      )\n                    )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Target Selection & Options */}\n          <div className=\"space-y-6\">\n            <div className=\"bg-green-50 p-4 rounded-md\">\n              <h3 className=\"text-lg font-semibold mb-4\">\n                🎯 Target (Copy To)\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Academic Year\n                  </label>\n                  <select\n                    name=\"academicYear\"\n                    value={targetFilters.academicYear}\n                    onChange={handleTargetFilterChange}\n                    className=\"w-full p-2 border rounded-md\"\n                  >\n                    <option value={new Date().getFullYear()}>\n                      {new Date().getFullYear()}\n                    </option>\n                    <option value={new Date().getFullYear() + 1}>\n                      {new Date().getFullYear() + 1}\n                    </option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Subject *\n                  </label>\n                  <select\n                    name=\"subject\"\n                    value={targetFilters.subject}\n                    onChange={handleTargetFilterChange}\n                    className=\"w-full p-2 border rounded-md\"\n                    required\n                  >\n                    <option value=\"\">Select Subject</option>\n                    {Array.isArray(subjects) &&\n                      subjects.map(subject => (\n                        <option key={subject.id} value={subject.id}>\n                          {subject.name}\n                        </option>\n                      ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Class *\n                  </label>\n                  <select\n                    name=\"class\"\n                    value={targetFilters.class}\n                    onChange={handleTargetFilterChange}\n                    className=\"w-full p-2 border rounded-md\"\n                    required\n                  >\n                    <option value=\"\">Select Class</option>\n                    {Array.isArray(classes) &&\n                      classes.map(cls => (\n                        <option key={cls.id} value={cls.id}>\n                          {cls.name}\n                        </option>\n                      ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Assign to Teacher\n                  </label>\n                  <select\n                    name=\"teacher\"\n                    value={targetFilters.teacher}\n                    onChange={handleTargetFilterChange}\n                    className=\"w-full p-2 border rounded-md\"\n                  >\n                    <option value=\"\">Keep Original Teacher</option>\n                    {Array.isArray(teachers) &&\n                      teachers.map(teacher => (\n                        <option key={teacher.id} value={teacher.id}>\n                          {teacher.name}\n                        </option>\n                      ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            {/* Copy Options */}\n            <div className=\"bg-yellow-50 p-4 rounded-md\">\n              <h3 className=\"text-lg font-semibold mb-4\">⚙️ Copy Options</h3>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"copyContent\"\n                    name=\"copyContent\"\n                    checked={copyOptions.copyContent}\n                    onChange={handleCopyOptionsChange}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor=\"copyContent\" className=\"text-sm font-medium\">\n                    Copy lesson content (objectives, activities, materials)\n                  </label>\n                </div>\n\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"copyAttachments\"\n                    name=\"copyAttachments\"\n                    checked={copyOptions.copyAttachments}\n                    onChange={handleCopyOptionsChange}\n                    className=\"mr-2\"\n                  />\n                  <label\n                    htmlFor=\"copyAttachments\"\n                    className=\"text-sm font-medium\"\n                  >\n                    Copy attachments and files\n                  </label>\n                </div>\n\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"updateDates\"\n                    name=\"updateDates\"\n                    checked={copyOptions.updateDates}\n                    onChange={handleCopyOptionsChange}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor=\"updateDates\" className=\"text-sm font-medium\">\n                    Update dates to current academic year\n                  </label>\n                </div>\n\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"preserveStatus\"\n                    name=\"preserveStatus\"\n                    checked={copyOptions.preserveStatus}\n                    onChange={handleCopyOptionsChange}\n                    className=\"mr-2\"\n                  />\n                  <label\n                    htmlFor=\"preserveStatus\"\n                    className=\"text-sm font-medium\"\n                  >\n                    Preserve lesson status (otherwise set to 'planned')\n                  </label>\n                </div>\n\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"adjustSchedule\"\n                    name=\"adjustSchedule\"\n                    checked={copyOptions.adjustSchedule}\n                    onChange={handleCopyOptionsChange}\n                    className=\"mr-2\"\n                  />\n                  <label\n                    htmlFor=\"adjustSchedule\"\n                    className=\"text-sm font-medium\"\n                  >\n                    Auto-adjust schedule based on academic calendar\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            {/* Preview Results */}\n            {previewCopyMutation.data && (\n              <div className=\"bg-purple-50 p-4 rounded-md\">\n                <h3 className=\"text-lg font-semibold mb-4\">📋 Copy Preview</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Lessons to copy:</span>{' '}\n                    {previewCopyMutation.data.totalLessons}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Estimated duration:</span>{' '}\n                    {previewCopyMutation.data.totalDuration} minutes\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Date range:</span>{' '}\n                    {previewCopyMutation.data.dateRange}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Conflicts detected:</span>{' '}\n                    {previewCopyMutation.data.conflicts || 0}\n                  </div>\n                  {previewCopyMutation.data.warnings &&\n                    previewCopyMutation.data.warnings.length > 0 && (\n                      <div className=\"mt-3\">\n                        <div className=\"font-medium text-orange-700\">\n                          Warnings:\n                        </div>\n                        <ul className=\"list-disc list-inside text-orange-600\">\n                          {Array.isArray(previewCopyMutation.data.warnings) &&\n                            previewCopyMutation.data.warnings.map(\n                              (warning, index) => <li key={index}>{warning}</li>\n                            )}\n                        </ul>\n                      </div>\n                    )}\n                </div>\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4\">\n              <Button\n                onClick={handlePreviewCopy}\n                disabled={\n                  previewCopyMutation.isPending || selectedLessons.length === 0\n                }\n                className=\"flex-1 bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700\"\n              >\n                {previewCopyMutation.isPending\n                  ? 'Previewing...'\n                  : 'Preview Copy'}\n              </Button>\n\n              <Button\n                onClick={handleCopyLessons}\n                disabled={\n                  copyLessonsMutation.isPending || selectedLessons.length === 0\n                }\n                className=\"flex-1 bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700\"\n              >\n                {copyLessonsMutation.isPending\n                  ? 'Copying...'\n                  : `Copy ${selectedLessons.length} Lesson(s)`}\n              </Button>\n            </div>\n\n            {/* Selected Lessons Summary */}\n            {selectedLessons.length > 0 && (\n              <div className=\"bg-gray-50 p-4 rounded-md\">\n                <h4 className=\"font-semibold mb-2\">\n                  Selected Lessons ({selectedLessons.length})\n                </h4>\n                <div className=\"max-h-32 overflow-y-auto\">\n                  {sourceLessons\n                    .filter(lesson => selectedLessons.includes(lesson.id))\n                    .map(lesson => (\n                      <div\n                        key={lesson.id}\n                        className=\"text-sm py-1 flex justify-between\"\n                      >\n                        <span>{lesson.title}</span>\n                        <span className=\"text-gray-500\">\n                          {lesson.subjectName}\n                        </span>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default CopyOldLessons\n"
        }
    ]
}