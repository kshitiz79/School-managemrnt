{
    "sourceFile": "src/pages/lessonplan/Lesson.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756042595698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756042595698,
            "name": "Commit-0",
            "content": "import React, { useState, useMemo } from 'react'\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\nimport { lessonPlanApi } from '../../lib/api/lessonPlan'\nimport Button from '../../components/Button'\n\nconst Lesson = () => {\n  const [formData, setFormData] = useState({\n    title: '',\n    topic: '',\n    subject: '',\n    class: '',\n    duration: '',\n    date: '',\n    objectives: '',\n    materials: '',\n    activities: '',\n    assessment: '',\n    homework: '',\n    notes: '',\n    status: 'planned',\n  })\n  const [editingId, setEditingId] = useState(null)\n  const [filters, setFilters] = useState({\n    subject: 'all',\n    class: 'all',\n    status: 'all',\n    dateFrom: '',\n    dateTo: '',\n  })\n\n  const queryClient = useQueryClient()\n\n  const { data: lessons = [], isLoading } = useQuery({\n    queryKey: ['lessons', filters],\n    queryFn: () => lessonPlanApi.getLessons(filters),\n  })\n\n  const { data: topicsResponse } = useQuery({\n    queryKey: ['topics'],\n    queryFn: lessonPlanApi.getTopics,\n  })\n\n  // Safely extract topics from API response\n  const topics = useMemo(() => {\n    if (Array.isArray(topicsResponse)) {\n      return topicsResponse\n    }\n    if (topicsResponse?.data && Array.isArray(topicsResponse.data)) {\n      return topicsResponse.data\n    }\n    return []\n  }, [topicsResponse])\n\n  const { data: subjects = [] } = useQuery({\n    queryKey: ['subjects'],\n    queryFn: lessonPlanApi.getSubjects,\n  })\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['classes'],\n    queryFn: lessonPlanApi.getClasses,\n  })\n\n  const addLessonMutation = useMutation({\n    mutationFn: lessonPlanApi.addLesson,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['lessons'])\n      resetForm()\n      alert('Lesson added successfully!')\n    },\n  })\n\n  const updateLessonMutation = useMutation({\n    mutationFn: ({ id, data }) => lessonPlanApi.updateLesson(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['lessons'])\n      resetForm()\n      alert('Lesson updated successfully!')\n    },\n  })\n\n  const deleteLessonMutation = useMutation({\n    mutationFn: lessonPlanApi.deleteLesson,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['lessons'])\n      alert('Lesson deleted successfully!')\n    },\n  })\n\n  const duplicateLessonMutation = useMutation({\n    mutationFn: lessonPlanApi.duplicateLesson,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['lessons'])\n      alert('Lesson duplicated successfully!')\n    },\n  })\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      topic: '',\n      subject: '',\n      class: '',\n      duration: '',\n      date: '',\n      objectives: '',\n      materials: '',\n      activities: '',\n      assessment: '',\n      homework: '',\n      notes: '',\n      status: 'planned',\n    })\n    setEditingId(null)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    if (editingId) {\n      updateLessonMutation.mutate({ id: editingId, data: formData })\n    } else {\n      addLessonMutation.mutate(formData)\n    }\n  }\n\n  const handleEdit = lesson => {\n    setFormData({\n      title: lesson.title,\n      topic: lesson.topic,\n      subject: lesson.subject,\n      class: lesson.class,\n      duration: lesson.duration || '',\n      date: lesson.date || '',\n      objectives: lesson.objectives || '',\n      materials: lesson.materials || '',\n      activities: lesson.activities || '',\n      assessment: lesson.assessment || '',\n      homework: lesson.homework || '',\n      notes: lesson.notes || '',\n      status: lesson.status,\n    })\n    setEditingId(lesson.id)\n  }\n\n  const handleDelete = id => {\n    if (window.confirm('Are you sure you want to delete this lesson?')) {\n      deleteLessonMutation.mutate(id)\n    }\n  }\n\n  const handleDuplicate = id => {\n    duplicateLessonMutation.mutate(id)\n  }\n\n  const handleFilterChange = e => {\n    const { name, value } = e.target\n    setFilters(prev => ({ ...prev, [name]: value }))\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'planned':\n        return 'bg-blue-100 text-blue-800'\n      case 'in_progress':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'completed':\n        return 'bg-green-100 text-green-800'\n      case 'cancelled':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const printLesson = lesson => {\n    const printWindow = window.open('', '_blank')\n    printWindow.document.write(`\n      <html>\n        <head>\n          <title>Lesson Plan - ${lesson.title}</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 10px; margin-bottom: 20px; }\n            .section { margin-bottom: 15px; }\n            .section-title { font-weight: bold; color: #333; margin-bottom: 5px; }\n            .content { margin-left: 10px; }\n            .meta-info { display: flex; justify-content: space-between; margin-bottom: 20px; }\n            .meta-item { flex: 1; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>Lesson Plan</h1>\n            <h2>${lesson.title}</h2>\n          </div>\n          \n          <div class=\"meta-info\">\n            <div class=\"meta-item\"><strong>Subject:</strong> ${lesson.subjectName}</div>\n            <div class=\"meta-item\"><strong>Class:</strong> ${lesson.className}</div>\n            <div class=\"meta-item\"><strong>Date:</strong> ${lesson.date || 'Not scheduled'}</div>\n            <div class=\"meta-item\"><strong>Duration:</strong> ${lesson.duration || 'Not specified'} minutes</div>\n          </div>\n\n          ${\n            lesson.objectives\n              ? `\n            <div class=\"section\">\n              <div class=\"section-title\">Learning Objectives:</div>\n              <div class=\"content\">${lesson.objectives.replace(/\\n/g, '<br>')}</div>\n            </div>\n          `\n              : ''\n          }\n\n          ${\n            lesson.materials\n              ? `\n            <div class=\"section\">\n              <div class=\"section-title\">Materials Required:</div>\n              <div class=\"content\">${lesson.materials.replace(/\\n/g, '<br>')}</div>\n            </div>\n          `\n              : ''\n          }\n\n          ${\n            lesson.activities\n              ? `\n            <div class=\"section\">\n              <div class=\"section-title\">Activities:</div>\n              <div class=\"content\">${lesson.activities.replace(/\\n/g, '<br>')}</div>\n            </div>\n          `\n              : ''\n          }\n\n          ${\n            lesson.assessment\n              ? `\n            <div class=\"section\">\n              <div class=\"section-title\">Assessment:</div>\n              <div class=\"content\">${lesson.assessment.replace(/\\n/g, '<br>')}</div>\n            </div>\n          `\n              : ''\n          }\n\n          ${\n            lesson.homework\n              ? `\n            <div class=\"section\">\n              <div class=\"section-title\">Homework:</div>\n              <div class=\"content\">${lesson.homework.replace(/\\n/g, '<br>')}</div>\n            </div>\n          `\n              : ''\n          }\n\n          ${\n            lesson.notes\n              ? `\n            <div class=\"section\">\n              <div class=\"section-title\">Notes:</div>\n              <div class=\"content\">${lesson.notes.replace(/\\n/g, '<br>')}</div>\n            </div>\n          `\n              : ''\n          }\n        </body>\n      </html>\n    `)\n    printWindow.document.close()\n    printWindow.print()\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <span className=\"text-3xl\">üìù</span>\n          <h2 className=\"text-2xl font-bold\">Lesson Management</h2>\n        </div>\n\n        {/* Add/Edit Form */}\n        <div className=\"bg-gray-50 p-4 rounded-md mb-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">\n            {editingId ? 'Edit Lesson' : 'Add New Lesson'}\n          </h3>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"lg:col-span-2\">\n                <label className=\"block text-sm font-medium mb-2\">\n                  Lesson Title *\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.title}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, title: e.target.value }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Subject *\n                </label>\n                <select\n                  value={formData.subject}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, subject: e.target.value }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  required\n                >\n                  <option value=\"\">Select Subject</option>\n                  {Array.isArray(subjects) &&\n                    subjects.map(subject => (\n                      <option key={subject.id} value={subject.id}>\n                        {subject.name}\n                      </option>\n                    ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Class *\n                </label>\n                <select\n                  value={formData.class}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, class: e.target.value }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  required\n                >\n                  <option value=\"\">Select Class</option>\n                  {Array.isArray(classes) &&\n                    classes.map(cls => (\n                      <option key={cls.id} value={cls.id}>\n                        {cls.name}\n                      </option>\n                    ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Topic</label>\n                <select\n                  value={formData.topic}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, topic: e.target.value }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                >\n                  <option value=\"\">Select Topic</option>\n                  {Array.isArray(topics) &&\n                    topics\n                      .filter(\n                        topic =>\n                          !formData.subject || topic.subject === formData.subject\n                      )\n                      .map(topic => (\n                        <option key={topic.id} value={topic.id}>\n                          {topic.name}\n                        </option>\n                      ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Date</label>\n                <input\n                  type=\"date\"\n                  value={formData.date}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, date: e.target.value }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Duration (minutes)\n                </label>\n                <input\n                  type=\"number\"\n                  value={formData.duration}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, duration: e.target.value }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  min=\"1\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Status</label>\n                <select\n                  value={formData.status}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, status: e.target.value }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                >\n                  <option value=\"planned\">Planned</option>\n                  <option value=\"in_progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                  <option value=\"cancelled\">Cancelled</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Learning Objectives\n                </label>\n                <textarea\n                  value={formData.objectives}\n                  onChange={e =>\n                    setFormData(prev => ({\n                      ...prev,\n                      objectives: e.target.value,\n                    }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  rows=\"3\"\n                  placeholder=\"What will students learn?\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Materials Required\n                </label>\n                <textarea\n                  value={formData.materials}\n                  onChange={e =>\n                    setFormData(prev => ({\n                      ...prev,\n                      materials: e.target.value,\n                    }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  rows=\"3\"\n                  placeholder=\"Books, equipment, resources needed\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Activities\n                </label>\n                <textarea\n                  value={formData.activities}\n                  onChange={e =>\n                    setFormData(prev => ({\n                      ...prev,\n                      activities: e.target.value,\n                    }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  rows=\"4\"\n                  placeholder=\"Detailed lesson activities and timeline\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Assessment\n                </label>\n                <textarea\n                  value={formData.assessment}\n                  onChange={e =>\n                    setFormData(prev => ({\n                      ...prev,\n                      assessment: e.target.value,\n                    }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  rows=\"4\"\n                  placeholder=\"How will you assess student understanding?\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Homework\n                </label>\n                <textarea\n                  value={formData.homework}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, homework: e.target.value }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  rows=\"3\"\n                  placeholder=\"Homework assignments\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Notes</label>\n                <textarea\n                  value={formData.notes}\n                  onChange={e =>\n                    setFormData(prev => ({ ...prev, notes: e.target.value }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                  rows=\"3\"\n                  placeholder=\"Additional notes or reflections\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex gap-4\">\n              <Button\n                type=\"submit\"\n                disabled={\n                  addLessonMutation.isPending || updateLessonMutation.isPending\n                }\n                className=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700\"\n              >\n                {editingId ? 'Update' : 'Add'} Lesson\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={resetForm}\n                className=\"bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </div>\n\n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Subject</label>\n            <select\n              name=\"subject\"\n              value={filters.subject}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Subjects</option>\n              {Array.isArray(subjects) &&\n                subjects.map(subject => (\n                  <option key={subject.id} value={subject.id}>\n                    {subject.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Class</label>\n            <select\n              name=\"class\"\n              value={filters.class}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Classes</option>\n              {Array.isArray(classes) &&\n                classes.map(cls => (\n                  <option key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Status</label>\n            <select\n              name=\"status\"\n              value={filters.status}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"planned\">Planned</option>\n              <option value=\"in_progress\">In Progress</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"cancelled\">Cancelled</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">From Date</label>\n            <input\n              type=\"date\"\n              name=\"dateFrom\"\n              value={filters.dateFrom}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">To Date</label>\n            <input\n              type=\"date\"\n              name=\"dateTo\"\n              value={filters.dateTo}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            />\n          </div>\n        </div>\n\n        {/* Lessons List */}\n        {isLoading ? (\n          <div className=\"text-center py-4\">Loading...</div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Array.isArray(lessons) &&\n              lessons.map(lesson => (\n                <div\n                  key={lesson.id}\n                  className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <h3 className=\"text-lg font-semibold\">\n                          {lesson.title}\n                        </h3>\n                        <span\n                          className={`px-2 py-1 rounded text-xs ${getStatusColor(lesson.status)}`}\n                        >\n                          {lesson.status.replace('_', ' ').toUpperCase()}\n                        </span>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600\">\n                        <div>\n                          <span className=\"font-medium\">Subject:</span>{' '}\n                          {lesson.subjectName}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Class:</span>{' '}\n                          {lesson.className}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Date:</span>{' '}\n                          {lesson.date || 'Not scheduled'}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Duration:</span>{' '}\n                          {lesson.duration || 'Not specified'} min\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {lesson.objectives && (\n                    <div className=\"mb-3\">\n                      <div className=\"text-sm font-medium text-gray-700 mb-1\">\n                        Objectives:\n                      </div>\n                      <p className=\"text-sm text-gray-600 line-clamp-2\">\n                        {lesson.objectives}\n                      </p>\n                    </div>\n                  )}\n\n                  <div className=\"flex justify-between items-center pt-3 border-t\">\n                    <div className=\"text-xs text-gray-500\">\n                      Created: {new Date(lesson.createdAt).toLocaleDateString()}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        onClick={() => printLesson(lesson)}\n                        className=\"bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700\"\n                      >\n                        Print\n                      </Button>\n                      <Button\n                        onClick={() => handleDuplicate(lesson.id)}\n                        disabled={duplicateLessonMutation.isPending}\n                        className=\"bg-purple-600 text-white px-3 py-1 rounded text-sm hover:bg-purple-700\"\n                      >\n                        Duplicate\n                      </Button>\n                      <Button\n                        onClick={() => handleEdit(lesson)}\n                        className=\"bg-yellow-500 text-white px-3 py-1 rounded text-sm hover:bg-yellow-600\"\n                      >\n                        Edit\n                      </Button>\n                      <Button\n                        onClick={() => handleDelete(lesson.id)}\n                        disabled={deleteLessonMutation.isPending}\n                        className=\"bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600\"\n                      >\n                        Delete\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        )}\n\n        {lessons.length === 0 && !isLoading && (\n          <div className=\"text-center py-8 text-gray-500\">\n            <div className=\"text-6xl mb-4\">üìù</div>\n            <div className=\"text-xl mb-2\">No lessons found</div>\n            <div className=\"text-sm\">\n              Create your first lesson plan to get started\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Lesson\n"
        }
    ]
}