{
    "sourceFile": "src/pages/lessonplan/ManageLessonPlan.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1755985893169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756042595704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from 'react'\n+import { useState, useMemo } from 'react'\n import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n import { lessonPlanApi } from '../../lib/api/lessonPlan'\n import Button from '../../components/Button'\n import { exportToCSV, exportToPDF } from '../../lib/export'\n@@ -16,13 +16,24 @@\n   const [viewMode, setViewMode] = useState('grid') // grid, timeline, calendar\n \n   const queryClient = useQueryClient()\n \n-  const { data: lessonPlans = [], isLoading } = useQuery({\n+  const { data: lessonPlansResponse, isLoading } = useQuery({\n     queryKey: ['lessonPlans', filters],\n     queryFn: () => lessonPlanApi.getLessonPlans(filters),\n   })\n \n+  // Safely extract lesson plans from API response\n+  const lessonPlans = useMemo(() => {\n+    if (Array.isArray(lessonPlansResponse)) {\n+      return lessonPlansResponse\n+    }\n+    if (lessonPlansResponse?.data && Array.isArray(lessonPlansResponse.data)) {\n+      return lessonPlansResponse.data\n+    }\n+    return []\n+  }, [lessonPlansResponse])\n+\n   const { data: subjects = [] } = useQuery({\n     queryKey: ['subjects'],\n     queryFn: lessonPlanApi.getSubjects,\n   })\n@@ -48,27 +59,27 @@\n       lessonPlanApi.approveLessonPlan(id, status, comments),\n     onSuccess: () => {\n       queryClient.invalidateQueries(['lessonPlans'])\n       alert('Lesson plan status updated successfully!')\n-    }\n+    },\n   })\n \n   const bulkApproveMutation = useMutation({\n     mutationFn: lessonPlanApi.bulkApproveLessonPlans,\n     onSuccess: () => {\n       queryClient.invalidateQueries(['lessonPlans'])\n       alert('Bulk approval completed!')\n-    }\n+    },\n   })\n \n   const handleFilterChange = e => {\n     const { name, value } = e.target\n     setFilters(prev => ({ ...prev, [name]: value }))\n-  };\n+  }\n \n   const handleApproval = (id, status, comments = '') => {\n     approvePlanMutation.mutate({ id, status, comments })\n-  };\n+  }\n \n   const handleExport = () => {\n     const exportData = Array.isArray(lessonPlans)\n       ? lessonPlans.map(plan => ({\n@@ -82,9 +93,9 @@\n           'Created Date': plan.createdAt,\n         }))\n       : []\n     exportToCSV(exportData, 'lesson-plans')\n-  };\n+  }\n \n   const getStatusColor = status => {\n     switch (status) {\n       case 'draft':\n@@ -108,38 +119,39 @@\n     if (percentage >= 80) return 'bg-green-500'\n     if (percentage >= 60) return 'bg-yellow-500'\n     if (percentage >= 40) return 'bg-orange-500'\n     return 'bg-red-500'\n-  };\n+  }\n \n   const renderTimelineView = () => {\n-    const sortedPlans = [...lessonPlans].sort(\n-      (a, b) => new Date(a.startDate) - new Date(b.startDate)\n-    )\n+    const sortedPlans = Array.isArray(lessonPlans)\n+      ? [...lessonPlans].sort(\n+          (a, b) => new Date(a.startDate) - new Date(b.startDate)\n+        )\n+      : []\n \n     return (\n       <div className=\"space-y-4\">\n         {Array.isArray(sortedPlans) &&\n-          sortedPlans.map((plan, index) => {\n+          sortedPlans.map((plan) => {\n             const progress =\n               plan.totalLessons > 0\n                 ? (plan.completedLessons / plan.totalLessons) * 100\n                 : 0\n             const startDate = new Date(plan.startDate)\n             const endDate = new Date(plan.endDate)\n             const duration = Math.ceil(\n-              (endDate - startDate) / (1000 * 60 * 60 * 24)\n+              (endDate - startDate) / (1000 * 60 * 60 * 24),\n             )\n \n-\n             return (\n               <div\n                 key={plan.id}\n                 className=\"flex items-center space-x-4 p-4 bg-white rounded-lg border\"\n               >\n                 <div className=\"flex-shrink-0 w-2 h-16 bg-blue-500 rounded\"></div>\n \n-              <div className=\"flex-1\">\n+                <div className=\"flex-1\">\n                   <div className=\"flex justify-between items-start mb-2\">\n                     <h3 className=\"text-lg font-semibold\">{plan.title}</h3>\n                     <span\n                       className={`px-2 py-1 rounded text-xs ${getStatusColor(plan.status)}`}\n@@ -147,9 +159,9 @@\n                       {plan.status.toUpperCase()}\n                     </span>\n                   </div>\n \n-                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600 mb-3\">\n+                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600 mb-3\">\n                     <div>\n                       <span className=\"font-medium\">Subject:</span>{' '}\n                       {plan.subjectName}\n                     </div>\n@@ -166,9 +178,8 @@\n                       days\n                     </div>\n                   </div>\n \n-\n                   <div className=\"mb-3\">\n                     <div className=\"flex justify-between text-sm mb-1\">\n                       <span>\n                         Progress: {plan.completedLessons}/{plan.totalLessons}{' '}\n@@ -183,9 +194,9 @@\n                       ></div>\n                     </div>\n                   </div>\n \n-                <div className=\"flex justify-between items-center\">\n+                  <div className=\"flex justify-between items-center\">\n                     <div className=\"text-xs text-gray-500\">\n                       {startDate.toLocaleDateString()} -{' '}\n                       {endDate.toLocaleDateString()}\n                     </div>\n@@ -219,9 +230,9 @@\n             )\n           })}\n       </div>\n     )\n-  };\n+  }\n \n   const renderGridView = () => {\n     return (\n       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n@@ -247,9 +258,9 @@\n                     {plan.status.toUpperCase()}\n                   </span>\n                 </div>\n \n-              <div className=\"space-y-2 text-sm text-gray-600 mb-4\">\n+                <div className=\"space-y-2 text-sm text-gray-600 mb-4\">\n                   <div>\n                     <span className=\"font-medium\">Subject:</span>{' '}\n                     {plan.subjectName}\n                   </div>\n@@ -278,9 +289,9 @@\n                     ></div>\n                   </div>\n                 </div>\n \n-              <div className=\"flex gap-2\">\n+                <div className=\"flex gap-2\">\n                   <Button\n                     onClick={() => setSelectedPlan(plan.id)}\n                     className=\"flex-1 bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700\"\n                   >\n@@ -307,9 +318,9 @@\n             )\n           })}\n       </div>\n     )\n-  };\n+  }\n \n   return (\n     <div className=\"p-6\">\n       <div className=\"bg-white rounded-lg shadow-md p-6\">\n@@ -347,33 +358,33 @@\n         {/* Stats Cards */}\n         <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\n           <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n             <div className=\"text-2xl font-bold text-blue-700\">\n-              {lessonPlans.filter(p => p.status === 'draft').length}\n+              {Array.isArray(lessonPlans) ? lessonPlans.filter(p => p.status === 'draft').length : 0}\n             </div>\n             <div className=\"text-sm text-blue-600\">Draft</div>\n           </div>\n           <div className=\"bg-yellow-50 p-4 rounded-lg text-center\">\n             <div className=\"text-2xl font-bold text-yellow-700\">\n-              {lessonPlans.filter(p => p.status === 'submitted').length}\n+              {Array.isArray(lessonPlans) ? lessonPlans.filter(p => p.status === 'submitted').length : 0}\n             </div>\n             <div className=\"text-sm text-yellow-600\">Submitted</div>\n           </div>\n           <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n             <div className=\"text-2xl font-bold text-green-700\">\n-              {lessonPlans.filter(p => p.status === 'approved').length}\n+              {Array.isArray(lessonPlans) ? lessonPlans.filter(p => p.status === 'approved').length : 0}\n             </div>\n             <div className=\"text-sm text-green-600\">Approved</div>\n           </div>\n           <div className=\"bg-purple-50 p-4 rounded-lg text-center\">\n             <div className=\"text-2xl font-bold text-purple-700\">\n-              {lessonPlans.filter(p => p.status === 'in_progress').length}\n+              {Array.isArray(lessonPlans) ? lessonPlans.filter(p => p.status === 'in_progress').length : 0}\n             </div>\n             <div className=\"text-sm text-purple-600\">In Progress</div>\n           </div>\n           <div className=\"bg-gray-50 p-4 rounded-lg text-center\">\n             <div className=\"text-2xl font-bold text-gray-700\">\n-              {lessonPlans.filter(p => p.status === 'completed').length}\n+              {Array.isArray(lessonPlans) ? lessonPlans.filter(p => p.status === 'completed').length : 0}\n             </div>\n             <div className=\"text-sm text-gray-600\">Completed</div>\n           </div>\n         </div>\n@@ -477,9 +488,9 @@\n \n         {/* Content */}\n         {isLoading ? (\n           <div className=\"text-center py-8\">Loading lesson plans...</div>\n-        ) : lessonPlans.length === 0 ? (\n+        ) : !Array.isArray(lessonPlans) || lessonPlans.length === 0 ? (\n           <div className=\"text-center py-8 text-gray-500\">\n             <div className=\"text-6xl mb-4\">📋</div>\n             <div className=\"text-xl mb-2\">No lesson plans found</div>\n             <div className=\"text-sm\">\n@@ -595,15 +606,15 @@\n                           </Button>\n                           <Button\n                             onClick={() => {\n                               const comments = prompt(\n-                                'Enter rejection comments:'\n+                                'Enter rejection comments:',\n                               )\n                               if (comments) {\n                                 handleApproval(\n                                   planDetails.id,\n                                   'rejected',\n-                                  comments\n+                                  comments,\n                                 )\n                                 setSelectedPlan(null)\n                               }\n                             }}\n@@ -622,7 +633,7 @@\n         )}\n       </div>\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default ManageLessonPlan\n+export default ManageLessonPlan\n"
                }
            ],
            "date": 1755985893169,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { lessonPlanApi } from '../../lib/api/lessonPlan'\nimport Button from '../../components/Button'\nimport { exportToCSV, exportToPDF } from '../../lib/export'\n\nconst ManageLessonPlan = () => {\n  const [selectedPlan, setSelectedPlan] = useState(null)\n  const [filters, setFilters] = useState({\n    subject: 'all',\n    class: 'all',\n    teacher: 'all',\n    status: 'all',\n    academicYear: new Date().getFullYear(),\n  })\n  const [viewMode, setViewMode] = useState('grid') // grid, timeline, calendar\n\n  const queryClient = useQueryClient()\n\n  const { data: lessonPlans = [], isLoading } = useQuery({\n    queryKey: ['lessonPlans', filters],\n    queryFn: () => lessonPlanApi.getLessonPlans(filters),\n  })\n\n  const { data: subjects = [] } = useQuery({\n    queryKey: ['subjects'],\n    queryFn: lessonPlanApi.getSubjects,\n  })\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['classes'],\n    queryFn: lessonPlanApi.getClasses,\n  })\n\n  const { data: teachers = [] } = useQuery({\n    queryKey: ['teachers'],\n    queryFn: lessonPlanApi.getTeachers,\n  })\n\n  const { data: planDetails, isLoading: isLoadingDetails } = useQuery({\n    queryKey: ['lessonPlanDetails', selectedPlan],\n    queryFn: () => lessonPlanApi.getLessonPlanDetails(selectedPlan),\n    enabled: !!selectedPlan,\n  })\n\n  const approvePlanMutation = useMutation({\n    mutationFn: ({ id, status, comments }) =>\n      lessonPlanApi.approveLessonPlan(id, status, comments),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['lessonPlans'])\n      alert('Lesson plan status updated successfully!')\n    }\n  })\n\n  const bulkApproveMutation = useMutation({\n    mutationFn: lessonPlanApi.bulkApproveLessonPlans,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['lessonPlans'])\n      alert('Bulk approval completed!')\n    }\n  })\n\n  const handleFilterChange = e => {\n    const { name, value } = e.target\n    setFilters(prev => ({ ...prev, [name]: value }))\n  };\n\n  const handleApproval = (id, status, comments = '') => {\n    approvePlanMutation.mutate({ id, status, comments })\n  };\n\n  const handleExport = () => {\n    const exportData = Array.isArray(lessonPlans)\n      ? lessonPlans.map(plan => ({\n          'Plan Title': plan.title,\n          Subject: plan.subjectName,\n          Class: plan.className,\n          Teacher: plan.teacherName,\n          Status: plan.status,\n          'Lessons Count': plan.lessonsCount,\n          Progress: `${plan.completedLessons}/${plan.totalLessons}`,\n          'Created Date': plan.createdAt,\n        }))\n      : []\n    exportToCSV(exportData, 'lesson-plans')\n  };\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'draft':\n        return 'bg-gray-100 text-gray-800'\n      case 'submitted':\n        return 'bg-blue-100 text-blue-800'\n      case 'approved':\n        return 'bg-green-100 text-green-800'\n      case 'rejected':\n        return 'bg-red-100 text-red-800'\n      case 'in_progress':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'completed':\n        return 'bg-purple-100 text-purple-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getProgressColor = percentage => {\n    if (percentage >= 80) return 'bg-green-500'\n    if (percentage >= 60) return 'bg-yellow-500'\n    if (percentage >= 40) return 'bg-orange-500'\n    return 'bg-red-500'\n  };\n\n  const renderTimelineView = () => {\n    const sortedPlans = [...lessonPlans].sort(\n      (a, b) => new Date(a.startDate) - new Date(b.startDate)\n    )\n\n    return (\n      <div className=\"space-y-4\">\n        {Array.isArray(sortedPlans) &&\n          sortedPlans.map((plan, index) => {\n            const progress =\n              plan.totalLessons > 0\n                ? (plan.completedLessons / plan.totalLessons) * 100\n                : 0\n            const startDate = new Date(plan.startDate)\n            const endDate = new Date(plan.endDate)\n            const duration = Math.ceil(\n              (endDate - startDate) / (1000 * 60 * 60 * 24)\n            )\n\n\n            return (\n              <div\n                key={plan.id}\n                className=\"flex items-center space-x-4 p-4 bg-white rounded-lg border\"\n              >\n                <div className=\"flex-shrink-0 w-2 h-16 bg-blue-500 rounded\"></div>\n\n              <div className=\"flex-1\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <h3 className=\"text-lg font-semibold\">{plan.title}</h3>\n                    <span\n                      className={`px-2 py-1 rounded text-xs ${getStatusColor(plan.status)}`}\n                    >\n                      {plan.status.toUpperCase()}\n                    </span>\n                  </div>\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600 mb-3\">\n                    <div>\n                      <span className=\"font-medium\">Subject:</span>{' '}\n                      {plan.subjectName}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Class:</span>{' '}\n                      {plan.className}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Teacher:</span>{' '}\n                      {plan.teacherName}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Duration:</span> {duration}{' '}\n                      days\n                    </div>\n                  </div>\n\n\n                  <div className=\"mb-3\">\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>\n                        Progress: {plan.completedLessons}/{plan.totalLessons}{' '}\n                        lessons\n                      </span>\n                      <span>{progress.toFixed(1)}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div\n                        className={`h-2 rounded-full ${getProgressColor(progress)}`}\n                        style={{ width: `${progress}%` }}\n                      ></div>\n                    </div>\n                  </div>\n\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"text-xs text-gray-500\">\n                      {startDate.toLocaleDateString()} -{' '}\n                      {endDate.toLocaleDateString()}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        onClick={() => setSelectedPlan(plan.id)}\n                        className=\"bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700\"\n                      >\n                        View Details\n                      </Button>\n                      {plan.status === 'submitted' && (\n                        <>\n                          <Button\n                            onClick={() => handleApproval(plan.id, 'approved')}\n                            className=\"bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700\"\n                          >\n                            Approve\n                          </Button>\n                          <Button\n                            onClick={() => handleApproval(plan.id, 'rejected')}\n                            className=\"bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700\"\n                          >\n                            Reject\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n      </div>\n    )\n  };\n\n  const renderGridView = () => {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {Array.isArray(lessonPlans) &&\n          lessonPlans.map(plan => {\n            const progress =\n              plan.totalLessons > 0\n                ? (plan.completedLessons / plan.totalLessons) * 100\n                : 0\n\n            return (\n              <div\n                key={plan.id}\n                className=\"bg-white rounded-lg border p-4 hover:shadow-md transition-shadow\"\n              >\n                <div className=\"flex justify-between items-start mb-3\">\n                  <h3 className=\"text-lg font-semibold line-clamp-2\">\n                    {plan.title}\n                  </h3>\n                  <span\n                    className={`px-2 py-1 rounded text-xs ${getStatusColor(plan.status)}`}\n                  >\n                    {plan.status.toUpperCase()}\n                  </span>\n                </div>\n\n              <div className=\"space-y-2 text-sm text-gray-600 mb-4\">\n                  <div>\n                    <span className=\"font-medium\">Subject:</span>{' '}\n                    {plan.subjectName}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Class:</span> {plan.className}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Teacher:</span>{' '}\n                    {plan.teacherName}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Lessons:</span>{' '}\n                    {plan.totalLessons}\n                  </div>\n                </div>\n\n                <div className=\"mb-4\">\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Progress</span>\n                    <span>{progress.toFixed(1)}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className={`h-2 rounded-full ${getProgressColor(progress)}`}\n                      style={{ width: `${progress}%` }}\n                    ></div>\n                  </div>\n                </div>\n\n              <div className=\"flex gap-2\">\n                  <Button\n                    onClick={() => setSelectedPlan(plan.id)}\n                    className=\"flex-1 bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700\"\n                  >\n                    View\n                  </Button>\n                  {plan.status === 'submitted' && (\n                    <>\n                      <Button\n                        onClick={() => handleApproval(plan.id, 'approved')}\n                        className=\"bg-green-600 text-white px-2 py-1 rounded text-sm hover:bg-green-700\"\n                      >\n                        ✓\n                      </Button>\n                      <Button\n                        onClick={() => handleApproval(plan.id, 'rejected')}\n                        className=\"bg-red-600 text-white px-2 py-1 rounded text-sm hover:bg-red-700\"\n                      >\n                        ✗\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </div>\n            )\n          })}\n      </div>\n    )\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-3xl\">📋</span>\n            <h2 className=\"text-2xl font-bold\">Manage Lesson Plans</h2>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={handleExport}\n              className=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700\"\n            >\n              Export CSV\n            </Button>\n\n            <div className=\"flex bg-gray-200 rounded-md\">\n              <Button\n                onClick={() => setViewMode('grid')}\n                className={`px-3 py-2 rounded-l-md ${viewMode === 'grid' ? 'bg-blue-600 text-white' : 'text-gray-700'}`}\n              >\n                Grid\n              </Button>\n              <Button\n                onClick={() => setViewMode('timeline')}\n                className={`px-3 py-2 rounded-r-md ${viewMode === 'timeline' ? 'bg-blue-600 text-white' : 'text-gray-700'}`}\n              >\n                Timeline\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\n          <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-blue-700\">\n              {lessonPlans.filter(p => p.status === 'draft').length}\n            </div>\n            <div className=\"text-sm text-blue-600\">Draft</div>\n          </div>\n          <div className=\"bg-yellow-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-yellow-700\">\n              {lessonPlans.filter(p => p.status === 'submitted').length}\n            </div>\n            <div className=\"text-sm text-yellow-600\">Submitted</div>\n          </div>\n          <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-green-700\">\n              {lessonPlans.filter(p => p.status === 'approved').length}\n            </div>\n            <div className=\"text-sm text-green-600\">Approved</div>\n          </div>\n          <div className=\"bg-purple-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-purple-700\">\n              {lessonPlans.filter(p => p.status === 'in_progress').length}\n            </div>\n            <div className=\"text-sm text-purple-600\">In Progress</div>\n          </div>\n          <div className=\"bg-gray-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-gray-700\">\n              {lessonPlans.filter(p => p.status === 'completed').length}\n            </div>\n            <div className=\"text-sm text-gray-600\">Completed</div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Subject</label>\n            <select\n              name=\"subject\"\n              value={filters.subject}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Subjects</option>\n              {Array.isArray(subjects) &&\n                subjects.map(subject => (\n                  <option key={subject.id} value={subject.id}>\n                    {subject.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Class</label>\n            <select\n              name=\"class\"\n              value={filters.class}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Classes</option>\n              {Array.isArray(classes) &&\n                classes.map(cls => (\n                  <option key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Teacher</label>\n            <select\n              name=\"teacher\"\n              value={filters.teacher}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Teachers</option>\n              {Array.isArray(teachers) &&\n                teachers.map(teacher => (\n                  <option key={teacher.id} value={teacher.id}>\n                    {teacher.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Status</label>\n            <select\n              name=\"status\"\n              value={filters.status}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"draft\">Draft</option>\n              <option value=\"submitted\">Submitted</option>\n              <option value=\"approved\">Approved</option>\n              <option value=\"rejected\">Rejected</option>\n              <option value=\"in_progress\">In Progress</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">\n              Academic Year\n            </label>\n            <select\n              name=\"academicYear\"\n              value={filters.academicYear}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value={new Date().getFullYear()}>\n                {new Date().getFullYear()}\n              </option>\n              <option value={new Date().getFullYear() - 1}>\n                {new Date().getFullYear() - 1}\n              </option>\n              <option value={new Date().getFullYear() + 1}>\n                {new Date().getFullYear() + 1}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        {/* Content */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">Loading lesson plans...</div>\n        ) : lessonPlans.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <div className=\"text-6xl mb-4\">📋</div>\n            <div className=\"text-xl mb-2\">No lesson plans found</div>\n            <div className=\"text-sm\">\n              No lesson plans match the selected filters\n            </div>\n          </div>\n        ) : (\n          <>{viewMode === 'grid' ? renderGridView() : renderTimelineView()}</>\n        )}\n\n        {/* Plan Details Modal */}\n        {selectedPlan && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-semibold\">Lesson Plan Details</h3>\n                <Button\n                  onClick={() => setSelectedPlan(null)}\n                  className=\"bg-gray-500 text-white px-3 py-1 rounded hover:bg-gray-600\"\n                >\n                  Close\n                </Button>\n              </div>\n\n              {isLoadingDetails ? (\n                <div className=\"text-center py-4\">Loading details...</div>\n              ) : (\n                planDetails && (\n                  <div className=\"space-y-6\">\n                    {/* Plan Overview */}\n                    <div className=\"bg-gray-50 p-4 rounded-md\">\n                      <h4 className=\"font-semibold mb-3\">Plan Overview</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <span className=\"font-medium\">Title:</span>{' '}\n                          {planDetails.title}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Subject:</span>{' '}\n                          {planDetails.subjectName}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Class:</span>{' '}\n                          {planDetails.className}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Teacher:</span>{' '}\n                          {planDetails.teacherName}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Status:</span>\n                          <span\n                            className={`ml-2 px-2 py-1 rounded text-xs ${getStatusColor(planDetails.status)}`}\n                          >\n                            {planDetails.status.toUpperCase()}\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Progress:</span>{' '}\n                          {planDetails.completedLessons}/\n                          {planDetails.totalLessons} lessons\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Lessons List */}\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">\n                        Lessons ({planDetails.lessons?.length || 0})\n                      </h4>\n                      <div className=\"space-y-2\">\n                        {planDetails.lessons?.map((lesson, index) => (\n                          <div\n                            key={lesson.id}\n                            className=\"flex items-center justify-between p-3 bg-gray-50 rounded\"\n                          >\n                            <div className=\"flex items-center gap-3\">\n                              <span className=\"text-sm font-medium\">\n                                {index + 1}.\n                              </span>\n                              <div>\n                                <div className=\"font-medium\">\n                                  {lesson.title}\n                                </div>\n                                <div className=\"text-sm text-gray-600\">\n                                  {lesson.date || 'Not scheduled'}\n                                </div>\n                              </div>\n                            </div>\n                            <span\n                              className={`px-2 py-1 rounded text-xs ${getStatusColor(lesson.status)}`}\n                            >\n                              {lesson.status.replace('_', ' ').toUpperCase()}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Approval Actions */}\n                    {planDetails.status === 'submitted' && (\n                      <div className=\"bg-yellow-50 p-4 rounded-md\">\n                        <h4 className=\"font-semibold mb-3\">Approval Actions</h4>\n                        <div className=\"flex gap-4\">\n                          <Button\n                            onClick={() => {\n                              handleApproval(planDetails.id, 'approved')\n                              setSelectedPlan(null)\n                            }}\n                            className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\"\n                          >\n                            Approve Plan\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              const comments = prompt(\n                                'Enter rejection comments:'\n                              )\n                              if (comments) {\n                                handleApproval(\n                                  planDetails.id,\n                                  'rejected',\n                                  comments\n                                )\n                                setSelectedPlan(null)\n                              }\n                            }}\n                            className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\"\n                          >\n                            Reject Plan\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n};\n\nexport default ManageLessonPlan"
        }
    ]
}