{
    "sourceFile": "src/pages/fees/FeesReports.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925597,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport {\n  BarChart3,\n  PieChart,\n  TrendingUp,\n  TrendingDown,\n  Calendar,\n  Download,\n  Filter,\n  RefreshCw,\n  DollarSign,\n  Users,\n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  FileText,\n  Eye,\n  Percent,\n} from 'lucide-react'\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart as RechartsPieChart,\n  Cell,\n  LineChart,\n  Line,\n  Area,\n  AreaChart,\n} from 'recharts'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { feesApi } from '../../lib/api/fees'\n\nconst KPICard = ({\n  title,\n  value,\n  change,\n  changeType,\n  icon: Icon,\n  color = 'blue',\n}) => {\n  const getColorClasses = color => {\n    const colors = {\n      blue: 'text-blue-600 bg-blue-100',\n      green: 'text-green-600 bg-green-100',\n      red: 'text-red-600 bg-red-100',\n      yellow: 'text-yellow-600 bg-yellow-100',\n      purple: 'text-purple-600 bg-purple-100',\n    }\n    return colors[color] || colors.blue\n  }\n\n  const getChangeColor = changeType => {\n    switch (changeType) {\n      case 'positive':\n        return 'text-green-600'\n      case 'negative':\n        return 'text-red-600'\n      default:\n        return 'text-gray-600'\n    }\n  }\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n          <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n          {change && (\n            <div\n              className={`flex items-center gap-1 text-sm ${getChangeColor(changeType)}`}\n            >\n              {changeType === 'positive' ? (\n                <TrendingUp className=\"w-4 h-4\" />\n              ) : changeType === 'negative' ? (\n                <TrendingDown className=\"w-4 h-4\" />\n              ) : null}\n              <span>{change}</span>\n            </div>\n          )}\n        </div>\n        <div className={`p-3 rounded-full ${getColorClasses(color)}`}>\n          <Icon className=\"w-6 h-6\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst CollectionChart = ({ data, period }) => {\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6']\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-lg font-semibold\">Collection Trends</h3>\n        <div className=\"text-sm text-gray-500\">\n          {period === 'daily' ? 'Last 30 Days' : 'Last 12 Months'}\n        </div>\n      </div>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <AreaChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"period\" />\n          <YAxis />\n          <Tooltip\n            formatter={value => [`₹${value.toLocaleString()}`, 'Amount']}\n            labelFormatter={label => `Period: ${label}`}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"amount\"\n            stroke=\"#3B82F6\"\n            fill=\"#3B82F6\"\n            fillOpacity={0.3}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nconst PaymentModeChart = ({ data }) => {\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6']\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <h3 className=\"text-lg font-semibold mb-6\">Payment Mode Distribution</h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <RechartsPieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            label={({ name, percent }) =>\n              `${name} ${(percent * 100).toFixed(0)}%`\n            }\n            outerRadius={80}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n          >\n            {Array.isArray(data) &&\n              data.map((entry, index) => (\n                <Cell\n                  key={`cell-${index}`}\n                  fill={COLORS[index % COLORS.length]}\n                />\n              ))}\n          </Pie>\n          <Tooltip\n            formatter={value => [`₹${value.toLocaleString()}`, 'Amount']}\n          />\n        </RechartsPieChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nconst DuesAgingChart = ({ data }) => {\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <h3 className=\"text-lg font-semibold mb-6\">Dues Aging Analysis</h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"ageGroup\" />\n          <YAxis />\n          <Tooltip\n            formatter={value => [`₹${value.toLocaleString()}`, 'Amount']}\n          />\n          <Bar dataKey=\"amount\" fill=\"#EF4444\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nconst ConcessionAnalyticsChart = ({ data }) => {\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <h3 className=\"text-lg font-semibold mb-6\">Concession Analytics</h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"concessionType\" />\n          <YAxis />\n          <Tooltip\n            formatter={(value, name) => [\n              name === 'students' ? value : `₹${value.toLocaleString()}`,\n              name === 'students' ? 'Students' : 'Amount',\n            ]}\n          />\n          <Bar dataKey=\"amount\" fill=\"#10B981\" name=\"amount\" />\n          <Bar dataKey=\"students\" fill=\"#3B82F6\" name=\"students\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nconst ReportFilters = ({ filters, onFiltersChange }) => {\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => feesApi.getClasses(),\n  })\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h3 className=\"font-medium\">Report Filters</h3>\n        <button\n          onClick={() =>\n            onFiltersChange({\n              dateFrom: '',\n              dateTo: '',\n              classId: '',\n              reportType: 'collection',\n              period: 'daily',\n            })\n          }\n          className=\"text-sm text-blue-600 hover:text-blue-700\"\n        >\n          Reset Filters\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Report Type</label>\n          <select\n            value={filters.reportType}\n            onChange={e =>\n              onFiltersChange({ ...filters, reportType: e.target.value })\n            }\n            className=\"w-full border rounded-lg px-3 py-2\"\n          >\n            <option value=\"collection\">Collection Report</option>\n            <option value=\"dues\">Dues Report</option>\n            <option value=\"concessions\">Concessions Report</option>\n            <option value=\"payment_modes\">Payment Modes</option>\n            <option value=\"aging\">Aging Analysis</option>\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Period</label>\n          <select\n            value={filters.period}\n            onChange={e =>\n              onFiltersChange({ ...filters, period: e.target.value })\n            }\n            className=\"w-full border rounded-lg px-3 py-2\"\n          >\n            <option value=\"daily\">Daily</option>\n            <option value=\"weekly\">Weekly</option>\n            <option value=\"monthly\">Monthly</option>\n            <option value=\"yearly\">Yearly</option>\n          </select>\n        </div>\n\n        <Input\n          label=\"From Date\"\n          type=\"date\"\n          value={filters.dateFrom}\n          onChange={e =>\n            onFiltersChange({ ...filters, dateFrom: e.target.value })\n          }\n        />\n\n        <Input\n          label=\"To Date\"\n          type=\"date\"\n          value={filters.dateTo}\n          onChange={e =>\n            onFiltersChange({ ...filters, dateTo: e.target.value })\n          }\n        />\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Class</label>\n          <select\n            value={filters.classId}\n            onChange={e =>\n              onFiltersChange({ ...filters, classId: e.target.value })\n            }\n            className=\"w-full border rounded-lg px-3 py-2\"\n          >\n            <option value=\"\">All Classes</option>\n            {Array.isArray(classesData?.data) &&\n              classesData.data.map(cls => (\n                <option key={cls.id} value={cls.id}>\n                  {cls.name}\n                </option>\n              ))}\n          </select>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst DetailedReportDialog = ({ reportType, filters, open, onClose }) => {\n  const { data: detailedData, isLoading } = useQuery({\n    queryKey: ['detailed-report', reportType, filters],\n    queryFn: () => feesApi.getDetailedReport(reportType, filters),\n    enabled: open,\n  })\n\n  const handleExport = async format => {\n    try {\n      const exportData = detailedData?.data || []\n      let content, filename, mimeType\n\n      if (format === 'csv') {\n        content = generateCSVContent(exportData, reportType)\n        filename = `${reportType}-report-${new Date().toISOString().split('T')[0]}.csv`\n        mimeType = 'text/csv'\n      } else if (format === 'pdf') {\n        content = generatePDFContent(exportData, reportType)\n        filename = `${reportType}-report-${new Date().toISOString().split('T')[0]}.pdf`\n        mimeType = 'application/pdf'\n      }\n\n      const blob = new Blob([content], { type: mimeType })\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = filename\n      a.click()\n      window.URL.revokeObjectURL(url)\n    } catch (error) {\n      console.error('Export error:', error)\n      alert('Error exporting report. Please try again.')\n    }\n  }\n\n  const generateCSVContent = (data, reportType) => {\n    if (reportType === 'collection') {\n      const headers = [\n        'Date',\n        'Student Name',\n        'Class',\n        'Amount',\n        'Payment Mode',\n        'Receipt No',\n      ]\n      const rows = data.map(item => [\n        new Date(item.date).toLocaleDateString(),\n        item.studentName,\n        item.className,\n        item.amount,\n        item.paymentMode,\n        item.receiptNumber,\n      ])\n      return [headers, ...rows].map(row => row.join(',')).join('\\n')\n    }\n    // Add other report type CSV generation logic here\n    return ''\n  }\n\n  const generatePDFContent = (data, reportType) => {\n    // PDF generation logic would go here\n    return ''\n  }\n\n  if (!open) return null\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title={`Detailed ${reportType} Report`}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"font-medium\">Report Details</h3>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => handleExport('csv')}\n              className=\"px-3 py-2 border rounded-lg hover:bg-gray-50 text-sm flex items-center gap-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              Export CSV\n            </button>\n            <button\n              onClick={() => handleExport('pdf')}\n              className=\"px-3 py-2 border rounded-lg hover:bg-gray-50 text-sm flex items-center gap-2\"\n            >\n              <FileText className=\"w-4 h-4\" />\n              Export PDF\n            </button>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <LoadingSkeleton />\n        ) : (\n          <div className=\"max-h-96 overflow-y-auto\">\n            <table className=\"w-full border-collapse border border-gray-300\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  {reportType === 'collection' && (\n                    <>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">\n                        Date\n                      </th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">\n                        Student\n                      </th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">\n                        Class\n                      </th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-right\">\n                        Amount\n                      </th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">\n                        Mode\n                      </th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left\">\n                        Receipt\n                      </th>\n                    </>\n                  )}\n                </tr>\n              </thead>\n              <tbody>\n                {detailedData?.data?.map((item, index) => (\n                  <tr key={index} className=\"hover:bg-gray-50\">\n                    {reportType === 'collection' && (\n                      <>\n                        <td className=\"border border-gray-300 px-4 py-2\">\n                          {new Date(item.date).toLocaleDateString()}\n                        </td>\n                        <td className=\"border border-gray-300 px-4 py-2\">\n                          {item.studentName}\n                        </td>\n                        <td className=\"border border-gray-300 px-4 py-2\">\n                          {item.className}\n                        </td>\n                        <td className=\"border border-gray-300 px-4 py-2 text-right\">\n                          ₹{item.amount.toLocaleString()}\n                        </td>\n                        <td className=\"border border-gray-300 px-4 py-2 capitalize\">\n                          {item.paymentMode.replace('_', ' ')}\n                        </td>\n                        <td className=\"border border-gray-300 px-4 py-2\">\n                          {item.receiptNumber}\n                        </td>\n                      </>\n                    )}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n\n        <div className=\"flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst FeesReports = () => {\n  const [filters, setFilters] = useState({\n    dateFrom: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n      .toISOString()\n      .split('T')[0],\n    dateTo: new Date().toISOString().split('T')[0],\n    classId: '',\n    reportType: 'collection',\n    period: 'daily',\n  })\n  const [showDetailedReport, setShowDetailedReport] = useState(false)\n  const [selectedReportType, setSelectedReportType] = useState('')\n\n  const {\n    data: dashboardData,\n    isLoading,\n    refetch,\n  } = useQuery({\n    queryKey: ['fees-dashboard', filters],\n    queryFn: () => feesApi.getFeesDashboard(filters),\n  })\n\n  const handleViewDetailedReport = reportType => {\n    setSelectedReportType(reportType)\n    setShowDetailedReport(true)\n  }\n\n  const handleExportDashboard = async () => {\n    try {\n      const exportData = {\n        filters,\n        kpis: dashboardData?.kpis,\n        summary: dashboardData?.summary,\n        generatedAt: new Date().toISOString(),\n      }\n\n      const content = JSON.stringify(exportData, null, 2)\n      const blob = new Blob([content], { type: 'application/json' })\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = `fees-dashboard-${new Date().toISOString().split('T')[0]}.json`\n      a.click()\n      window.URL.revokeObjectURL(url)\n    } catch (error) {\n      console.error('Export error:', error)\n      alert('Error exporting dashboard. Please try again.')\n    }\n  }\n\n  if (isLoading) return <LoadingSkeleton />\n\n  const kpis = dashboardData?.kpis || {}\n  const charts = dashboardData?.charts || {}\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Fees Reports Dashboard</h1>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => refetch()}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n            Refresh\n          </button>\n          <button\n            onClick={handleExportDashboard}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            Export Dashboard\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <ReportFilters filters={filters} onFiltersChange={setFilters} />\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <KPICard\n          title=\"Total Collection\"\n          value={`₹${kpis.totalCollection?.toLocaleString() || 0}`}\n          change={kpis.collectionChange}\n          changeType={kpis.collectionChangeType}\n          icon={DollarSign}\n          color=\"green\"\n        />\n        <KPICard\n          title=\"Outstanding Dues\"\n          value={`₹${kpis.outstandingDues?.toLocaleString() || 0}`}\n          change={kpis.duesChange}\n          changeType={kpis.duesChangeType}\n          icon={AlertTriangle}\n          color=\"red\"\n        />\n        <KPICard\n          title=\"Students Paid\"\n          value={kpis.studentsPaid || 0}\n          change={kpis.studentsChange}\n          changeType={kpis.studentsChangeType}\n          icon={Users}\n          color=\"blue\"\n        />\n        <KPICard\n          title=\"Collection Rate\"\n          value={`${kpis.collectionRate || 0}%`}\n          change={kpis.rateChange}\n          changeType={kpis.rateChangeType}\n          icon={Percent}\n          color=\"purple\"\n        />\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <CollectionChart\n          data={charts.collectionTrends || []}\n          period={filters.period}\n        />\n        <PaymentModeChart data={charts.paymentModes || []} />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <DuesAgingChart data={charts.duesAging || []} />\n        <ConcessionAnalyticsChart data={charts.concessionAnalytics || []} />\n      </div>\n\n      {/* Quick Reports */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Quick Reports</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <button\n            onClick={() => handleViewDetailedReport('collection')}\n            className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\"\n          >\n            <div className=\"flex items-center gap-3 mb-2\">\n              <DollarSign className=\"w-5 h-5 text-green-600\" />\n              <span className=\"font-medium\">Daily Collection</span>\n            </div>\n            <p className=\"text-sm text-gray-600\">\n              Detailed collection report with payment breakdowns\n            </p>\n          </button>\n\n          <button\n            onClick={() => handleViewDetailedReport('dues')}\n            className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\"\n          >\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Clock className=\"w-5 h-5 text-red-600\" />\n              <span className=\"font-medium\">Outstanding Dues</span>\n            </div>\n            <p className=\"text-sm text-gray-600\">\n              Students with pending fee payments\n            </p>\n          </button>\n\n          <button\n            onClick={() => handleViewDetailedReport('concessions')}\n            className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\"\n          >\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Percent className=\"w-5 h-5 text-blue-600\" />\n              <span className=\"font-medium\">Concessions Report</span>\n            </div>\n            <p className=\"text-sm text-gray-600\">\n              Discount and concession analytics\n            </p>\n          </button>\n\n          <button\n            onClick={() => handleViewDetailedReport('aging')}\n            className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\"\n          >\n            <div className=\"flex items-center gap-3 mb-2\">\n              <BarChart3 className=\"w-5 h-5 text-purple-600\" />\n              <span className=\"font-medium\">Aging Analysis</span>\n            </div>\n            <p className=\"text-sm text-gray-600\">\n              Age-wise breakdown of outstanding dues\n            </p>\n          </button>\n        </div>\n      </div>\n\n      {/* Summary Statistics */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Summary Statistics</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-green-600 mb-2\">\n              ₹{dashboardData?.summary?.totalCollected?.toLocaleString() || 0}\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              Total Collected This Period\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-red-600 mb-2\">\n              ₹{dashboardData?.summary?.totalOutstanding?.toLocaleString() || 0}\n            </div>\n            <div className=\"text-sm text-gray-600\">Total Outstanding</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n              {dashboardData?.summary?.collectionEfficiency || 0}%\n            </div>\n            <div className=\"text-sm text-gray-600\">Collection Efficiency</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Detailed Report Dialog */}\n      <DetailedReportDialog\n        reportType={selectedReportType}\n        filters={filters}\n        open={showDetailedReport}\n        onClose={() => setShowDetailedReport(false)}\n      />\n    </div>\n  )\n}\n\nexport default FeesReports\n"
        }
    ]
}