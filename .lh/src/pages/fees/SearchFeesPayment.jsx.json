{
    "sourceFile": "src/pages/fees/SearchFeesPayment.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925598,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport {\n  Search,\n  Filter,\n  Calendar,\n  Download,\n  Eye,\n  Printer,\n  RefreshCw,\n  DollarSign,\n  User,\n  CreditCard,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  FileText,\n  Clock,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { feesApi } from '../../lib/api/fees'\nimport { printToPDF } from '../../lib/print'\n\nconst PaymentFilters = ({ filters, onFiltersChange }) => {\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => feesApi.getClasses(),\n  })\n\n  const { data: feeGroupsData } = useQuery({\n    queryKey: ['fee-groups', 'active'],\n    queryFn: () => feesApi.getActiveFeeGroups(),\n  })\n\n  const paymentModes = [\n    { value: 'cash', label: 'Cash' },\n    { value: 'card', label: 'Card' },\n    { value: 'upi', label: 'UPI' },\n    { value: 'cheque', label: 'Cheque' },\n    { value: 'bank_transfer', label: 'Bank Transfer' },\n  ]\n\n  const paymentStatuses = [\n    { value: 'completed', label: 'Completed' },\n    { value: 'pending', label: 'Pending' },\n    { value: 'failed', label: 'Failed' },\n    { value: 'cancelled', label: 'Cancelled' },\n  ]\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h3 className=\"font-medium\">Search Filters</h3>\n        <button\n          onClick={() =>\n            onFiltersChange({\n              searchTerm: '',\n              classId: '',\n              feeGroupId: '',\n              paymentMode: '',\n              status: '',\n              dateFrom: '',\n              dateTo: '',\n              amountFrom: '',\n              amountTo: '',\n            })\n          }\n          className=\"text-sm text-blue-600 hover:text-blue-700\"\n        >\n          Clear All\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {/* Search Term */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search by name, roll number...\"\n            value={filters.searchTerm}\n            onChange={e =>\n              onFiltersChange({ ...filters, searchTerm: e.target.value })\n            }\n            className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n          />\n        </div>\n\n        {/* Class Filter */}\n        <select\n          value={filters.classId}\n          onChange={e =>\n            onFiltersChange({ ...filters, classId: e.target.value })\n          }\n          className=\"border rounded-lg px-3 py-2\"\n        >\n          <option value=\"\">All Classes</option>\n          {Array.isArray(classesData?.data) &&\n            classesData.data.map(cls => (\n              <option key={cls.id} value={cls.id}>\n                {cls.name}\n              </option>\n            ))}\n        </select>\n\n        {/* Fee Group Filter */}\n        <select\n          value={filters.feeGroupId}\n          onChange={e =>\n            onFiltersChange({ ...filters, feeGroupId: e.target.value })\n          }\n          className=\"border rounded-lg px-3 py-2\"\n        >\n          <option value=\"\">All Fee Groups</option>\n          {feeGroupsData?.data?.map(group => (\n            <option key={group.id} value={group.id}>\n              {group.name}\n            </option>\n          ))}\n        </select>\n\n        {/* Payment Mode Filter */}\n        <select\n          value={filters.paymentMode}\n          onChange={e =>\n            onFiltersChange({ ...filters, paymentMode: e.target.value })\n          }\n          className=\"border rounded-lg px-3 py-2\"\n        >\n          <option value=\"\">All Payment Modes</option>\n          {Array.isArray(paymentModes) &&\n            paymentModes.map(mode => (\n              <option key={mode.value} value={mode.value}>\n                {mode.label}\n              </option>\n            ))}\n        </select>\n\n        {/* Status Filter */}\n        <select\n          value={filters.status}\n          onChange={e =>\n            onFiltersChange({ ...filters, status: e.target.value })\n          }\n          className=\"border rounded-lg px-3 py-2\"\n        >\n          <option value=\"\">All Statuses</option>\n          {Array.isArray(paymentStatuses) &&\n            paymentStatuses.map(status => (\n              <option key={status.value} value={status.value}>\n                {status.label}\n              </option>\n            ))}\n        </select>\n\n        {/* Date Range */}\n        <Input\n          label=\"From Date\"\n          type=\"date\"\n          value={filters.dateFrom}\n          onChange={e =>\n            onFiltersChange({ ...filters, dateFrom: e.target.value })\n          }\n        />\n\n        <Input\n          label=\"To Date\"\n          type=\"date\"\n          value={filters.dateTo}\n          onChange={e =>\n            onFiltersChange({ ...filters, dateTo: e.target.value })\n          }\n        />\n\n        {/* Amount Range */}\n        <Input\n          label=\"Min Amount\"\n          type=\"number\"\n          value={filters.amountFrom}\n          onChange={e =>\n            onFiltersChange({ ...filters, amountFrom: e.target.value })\n          }\n          placeholder=\"0\"\n        />\n\n        <Input\n          label=\"Max Amount\"\n          type=\"number\"\n          value={filters.amountTo}\n          onChange={e =>\n            onFiltersChange({ ...filters, amountTo: e.target.value })\n          }\n          placeholder=\"No limit\"\n        />\n      </div>\n    </div>\n  )\n}\n\nconst PaymentCard = ({ payment, onViewDetails, onPrintReceipt }) => {\n  const getStatusColor = status => {\n    switch (status) {\n      case 'completed':\n        return 'text-green-600 bg-green-100'\n      case 'pending':\n        return 'text-yellow-600 bg-yellow-100'\n      case 'failed':\n        return 'text-red-600 bg-red-100'\n      case 'cancelled':\n        return 'text-gray-600 bg-gray-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  const getPaymentModeIcon = mode => {\n    switch (mode) {\n      case 'cash':\n        return '💵'\n      case 'card':\n        return '💳'\n      case 'upi':\n        return '📱'\n      case 'cheque':\n        return '🏦'\n      case 'bank_transfer':\n        return '🏛️'\n      default:\n        return '💰'\n    }\n  }\n\n  return (\n    <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n            <User className=\"w-5 h-5 text-blue-600\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold\">{payment.studentName}</h3>\n            <p className=\"text-sm text-gray-600\">\n              {payment.className} - {payment.section} | Roll:{' '}\n              {payment.rollNumber}\n            </p>\n          </div>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-xl font-bold text-green-600\">\n            ₹{payment.amount.toLocaleString()}\n          </div>\n          <span\n            className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(payment.status)}`}\n          >\n            {payment.status.charAt(0).toUpperCase() + payment.status.slice(1)}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n        <div>\n          <span className=\"text-gray-500\">Receipt No:</span>\n          <div className=\"font-medium\">{payment.receiptNumber}</div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">Payment Date:</span>\n          <div className=\"font-medium\">\n            {new Date(payment.paymentDate).toLocaleDateString()}\n          </div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">Payment Mode:</span>\n          <div className=\"font-medium flex items-center gap-1\">\n            <span>{getPaymentModeIcon(payment.paymentMode)}</span>\n            {payment.paymentMode.replace('_', ' ').toUpperCase()}\n          </div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">Fee Group:</span>\n          <div className=\"font-medium\">{payment.feeGroupName}</div>\n        </div>\n      </div>\n\n      {payment.feeTypes && payment.feeTypes.length > 0 && (\n        <div className=\"border-t pt-3 mb-4\">\n          <div className=\"text-sm text-gray-600 mb-2\">Fee Types:</div>\n          <div className=\"flex flex-wrap gap-1\">\n            {payment.feeTypes.slice(0, 3).map((feeType, index) => (\n              <span\n                key={index}\n                className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs\"\n              >\n                {feeType.name}\n              </span>\n            ))}\n            {payment.feeTypes.length > 3 && (\n              <span className=\"px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs\">\n                +{payment.feeTypes.length - 3} more\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n\n      {payment.remarks && (\n        <div className=\"border-t pt-3 mb-4\">\n          <div className=\"text-sm text-gray-600 mb-1\">Remarks:</div>\n          <div className=\"text-sm\">{payment.remarks}</div>\n        </div>\n      )}\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"text-xs text-gray-500\">\n          Collected by: {payment.collectedBy}\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onViewDetails(payment)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"View Details\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onPrintReceipt(payment)}\n            className=\"p-1 text-gray-400 hover:text-green-600\"\n            title=\"Print Receipt\"\n          >\n            <Printer className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst PaymentDetailsDialog = ({ payment, open, onClose }) => {\n  if (!payment) return null\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'completed':\n        return 'text-green-600 bg-green-100'\n      case 'pending':\n        return 'text-yellow-600 bg-yellow-100'\n      case 'failed':\n        return 'text-red-600 bg-red-100'\n      case 'cancelled':\n        return 'text-gray-600 bg-gray-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  return (\n    <Dialog open={open} onClose={onClose} title=\"Payment Details\" size=\"lg\">\n      <div className=\"space-y-6\">\n        {/* Student Information */}\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-3\">Student Information</h3>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-500\">Name:</span>\n              <div className=\"font-medium\">{payment.studentName}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Roll Number:</span>\n              <div className=\"font-medium\">{payment.rollNumber}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Class:</span>\n              <div className=\"font-medium\">\n                {payment.className} - {payment.section}\n              </div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Admission Number:</span>\n              <div className=\"font-medium\">{payment.admissionNumber}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Payment Information */}\n        <div className=\"bg-blue-50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-3\">Payment Information</h3>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-500\">Receipt Number:</span>\n              <div className=\"font-medium\">{payment.receiptNumber}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Payment Date:</span>\n              <div className=\"font-medium\">\n                {new Date(payment.paymentDate).toLocaleString()}\n              </div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Payment Mode:</span>\n              <div className=\"font-medium capitalize\">\n                {payment.paymentMode.replace('_', ' ')}\n              </div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Status:</span>\n              <span\n                className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(payment.status)}`}\n              >\n                {payment.status.charAt(0).toUpperCase() +\n                  payment.status.slice(1)}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Amount:</span>\n              <div className=\"font-medium text-lg text-green-600\">\n                ₹{payment.amount.toLocaleString()}\n              </div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Collected By:</span>\n              <div className=\"font-medium\">{payment.collectedBy}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Payment Method Details */}\n        {payment.paymentDetails && (\n          <div className=\"bg-yellow-50 rounded-lg p-4\">\n            <h3 className=\"font-medium mb-3\">Payment Method Details</h3>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              {payment.paymentMode === 'cheque' && (\n                <>\n                  <div>\n                    <span className=\"text-gray-500\">Cheque Number:</span>\n                    <div className=\"font-medium\">\n                      {payment.paymentDetails.chequeNumber}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Cheque Date:</span>\n                    <div className=\"font-medium\">\n                      {payment.paymentDetails.chequeDate}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Bank Name:</span>\n                    <div className=\"font-medium\">\n                      {payment.paymentDetails.bankName}\n                    </div>\n                  </div>\n                </>\n              )}\n              {payment.paymentMode === 'bank_transfer' && (\n                <>\n                  <div>\n                    <span className=\"text-gray-500\">Transaction ID:</span>\n                    <div className=\"font-medium\">\n                      {payment.paymentDetails.transactionId}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Bank Name:</span>\n                    <div className=\"font-medium\">\n                      {payment.paymentDetails.bankName}\n                    </div>\n                  </div>\n                </>\n              )}\n              {payment.paymentMode === 'upi' && (\n                <div>\n                  <span className=\"text-gray-500\">\n                    UPI ID / Transaction ID:\n                  </span>\n                  <div className=\"font-medium\">\n                    {payment.paymentDetails.upiId}\n                  </div>\n                </div>\n              )}\n              {payment.paymentMode === 'card' && (\n                <div>\n                  <span className=\"text-gray-500\">Card Number:</span>\n                  <div className=\"font-medium\">\n                    ****{payment.paymentDetails.cardNumber}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Fee Details */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Fee Details</h3>\n          <div className=\"bg-white border rounded-lg overflow-hidden\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"text-left py-2 px-4\">Fee Type</th>\n                  <th className=\"text-right py-2 px-4\">Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {payment.feeTypes?.map((feeType, index) => (\n                  <tr key={index} className=\"border-b\">\n                    <td className=\"py-2 px-4\">{feeType.name}</td>\n                    <td className=\"py-2 px-4 text-right\">\n                      ₹{feeType.amount.toLocaleString()}\n                    </td>\n                  </tr>\n                ))}\n                {payment.discountAmount > 0 && (\n                  <tr className=\"border-b\">\n                    <td className=\"py-2 px-4 text-green-600\">Discount</td>\n                    <td className=\"py-2 px-4 text-right text-green-600\">\n                      -₹{payment.discountAmount.toLocaleString()}\n                    </td>\n                  </tr>\n                )}\n                <tr className=\"bg-gray-50 font-bold\">\n                  <td className=\"py-2 px-4\">Total Amount</td>\n                  <td className=\"py-2 px-4 text-right\">\n                    ₹{payment.amount.toLocaleString()}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Remarks */}\n        {payment.remarks && (\n          <div>\n            <h3 className=\"font-medium mb-2\">Remarks</h3>\n            <div className=\"bg-gray-50 rounded p-3 text-sm\">\n              {payment.remarks}\n            </div>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst SearchFeesPayment = () => {\n  const [filters, setFilters] = useState({\n    searchTerm: '',\n    classId: '',\n    feeGroupId: '',\n    paymentMode: '',\n    status: '',\n    dateFrom: '',\n    dateTo: '',\n    amountFrom: '',\n    amountTo: '',\n  })\n  const [selectedPayment, setSelectedPayment] = useState(null)\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n  const [sortBy, setSortBy] = useState('paymentDate')\n  const [sortOrder, setSortOrder] = useState('desc')\n\n  const {\n    data: paymentsData,\n    isLoading,\n    refetch,\n  } = useQuery({\n    queryKey: ['fee-payments', 'search', filters, sortBy, sortOrder],\n    queryFn: () => feesApi.searchPayments({ ...filters, sortBy, sortOrder }),\n  })\n\n  const handleViewDetails = payment => {\n    setSelectedPayment(payment)\n    setShowDetailsDialog(true)\n  }\n\n  const handlePrintReceipt = async payment => {\n    try {\n      const receiptHTML = generateReceiptHTML(payment)\n      await printToPDF(receiptHTML, `receipt-${payment.receiptNumber}.pdf`)\n    } catch (error) {\n      console.error('Print error:', error)\n      alert('Error printing receipt. Please try again.')\n    }\n  }\n\n  const handleExportData = async () => {\n    try {\n      const exportData = paymentsData?.data || []\n      const csvContent = generateCSVContent(exportData)\n      const blob = new Blob([csvContent], { type: 'text/csv' })\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = `fee-payments-${new Date().toISOString().split('T')[0]}.csv`\n      a.click()\n      window.URL.revokeObjectURL(url)\n    } catch (error) {\n      console.error('Export error:', error)\n      alert('Error exporting data. Please try again.')\n    }\n  }\n\n  const generateReceiptHTML = payment => {\n    return `\n      <div style=\"max-width: 400px; margin: 0 auto; font-family: Arial, sans-serif;\">\n        <div style=\"text-align: center; border-bottom: 2px solid #000; padding-bottom: 20px; margin-bottom: 20px;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">GREENWOOD HIGH SCHOOL</h1>\n          <p style=\"margin: 5px 0; font-size: 14px;\">123 School Street, Education City</p>\n          <p style=\"margin: 5px 0; font-size: 14px;\">Phone: +91 98765 43210</p>\n          <h2 style=\"margin: 10px 0; font-size: 18px;\">FEE RECEIPT</h2>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <table style=\"width: 100%; font-size: 14px;\">\n            <tr>\n              <td><strong>Receipt No:</strong></td>\n              <td>${payment.receiptNumber}</td>\n            </tr>\n            <tr>\n              <td><strong>Date:</strong></td>\n              <td>${new Date(payment.paymentDate).toLocaleDateString()}</td>\n            </tr>\n            <tr>\n              <td><strong>Student Name:</strong></td>\n              <td>${payment.studentName}</td>\n            </tr>\n            <tr>\n              <td><strong>Roll Number:</strong></td>\n              <td>${payment.rollNumber}</td>\n            </tr>\n            <tr>\n              <td><strong>Class:</strong></td>\n              <td>${payment.className} - ${payment.section}</td>\n            </tr>\n            <tr>\n              <td><strong>Payment Mode:</strong></td>\n              <td style=\"text-transform: capitalize;\">${payment.paymentMode.replace('_', ' ')}</td>\n            </tr>\n          </table>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <h3 style=\"margin-bottom: 10px; font-size: 16px;\">Fee Details:</h3>\n          <table style=\"width: 100%; border-collapse: collapse; font-size: 14px;\">\n            <thead>\n              <tr style=\"background: #f5f5f5;\">\n                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Description</th>\n                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: right;\">Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${\n                payment.feeTypes\n                  ?.map(\n                    feeType => `\n                <tr>\n                  <td style=\"border: 1px solid #ddd; padding: 8px;\">${feeType.name}</td>\n                  <td style=\"border: 1px solid #ddd; padding: 8px; text-align: right;\">₹${feeType.amount.toLocaleString()}</td>\n                </tr>\n              `,\n                  )\n                  .join('') || ''\n              }\n              ${\n                payment.discountAmount > 0\n                  ? `\n                <tr>\n                  <td style=\"border: 1px solid #ddd; padding: 8px;\">Discount</td>\n                  <td style=\"border: 1px solid #ddd; padding: 8px; text-align: right; color: green;\">-₹${payment.discountAmount.toLocaleString()}</td>\n                </tr>\n              `\n                  : ''\n              }\n              <tr style=\"background: #f5f5f5; font-weight: bold;\">\n                <td style=\"border: 1px solid #ddd; padding: 8px;\">Total Amount</td>\n                <td style=\"border: 1px solid #ddd; padding: 8px; text-align: right;\">₹${payment.amount.toLocaleString()}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        \n        <div style=\"text-align: center; margin-top: 30px; font-size: 12px; color: #666;\">\n          <p>This is a computer generated receipt and does not require signature.</p>\n          <p>Thank you for your payment!</p>\n        </div>\n      </div>\n    `\n  }\n\n  const generateCSVContent = data => {\n    const headers = [\n      'Receipt Number',\n      'Student Name',\n      'Roll Number',\n      'Class',\n      'Payment Date',\n      'Payment Mode',\n      'Amount',\n      'Status',\n      'Collected By',\n    ]\n\n    const rows = data.map(payment => [\n      payment.receiptNumber,\n      payment.studentName,\n      payment.rollNumber,\n      `${payment.className} - ${payment.section}`,\n      new Date(payment.paymentDate).toLocaleDateString(),\n      payment.paymentMode.replace('_', ' '),\n      payment.amount,\n      payment.status,\n      payment.collectedBy,\n    ])\n\n    return [headers, ...rows].map(row => row.join(',')).join('\\n')\n  }\n\n  const getStatistics = () => {\n    const payments = paymentsData?.data || []\n    const totalAmount = Array.isArray(payments)\n      ? payments.reduce((sum, payment) => sum + payment.amount, 0)\n      : 0\n    const completedPayments = payments.filter(p => p.status === 'completed')\n    const pendingPayments = payments.filter(p => p.status === 'pending')\n\n    return {\n      total: payments.length,\n      totalAmount,\n      completed: completedPayments.length,\n      pending: pendingPayments.length,\n    }\n  }\n\n  const stats = getStatistics()\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Search Fee Payments</h1>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => refetch()}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n            Refresh\n          </button>\n          <button\n            onClick={handleExportData}\n            className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center gap-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            Export CSV\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <FileText className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.total}</p>\n              <p className=\"text-sm text-gray-600\">Total Payments</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <DollarSign className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                ₹{stats.totalAmount.toLocaleString()}\n              </p>\n              <p className=\"text-sm text-gray-600\">Total Amount</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.completed}</p>\n              <p className=\"text-sm text-gray-600\">Completed</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.pending}</p>\n              <p className=\"text-sm text-gray-600\">Pending</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <PaymentFilters filters={filters} onFiltersChange={setFilters} />\n\n      {/* Sort Options */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <span className=\"text-sm font-medium\">Sort by:</span>\n            <select\n              value={sortBy}\n              onChange={e => setSortBy(e.target.value)}\n              className=\"border rounded px-3 py-1 text-sm\"\n            >\n              <option value=\"paymentDate\">Payment Date</option>\n              <option value=\"amount\">Amount</option>\n              <option value=\"studentName\">Student Name</option>\n              <option value=\"receiptNumber\">Receipt Number</option>\n            </select>\n            <select\n              value={sortOrder}\n              onChange={e => setSortOrder(e.target.value)}\n              className=\"border rounded px-3 py-1 text-sm\"\n            >\n              <option value=\"desc\">Descending</option>\n              <option value=\"asc\">Ascending</option>\n            </select>\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            Showing {paymentsData?.data?.length || 0} payments\n          </div>\n        </div>\n      </div>\n\n      {/* Payments List */}\n      <div className=\"space-y-4\">\n        {paymentsData?.data?.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n            <Search className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              No Payments Found\n            </h3>\n            <p className=\"text-gray-500\">\n              No fee payments match your search criteria. Try adjusting your\n              filters.\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {paymentsData?.data?.map(payment => (\n              <PaymentCard\n                key={payment.id}\n                payment={payment}\n                onViewDetails={handleViewDetails}\n                onPrintReceipt={handlePrintReceipt}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Payment Details Dialog */}\n      <PaymentDetailsDialog\n        payment={selectedPayment}\n        open={showDetailsDialog}\n        onClose={() => setShowDetailsDialog(false)}\n      />\n    </div>\n  )\n}\n\nexport default SearchFeesPayment\n"
        }
    ]
}