{
    "sourceFile": "src/pages/fees/FeesMaster.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925598,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  DollarSign,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Copy,\n  Calendar,\n  Users,\n  Percent,\n  Settings,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Filter,\n  Search,\n  Save,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { feesApi } from '../../lib/api/fees'\n\nconst FeeGroupCard = ({\n  feeGroup,\n  onEdit,\n  onDelete,\n  onDuplicate,\n  onViewDetails,\n}) => {\n  const getStatusColor = status => {\n    switch (status) {\n      case 'active':\n        return 'text-green-600 bg-green-100'\n      case 'inactive':\n        return 'text-gray-600 bg-gray-100'\n      case 'draft':\n        return 'text-yellow-600 bg-yellow-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  const getTotalAmount = () => {\n    return (\n      feeGroup.feeTypes?.reduce((sum, type) => sum + (type.amount || 0), 0) || 0\n    )\n  }\n\n  return (\n    <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">{feeGroup.name}</h3>\n          <p className=\"text-sm text-gray-600\">{feeGroup.description}</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span\n            className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(feeGroup.status)}`}\n          >\n            {feeGroup.status.charAt(0).toUpperCase() + feeGroup.status.slice(1)}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"space-y-3 mb-4\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-500\">Academic Year:</span>\n            <div className=\"font-medium\">{feeGroup.academicYear}</div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Classes:</span>\n            <div className=\"font-medium\">\n              {feeGroup.applicableClasses?.length || 0} classes\n            </div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Fee Types:</span>\n            <div className=\"font-medium\">\n              {feeGroup.feeTypes?.length || 0} types\n            </div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Total Amount:</span>\n            <div className=\"font-medium text-green-600\">\n              â‚¹{getTotalAmount().toLocaleString()}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t pt-3\">\n          <div className=\"text-sm text-gray-600 mb-2\">Due Dates:</div>\n          <div className=\"grid grid-cols-2 gap-2 text-xs\">\n            <div className=\"flex justify-between\">\n              <span>First Installment:</span>\n              <span className=\"font-medium\">\n                {new Date(feeGroup.dueDate1).toLocaleDateString()}\n              </span>\n            </div>\n            {feeGroup.dueDate2 && (\n              <div className=\"flex justify-between\">\n                <span>Second Installment:</span>\n                <span className=\"font-medium\">\n                  {new Date(feeGroup.dueDate2).toLocaleDateString()}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {feeGroup.concessions?.length > 0 && (\n          <div className=\"border-t pt-3\">\n            <div className=\"text-sm text-gray-600 mb-2\">\n              Concessions Available:\n            </div>\n            <div className=\"flex flex-wrap gap-1\">\n              {feeGroup.concessions.slice(0, 3).map((concession, index) => (\n                <span\n                  key={index}\n                  className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs\"\n                >\n                  {concession.name}\n                </span>\n              ))}\n              {feeGroup.concessions.length > 3 && (\n                <span className=\"px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs\">\n                  +{feeGroup.concessions.length - 3} more\n                </span>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"text-xs text-gray-500\">\n          Created: {new Date(feeGroup.createdAt).toLocaleDateString()}\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onViewDetails(feeGroup)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"View Details\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDuplicate(feeGroup)}\n            className=\"p-1 text-gray-400 hover:text-green-600\"\n            title=\"Duplicate\"\n          >\n            <Copy className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onEdit(feeGroup)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"Edit\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDelete(feeGroup)}\n            className=\"p-1 text-gray-400 hover:text-red-600\"\n            title=\"Delete\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst FeeGroupDialog = ({ feeGroup, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    name: feeGroup?.name || '',\n    description: feeGroup?.description || '',\n    academicYear: feeGroup?.academicYear || '2024-25',\n    status: feeGroup?.status || 'draft',\n    applicableClasses: feeGroup?.applicableClasses || [],\n    feeTypes: feeGroup?.feeTypes || [],\n    dueDate1: feeGroup?.dueDate1 || '',\n    dueDate2: feeGroup?.dueDate2 || '',\n    dueDate3: feeGroup?.dueDate3 || '',\n    installmentType: feeGroup?.installmentType || 'single',\n    lateFeeApplicable: feeGroup?.lateFeeApplicable || false,\n    lateFeeAmount: feeGroup?.lateFeeAmount || 0,\n    lateFeeType: feeGroup?.lateFeeType || 'fixed',\n    concessions: feeGroup?.concessions || [],\n  })\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => feesApi.getClasses(),\n  })\n\n  const { data: feeTypesData } = useQuery({\n    queryKey: ['fee-types', 'all'],\n    queryFn: () => feesApi.getFeeTypes(),\n  })\n\n  const { data: concessionsData } = useQuery({\n    queryKey: ['concessions', 'all'],\n    queryFn: () => feesApi.getConcessions(),\n  })\n\n  const handleSave = () => {\n    onSave(feeGroup?.id, formData)\n    onClose()\n  }\n\n  const toggleClass = classId => {\n    setFormData(prev => ({\n      ...prev,\n      applicableClasses: prev.applicableClasses.includes(classId)\n        ? prev.applicableClasses.filter(id => id !== classId)\n        : [...prev.applicableClasses, classId],\n    }))\n  }\n\n  const addFeeType = feeTypeId => {\n    const feeType = feeTypesData?.data?.find(ft => ft.id === feeTypeId)\n    if (feeType && !formData.feeTypes.find(ft => ft.id === feeTypeId)) {\n      setFormData(prev => ({\n        ...prev,\n        feeTypes: [\n          ...prev.feeTypes,\n          { ...feeType, amount: feeType.defaultAmount || 0 },\n        ],\n      }))\n    }\n  }\n\n  const removeFeeType = feeTypeId => {\n    setFormData(prev => ({\n      ...prev,\n      feeTypes: prev.feeTypes.filter(ft => ft.id !== feeTypeId),\n    }))\n  }\n\n  const updateFeeTypeAmount = (feeTypeId, amount) => {\n    setFormData(prev => ({\n      ...prev,\n      feeTypes: prev.feeTypes.map(ft =>\n        ft.id === feeTypeId ? { ...ft, amount: parseFloat(amount) || 0 } : ft\n      ),\n    }))\n  }\n\n  const toggleConcession = concessionId => {\n    setFormData(prev => ({\n      ...prev,\n      concessions: prev.concessions.includes(concessionId)\n        ? prev.concessions.filter(id => id !== concessionId)\n        : [...prev.concessions, concessionId],\n    }))\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title={feeGroup ? 'Edit Fee Group' : 'Create Fee Group'}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Fee Group Name *\"\n            value={formData.name}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, name: e.target.value }))\n            }\n            placeholder=\"e.g., Annual Fees 2024-25\"\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Academic Year *\n            </label>\n            <select\n              value={formData.academicYear}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, academicYear: e.target.value }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"2024-25\">2024-25</option>\n              <option value=\"2025-26\">2025-26</option>\n              <option value=\"2023-24\">2023-24</option>\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Description</label>\n          <textarea\n            value={formData.description}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, description: e.target.value }))\n            }\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Fee group description...\"\n          />\n        </div>\n\n        {/* Applicable Classes */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">\n            Applicable Classes *\n          </label>\n          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(classesData?.data) &&\n              classesData.data.map(cls => (\n                <label key={cls.id} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.applicableClasses.includes(cls.id)}\n                    onChange={() => toggleClass(cls.id)}\n                    className=\"rounded\"\n                  />\n                  <span className=\"text-sm\">{cls.name}</span>\n                </label>\n              ))}\n          </div>\n        </div>\n\n        {/* Fee Types */}\n        <div>\n          <div className=\"flex justify-between items-center mb-2\">\n            <label className=\"block text-sm font-medium\">Fee Types *</label>\n            <select\n              onChange={e => {\n                if (e.target.value) {\n                  addFeeType(e.target.value)\n                  e.target.value = ''\n                }\n              }}\n              className=\"border rounded px-2 py-1 text-sm\"\n            >\n              <option value=\"\">Add Fee Type</option>\n              {feeTypesData?.data?.map(feeType => (\n                <option key={feeType.id} value={feeType.id}>\n                  {feeType.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n            {Array.isArray(formData.feeTypes) &&\n              formData.feeTypes.map(feeType => (\n                <div\n                  key={feeType.id}\n                  className=\"flex items-center gap-2 p-2 border rounded\"\n                >\n                  <span className=\"flex-1 text-sm\">{feeType.name}</span>\n                  <Input\n                    type=\"number\"\n                    value={feeType.amount}\n                    onChange={e =>\n                      updateFeeTypeAmount(feeType.id, e.target.value)\n                    }\n                    placeholder=\"Amount\"\n                    className=\"w-24\"\n                  />\n                  <button\n                    onClick={() => removeFeeType(feeType.id)}\n                    className=\"text-red-600 hover:text-red-700\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              ))}\n          </div>\n        </div>\n\n        {/* Installment Configuration */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Installment Configuration</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Installment Type\n              </label>\n              <select\n                value={formData.installmentType}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    installmentType: e.target.value,\n                  }))\n                }\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"single\">Single Payment</option>\n                <option value=\"two\">Two Installments</option>\n                <option value=\"three\">Three Installments</option>\n                <option value=\"monthly\">Monthly</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Status</label>\n              <select\n                value={formData.status}\n                onChange={e =>\n                  setFormData(prev => ({ ...prev, status: e.target.value }))\n                }\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"draft\">Draft</option>\n                <option value=\"active\">Active</option>\n                <option value=\"inactive\">Inactive</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-4\">\n            <Input\n              label=\"First Due Date *\"\n              type=\"date\"\n              value={formData.dueDate1}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, dueDate1: e.target.value }))\n              }\n            />\n            {(formData.installmentType === 'two' ||\n              formData.installmentType === 'three') && (\n              <Input\n                label=\"Second Due Date\"\n                type=\"date\"\n                value={formData.dueDate2}\n                onChange={e =>\n                  setFormData(prev => ({ ...prev, dueDate2: e.target.value }))\n                }\n              />\n            )}\n            {formData.installmentType === 'three' && (\n              <Input\n                label=\"Third Due Date\"\n                type=\"date\"\n                value={formData.dueDate3}\n                onChange={e =>\n                  setFormData(prev => ({ ...prev, dueDate3: e.target.value }))\n                }\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Late Fee Configuration */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Late Fee Configuration</h3>\n          <div className=\"space-y-4\">\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.lateFeeApplicable}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    lateFeeApplicable: e.target.checked,\n                  }))\n                }\n                className=\"rounded\"\n              />\n              <span className=\"text-sm font-medium\">\n                Apply late fee for overdue payments\n              </span>\n            </label>\n\n            {formData.lateFeeApplicable && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Late Fee Type\n                  </label>\n                  <select\n                    value={formData.lateFeeType}\n                    onChange={e =>\n                      setFormData(prev => ({\n                        ...prev,\n                        lateFeeType: e.target.value,\n                      }))\n                    }\n                    className=\"w-full border rounded-lg px-3 py-2\"\n                  >\n                    <option value=\"fixed\">Fixed Amount</option>\n                    <option value=\"percentage\">Percentage</option>\n                    <option value=\"daily\">Daily</option>\n                  </select>\n                </div>\n                <Input\n                  label={`Late Fee ${formData.lateFeeType === 'percentage' ? '(%)' : '(â‚¹)'}`}\n                  type=\"number\"\n                  value={formData.lateFeeAmount}\n                  onChange={e =>\n                    setFormData(prev => ({\n                      ...prev,\n                      lateFeeAmount: parseFloat(e.target.value) || 0,\n                    }))\n                  }\n                  min=\"0\"\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Available Concessions */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">\n            Available Concessions\n          </label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n            {concessionsData?.data?.map(concession => (\n              <label key={concession.id} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.concessions.includes(concession.id)}\n                  onChange={() => toggleConcession(concession.id)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">{concession.name}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={\n              !formData.name.trim() ||\n              formData.applicableClasses.length === 0 ||\n              formData.feeTypes.length === 0\n            }\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            {feeGroup ? 'Update' : 'Create'} Fee Group\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst FeeTypesTab = () => {\n  const [selectedFeeType, setSelectedFeeType] = useState(null)\n  const [showFeeTypeDialog, setShowFeeTypeDialog] = useState(false)\n\n  const { data: feeTypesData, isLoading } = useQuery({\n    queryKey: ['fee-types', 'all'],\n    queryFn: () => feesApi.getFeeTypes(),\n  })\n\n  const queryClient = useQueryClient()\n\n  const saveFeeTypeMutation = useMutation({\n    mutationFn: ({ id, data }) =>\n      id ? feesApi.updateFeeType(id, data) : feesApi.createFeeType(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['fee-types'])\n      setShowFeeTypeDialog(false)\n      setSelectedFeeType(null)\n    },\n  })\n\n  const deleteFeeTypeMutation = useMutation({\n    mutationFn: feesApi.deleteFeeType,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['fee-types'])\n    },\n  })\n\n  const handleSaveFeeType = (id, data) => {\n    saveFeeTypeMutation.mutate({ id, data })\n  }\n\n  const handleDeleteFeeType = feeType => {\n    if (confirm(`Are you sure you want to delete \"${feeType.name}\"?`)) {\n      deleteFeeTypeMutation.mutate(feeType.id)\n    }\n  }\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-medium\">Fee Types</h3>\n        <button\n          onClick={() => {\n            setSelectedFeeType(null)\n            setShowFeeTypeDialog(true)\n          }}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Fee Type\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"text-left py-3 px-4\">Name</th>\n              <th className=\"text-left py-3 px-4\">Category</th>\n              <th className=\"text-left py-3 px-4\">Default Amount</th>\n              <th className=\"text-left py-3 px-4\">Status</th>\n              <th className=\"text-center py-3 px-4\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {feeTypesData?.data?.map(feeType => (\n              <tr key={feeType.id} className=\"border-b hover:bg-gray-50\">\n                <td className=\"py-3 px-4\">\n                  <div className=\"font-medium\">{feeType.name}</div>\n                  <div className=\"text-sm text-gray-500\">\n                    {feeType.description}\n                  </div>\n                </td>\n                <td className=\"py-3 px-4\">\n                  <span className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm\">\n                    {feeType.category}\n                  </span>\n                </td>\n                <td className=\"py-3 px-4\">\n                  â‚¹{feeType.defaultAmount?.toLocaleString()}\n                </td>\n                <td className=\"py-3 px-4\">\n                  <span\n                    className={`px-2 py-1 rounded text-sm ${\n                      feeType.status === 'active'\n                        ? 'bg-green-100 text-green-800'\n                        : 'bg-gray-100 text-gray-800'\n                    }`}\n                  >\n                    {feeType.status}\n                  </span>\n                </td>\n                <td className=\"py-3 px-4 text-center\">\n                  <div className=\"flex justify-center gap-2\">\n                    <button\n                      onClick={() => {\n                        setSelectedFeeType(feeType)\n                        setShowFeeTypeDialog(true)\n                      }}\n                      className=\"p-1 text-gray-400 hover:text-blue-600\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </button>\n                    <button\n                      onClick={() => handleDeleteFeeType(feeType)}\n                      className=\"p-1 text-gray-400 hover:text-red-600\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Fee Type Dialog would go here */}\n    </div>\n  )\n}\n\nconst ConcessionsTab = () => {\n  const [selectedConcession, setSelectedConcession] = useState(null)\n  const [showConcessionDialog, setShowConcessionDialog] = useState(false)\n\n  const { data: concessionsData, isLoading } = useQuery({\n    queryKey: ['concessions', 'all'],\n    queryFn: () => feesApi.getConcessions(),\n  })\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-medium\">Fee Concessions</h3>\n        <button\n          onClick={() => {\n            setSelectedConcession(null)\n            setShowConcessionDialog(true)\n          }}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Concession\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {concessionsData?.data?.map(concession => (\n          <div key={concession.id} className=\"bg-white border rounded-lg p-4\">\n            <div className=\"flex justify-between items-start mb-2\">\n              <h4 className=\"font-medium\">{concession.name}</h4>\n              <span\n                className={`px-2 py-1 rounded text-xs ${\n                  concession.status === 'active'\n                    ? 'bg-green-100 text-green-800'\n                    : 'bg-gray-100 text-gray-800'\n                }`}\n              >\n                {concession.status}\n              </span>\n            </div>\n            <p className=\"text-sm text-gray-600 mb-3\">\n              {concession.description}\n            </p>\n            <div className=\"text-sm\">\n              <div className=\"flex justify-between\">\n                <span>Type:</span>\n                <span className=\"font-medium\">{concession.type}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Value:</span>\n                <span className=\"font-medium\">\n                  {concession.type === 'percentage'\n                    ? `${concession.value}%`\n                    : `â‚¹${concession.value}`}\n                </span>\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-2 mt-3\">\n              <button\n                onClick={() => {\n                  setSelectedConcession(concession)\n                  setShowConcessionDialog(true)\n                }}\n                className=\"p-1 text-gray-400 hover:text-blue-600\"\n              >\n                <Edit className=\"w-4 h-4\" />\n              </button>\n              <button className=\"p-1 text-gray-400 hover:text-red-600\">\n                <Trash2 className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nconst FeesMaster = () => {\n  const [activeTab, setActiveTab] = useState('groups')\n  const [selectedFeeGroup, setSelectedFeeGroup] = useState(null)\n  const [showFeeGroupDialog, setShowFeeGroupDialog] = useState(false)\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n  const [filterStatus, setFilterStatus] = useState('all')\n  const [searchTerm, setSearchTerm] = useState('')\n\n  const queryClient = useQueryClient()\n\n  const { data: feeGroupsData, isLoading } = useQuery({\n    queryKey: ['fee-groups', 'all'],\n    queryFn: () => feesApi.getFeeGroups(),\n  })\n\n  const saveFeeGroupMutation = useMutation({\n    mutationFn: ({ id, data }) =>\n      id ? feesApi.updateFeeGroup(id, data) : feesApi.createFeeGroup(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['fee-groups'])\n      setShowFeeGroupDialog(false)\n      setSelectedFeeGroup(null)\n    },\n  })\n\n  const deleteFeeGroupMutation = useMutation({\n    mutationFn: feesApi.deleteFeeGroup,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['fee-groups'])\n    },\n  })\n\n  const duplicateFeeGroupMutation = useMutation({\n    mutationFn: feesApi.duplicateFeeGroup,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['fee-groups'])\n    },\n  })\n\n  const handleEditFeeGroup = feeGroup => {\n    setSelectedFeeGroup(feeGroup)\n    setShowFeeGroupDialog(true)\n  }\n\n  const handleDeleteFeeGroup = feeGroup => {\n    if (confirm(`Are you sure you want to delete \"${feeGroup.name}\"?`)) {\n      deleteFeeGroupMutation.mutate(feeGroup.id)\n    }\n  }\n\n  const handleDuplicateFeeGroup = feeGroup => {\n    duplicateFeeGroupMutation.mutate(feeGroup.id)\n  }\n\n  const handleViewDetails = feeGroup => {\n    setSelectedFeeGroup(feeGroup)\n    setShowDetailsDialog(true)\n  }\n\n  const handleSaveFeeGroup = (id, data) => {\n    saveFeeGroupMutation.mutate({ id, data })\n  }\n\n  const handleAddFeeGroup = () => {\n    setSelectedFeeGroup(null)\n    setShowFeeGroupDialog(true)\n  }\n\n  const filteredFeeGroups =\n    feeGroupsData?.data?.filter(feeGroup => {\n      const matchesStatus =\n        filterStatus === 'all' || feeGroup.status === filterStatus\n      const matchesSearch =\n        feeGroup.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        feeGroup.description.toLowerCase().includes(searchTerm.toLowerCase())\n      return matchesStatus && matchesSearch\n    }) || []\n\n  const tabs = [\n    { id: 'groups', label: 'Fee Groups', icon: DollarSign },\n    { id: 'types', label: 'Fee Types', icon: Settings },\n    { id: 'concessions', label: 'Concessions', icon: Percent },\n  ]\n\n  if (isLoading && activeTab === 'groups') return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Fees Master</h1>\n        {activeTab === 'groups' && (\n          <button\n            onClick={handleAddFeeGroup}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Create Fee Group\n          </button>\n        )}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"border-b\">\n          <nav className=\"flex space-x-8 px-6\">\n            {Array.isArray(tabs) &&\n              tabs.map(tab => {\n                const Icon = tab.icon\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`flex items-center gap-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${\n                      activeTab === tab.id\n                        ? 'border-blue-500 text-blue-600'\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {tab.label}\n                  </button>\n                )\n              })}\n          </nav>\n        </div>\n      </div>\n\n      {/* Tab Content */}\n      <div>\n        {activeTab === 'groups' && (\n          <div className=\"space-y-6\">\n            {/* Filters */}\n            <div className=\"bg-white rounded-lg shadow p-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search fee groups...\"\n                    value={searchTerm}\n                    onChange={e => setSearchTerm(e.target.value)}\n                    className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n                  />\n                </div>\n                <select\n                  value={filterStatus}\n                  onChange={e => setFilterStatus(e.target.value)}\n                  className=\"border rounded-lg px-3 py-2\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"active\">Active</option>\n                  <option value=\"inactive\">Inactive</option>\n                  <option value=\"draft\">Draft</option>\n                </select>\n                <div className=\"text-sm text-gray-500 flex items-center\">\n                  Showing {filteredFeeGroups.length} of{' '}\n                  {feeGroupsData?.data?.length || 0} fee groups\n                </div>\n              </div>\n            </div>\n\n            {/* Fee Groups List */}\n            <div className=\"space-y-4\">\n              {filteredFeeGroups.length === 0 ? (\n                <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n                  <DollarSign className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    No Fee Groups Found\n                  </h3>\n                  <p className=\"text-gray-500 mb-4\">\n                    {feeGroupsData?.data?.length === 0\n                      ? 'Create your first fee group to get started.'\n                      : 'No fee groups match your current filters.'}\n                  </p>\n                  {feeGroupsData?.data?.length === 0 && (\n                    <button\n                      onClick={handleAddFeeGroup}\n                      className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n                    >\n                      Create Fee Group\n                    </button>\n                  )}\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {Array.isArray(filteredFeeGroups) &&\n                    filteredFeeGroups.map(feeGroup => (\n                      <FeeGroupCard\n                        key={feeGroup.id}\n                        feeGroup={feeGroup}\n                        onEdit={handleEditFeeGroup}\n                        onDelete={handleDeleteFeeGroup}\n                        onDuplicate={handleDuplicateFeeGroup}\n                        onViewDetails={handleViewDetails}\n                      />\n                    ))}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'types' && <FeeTypesTab />}\n        {activeTab === 'concessions' && <ConcessionsTab />}\n      </div>\n\n      {/* Fee Group Dialog */}\n      <FeeGroupDialog\n        feeGroup={selectedFeeGroup}\n        open={showFeeGroupDialog}\n        onClose={() => setShowFeeGroupDialog(false)}\n        onSave={handleSaveFeeGroup}\n      />\n    </div>\n  )\n}\n\nexport default FeesMaster\n"
        }
    ]
}