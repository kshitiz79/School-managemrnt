{
    "sourceFile": "src/pages/fees/FeesReminder.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755986649570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755992431234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import React, { useState } from 'react';\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n-import { \n+import React, { useState } from 'react'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n   Mail,\n   MessageSquare,\n   Phone,\n   Calendar,\n@@ -21,32 +21,46 @@\n   Search,\n   Save,\n   RefreshCw,\n   Smartphone,\n-  AtSign\n-} from 'lucide-react';\n-import Input from '../../components/ui/Input';\n-import Dialog from '../../components/ui/Dialog';\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n-import { feesApi } from '../../lib/api/fees';\n+  AtSign,\n+} from 'lucide-react'\n+import Input from '../../components/ui/Input'\n+import Dialog from '../../components/ui/Dialog'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import { feesApi } from '../../lib/api/fees'\n \n-const ReminderTemplateCard = ({ template, onEdit, onDelete, onDuplicate, onPreview, onUse }) => {\n-  const getChannelIcon = (channel) => {\n+const ReminderTemplateCard = ({\n+  template,\n+  onEdit,\n+  onDelete,\n+  onDuplicate,\n+  onPreview,\n+  onUse,\n+}) => {\n+  const getChannelIcon = channel => {\n     switch (channel) {\n-      case 'sms': return <MessageSquare className=\"w-5 h-5 text-green-600\" />;\n-      case 'email': return <Mail className=\"w-5 h-5 text-blue-600\" />;\n-      case 'whatsapp': return <Smartphone className=\"w-5 h-5 text-green-500\" />;\n-      default: return <Mail className=\"w-5 h-5 text-gray-600\" />;\n+      case 'sms':\n+        return <MessageSquare className=\"w-5 h-5 text-green-600\" />\n+      case 'email':\n+        return <Mail className=\"w-5 h-5 text-blue-600\" />\n+      case 'whatsapp':\n+        return <Smartphone className=\"w-5 h-5 text-green-500\" />\n+      default:\n+        return <Mail className=\"w-5 h-5 text-gray-600\" />\n     }\n-  };\n+  }\n \n-  const getStatusColor = (status) => {\n+  const getStatusColor = status => {\n     switch (status) {\n-      case 'active': return 'text-green-600 bg-green-100';\n-      case 'inactive': return 'text-gray-600 bg-gray-100';\n-      default: return 'text-gray-600 bg-gray-100';\n+      case 'active':\n+        return 'text-green-600 bg-green-100'\n+      case 'inactive':\n+        return 'text-gray-600 bg-gray-100'\n+      default:\n+        return 'text-gray-600 bg-gray-100'\n     }\n-  };\n+  }\n \n   return (\n     <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n       <div className=\"flex justify-between items-start mb-4\">\n@@ -57,9 +71,11 @@\n             <p className=\"text-sm text-gray-600\">{template.description}</p>\n           </div>\n         </div>\n         <div className=\"flex items-center gap-2\">\n-          <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(template.status)}`}>\n+          <span\n+            className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(template.status)}`}\n+          >\n             {template.status.charAt(0).toUpperCase() + template.status.slice(1)}\n           </span>\n         </div>\n       </div>\n@@ -70,18 +86,22 @@\n           <div className=\"font-medium capitalize\">{template.channel}</div>\n         </div>\n         <div>\n           <span className=\"text-gray-500\">Category:</span>\n-          <div className=\"font-medium capitalize\">{template.category.replace('_', ' ')}</div>\n+          <div className=\"font-medium capitalize\">\n+            {template.category.replace('_', ' ')}\n+          </div>\n         </div>\n         <div>\n           <span className=\"text-gray-500\">Usage Count:</span>\n           <div className=\"font-medium\">{template.usageCount || 0} times</div>\n         </div>\n         <div>\n           <span className=\"text-gray-500\">Last Used:</span>\n           <div className=\"font-medium\">\n-            {template.lastUsed ? new Date(template.lastUsed).toLocaleDateString() : 'Never'}\n+            {template.lastUsed\n+              ? new Date(template.lastUsed).toLocaleDateString()\n+              : 'Never'}\n           </div>\n         </div>\n       </div>\n \n@@ -135,9 +155,9 @@\n           </button>\n         </div>\n       </div>\n     </div>\n-  );\n+  )\n };\n \n const TemplateDialog = ({ template, open, onClose, onSave }) => {\n   const [formData, setFormData] = useState({\n@@ -152,81 +172,101 @@\n     autoSend: template?.autoSend || false,\n     sendConditions: template?.sendConditions || {\n       daysBefore: 3,\n       minimumAmount: 0,\n-      overdueOnly: false\n+      overdueOnly: false,\n     }\n-  });\n+  })\n \n   const handleSave = () => {\n-    onSave(template?.id, formData);\n-    onClose();\n+    onSave(template?.id, formData)\n+    onClose()\n   };\n \n   const addVariable = () => {\n     setFormData(prev => ({\n       ...prev,\n-      variables: [...prev.variables, { name: '', description: '', example: '' }]\n-    }));\n+      variables: [\n+        ...prev.variables,\n+        { name: '', description: '', example: '' },\n+      ],\n+    }))\n   };\n \n   const updateVariable = (index, field, value) => {\n     setFormData(prev => ({\n       ...prev,\n-      variables: prev.variables.map((variable, i) => \n-        i === index ? { ...variable, [field]: value } : variable\n+      variables: prev.variables.map((variable, i) =>\n+        i === index ? { ...variable, [field]: value } : variable,\n       )\n-    }));\n+    }))\n   };\n \n-  const removeVariable = (index) => {\n+  const removeVariable = index => {\n     setFormData(prev => ({\n       ...prev,\n-      variables: prev.variables.filter((_, i) => i !== index)\n-    }));\n+      variables: prev.variables.filter((_, i) => i !== index),\n+    }))\n   };\n \n-  const insertVariable = (variableName) => {\n-    const textarea = document.getElementById('template-content');\n-    const start = textarea.selectionStart;\n-    const end = textarea.selectionEnd;\n-    const text = formData.content;\n-    const before = text.substring(0, start);\n-    const after = text.substring(end, text.length);\n-    const newContent = before + `{${variableName}}` + after;\n+  const insertVariable = variableName => {\n+    const textarea = document.getElementById('template-content')\n+    const start = textarea.selectionStart\n+    const end = textarea.selectionEnd\n+    const text = formData.content\n+    const before = text.substring(0, start)\n+    const after = text.substring(end, text.length)\n+    const newContent = `${before  }{${variableName}}${  after}`;\n+\n+    setFormData(prev => ({ ...prev, content: newContent }))\n     \n-    setFormData(prev => ({ ...prev, content: newContent }));\n-    \n     // Set cursor position after inserted variable\n     setTimeout(() => {\n-      textarea.selectionStart = textarea.selectionEnd = start + variableName.length + 2;\n-      textarea.focus();\n-    }, 0);\n+      textarea.selectionStart = textarea.selectionEnd =\n+        start + variableName.length + 2\n+      textarea.focus()\n+    }, 0)\n   };\n \n   const defaultVariables = [\n-    { name: 'studentName', description: 'Student full name', example: 'John Doe' },\n+    {\n+      name: 'studentName',\n+      description: 'Student full name',\n+      example: 'John Doe',\n+    },\n     { name: 'rollNumber', description: 'Student roll number', example: '001' },\n     { name: 'className', description: 'Class and section', example: 'X-A' },\n-    { name: 'fatherName', description: 'Father\\'s name', example: 'Mr. John Doe Sr.' },\n+    {\n+      name: 'fatherName',\n+      description: \"Father's name\",\n+      example: 'Mr. John Doe Sr.',\n+    },\n     { name: 'dueAmount', description: 'Total due amount', example: 'â‚¹15,000' },\n     { name: 'dueDate', description: 'Due date', example: '15-Apr-2024' },\n-    { name: 'schoolName', description: 'School name', example: 'Greenwood High School' },\n-    { name: 'contactNumber', description: 'Contact number', example: '+91 98765 43210' }\n-  ];\n+    {\n+      name: 'schoolName',\n+      description: 'School name',\n+      example: 'Greenwood High School',\n+    },\n+    {\n+      name: 'contactNumber',\n+      description: 'Contact number',\n+      example: '+91 98765 43210',\n+    },\n+  ]\n \n   const templateCategories = [\n     { value: 'due_reminder', label: 'Due Reminder' },\n     { value: 'overdue_notice', label: 'Overdue Notice' },\n     { value: 'payment_confirmation', label: 'Payment Confirmation' },\n     { value: 'discount_notification', label: 'Discount Notification' },\n-    { value: 'general_notice', label: 'General Notice' }\n+    { value: 'general_notice', label: 'General Notice' },\n   ];\n \n   return (\n-    <Dialog \n-      open={open} \n-      onClose={onClose} \n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n       title={template ? 'Edit Template' : 'Create Template'}\n       size=\"xl\"\n     >\n       <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n@@ -234,16 +274,20 @@\n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n           <Input\n             label=\"Template Name *\"\n             value={formData.name}\n-            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, name: e.target.value }))\n+            }\n             placeholder=\"e.g., Due Fee Reminder SMS\"\n           />\n           <div>\n             <label className=\"block text-sm font-medium mb-1\">Channel *</label>\n             <select\n               value={formData.channel}\n-              onChange={(e) => setFormData(prev => ({ ...prev, channel: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, channel: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"sms\">SMS</option>\n               <option value=\"email\">Email</option>\n@@ -256,23 +300,28 @@\n           <div>\n             <label className=\"block text-sm font-medium mb-1\">Category *</label>\n             <select\n               value={formData.category}\n-              onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, category: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n-              {Array.isArray(templateCategories) && templateCategories.map(category => (\n-                <option key={category.value} value={category.value}>\n-                  {category.label}\n-                </option>\n-              ))}\n+              {Array.isArray(templateCategories) &&\n+                templateCategories.map(category => (\n+                  <option key={category.value} value={category.value}>\n+                    {category.label}\n+                  </option>\n+                ))}\n             </select>\n           </div>\n           <div>\n             <label className=\"block text-sm font-medium mb-1\">Status</label>\n             <select\n               value={formData.status}\n-              onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, status: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"active\">Active</option>\n               <option value=\"inactive\">Inactive</option>\n@@ -283,9 +332,11 @@\n         <div>\n           <label className=\"block text-sm font-medium mb-1\">Description</label>\n           <textarea\n             value={formData.description}\n-            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, description: e.target.value }))\n+            }\n             rows={2}\n             className=\"w-full border rounded-lg px-3 py-2\"\n             placeholder=\"Template description...\"\n           />\n@@ -295,17 +346,21 @@\n         {formData.channel === 'email' && (\n           <Input\n             label=\"Subject *\"\n             value={formData.subject}\n-            onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, subject: e.target.value }))\n+            }\n             placeholder=\"Email subject line\"\n           />\n         )}\n \n         {/* Template Content */}\n         <div>\n           <div className=\"flex justify-between items-center mb-2\">\n-            <label className=\"block text-sm font-medium\">Template Content *</label>\n+            <label className=\"block text-sm font-medium\">\n+              Template Content *\n+            </label>\n             <div className=\"text-sm text-gray-500\">\n               Character count: {formData.content.length}\n               {formData.channel === 'sms' && formData.content.length > 160 && (\n                 <span className=\"text-red-500 ml-2\">\n@@ -316,9 +371,11 @@\n           </div>\n           <textarea\n             id=\"template-content\"\n             value={formData.content}\n-            onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, content: e.target.value }))\n+            }\n             rows={formData.channel === 'email' ? 8 : 4}\n             className=\"w-full border rounded-lg px-3 py-2\"\n             placeholder=\"Enter your template content here. Use {variableName} for dynamic content.\"\n           />\n@@ -327,19 +384,22 @@\n         {/* Variable Insertion */}\n         <div>\n           <h3 className=\"font-medium mb-3\">Available Variables</h3>\n           <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n-            {Array.isArray(defaultVariables) && defaultVariables.map(variable => (\n-              <button\n-                key={variable.name}\n-                onClick={() => insertVariable(variable.name)}\n-                className=\"text-left p-2 border rounded hover:bg-gray-50 text-sm\"\n-                title={`${variable.description} - Example: ${variable.example}`}\n-              >\n-                <div className=\"font-mono text-blue-600\">{`{${variable.name}}`}</div>\n-                <div className=\"text-xs text-gray-500\">{variable.description}</div>\n-              </button>\n-            ))}\n+            {Array.isArray(defaultVariables) &&\n+              defaultVariables.map(variable => (\n+                <button\n+                  key={variable.name}\n+                  onClick={() => insertVariable(variable.name)}\n+                  className=\"text-left p-2 border rounded hover:bg-gray-50 text-sm\"\n+                  title={`${variable.description} - Example: ${variable.example}`}\n+                >\n+                  <div className=\"font-mono text-blue-600\">{`{${variable.name}}`}</div>\n+                  <div className=\"text-xs text-gray-500\">\n+                    {variable.description}\n+                  </div>\n+                </button>\n+              ))}\n           </div>\n         </div>\n \n         {/* Auto-send Configuration */}\n@@ -349,55 +409,65 @@\n             <label className=\"flex items-center gap-2\">\n               <input\n                 type=\"checkbox\"\n                 checked={formData.autoSend}\n-                onChange={(e) => setFormData(prev => ({ ...prev, autoSend: e.target.checked }))}\n+                onChange={e =>\n+                  setFormData(prev => ({ ...prev, autoSend: e.target.checked }))\n+                }\n                 className=\"rounded\"\n               />\n-              <span className=\"text-sm font-medium\">Enable automatic sending</span>\n+              <span className=\"text-sm font-medium\">\n+                Enable automatic sending\n+              </span>\n             </label>\n-            \n+\n             {formData.autoSend && (\n               <div className=\"ml-6 space-y-4\">\n                 <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                   <Input\n                     label=\"Days Before Due Date\"\n                     type=\"number\"\n                     value={formData.sendConditions.daysBefore}\n-                    onChange={(e) => setFormData(prev => ({\n-                      ...prev,\n-                      sendConditions: {\n-                        ...prev.sendConditions,\n-                        daysBefore: parseInt(e.target.value) || 0\n-                      }\n-                    }))}\n+                    onChange={e =>\n+                      setFormData(prev => ({\n+                        ...prev,\n+                        sendConditions: {\n+                          ...prev.sendConditions,\n+                          daysBefore: parseInt(e.target.value) || 0,\n+                        },\n+                      }))\n+                    }\n                     min=\"0\"\n                   />\n                   <Input\n                     label=\"Minimum Amount (â‚¹)\"\n                     type=\"number\"\n                     value={formData.sendConditions.minimumAmount}\n-                    onChange={(e) => setFormData(prev => ({\n-                      ...prev,\n-                      sendConditions: {\n-                        ...prev.sendConditions,\n-                        minimumAmount: parseFloat(e.target.value) || 0\n-                      }\n-                    }))}\n+                    onChange={e =>\n+                      setFormData(prev => ({\n+                        ...prev,\n+                        sendConditions: {\n+                          ...prev.sendConditions,\n+                          minimumAmount: parseFloat(e.target.value) || 0,\n+                        },\n+                      }))\n+                    }\n                     min=\"0\"\n                   />\n                   <div className=\"flex items-end\">\n                     <label className=\"flex items-center gap-2\">\n                       <input\n                         type=\"checkbox\"\n                         checked={formData.sendConditions.overdueOnly}\n-                        onChange={(e) => setFormData(prev => ({\n-                          ...prev,\n-                          sendConditions: {\n-                            ...prev.sendConditions,\n-                            overdueOnly: e.target.checked\n-                          }\n-                        }))}\n+                        onChange={e =>\n+                          setFormData(prev => ({\n+                            ...prev,\n+                            sendConditions: {\n+                              ...prev.sendConditions,\n+                              overdueOnly: e.target.checked,\n+                            },\n+                          }))\n+                        }\n                         className=\"rounded\"\n                       />\n                       <span className=\"text-sm\">Overdue only</span>\n                     </label>\n@@ -426,84 +496,98 @@\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n+  )\n };\n \n const SendReminderDialog = ({ template, open, onClose, onSend }) => {\n-  const [selectedStudents, setSelectedStudents] = useState([]);\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [filterClass, setFilterClass] = useState('');\n-  const [filterOverdue, setFilterOverdue] = useState(false);\n-  const [scheduleTime, setScheduleTime] = useState('');\n-  const [isScheduled, setIsScheduled] = useState(false);\n-  const [isSending, setIsSending] = useState(false);\n+  const [selectedStudents, setSelectedStudents] = useState([])\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [filterClass, setFilterClass] = useState('')\n+  const [filterOverdue, setFilterOverdue] = useState(false)\n+  const [scheduleTime, setScheduleTime] = useState('')\n+  const [isScheduled, setIsScheduled] = useState(false)\n+  const [isSending, setIsSending] = useState(false)\n \n   const { data: studentsData, isLoading } = useQuery({\n     queryKey: ['students', 'due-fees', searchTerm, filterClass, filterOverdue],\n-    queryFn: () => feesApi.getStudentsWithDueFees({ searchTerm, classId: filterClass, overdueOnly: filterOverdue }),\n-    enabled: open\n-  });\n+    queryFn: () =>\n+      feesApi.getStudentsWithDueFees({\n+        searchTerm,\n+        classId: filterClass,\n+        overdueOnly: filterOverdue,\n+      }),\n+    enabled: open,\n+  })\n \n   const { data: classesData } = useQuery({\n     queryKey: ['classes', 'all'],\n-    queryFn: () => feesApi.getClasses()\n-  });\n+    queryFn: () => feesApi.getClasses(),\n+  })\n \n   const handleSend = async () => {\n     if (selectedStudents.length === 0) {\n-      alert('Please select at least one student');\n+      alert('Please select at least one student')\n       return;\n     }\n \n-    setIsSending(true);\n+    setIsSending(true)\n     try {\n       await onSend({\n         templateId: template.id,\n         studentIds: selectedStudents,\n-        scheduleTime: isScheduled ? scheduleTime : null\n-      });\n-      onClose();\n-      setSelectedStudents([]);\n+        scheduleTime: isScheduled ? scheduleTime : null,\n+      })\n+      onClose()\n+      setSelectedStudents([])\n     } catch (error) {\n-      console.error('Send error:', error);\n-      alert('Error sending reminders. Please try again.');\n+      console.error('Send error:', error)\n+      alert('Error sending reminders. Please try again.')\n     } finally {\n-      setIsSending(false);\n+      setIsSending(false)\n     }\n-  };\n+  }\n \n-  const toggleStudent = (studentId) => {\n-    setSelectedStudents(prev => \n-      prev.includes(studentId) \n+  const toggleStudent = studentId => {\n+    setSelectedStudents(prev =>\n+      prev.includes(studentId)\n         ? prev.filter(id => id !== studentId)\n-        : [...prev, studentId]\n+        : [...prev, studentId],\n     );\n-  };\n+  }\n \n   const toggleAll = () => {\n-    const allStudentIds = studentsData?.data?.map(s => s.id) || [];\n-    setSelectedStudents(prev => \n-      prev.length === allStudentIds.length ? [] : allStudentIds\n+    const allStudentIds = studentsData?.data?.map(s => s.id) || []\n+    setSelectedStudents(prev =>\n+      prev.length === allStudentIds.length ? [] : allStudentIds,\n     );\n-  };\n+  }\n \n-  if (!template) return null;\n+  if (!template) return null\n \n   return (\n-    <Dialog open={open} onClose={onClose} title={`Send ${template.name}`} size=\"xl\">\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      title={`Send ${template.name}`}\n+      size=\"xl\"\n+    >\n       <div className=\"space-y-6\">\n         <div className=\"bg-blue-50 rounded-lg p-4\">\n           <h3 className=\"font-medium mb-2\">Template Details</h3>\n           <div className=\"grid grid-cols-2 gap-4 text-sm\">\n             <div>\n               <span className=\"text-gray-600\">Channel:</span>\n-              <span className=\"font-medium ml-2 capitalize\">{template.channel}</span>\n+              <span className=\"font-medium ml-2 capitalize\">\n+                {template.channel}\n+              </span>\n             </div>\n             <div>\n               <span className=\"text-gray-600\">Category:</span>\n-              <span className=\"font-medium ml-2 capitalize\">{template.category.replace('_', ' ')}</span>\n+              <span className=\"font-medium ml-2 capitalize\">\n+                {template.category.replace('_', ' ')}\n+              </span>\n             </div>\n           </div>\n         </div>\n \n@@ -514,29 +598,30 @@\n             <input\n               type=\"text\"\n               placeholder=\"Search students...\"\n               value={searchTerm}\n-              onChange={(e) => setSearchTerm(e.target.value)}\n+              onChange={e => setSearchTerm(e.target.value)}\n               className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n             />\n           </div>\n           <select\n             value={filterClass}\n-            onChange={(e) => setFilterClass(e.target.value)}\n+            onChange={e => setFilterClass(e.target.value)}\n             className=\"border rounded-lg px-3 py-2\"\n           >\n             <option value=\"\">All Classes</option>\n-            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n-              <option key={cls.id} value={cls.id}>\n-                {cls.name}\n-              </option>\n-            ))}\n+            {Array.isArray(classesData?.data) &&\n+              classesData.data.map(cls => (\n+                <option key={cls.id} value={cls.id}>\n+                  {cls.name}\n+                </option>\n+              ))}\n           </select>\n           <label className=\"flex items-center gap-2 px-3 py-2\">\n             <input\n               type=\"checkbox\"\n               checked={filterOverdue}\n-              onChange={(e) => setFilterOverdue(e.target.checked)}\n+              onChange={e => setFilterOverdue(e.target.checked)}\n               className=\"rounded\"\n             />\n             <span className=\"text-sm\">Overdue only</span>\n           </label>\n@@ -547,15 +632,18 @@\n           <div className=\"flex justify-between items-center mb-3\">\n             <h3 className=\"font-medium\">Select Students</h3>\n             <div className=\"flex items-center gap-4\">\n               <span className=\"text-sm text-gray-600\">\n-                {selectedStudents.length} of {studentsData?.data?.length || 0} selected\n+                {selectedStudents.length} of {studentsData?.data?.length || 0}{' '}\n+                selected\n               </span>\n               <button\n                 onClick={toggleAll}\n                 className=\"text-sm text-blue-600 hover:text-blue-700\"\n               >\n-                {selectedStudents.length === studentsData?.data?.length ? 'Deselect All' : 'Select All'}\n+                {selectedStudents.length === studentsData?.data?.length\n+                  ? 'Deselect All'\n+                  : 'Select All'}\n               </button>\n             </div>\n           </div>\n \n@@ -568,9 +656,13 @@\n                   <tr>\n                     <th className=\"text-left py-3 px-4 w-12\">\n                       <input\n                         type=\"checkbox\"\n-                        checked={selectedStudents.length === studentsData?.data?.length && studentsData?.data?.length > 0}\n+                        checked={\n+                          selectedStudents.length ===\n+                            studentsData?.data?.length &&\n+                          studentsData?.data?.length > 0\n+                        }\n                         onChange={toggleAll}\n                         className=\"rounded\"\n                       />\n                     </th>\n@@ -580,33 +672,47 @@\n                     <th className=\"text-center py-3 px-4\">Status</th>\n                   </tr>\n                 </thead>\n                 <tbody>\n-                  {Array.isArray(studentsData?.data) && studentsData.data.map(student => (\n-                    <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n-                      <td className=\"py-3 px-4\">\n-                        <input\n-                          type=\"checkbox\"\n-                          checked={selectedStudents.includes(student.id)}\n-                          onChange={() => toggleStudent(student.id)}\n-                          className=\"rounded\"\n-                        />\n-                      </td>\n-                      <td className=\"py-3 px-4\">\n-                        <div className=\"font-medium\">{student.name}</div>\n-                        <div className=\"text-sm text-gray-500\">Roll: {student.rollNumber}</div>\n-                      </td>\n-                      <td className=\"py-3 px-4\">{student.className} - {student.section}</td>\n-                      <td className=\"py-3 px-4 text-right font-medium\">â‚¹{student.totalDue?.toLocaleString()}</td>\n-                      <td className=\"py-3 px-4 text-center\">\n-                        <span className={`px-2 py-1 rounded text-xs ${\n-                          student.isOverdue ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'\n-                        }`}>\n-                          {student.isOverdue ? 'Overdue' : 'Due'}\n-                        </span>\n-                      </td>\n-                    </tr>\n-                  ))}\n+                  {Array.isArray(studentsData?.data) &&\n+                    studentsData.data.map(student => (\n+                      <tr\n+                        key={student.id}\n+                        className=\"border-b hover:bg-gray-50\"\n+                      >\n+                        <td className=\"py-3 px-4\">\n+                          <input\n+                            type=\"checkbox\"\n+                            checked={selectedStudents.includes(student.id)}\n+                            onChange={() => toggleStudent(student.id)}\n+                            className=\"rounded\"\n+                          />\n+                        </td>\n+                        <td className=\"py-3 px-4\">\n+                          <div className=\"font-medium\">{student.name}</div>\n+                          <div className=\"text-sm text-gray-500\">\n+                            Roll: {student.rollNumber}\n+                          </div>\n+                        </td>\n+                        <td className=\"py-3 px-4\">\n+                          {student.className} - {student.section}\n+                        </td>\n+                        <td className=\"py-3 px-4 text-right font-medium\">\n+                          â‚¹{student.totalDue?.toLocaleString()}\n+                        </td>\n+                        <td className=\"py-3 px-4 text-center\">\n+                          <span\n+                            className={`px-2 py-1 rounded text-xs ${\n+                              student.isOverdue\n+                                ? 'bg-red-100 text-red-800'\n+                                : 'bg-yellow-100 text-yellow-800'\n+                            }`}\n+                          >\n+                            {student.isOverdue ? 'Overdue' : 'Due'}\n+                          </span>\n+                        </td>\n+                      </tr>\n+                    ))}\n                 </tbody>\n               </table>\n             </div>\n           )}\n@@ -617,21 +723,21 @@\n           <label className=\"flex items-center gap-2\">\n             <input\n               type=\"checkbox\"\n               checked={isScheduled}\n-              onChange={(e) => setIsScheduled(e.target.checked)}\n+              onChange={e => setIsScheduled(e.target.checked)}\n               className=\"rounded\"\n             />\n             <span className=\"text-sm font-medium\">Schedule for later</span>\n           </label>\n-          \n+\n           {isScheduled && (\n             <div className=\"ml-6\">\n               <Input\n                 label=\"Schedule Date & Time\"\n                 type=\"datetime-local\"\n                 value={scheduleTime}\n-                onChange={(e) => setScheduleTime(e.target.value)}\n+                onChange={e => setScheduleTime(e.target.value)}\n                 min={new Date().toISOString().slice(0, 16)}\n               />\n             </div>\n           )}\n@@ -656,122 +762,130 @@\n               <Calendar className=\"w-4 h-4\" />\n             ) : (\n               <Send className=\"w-4 h-4\" />\n             )}\n-            {isSending ? 'Sending...' : isScheduled ? 'Schedule' : 'Send Now'} ({selectedStudents.length})\n+            {isSending ? 'Sending...' : isScheduled ? 'Schedule' : 'Send Now'} (\n+            {selectedStudents.length})\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n+  )\n };\n \n const FeesReminder = () => {\n-  const [activeTab, setActiveTab] = useState('templates');\n-  const [selectedTemplate, setSelectedTemplate] = useState(null);\n-  const [showTemplateDialog, setShowTemplateDialog] = useState(false);\n-  const [showSendDialog, setShowSendDialog] = useState(false);\n-  const [showPreviewDialog, setShowPreviewDialog] = useState(false);\n-  const [filterChannel, setFilterChannel] = useState('all');\n-  const [filterCategory, setFilterCategory] = useState('all');\n-  const [searchTerm, setSearchTerm] = useState('');\n+  const [activeTab, setActiveTab] = useState('templates')\n+  const [selectedTemplate, setSelectedTemplate] = useState(null)\n+  const [showTemplateDialog, setShowTemplateDialog] = useState(false)\n+  const [showSendDialog, setShowSendDialog] = useState(false)\n+  const [showPreviewDialog, setShowPreviewDialog] = useState(false)\n+  const [filterChannel, setFilterChannel] = useState('all')\n+  const [filterCategory, setFilterCategory] = useState('all')\n+  const [searchTerm, setSearchTerm] = useState('')\n \n-  const queryClient = useQueryClient();\n+  const queryClient = useQueryClient()\n \n   const { data: templatesData, isLoading } = useQuery({\n     queryKey: ['reminder-templates', 'all'],\n-    queryFn: () => feesApi.getReminderTemplates()\n-  });\n+    queryFn: () => feesApi.getReminderTemplates(),\n+  })\n \n   const { data: reminderHistoryData } = useQuery({\n     queryKey: ['reminder-history', 'recent'],\n     queryFn: () => feesApi.getReminderHistory(),\n-    enabled: activeTab === 'history'\n-  });\n+    enabled: activeTab === 'history',\n+  })\n \n   const saveTemplateMutation = useMutation({\n-    mutationFn: ({ id, data }) => id ? feesApi.updateReminderTemplate(id, data) : feesApi.createReminderTemplate(data),\n+    mutationFn: ({ id, data }) =>\n+      id\n+        ? feesApi.updateReminderTemplate(id, data)\n+        : feesApi.createReminderTemplate(data),\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['reminder-templates']);\n-      setShowTemplateDialog(false);\n-      setSelectedTemplate(null);\n+      queryClient.invalidateQueries(['reminder-templates'])\n+      setShowTemplateDialog(false)\n+      setSelectedTemplate(null)\n     }\n-  });\n+  })\n \n   const deleteTemplateMutation = useMutation({\n     mutationFn: feesApi.deleteReminderTemplate,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['reminder-templates']);\n+      queryClient.invalidateQueries(['reminder-templates'])\n     }\n-  });\n+  })\n \n   const sendReminderMutation = useMutation({\n     mutationFn: feesApi.sendReminders,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['reminder-history']);\n-      setShowSendDialog(false);\n+      queryClient.invalidateQueries(['reminder-history'])\n+      setShowSendDialog(false)\n     }\n-  });\n+  })\n \n-  const handleEditTemplate = (template) => {\n-    setSelectedTemplate(template);\n-    setShowTemplateDialog(true);\n+  const handleEditTemplate = template => {\n+    setSelectedTemplate(template)\n+    setShowTemplateDialog(true)\n   };\n \n-  const handleDeleteTemplate = (template) => {\n+  const handleDeleteTemplate = template => {\n     if (confirm(`Are you sure you want to delete \"${template.name}\"?`)) {\n-      deleteTemplateMutation.mutate(template.id);\n+      deleteTemplateMutation.mutate(template.id)\n     }\n-  };\n+  }\n \n-  const handleDuplicateTemplate = (template) => {\n+  const handleDuplicateTemplate = template => {\n     const duplicatedTemplate = {\n       ...template,\n       name: `${template.name} (Copy)`,\n-      id: undefined\n+      id: undefined,\n     };\n-    setSelectedTemplate(duplicatedTemplate);\n-    setShowTemplateDialog(true);\n+    setSelectedTemplate(duplicatedTemplate)\n+    setShowTemplateDialog(true)\n   };\n \n-  const handlePreviewTemplate = (template) => {\n-    setSelectedTemplate(template);\n-    setShowPreviewDialog(true);\n+  const handlePreviewTemplate = template => {\n+    setSelectedTemplate(template)\n+    setShowPreviewDialog(true)\n   };\n \n-  const handleUseTemplate = (template) => {\n-    setSelectedTemplate(template);\n-    setShowSendDialog(true);\n+  const handleUseTemplate = template => {\n+    setSelectedTemplate(template)\n+    setShowSendDialog(true)\n   };\n \n   const handleSaveTemplate = (id, data) => {\n-    saveTemplateMutation.mutate({ id, data });\n+    saveTemplateMutation.mutate({ id, data })\n   };\n \n-  const handleSendReminder = (reminderData) => {\n-    sendReminderMutation.mutate(reminderData);\n+  const handleSendReminder = reminderData => {\n+    sendReminderMutation.mutate(reminderData)\n   };\n \n   const handleAddTemplate = () => {\n-    setSelectedTemplate(null);\n-    setShowTemplateDialog(true);\n+    setSelectedTemplate(null)\n+    setShowTemplateDialog(true)\n   };\n \n-  const filteredTemplates = templatesData?.data?.filter(template => {\n-    const matchesChannel = filterChannel === 'all' || template.channel === filterChannel;\n-    const matchesCategory = filterCategory === 'all' || template.category === filterCategory;\n-    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-                         template.description.toLowerCase().includes(searchTerm.toLowerCase());\n-    return matchesChannel && matchesCategory && matchesSearch;\n-  }) || [];\n+  const filteredTemplates =\n+    templatesData?.data?.filter(template => {\n+      const matchesChannel =\n+        filterChannel === 'all' || template.channel === filterChannel\n+      const matchesCategory =\n+        filterCategory === 'all' || template.category === filterCategory\n+      const matchesSearch =\n+        template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        template.description.toLowerCase().includes(searchTerm.toLowerCase())\n+      return matchesChannel && matchesCategory && matchesSearch\n+    }) || []\n \n   const tabs = [\n     { id: 'templates', label: 'Templates', icon: Mail },\n     { id: 'history', label: 'History', icon: Clock },\n-    { id: 'scheduler', label: 'Scheduler', icon: Calendar }\n+    { id: 'scheduler', label: 'Scheduler', icon: Calendar },\n   ];\n \n-  if (isLoading && activeTab === 'templates') return <LoadingSkeleton />;\n+  if (isLoading && activeTab === 'templates') return <LoadingSkeleton />\n \n   return (\n     <div className=\"space-y-6\">\n       <div className=\"flex justify-between items-center\">\n@@ -790,25 +904,26 @@\n       {/* Tab Navigation */}\n       <div className=\"bg-white rounded-lg shadow\">\n         <div className=\"border-b\">\n           <nav className=\"flex space-x-8 px-6\">\n-            {Array.isArray(tabs) && tabs.map(tab => {\n-              const Icon = tab.icon;\n-              return (\n-                <button\n-                  key={tab.id}\n-                  onClick={() => setActiveTab(tab.id)}\n-                  className={`flex items-center gap-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${\n-                    activeTab === tab.id\n-                      ? 'border-blue-500 text-blue-600'\n-                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n-                  }`}\n-                >\n-                  <Icon className=\"w-4 h-4\" />\n-                  {tab.label}\n-                </button>\n-              );\n-            })}\n+            {Array.isArray(tabs) &&\n+              tabs.map(tab => {\n+                const Icon = tab.icon\n+                return (\n+                  <button\n+                    key={tab.id}\n+                    onClick={() => setActiveTab(tab.id)}\n+                    className={`flex items-center gap-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${\n+                      activeTab === tab.id\n+                        ? 'border-blue-500 text-blue-600'\n+                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n+                    }`}\n+                  >\n+                    <Icon className=\"w-4 h-4\" />\n+                    {tab.label}\n+                  </button>\n+                )\n+              })}\n           </nav>\n         </div>\n       </div>\n \n@@ -823,15 +938,15 @@\n                 <input\n                   type=\"text\"\n                   placeholder=\"Search templates...\"\n                   value={searchTerm}\n-                  onChange={(e) => setSearchTerm(e.target.value)}\n+                  onChange={e => setSearchTerm(e.target.value)}\n                   className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n                 />\n               </div>\n               <select\n                 value={filterChannel}\n-                onChange={(e) => setFilterChannel(e.target.value)}\n+                onChange={e => setFilterChannel(e.target.value)}\n                 className=\"border rounded-lg px-3 py-2\"\n               >\n                 <option value=\"all\">All Channels</option>\n                 <option value=\"sms\">SMS</option>\n@@ -839,19 +954,24 @@\n                 <option value=\"whatsapp\">WhatsApp</option>\n               </select>\n               <select\n                 value={filterCategory}\n-                onChange={(e) => setFilterCategory(e.target.value)}\n+                onChange={e => setFilterCategory(e.target.value)}\n                 className=\"border rounded-lg px-3 py-2\"\n               >\n                 <option value=\"all\">All Categories</option>\n                 <option value=\"due_reminder\">Due Reminder</option>\n                 <option value=\"overdue_notice\">Overdue Notice</option>\n-                <option value=\"payment_confirmation\">Payment Confirmation</option>\n-                <option value=\"discount_notification\">Discount Notification</option>\n+                <option value=\"payment_confirmation\">\n+                  Payment Confirmation\n+                </option>\n+                <option value=\"discount_notification\">\n+                  Discount Notification\n+                </option>\n               </select>\n               <div className=\"text-sm text-gray-500 flex items-center\">\n-                Showing {filteredTemplates.length} of {templatesData?.data?.length || 0} templates\n+                Showing {filteredTemplates.length} of{' '}\n+                {templatesData?.data?.length || 0} templates\n               </div>\n             </div>\n           </div>\n \n@@ -859,14 +979,15 @@\n           <div className=\"space-y-4\">\n             {filteredTemplates.length === 0 ? (\n               <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n                 <Mail className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n-                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Templates Found</h3>\n+                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n+                  No Templates Found\n+                </h3>\n                 <p className=\"text-gray-500 mb-4\">\n-                  {templatesData?.data?.length === 0 \n+                  {templatesData?.data?.length === 0\n                     ? 'Create your first reminder template to get started.'\n-                    : 'No templates match your current filters.'\n-                  }\n+                    : 'No templates match your current filters.'}\n                 </p>\n                 {templatesData?.data?.length === 0 && (\n                   <button\n                     onClick={handleAddTemplate}\n@@ -877,19 +998,20 @@\n                 )}\n               </div>\n             ) : (\n               <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n-                {Array.isArray(filteredTemplates) && filteredTemplates.map(template => (\n-                  <ReminderTemplateCard\n-                    key={template.id}\n-                    template={template}\n-                    onEdit={handleEditTemplate}\n-                    onDelete={handleDeleteTemplate}\n-                    onDuplicate={handleDuplicateTemplate}\n-                    onPreview={handlePreviewTemplate}\n-                    onUse={handleUseTemplate}\n-                  />\n-                ))}\n+                {Array.isArray(filteredTemplates) &&\n+                  filteredTemplates.map(template => (\n+                    <ReminderTemplateCard\n+                      key={template.id}\n+                      template={template}\n+                      onEdit={handleEditTemplate}\n+                      onDelete={handleDeleteTemplate}\n+                      onDuplicate={handleDuplicateTemplate}\n+                      onPreview={handlePreviewTemplate}\n+                      onUse={handleUseTemplate}\n+                    />\n+                  ))}\n               </div>\n             )}\n           </div>\n         </div>\n@@ -909,8 +1031,8 @@\n         onClose={() => setShowSendDialog(false)}\n         onSend={handleSendReminder}\n       />\n     </div>\n-  );\n+  )\n };\n \n\\ No newline at end of file\n-export default FeesReminder;\n+export default FeesReminder\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755994925720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   Smartphone,\n   AtSign,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { feesApi } from '../../lib/api/fees'\n \n const ReminderTemplateCard = ({\n@@ -156,9 +156,9 @@\n         </div>\n       </div>\n     </div>\n   )\n-};\n+}\n \n const TemplateDialog = ({ template, open, onClose, onSave }) => {\n   const [formData, setFormData] = useState({\n     name: template?.name || '',\n@@ -173,15 +173,15 @@\n     sendConditions: template?.sendConditions || {\n       daysBefore: 3,\n       minimumAmount: 0,\n       overdueOnly: false,\n-    }\n+    },\n   })\n \n   const handleSave = () => {\n     onSave(template?.id, formData)\n     onClose()\n-  };\n+  }\n \n   const addVariable = () => {\n     setFormData(prev => ({\n       ...prev,\n@@ -189,44 +189,44 @@\n         ...prev.variables,\n         { name: '', description: '', example: '' },\n       ],\n     }))\n-  };\n+  }\n \n   const updateVariable = (index, field, value) => {\n     setFormData(prev => ({\n       ...prev,\n       variables: prev.variables.map((variable, i) =>\n-        i === index ? { ...variable, [field]: value } : variable,\n-      )\n+        i === index ? { ...variable, [field]: value } : variable\n+      ),\n     }))\n-  };\n+  }\n \n   const removeVariable = index => {\n     setFormData(prev => ({\n       ...prev,\n       variables: prev.variables.filter((_, i) => i !== index),\n     }))\n-  };\n+  }\n \n   const insertVariable = variableName => {\n     const textarea = document.getElementById('template-content')\n     const start = textarea.selectionStart\n     const end = textarea.selectionEnd\n     const text = formData.content\n     const before = text.substring(0, start)\n     const after = text.substring(end, text.length)\n-    const newContent = `${before  }{${variableName}}${  after}`;\n+    const newContent = `${before}{${variableName}}${after}`\n \n     setFormData(prev => ({ ...prev, content: newContent }))\n-    \n+\n     // Set cursor position after inserted variable\n     setTimeout(() => {\n       textarea.selectionStart = textarea.selectionEnd =\n         start + variableName.length + 2\n       textarea.focus()\n     }, 0)\n-  };\n+  }\n \n   const defaultVariables = [\n     {\n       name: 'studentName',\n@@ -259,9 +259,9 @@\n     { value: 'overdue_notice', label: 'Overdue Notice' },\n     { value: 'payment_confirmation', label: 'Payment Confirmation' },\n     { value: 'discount_notification', label: 'Discount Notification' },\n     { value: 'general_notice', label: 'General Notice' },\n-  ];\n+  ]\n \n   return (\n     <Dialog\n       open={open}\n@@ -497,9 +497,9 @@\n         </div>\n       </div>\n     </Dialog>\n   )\n-};\n+}\n \n const SendReminderDialog = ({ template, open, onClose, onSend }) => {\n   const [selectedStudents, setSelectedStudents] = useState([])\n   const [searchTerm, setSearchTerm] = useState('')\n@@ -527,9 +527,9 @@\n \n   const handleSend = async () => {\n     if (selectedStudents.length === 0) {\n       alert('Please select at least one student')\n-      return;\n+      return\n     }\n \n     setIsSending(true)\n     try {\n@@ -551,17 +551,17 @@\n   const toggleStudent = studentId => {\n     setSelectedStudents(prev =>\n       prev.includes(studentId)\n         ? prev.filter(id => id !== studentId)\n-        : [...prev, studentId],\n-    );\n+        : [...prev, studentId]\n+    )\n   }\n \n   const toggleAll = () => {\n     const allStudentIds = studentsData?.data?.map(s => s.id) || []\n     setSelectedStudents(prev =>\n-      prev.length === allStudentIds.length ? [] : allStudentIds,\n-    );\n+      prev.length === allStudentIds.length ? [] : allStudentIds\n+    )\n   }\n \n   if (!template) return null\n \n@@ -769,9 +769,9 @@\n         </div>\n       </div>\n     </Dialog>\n   )\n-};\n+}\n \n const FeesReminder = () => {\n   const [activeTab, setActiveTab] = useState('templates')\n   const [selectedTemplate, setSelectedTemplate] = useState(null)\n@@ -803,30 +803,30 @@\n     onSuccess: () => {\n       queryClient.invalidateQueries(['reminder-templates'])\n       setShowTemplateDialog(false)\n       setSelectedTemplate(null)\n-    }\n+    },\n   })\n \n   const deleteTemplateMutation = useMutation({\n     mutationFn: feesApi.deleteReminderTemplate,\n     onSuccess: () => {\n       queryClient.invalidateQueries(['reminder-templates'])\n-    }\n+    },\n   })\n \n   const sendReminderMutation = useMutation({\n     mutationFn: feesApi.sendReminders,\n     onSuccess: () => {\n       queryClient.invalidateQueries(['reminder-history'])\n       setShowSendDialog(false)\n-    }\n+    },\n   })\n \n   const handleEditTemplate = template => {\n     setSelectedTemplate(template)\n     setShowTemplateDialog(true)\n-  };\n+  }\n \n   const handleDeleteTemplate = template => {\n     if (confirm(`Are you sure you want to delete \"${template.name}\"?`)) {\n       deleteTemplateMutation.mutate(template.id)\n@@ -837,35 +837,35 @@\n     const duplicatedTemplate = {\n       ...template,\n       name: `${template.name} (Copy)`,\n       id: undefined,\n-    };\n+    }\n     setSelectedTemplate(duplicatedTemplate)\n     setShowTemplateDialog(true)\n-  };\n+  }\n \n   const handlePreviewTemplate = template => {\n     setSelectedTemplate(template)\n     setShowPreviewDialog(true)\n-  };\n+  }\n \n   const handleUseTemplate = template => {\n     setSelectedTemplate(template)\n     setShowSendDialog(true)\n-  };\n+  }\n \n   const handleSaveTemplate = (id, data) => {\n     saveTemplateMutation.mutate({ id, data })\n-  };\n+  }\n \n   const handleSendReminder = reminderData => {\n     sendReminderMutation.mutate(reminderData)\n-  };\n+  }\n \n   const handleAddTemplate = () => {\n     setSelectedTemplate(null)\n     setShowTemplateDialog(true)\n-  };\n+  }\n \n   const filteredTemplates =\n     templatesData?.data?.filter(template => {\n       const matchesChannel =\n@@ -881,9 +881,9 @@\n   const tabs = [\n     { id: 'templates', label: 'Templates', icon: Mail },\n     { id: 'history', label: 'History', icon: Clock },\n     { id: 'scheduler', label: 'Scheduler', icon: Calendar },\n-  ];\n+  ]\n \n   if (isLoading && activeTab === 'templates') return <LoadingSkeleton />\n \n   return (\n@@ -1032,7 +1032,7 @@\n         onSend={handleSendReminder}\n       />\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default FeesReminder\n+export default FeesReminder\n"
                }
            ],
            "date": 1755986649570,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  Mail,\n  MessageSquare,\n  Phone,\n  Calendar,\n  Clock,\n  Users,\n  Send,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Copy,\n  Settings,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Filter,\n  Search,\n  Save,\n  RefreshCw,\n  Smartphone,\n  AtSign\n} from 'lucide-react';\nimport Input from '../../components/ui/Input';\nimport Dialog from '../../components/ui/Dialog';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport { feesApi } from '../../lib/api/fees';\n\nconst ReminderTemplateCard = ({ template, onEdit, onDelete, onDuplicate, onPreview, onUse }) => {\n  const getChannelIcon = (channel) => {\n    switch (channel) {\n      case 'sms': return <MessageSquare className=\"w-5 h-5 text-green-600\" />;\n      case 'email': return <Mail className=\"w-5 h-5 text-blue-600\" />;\n      case 'whatsapp': return <Smartphone className=\"w-5 h-5 text-green-500\" />;\n      default: return <Mail className=\"w-5 h-5 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'inactive': return 'text-gray-600 bg-gray-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  return (\n    <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <div className=\"flex items-center gap-3\">\n          {getChannelIcon(template.channel)}\n          <div>\n            <h3 className=\"text-lg font-semibold\">{template.name}</h3>\n            <p className=\"text-sm text-gray-600\">{template.description}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(template.status)}`}>\n            {template.status.charAt(0).toUpperCase() + template.status.slice(1)}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n        <div>\n          <span className=\"text-gray-500\">Channel:</span>\n          <div className=\"font-medium capitalize\">{template.channel}</div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">Category:</span>\n          <div className=\"font-medium capitalize\">{template.category.replace('_', ' ')}</div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">Usage Count:</span>\n          <div className=\"font-medium\">{template.usageCount || 0} times</div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">Last Used:</span>\n          <div className=\"font-medium\">\n            {template.lastUsed ? new Date(template.lastUsed).toLocaleDateString() : 'Never'}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"border-t pt-3 mb-4\">\n        <div className=\"text-sm text-gray-600 mb-2\">Template Preview:</div>\n        <div className=\"text-sm bg-gray-50 p-3 rounded max-h-20 overflow-hidden\">\n          {template.content.substring(0, 150)}\n          {template.content.length > 150 && '...'}\n        </div>\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"text-xs text-gray-500\">\n          Created: {new Date(template.createdAt).toLocaleDateString()}\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onPreview(template)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"Preview\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onUse(template)}\n            className=\"p-1 text-gray-400 hover:text-green-600\"\n            title=\"Use Template\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDuplicate(template)}\n            className=\"p-1 text-gray-400 hover:text-purple-600\"\n            title=\"Duplicate\"\n          >\n            <Copy className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onEdit(template)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"Edit\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDelete(template)}\n            className=\"p-1 text-gray-400 hover:text-red-600\"\n            title=\"Delete\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst TemplateDialog = ({ template, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    name: template?.name || '',\n    description: template?.description || '',\n    channel: template?.channel || 'sms',\n    category: template?.category || 'due_reminder',\n    subject: template?.subject || '',\n    content: template?.content || '',\n    variables: template?.variables || [],\n    status: template?.status || 'active',\n    autoSend: template?.autoSend || false,\n    sendConditions: template?.sendConditions || {\n      daysBefore: 3,\n      minimumAmount: 0,\n      overdueOnly: false\n    }\n  });\n\n  const handleSave = () => {\n    onSave(template?.id, formData);\n    onClose();\n  };\n\n  const addVariable = () => {\n    setFormData(prev => ({\n      ...prev,\n      variables: [...prev.variables, { name: '', description: '', example: '' }]\n    }));\n  };\n\n  const updateVariable = (index, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      variables: prev.variables.map((variable, i) => \n        i === index ? { ...variable, [field]: value } : variable\n      )\n    }));\n  };\n\n  const removeVariable = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      variables: prev.variables.filter((_, i) => i !== index)\n    }));\n  };\n\n  const insertVariable = (variableName) => {\n    const textarea = document.getElementById('template-content');\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const text = formData.content;\n    const before = text.substring(0, start);\n    const after = text.substring(end, text.length);\n    const newContent = before + `{${variableName}}` + after;\n    \n    setFormData(prev => ({ ...prev, content: newContent }));\n    \n    // Set cursor position after inserted variable\n    setTimeout(() => {\n      textarea.selectionStart = textarea.selectionEnd = start + variableName.length + 2;\n      textarea.focus();\n    }, 0);\n  };\n\n  const defaultVariables = [\n    { name: 'studentName', description: 'Student full name', example: 'John Doe' },\n    { name: 'rollNumber', description: 'Student roll number', example: '001' },\n    { name: 'className', description: 'Class and section', example: 'X-A' },\n    { name: 'fatherName', description: 'Father\\'s name', example: 'Mr. John Doe Sr.' },\n    { name: 'dueAmount', description: 'Total due amount', example: 'â‚¹15,000' },\n    { name: 'dueDate', description: 'Due date', example: '15-Apr-2024' },\n    { name: 'schoolName', description: 'School name', example: 'Greenwood High School' },\n    { name: 'contactNumber', description: 'Contact number', example: '+91 98765 43210' }\n  ];\n\n  const templateCategories = [\n    { value: 'due_reminder', label: 'Due Reminder' },\n    { value: 'overdue_notice', label: 'Overdue Notice' },\n    { value: 'payment_confirmation', label: 'Payment Confirmation' },\n    { value: 'discount_notification', label: 'Discount Notification' },\n    { value: 'general_notice', label: 'General Notice' }\n  ];\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      title={template ? 'Edit Template' : 'Create Template'}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Template Name *\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"e.g., Due Fee Reminder SMS\"\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Channel *</label>\n            <select\n              value={formData.channel}\n              onChange={(e) => setFormData(prev => ({ ...prev, channel: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"sms\">SMS</option>\n              <option value=\"email\">Email</option>\n              <option value=\"whatsapp\">WhatsApp</option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Category *</label>\n            <select\n              value={formData.category}\n              onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              {Array.isArray(templateCategories) && templateCategories.map(category => (\n                <option key={category.value} value={category.value}>\n                  {category.label}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Status</label>\n            <select\n              value={formData.status}\n              onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"active\">Active</option>\n              <option value=\"inactive\">Inactive</option>\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Description</label>\n          <textarea\n            value={formData.description}\n            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n            rows={2}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Template description...\"\n          />\n        </div>\n\n        {/* Subject (for email) */}\n        {formData.channel === 'email' && (\n          <Input\n            label=\"Subject *\"\n            value={formData.subject}\n            onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n            placeholder=\"Email subject line\"\n          />\n        )}\n\n        {/* Template Content */}\n        <div>\n          <div className=\"flex justify-between items-center mb-2\">\n            <label className=\"block text-sm font-medium\">Template Content *</label>\n            <div className=\"text-sm text-gray-500\">\n              Character count: {formData.content.length}\n              {formData.channel === 'sms' && formData.content.length > 160 && (\n                <span className=\"text-red-500 ml-2\">\n                  (SMS limit: 160 chars)\n                </span>\n              )}\n            </div>\n          </div>\n          <textarea\n            id=\"template-content\"\n            value={formData.content}\n            onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n            rows={formData.channel === 'email' ? 8 : 4}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Enter your template content here. Use {variableName} for dynamic content.\"\n          />\n        </div>\n\n        {/* Variable Insertion */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Available Variables</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n            {Array.isArray(defaultVariables) && defaultVariables.map(variable => (\n              <button\n                key={variable.name}\n                onClick={() => insertVariable(variable.name)}\n                className=\"text-left p-2 border rounded hover:bg-gray-50 text-sm\"\n                title={`${variable.description} - Example: ${variable.example}`}\n              >\n                <div className=\"font-mono text-blue-600\">{`{${variable.name}}`}</div>\n                <div className=\"text-xs text-gray-500\">{variable.description}</div>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Auto-send Configuration */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Auto-send Configuration</h3>\n          <div className=\"space-y-4\">\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.autoSend}\n                onChange={(e) => setFormData(prev => ({ ...prev, autoSend: e.target.checked }))}\n                className=\"rounded\"\n              />\n              <span className=\"text-sm font-medium\">Enable automatic sending</span>\n            </label>\n            \n            {formData.autoSend && (\n              <div className=\"ml-6 space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Input\n                    label=\"Days Before Due Date\"\n                    type=\"number\"\n                    value={formData.sendConditions.daysBefore}\n                    onChange={(e) => setFormData(prev => ({\n                      ...prev,\n                      sendConditions: {\n                        ...prev.sendConditions,\n                        daysBefore: parseInt(e.target.value) || 0\n                      }\n                    }))}\n                    min=\"0\"\n                  />\n                  <Input\n                    label=\"Minimum Amount (â‚¹)\"\n                    type=\"number\"\n                    value={formData.sendConditions.minimumAmount}\n                    onChange={(e) => setFormData(prev => ({\n                      ...prev,\n                      sendConditions: {\n                        ...prev.sendConditions,\n                        minimumAmount: parseFloat(e.target.value) || 0\n                      }\n                    }))}\n                    min=\"0\"\n                  />\n                  <div className=\"flex items-end\">\n                    <label className=\"flex items-center gap-2\">\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.sendConditions.overdueOnly}\n                        onChange={(e) => setFormData(prev => ({\n                          ...prev,\n                          sendConditions: {\n                            ...prev.sendConditions,\n                            overdueOnly: e.target.checked\n                          }\n                        }))}\n                        className=\"rounded\"\n                      />\n                      <span className=\"text-sm\">Overdue only</span>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!formData.name.trim() || !formData.content.trim()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            {template ? 'Update' : 'Create'} Template\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst SendReminderDialog = ({ template, open, onClose, onSend }) => {\n  const [selectedStudents, setSelectedStudents] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterClass, setFilterClass] = useState('');\n  const [filterOverdue, setFilterOverdue] = useState(false);\n  const [scheduleTime, setScheduleTime] = useState('');\n  const [isScheduled, setIsScheduled] = useState(false);\n  const [isSending, setIsSending] = useState(false);\n\n  const { data: studentsData, isLoading } = useQuery({\n    queryKey: ['students', 'due-fees', searchTerm, filterClass, filterOverdue],\n    queryFn: () => feesApi.getStudentsWithDueFees({ searchTerm, classId: filterClass, overdueOnly: filterOverdue }),\n    enabled: open\n  });\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => feesApi.getClasses()\n  });\n\n  const handleSend = async () => {\n    if (selectedStudents.length === 0) {\n      alert('Please select at least one student');\n      return;\n    }\n\n    setIsSending(true);\n    try {\n      await onSend({\n        templateId: template.id,\n        studentIds: selectedStudents,\n        scheduleTime: isScheduled ? scheduleTime : null\n      });\n      onClose();\n      setSelectedStudents([]);\n    } catch (error) {\n      console.error('Send error:', error);\n      alert('Error sending reminders. Please try again.');\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const toggleStudent = (studentId) => {\n    setSelectedStudents(prev => \n      prev.includes(studentId) \n        ? prev.filter(id => id !== studentId)\n        : [...prev, studentId]\n    );\n  };\n\n  const toggleAll = () => {\n    const allStudentIds = studentsData?.data?.map(s => s.id) || [];\n    setSelectedStudents(prev => \n      prev.length === allStudentIds.length ? [] : allStudentIds\n    );\n  };\n\n  if (!template) return null;\n\n  return (\n    <Dialog open={open} onClose={onClose} title={`Send ${template.name}`} size=\"xl\">\n      <div className=\"space-y-6\">\n        <div className=\"bg-blue-50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-2\">Template Details</h3>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-600\">Channel:</span>\n              <span className=\"font-medium ml-2 capitalize\">{template.channel}</span>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Category:</span>\n              <span className=\"font-medium ml-2 capitalize\">{template.category.replace('_', ' ')}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search students...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n            />\n          </div>\n          <select\n            value={filterClass}\n            onChange={(e) => setFilterClass(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"\">All Classes</option>\n            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n              <option key={cls.id} value={cls.id}>\n                {cls.name}\n              </option>\n            ))}\n          </select>\n          <label className=\"flex items-center gap-2 px-3 py-2\">\n            <input\n              type=\"checkbox\"\n              checked={filterOverdue}\n              onChange={(e) => setFilterOverdue(e.target.checked)}\n              className=\"rounded\"\n            />\n            <span className=\"text-sm\">Overdue only</span>\n          </label>\n        </div>\n\n        {/* Student Selection */}\n        <div>\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"font-medium\">Select Students</h3>\n            <div className=\"flex items-center gap-4\">\n              <span className=\"text-sm text-gray-600\">\n                {selectedStudents.length} of {studentsData?.data?.length || 0} selected\n              </span>\n              <button\n                onClick={toggleAll}\n                className=\"text-sm text-blue-600 hover:text-blue-700\"\n              >\n                {selectedStudents.length === studentsData?.data?.length ? 'Deselect All' : 'Select All'}\n              </button>\n            </div>\n          </div>\n\n          {isLoading ? (\n            <LoadingSkeleton />\n          ) : (\n            <div className=\"max-h-96 overflow-y-auto border rounded-lg\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-50 sticky top-0\">\n                  <tr>\n                    <th className=\"text-left py-3 px-4 w-12\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedStudents.length === studentsData?.data?.length && studentsData?.data?.length > 0}\n                        onChange={toggleAll}\n                        className=\"rounded\"\n                      />\n                    </th>\n                    <th className=\"text-left py-3 px-4\">Student</th>\n                    <th className=\"text-left py-3 px-4\">Class</th>\n                    <th className=\"text-right py-3 px-4\">Due Amount</th>\n                    <th className=\"text-center py-3 px-4\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Array.isArray(studentsData?.data) && studentsData.data.map(student => (\n                    <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n                      <td className=\"py-3 px-4\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedStudents.includes(student.id)}\n                          onChange={() => toggleStudent(student.id)}\n                          className=\"rounded\"\n                        />\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <div className=\"font-medium\">{student.name}</div>\n                        <div className=\"text-sm text-gray-500\">Roll: {student.rollNumber}</div>\n                      </td>\n                      <td className=\"py-3 px-4\">{student.className} - {student.section}</td>\n                      <td className=\"py-3 px-4 text-right font-medium\">â‚¹{student.totalDue?.toLocaleString()}</td>\n                      <td className=\"py-3 px-4 text-center\">\n                        <span className={`px-2 py-1 rounded text-xs ${\n                          student.isOverdue ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'\n                        }`}>\n                          {student.isOverdue ? 'Overdue' : 'Due'}\n                        </span>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n\n        {/* Schedule Options */}\n        <div className=\"space-y-4\">\n          <label className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              checked={isScheduled}\n              onChange={(e) => setIsScheduled(e.target.checked)}\n              className=\"rounded\"\n            />\n            <span className=\"text-sm font-medium\">Schedule for later</span>\n          </label>\n          \n          {isScheduled && (\n            <div className=\"ml-6\">\n              <Input\n                label=\"Schedule Date & Time\"\n                type=\"datetime-local\"\n                value={scheduleTime}\n                onChange={(e) => setScheduleTime(e.target.value)}\n                min={new Date().toISOString().slice(0, 16)}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSend}\n            disabled={selectedStudents.length === 0 || isSending}\n            className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            {isSending ? (\n              <RefreshCw className=\"w-4 h-4 animate-spin\" />\n            ) : isScheduled ? (\n              <Calendar className=\"w-4 h-4\" />\n            ) : (\n              <Send className=\"w-4 h-4\" />\n            )}\n            {isSending ? 'Sending...' : isScheduled ? 'Schedule' : 'Send Now'} ({selectedStudents.length})\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst FeesReminder = () => {\n  const [activeTab, setActiveTab] = useState('templates');\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [showTemplateDialog, setShowTemplateDialog] = useState(false);\n  const [showSendDialog, setShowSendDialog] = useState(false);\n  const [showPreviewDialog, setShowPreviewDialog] = useState(false);\n  const [filterChannel, setFilterChannel] = useState('all');\n  const [filterCategory, setFilterCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const queryClient = useQueryClient();\n\n  const { data: templatesData, isLoading } = useQuery({\n    queryKey: ['reminder-templates', 'all'],\n    queryFn: () => feesApi.getReminderTemplates()\n  });\n\n  const { data: reminderHistoryData } = useQuery({\n    queryKey: ['reminder-history', 'recent'],\n    queryFn: () => feesApi.getReminderHistory(),\n    enabled: activeTab === 'history'\n  });\n\n  const saveTemplateMutation = useMutation({\n    mutationFn: ({ id, data }) => id ? feesApi.updateReminderTemplate(id, data) : feesApi.createReminderTemplate(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['reminder-templates']);\n      setShowTemplateDialog(false);\n      setSelectedTemplate(null);\n    }\n  });\n\n  const deleteTemplateMutation = useMutation({\n    mutationFn: feesApi.deleteReminderTemplate,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['reminder-templates']);\n    }\n  });\n\n  const sendReminderMutation = useMutation({\n    mutationFn: feesApi.sendReminders,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['reminder-history']);\n      setShowSendDialog(false);\n    }\n  });\n\n  const handleEditTemplate = (template) => {\n    setSelectedTemplate(template);\n    setShowTemplateDialog(true);\n  };\n\n  const handleDeleteTemplate = (template) => {\n    if (confirm(`Are you sure you want to delete \"${template.name}\"?`)) {\n      deleteTemplateMutation.mutate(template.id);\n    }\n  };\n\n  const handleDuplicateTemplate = (template) => {\n    const duplicatedTemplate = {\n      ...template,\n      name: `${template.name} (Copy)`,\n      id: undefined\n    };\n    setSelectedTemplate(duplicatedTemplate);\n    setShowTemplateDialog(true);\n  };\n\n  const handlePreviewTemplate = (template) => {\n    setSelectedTemplate(template);\n    setShowPreviewDialog(true);\n  };\n\n  const handleUseTemplate = (template) => {\n    setSelectedTemplate(template);\n    setShowSendDialog(true);\n  };\n\n  const handleSaveTemplate = (id, data) => {\n    saveTemplateMutation.mutate({ id, data });\n  };\n\n  const handleSendReminder = (reminderData) => {\n    sendReminderMutation.mutate(reminderData);\n  };\n\n  const handleAddTemplate = () => {\n    setSelectedTemplate(null);\n    setShowTemplateDialog(true);\n  };\n\n  const filteredTemplates = templatesData?.data?.filter(template => {\n    const matchesChannel = filterChannel === 'all' || template.channel === filterChannel;\n    const matchesCategory = filterCategory === 'all' || template.category === filterCategory;\n    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         template.description.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesChannel && matchesCategory && matchesSearch;\n  }) || [];\n\n  const tabs = [\n    { id: 'templates', label: 'Templates', icon: Mail },\n    { id: 'history', label: 'History', icon: Clock },\n    { id: 'scheduler', label: 'Scheduler', icon: Calendar }\n  ];\n\n  if (isLoading && activeTab === 'templates') return <LoadingSkeleton />;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Fees Reminder System</h1>\n        {activeTab === 'templates' && (\n          <button\n            onClick={handleAddTemplate}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Create Template\n          </button>\n        )}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"border-b\">\n          <nav className=\"flex space-x-8 px-6\">\n            {Array.isArray(tabs) && tabs.map(tab => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`flex items-center gap-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors ${\n                    activeTab === tab.id\n                      ? 'border-blue-500 text-blue-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'templates' && (\n        <div className=\"space-y-6\">\n          {/* Filters */}\n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search templates...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n                />\n              </div>\n              <select\n                value={filterChannel}\n                onChange={(e) => setFilterChannel(e.target.value)}\n                className=\"border rounded-lg px-3 py-2\"\n              >\n                <option value=\"all\">All Channels</option>\n                <option value=\"sms\">SMS</option>\n                <option value=\"email\">Email</option>\n                <option value=\"whatsapp\">WhatsApp</option>\n              </select>\n              <select\n                value={filterCategory}\n                onChange={(e) => setFilterCategory(e.target.value)}\n                className=\"border rounded-lg px-3 py-2\"\n              >\n                <option value=\"all\">All Categories</option>\n                <option value=\"due_reminder\">Due Reminder</option>\n                <option value=\"overdue_notice\">Overdue Notice</option>\n                <option value=\"payment_confirmation\">Payment Confirmation</option>\n                <option value=\"discount_notification\">Discount Notification</option>\n              </select>\n              <div className=\"text-sm text-gray-500 flex items-center\">\n                Showing {filteredTemplates.length} of {templatesData?.data?.length || 0} templates\n              </div>\n            </div>\n          </div>\n\n          {/* Templates List */}\n          <div className=\"space-y-4\">\n            {filteredTemplates.length === 0 ? (\n              <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n                <Mail className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Templates Found</h3>\n                <p className=\"text-gray-500 mb-4\">\n                  {templatesData?.data?.length === 0 \n                    ? 'Create your first reminder template to get started.'\n                    : 'No templates match your current filters.'\n                  }\n                </p>\n                {templatesData?.data?.length === 0 && (\n                  <button\n                    onClick={handleAddTemplate}\n                    className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n                  >\n                    Create Template\n                  </button>\n                )}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {Array.isArray(filteredTemplates) && filteredTemplates.map(template => (\n                  <ReminderTemplateCard\n                    key={template.id}\n                    template={template}\n                    onEdit={handleEditTemplate}\n                    onDelete={handleDeleteTemplate}\n                    onDuplicate={handleDuplicateTemplate}\n                    onPreview={handlePreviewTemplate}\n                    onUse={handleUseTemplate}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Dialogs */}\n      <TemplateDialog\n        template={selectedTemplate}\n        open={showTemplateDialog}\n        onClose={() => setShowTemplateDialog(false)}\n        onSave={handleSaveTemplate}\n      />\n\n      <SendReminderDialog\n        template={selectedTemplate}\n        open={showSendDialog}\n        onClose={() => setShowSendDialog(false)}\n        onSend={handleSendReminder}\n      />\n    </div>\n  );\n};\n\nexport default FeesReminder;"
        }
    ]
}