{
    "sourceFile": "src/pages/fees/CollectFees.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925597,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Search,\n  CreditCard,\n  Banknote,\n  Smartphone,\n  Receipt,\n  Calculator,\n  User,\n  Calendar,\n  DollarSign,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Printer,\n  Save,\n  RefreshCw,\n  Clock,\n  Percent,\n  Plus,\n  Minus,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { feesApi } from '../../lib/api/fees'\nimport { printToPDF } from '../../lib/print'\n\nconst StudentSearchBar = ({ onStudentSelect, selectedStudent }) => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [searchResults, setSearchResults] = useState([])\n  const [isSearching, setIsSearching] = useState(false)\n  const searchRef = useRef(null)\n\n  const { data: studentsData } = useQuery({\n    queryKey: ['students', 'search', searchTerm],\n    queryFn: () => feesApi.searchStudents(searchTerm),\n    enabled: searchTerm.length >= 2,\n  })\n\n  useEffect(() => {\n    if (studentsData?.data) {\n      setSearchResults(studentsData.data)\n      setIsSearching(false)\n    }\n  }, [studentsData])\n\n  const handleSearch = value => {\n    setSearchTerm(value)\n    if (value.length >= 2) {\n      setIsSearching(true)\n    } else {\n      setSearchResults([])\n      setIsSearching(false)\n    }\n  }\n\n  const handleStudentSelect = student => {\n    onStudentSelect(student)\n    setSearchTerm(student.name)\n    setSearchResults([])\n  }\n\n  const clearSearch = () => {\n    setSearchTerm('')\n    setSearchResults([])\n    onStudentSelect(null)\n  }\n\n  return (\n    <div className=\"relative\">\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n        <input\n          ref={searchRef}\n          type=\"text\"\n          placeholder=\"Search by name, roll number, or admission number...\"\n          value={searchTerm}\n          onChange={e => handleSearch(e.target.value)}\n          className=\"w-full pl-10 pr-12 py-3 border-2 border-gray-300 rounded-lg text-lg focus:border-blue-500 focus:outline-none\"\n          autoFocus\n        />\n        {selectedStudent && (\n          <button\n            onClick={clearSearch}\n            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n          >\n            <XCircle className=\"w-5 h-5\" />\n          </button>\n        )}\n      </div>\n\n      {/* Search Results Dropdown */}\n      {searchResults.length > 0 && (\n        <div className=\"absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\">\n          {Array.isArray(searchResults) &&\n            searchResults.map(student => (\n              <div\n                key={student.id}\n                onClick={() => handleStudentSelect(student)}\n                className=\"p-4 hover:bg-gray-50 cursor-pointer border-b last:border-b-0\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <User className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{student.name}</div>\n                    <div className=\"text-sm text-gray-500\">\n                      Roll: {student.rollNumber} | Class: {student.className} -{' '}\n                      {student.section}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      Admission: {student.admissionNumber}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium text-red-600\">\n                      Due: ₹{student.totalDue?.toLocaleString() || 0}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      {student.pendingInstallments || 0} pending\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n        </div>\n      )}\n\n      {isSearching && (\n        <div className=\"absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg z-50 p-4 text-center\">\n          <RefreshCw className=\"w-5 h-5 animate-spin mx-auto mb-2 text-blue-600\" />\n          <div className=\"text-sm text-gray-600\">Searching...</div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst StudentInfoCard = ({ student, feeDetails }) => {\n  if (!student) return null\n\n  const totalDue =\n    feeDetails?.reduce((sum, fee) => sum + (fee.dueAmount || 0), 0) || 0\n  const overdueAmount =\n    feeDetails?.reduce(\n      (sum, fee) => sum + (fee.isOverdue ? fee.dueAmount : 0),\n      0\n    ) || 0\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex items-start gap-4\">\n        <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n          <User className=\"w-8 h-8 text-blue-600\" />\n        </div>\n        <div className=\"flex-1\">\n          <h2 className=\"text-xl font-bold\">{student.name}</h2>\n          <div className=\"grid grid-cols-2 gap-4 mt-2 text-sm\">\n            <div>\n              <span className=\"text-gray-500\">Roll Number:</span>\n              <div className=\"font-medium\">{student.rollNumber}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Class:</span>\n              <div className=\"font-medium\">\n                {student.className} - {student.section}\n              </div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Admission No:</span>\n              <div className=\"font-medium\">{student.admissionNumber}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Father's Name:</span>\n              <div className=\"font-medium\">{student.fatherName}</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-2xl font-bold text-red-600\">\n            ₹{totalDue.toLocaleString()}\n          </div>\n          <div className=\"text-sm text-gray-500\">Total Due</div>\n          {overdueAmount > 0 && (\n            <div className=\"text-sm text-red-600 mt-1\">\n              ₹{overdueAmount.toLocaleString()} Overdue\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst FeeDetailsTable = ({\n  feeDetails,\n  selectedFees,\n  onFeeToggle,\n  onPartialAmountChange,\n}) => {\n  if (!feeDetails || feeDetails.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n        <DollarSign className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n          No Pending Fees\n        </h3>\n        <p className=\"text-gray-500\">\n          This student has no pending fee payments.\n        </p>\n      </div>\n    )\n  }\n\n  const getStatusColor = fee => {\n    if (fee.isOverdue) return 'text-red-600 bg-red-100'\n    if (fee.dueDate && new Date(fee.dueDate) <= new Date())\n      return 'text-yellow-600 bg-yellow-100'\n    return 'text-green-600 bg-green-100'\n  }\n\n  const getStatusText = fee => {\n    if (fee.isOverdue) return 'Overdue'\n    if (fee.dueDate && new Date(fee.dueDate) <= new Date()) return 'Due Today'\n    return 'Upcoming'\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"p-4 border-b bg-gray-50\">\n        <h3 className=\"font-medium\">Fee Details</h3>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"text-left py-3 px-4 w-12\">\n                <input\n                  type=\"checkbox\"\n                  onChange={e => {\n                    const allFeeIds = feeDetails.map(fee => fee.id)\n                    if (e.target.checked) {\n                      allFeeIds.forEach(id => onFeeToggle(id, true))\n                    } else {\n                      allFeeIds.forEach(id => onFeeToggle(id, false))\n                    }\n                  }}\n                  checked={feeDetails.every(fee => selectedFees[fee.id])}\n                  className=\"rounded\"\n                />\n              </th>\n              <th className=\"text-left py-3 px-4\">Fee Type</th>\n              <th className=\"text-left py-3 px-4\">Due Date</th>\n              <th className=\"text-right py-3 px-4\">Amount</th>\n              <th className=\"text-right py-3 px-4\">Late Fee</th>\n              <th className=\"text-right py-3 px-4\">Total Due</th>\n              <th className=\"text-center py-3 px-4\">Status</th>\n              <th className=\"text-right py-3 px-4\">Collecting</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.isArray(feeDetails) &&\n              feeDetails.map(fee => (\n                <tr key={fee.id} className=\"border-b hover:bg-gray-50\">\n                  <td className=\"py-3 px-4\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedFees[fee.id] || false}\n                      onChange={e => onFeeToggle(fee.id, e.target.checked)}\n                      className=\"rounded\"\n                    />\n                  </td>\n                  <td className=\"py-3 px-4\">\n                    <div className=\"font-medium\">{fee.feeTypeName}</div>\n                    <div className=\"text-sm text-gray-500\">\n                      {fee.installmentName}\n                    </div>\n                  </td>\n                  <td className=\"py-3 px-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4 text-gray-400\" />\n                      {new Date(fee.dueDate).toLocaleDateString()}\n                    </div>\n                  </td>\n                  <td className=\"py-3 px-4 text-right\">\n                    ₹{fee.amount.toLocaleString()}\n                  </td>\n                  <td className=\"py-3 px-4 text-right\">\n                    {fee.lateFee > 0 ? `₹${fee.lateFee.toLocaleString()}` : '-'}\n                  </td>\n                  <td className=\"py-3 px-4 text-right font-medium\">\n                    ₹{fee.dueAmount.toLocaleString()}\n                  </td>\n                  <td className=\"py-3 px-4 text-center\">\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(fee)}`}\n                    >\n                      {getStatusText(fee)}\n                    </span>\n                  </td>\n                  <td className=\"py-3 px-4 text-right\">\n                    {selectedFees[fee.id] && (\n                      <input\n                        type=\"number\"\n                        value={selectedFees[fee.id]?.amount || fee.dueAmount}\n                        onChange={e =>\n                          onPartialAmountChange(\n                            fee.id,\n                            parseFloat(e.target.value) || 0\n                          )\n                        }\n                        max={fee.dueAmount}\n                        min=\"0\"\n                        step=\"0.01\"\n                        className=\"w-24 px-2 py-1 border rounded text-right\"\n                      />\n                    )}\n                  </td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nconst PaymentPanel = ({ selectedFees, feeDetails, onPaymentComplete }) => {\n  const [paymentMode, setPaymentMode] = useState('cash')\n  const [paymentDetails, setPaymentDetails] = useState({\n    transactionId: '',\n    bankName: '',\n    chequeNumber: '',\n    chequeDate: '',\n    upiId: '',\n    cardNumber: '',\n    remarks: '',\n  })\n  const [discountAmount, setDiscountAmount] = useState(0)\n  const [discountReason, setDiscountReason] = useState('')\n  const [isProcessing, setIsProcessing] = useState(false)\n\n  const selectedFeeIds = Object.keys(selectedFees).filter(\n    id => selectedFees[id]\n  )\n  const totalAmount = selectedFeeIds.reduce((sum, feeId) => {\n    const fee = feeDetails.find(f => f.id === feeId)\n    return sum + (selectedFees[feeId]?.amount || fee?.dueAmount || 0)\n  }, 0)\n\n  const finalAmount = totalAmount - discountAmount\n\n  const paymentModes = [\n    { id: 'cash', label: 'Cash', icon: Banknote, color: 'green' },\n    { id: 'card', label: 'Card', icon: CreditCard, color: 'blue' },\n    { id: 'upi', label: 'UPI', icon: Smartphone, color: 'purple' },\n    { id: 'cheque', label: 'Cheque', icon: Receipt, color: 'orange' },\n    {\n      id: 'bank_transfer',\n      label: 'Bank Transfer',\n      icon: Banknote,\n      color: 'indigo',\n    },\n  ]\n\n  const handlePayment = async () => {\n    if (selectedFeeIds.length === 0) {\n      alert('Please select at least one fee to collect')\n      return\n    }\n\n    setIsProcessing(true)\n\n    try {\n      const paymentData = {\n        studentId: feeDetails[0]?.studentId,\n        feeIds: selectedFeeIds,\n        amounts: selectedFeeIds.reduce((acc, feeId) => {\n          acc[feeId] =\n            selectedFees[feeId]?.amount ||\n            feeDetails.find(f => f.id === feeId)?.dueAmount\n          return acc\n        }, {}),\n        paymentMode,\n        paymentDetails,\n        discountAmount,\n        discountReason,\n        totalAmount: finalAmount,\n        paymentDate: new Date().toISOString(),\n      }\n\n      await feesApi.processPayment(paymentData)\n      onPaymentComplete(paymentData)\n    } catch (error) {\n      console.error('Payment processing error:', error)\n      alert('Error processing payment. Please try again.')\n    } finally {\n      setIsProcessing(false)\n    }\n  }\n\n  if (selectedFeeIds.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n        <Calculator className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n          Select Fees to Collect\n        </h3>\n        <p className=\"text-gray-500\">\n          Choose the fees you want to collect payment for.\n        </p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      {/* Payment Summary */}\n      <div className=\"p-6 border-b bg-gray-50\">\n        <h3 className=\"font-medium mb-4\">Payment Summary</h3>\n        <div className=\"space-y-2\">\n          {Array.isArray(selectedFeeIds) &&\n            selectedFeeIds.map(feeId => {\n              const fee = feeDetails.find(f => f.id === feeId)\n              const amount = selectedFees[feeId]?.amount || fee?.dueAmount || 0\n              return (\n                <div key={feeId} className=\"flex justify-between text-sm\">\n                  <span>\n                    {fee?.feeTypeName} - {fee?.installmentName}\n                  </span>\n                  <span>₹{amount.toLocaleString()}</span>\n                </div>\n              )\n            })}\n          <div className=\"border-t pt-2 flex justify-between font-medium\">\n            <span>Subtotal</span>\n            <span>₹{totalAmount.toLocaleString()}</span>\n          </div>\n          {discountAmount > 0 && (\n            <div className=\"flex justify-between text-green-600\">\n              <span>Discount</span>\n              <span>-₹{discountAmount.toLocaleString()}</span>\n            </div>\n          )}\n          <div className=\"border-t pt-2 flex justify-between text-lg font-bold\">\n            <span>Total Amount</span>\n            <span>₹{finalAmount.toLocaleString()}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Payment Mode Selection */}\n      <div className=\"p-6 border-b\">\n        <h4 className=\"font-medium mb-3\">Payment Mode</h4>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n          {Array.isArray(paymentModes) &&\n            paymentModes.map(mode => {\n              const Icon = mode.icon\n              return (\n                <button\n                  key={mode.id}\n                  onClick={() => setPaymentMode(mode.id)}\n                  className={`p-3 border rounded-lg flex items-center gap-2 transition-colors ${\n                    paymentMode === mode.id\n                      ? `border-${mode.color}-500 bg-${mode.color}-50 text-${mode.color}-700`\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  <span className=\"text-sm font-medium\">{mode.label}</span>\n                </button>\n              )\n            })}\n        </div>\n      </div>\n\n      {/* Payment Details */}\n      <div className=\"p-6 border-b\">\n        <h4 className=\"font-medium mb-3\">Payment Details</h4>\n        <div className=\"space-y-4\">\n          {paymentMode === 'cheque' && (\n            <>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Input\n                  label=\"Cheque Number\"\n                  value={paymentDetails.chequeNumber}\n                  onChange={e =>\n                    setPaymentDetails(prev => ({\n                      ...prev,\n                      chequeNumber: e.target.value,\n                    }))\n                  }\n                  placeholder=\"Enter cheque number\"\n                />\n                <Input\n                  label=\"Cheque Date\"\n                  type=\"date\"\n                  value={paymentDetails.chequeDate}\n                  onChange={e =>\n                    setPaymentDetails(prev => ({\n                      ...prev,\n                      chequeDate: e.target.value,\n                    }))\n                  }\n                />\n              </div>\n              <Input\n                label=\"Bank Name\"\n                value={paymentDetails.bankName}\n                onChange={e =>\n                  setPaymentDetails(prev => ({\n                    ...prev,\n                    bankName: e.target.value,\n                  }))\n                }\n                placeholder=\"Enter bank name\"\n              />\n            </>\n          )}\n\n          {paymentMode === 'bank_transfer' && (\n            <>\n              <Input\n                label=\"Transaction ID\"\n                value={paymentDetails.transactionId}\n                onChange={e =>\n                  setPaymentDetails(prev => ({\n                    ...prev,\n                    transactionId: e.target.value,\n                  }))\n                }\n                placeholder=\"Enter transaction ID\"\n              />\n              <Input\n                label=\"Bank Name\"\n                value={paymentDetails.bankName}\n                onChange={e =>\n                  setPaymentDetails(prev => ({\n                    ...prev,\n                    bankName: e.target.value,\n                  }))\n                }\n                placeholder=\"Enter bank name\"\n              />\n            </>\n          )}\n\n          {paymentMode === 'upi' && (\n            <Input\n              label=\"UPI ID / Transaction ID\"\n              value={paymentDetails.upiId}\n              onChange={e =>\n                setPaymentDetails(prev => ({ ...prev, upiId: e.target.value }))\n              }\n              placeholder=\"Enter UPI ID or transaction ID\"\n            />\n          )}\n\n          {paymentMode === 'card' && (\n            <Input\n              label=\"Card Number (Last 4 digits)\"\n              value={paymentDetails.cardNumber}\n              onChange={e =>\n                setPaymentDetails(prev => ({\n                  ...prev,\n                  cardNumber: e.target.value,\n                }))\n              }\n              placeholder=\"****\"\n              maxLength={4}\n            />\n          )}\n\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Remarks</label>\n            <textarea\n              value={paymentDetails.remarks}\n              onChange={e =>\n                setPaymentDetails(prev => ({\n                  ...prev,\n                  remarks: e.target.value,\n                }))\n              }\n              rows={2}\n              className=\"w-full border rounded-lg px-3 py-2\"\n              placeholder=\"Additional remarks...\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Discount Section */}\n      <div className=\"p-6 border-b\">\n        <h4 className=\"font-medium mb-3\">Discount (Optional)</h4>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Input\n            label=\"Discount Amount\"\n            type=\"number\"\n            value={discountAmount}\n            onChange={e => setDiscountAmount(parseFloat(e.target.value) || 0)}\n            min=\"0\"\n            max={totalAmount}\n            placeholder=\"0\"\n          />\n          <Input\n            label=\"Discount Reason\"\n            value={discountReason}\n            onChange={e => setDiscountReason(e.target.value)}\n            placeholder=\"Reason for discount\"\n          />\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-6\">\n        <div className=\"flex gap-3\">\n          <button\n            onClick={handlePayment}\n            disabled={isProcessing || finalAmount <= 0}\n            className=\"flex-1 bg-green-600 text-white py-3 px-4 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center justify-center gap-2 font-medium\"\n          >\n            {isProcessing ? (\n              <RefreshCw className=\"w-5 h-5 animate-spin\" />\n            ) : (\n              <CheckCircle className=\"w-5 h-5\" />\n            )}\n            {isProcessing\n              ? 'Processing...'\n              : `Collect ₹${finalAmount.toLocaleString()}`}\n          </button>\n          <button className=\"px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Save className=\"w-4 h-4\" />\n            Save Draft\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst PaymentSuccessDialog = ({\n  open,\n  onClose,\n  paymentData,\n  onPrintReceipt,\n}) => {\n  if (!paymentData) return null\n\n  return (\n    <Dialog open={open} onClose={onClose} title=\"Payment Successful\" size=\"lg\">\n      <div className=\"text-center py-6\">\n        <CheckCircle className=\"w-16 h-16 mx-auto mb-4 text-green-600\" />\n        <h2 className=\"text-2xl font-bold text-green-600 mb-2\">\n          Payment Collected Successfully!\n        </h2>\n        <p className=\"text-gray-600 mb-6\">\n          Amount of ₹{paymentData.totalAmount?.toLocaleString()} has been\n          collected successfully.\n        </p>\n\n        <div className=\"bg-gray-50 rounded-lg p-4 mb-6 text-left\">\n          <h3 className=\"font-medium mb-2\">Payment Details</h3>\n          <div className=\"space-y-1 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Payment Mode:</span>\n              <span className=\"font-medium capitalize\">\n                {paymentData.paymentMode?.replace('_', ' ')}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Transaction Date:</span>\n              <span className=\"font-medium\">\n                {new Date(paymentData.paymentDate).toLocaleString()}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Receipt Number:</span>\n              <span className=\"font-medium\">RCP{Date.now()}</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3\">\n          <button\n            onClick={() => onPrintReceipt(paymentData)}\n            className=\"flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 flex items-center justify-center gap-2\"\n          >\n            <Printer className=\"w-4 h-4\" />\n            Print Receipt\n          </button>\n          <button\n            onClick={onClose}\n            className=\"flex-1 border border-gray-300 py-2 px-4 rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst CollectFees = () => {\n  const [selectedStudent, setSelectedStudent] = useState(null)\n  const [selectedFees, setSelectedFees] = useState({})\n  const [showPaymentSuccess, setShowPaymentSuccess] = useState(false)\n  const [lastPaymentData, setLastPaymentData] = useState(null)\n\n  const queryClient = useQueryClient()\n\n  const { data: feeDetailsData, isLoading } = useQuery({\n    queryKey: ['student-fees', selectedStudent?.id],\n    queryFn: () => feesApi.getStudentFeeDetails(selectedStudent.id),\n    enabled: !!selectedStudent,\n  })\n\n  const handleStudentSelect = student => {\n    setSelectedStudent(student)\n    setSelectedFees({})\n  }\n\n  const handleFeeToggle = (feeId, isSelected) => {\n    if (isSelected) {\n      const fee = feeDetailsData?.data?.find(f => f.id === feeId)\n      setSelectedFees(prev => ({\n        ...prev,\n        [feeId]: { amount: fee?.dueAmount || 0 },\n      }))\n    } else {\n      setSelectedFees(prev => {\n        const updated = { ...prev }\n        delete updated[feeId]\n        return updated\n      })\n    }\n  }\n\n  const handlePartialAmountChange = (feeId, amount) => {\n    setSelectedFees(prev => ({\n      ...prev,\n      [feeId]: { amount },\n    }))\n  }\n\n  const handlePaymentComplete = paymentData => {\n    setLastPaymentData(paymentData)\n    setShowPaymentSuccess(true)\n    setSelectedFees({})\n\n    // Refresh student fee details\n    queryClient.invalidateQueries(['student-fees', selectedStudent?.id])\n  }\n\n  const handlePrintReceipt = async paymentData => {\n    try {\n      const receiptHTML = generateReceiptHTML(paymentData, selectedStudent)\n      await printToPDF(receiptHTML, `receipt-${Date.now()}.pdf`)\n    } catch (error) {\n      console.error('Print error:', error)\n      alert('Error printing receipt. Please try again.')\n    }\n  }\n\n  const generateReceiptHTML = (paymentData, student) => {\n    const receiptNumber = `RCP${Date.now()}`\n\n    return `\n      <div style=\"max-width: 400px; margin: 0 auto; font-family: Arial, sans-serif;\">\n        <div style=\"text-align: center; border-bottom: 2px solid #000; padding-bottom: 20px; margin-bottom: 20px;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">GREENWOOD HIGH SCHOOL</h1>\n          <p style=\"margin: 5px 0; font-size: 14px;\">123 School Street, Education City</p>\n          <p style=\"margin: 5px 0; font-size: 14px;\">Phone: +91 98765 43210</p>\n          <h2 style=\"margin: 10px 0; font-size: 18px;\">FEE RECEIPT</h2>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <table style=\"width: 100%; font-size: 14px;\">\n            <tr>\n              <td><strong>Receipt No:</strong></td>\n              <td>${receiptNumber}</td>\n            </tr>\n            <tr>\n              <td><strong>Date:</strong></td>\n              <td>${new Date(paymentData.paymentDate).toLocaleDateString()}</td>\n            </tr>\n            <tr>\n              <td><strong>Student Name:</strong></td>\n              <td>${student.name}</td>\n            </tr>\n            <tr>\n              <td><strong>Roll Number:</strong></td>\n              <td>${student.rollNumber}</td>\n            </tr>\n            <tr>\n              <td><strong>Class:</strong></td>\n              <td>${student.className} - ${student.section}</td>\n            </tr>\n            <tr>\n              <td><strong>Payment Mode:</strong></td>\n              <td style=\"text-transform: capitalize;\">${paymentData.paymentMode.replace('_', ' ')}</td>\n            </tr>\n          </table>\n        </div>\n        \n        <div style=\"margin-bottom: 20px;\">\n          <h3 style=\"margin-bottom: 10px; font-size: 16px;\">Fee Details:</h3>\n          <table style=\"width: 100%; border-collapse: collapse; font-size: 14px;\">\n            <thead>\n              <tr style=\"background: #f5f5f5;\">\n                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Description</th>\n                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: right;\">Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${Object.keys(paymentData.amounts)\n                .map(feeId => {\n                  const fee = feeDetailsData?.data?.find(f => f.id === feeId)\n                  return `\n                  <tr>\n                    <td style=\"border: 1px solid #ddd; padding: 8px;\">${fee?.feeTypeName} - ${fee?.installmentName}</td>\n                    <td style=\"border: 1px solid #ddd; padding: 8px; text-align: right;\">₹${paymentData.amounts[feeId].toLocaleString()}</td>\n                  </tr>\n                `\n                })\n                .join('')}\n              ${\n                paymentData.discountAmount > 0\n                  ? `\n                <tr>\n                  <td style=\"border: 1px solid #ddd; padding: 8px;\">Discount</td>\n                  <td style=\"border: 1px solid #ddd; padding: 8px; text-align: right; color: green;\">-₹${paymentData.discountAmount.toLocaleString()}</td>\n                </tr>\n              `\n                  : ''\n              }\n              <tr style=\"background: #f5f5f5; font-weight: bold;\">\n                <td style=\"border: 1px solid #ddd; padding: 8px;\">Total Amount</td>\n                <td style=\"border: 1px solid #ddd; padding: 8px; text-align: right;\">₹${paymentData.totalAmount.toLocaleString()}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        \n        <div style=\"text-align: center; margin-top: 30px; font-size: 12px; color: #666;\">\n          <p>This is a computer generated receipt and does not require signature.</p>\n          <p>Thank you for your payment!</p>\n        </div>\n      </div>\n    `\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Collect Fees</h1>\n        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n          <Clock className=\"w-4 h-4\" />\n          {new Date().toLocaleString()}\n        </div>\n      </div>\n\n      {/* Student Search */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-lg font-medium mb-4\">Search Student</h2>\n        <StudentSearchBar\n          onStudentSelect={handleStudentSelect}\n          selectedStudent={selectedStudent}\n        />\n      </div>\n\n      {selectedStudent && (\n        <>\n          {/* Student Info */}\n          <StudentInfoCard\n            student={selectedStudent}\n            feeDetails={feeDetailsData?.data}\n          />\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Fee Details */}\n            <div className=\"lg:col-span-2\">\n              {isLoading ? (\n                <LoadingSkeleton />\n              ) : (\n                <FeeDetailsTable\n                  feeDetails={feeDetailsData?.data}\n                  selectedFees={selectedFees}\n                  onFeeToggle={handleFeeToggle}\n                  onPartialAmountChange={handlePartialAmountChange}\n                />\n              )}\n            </div>\n\n            {/* Payment Panel */}\n            <div className=\"lg:col-span-1\">\n              <PaymentPanel\n                selectedFees={selectedFees}\n                feeDetails={feeDetailsData?.data}\n                onPaymentComplete={handlePaymentComplete}\n              />\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Payment Success Dialog */}\n      <PaymentSuccessDialog\n        open={showPaymentSuccess}\n        onClose={() => setShowPaymentSuccess(false)}\n        paymentData={lastPaymentData}\n        onPrintReceipt={handlePrintReceipt}\n      />\n    </div>\n  )\n}\n\nexport default CollectFees\n"
        }
    ]
}