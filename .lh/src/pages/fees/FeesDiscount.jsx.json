{
    "sourceFile": "src/pages/fees/FeesDiscount.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755987434757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755992597441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import React, { useState } from 'react';\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n-import { \n+import React, { useState } from 'react'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n   Percent,\n   Plus,\n   Edit,\n   Trash2,\n@@ -18,43 +18,60 @@\n   Save,\n   Award,\n   UserCheck,\n   GraduationCap,\n-  Heart\n-} from 'lucide-react';\n-import Input from '../../components/ui/Input';\n-import Dialog from '../../components/ui/Dialog';\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n-import { feesApi } from '../../lib/api/fees';\n+  Heart,\n+} from 'lucide-react'\n+import Input from '../../components/ui/Input'\n+import Dialog from '../../components/ui/Dialog'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import { feesApi } from '../../lib/api/fees'\n \n-const DiscountCard = ({ discount, onEdit, onDelete, onDuplicate, onViewDetails, onApplyToStudents }) => {\n-  const getDiscountTypeIcon = (type) => {\n+const DiscountCard = ({\n+  discount,\n+  onEdit,\n+  onDelete,\n+  onDuplicate,\n+  onViewDetails,\n+  onApplyToStudents,\n+}) => {\n+  const getDiscountTypeIcon = type => {\n     switch (type) {\n-      case 'sibling': return <Users className=\"w-5 h-5 text-blue-600\" />;\n-      case 'merit': return <Award className=\"w-5 h-5 text-yellow-600\" />;\n-      case 'staff': return <UserCheck className=\"w-5 h-5 text-green-600\" />;\n-      case 'scholarship': return <GraduationCap className=\"w-5 h-5 text-purple-600\" />;\n-      case 'financial_aid': return <Heart className=\"w-5 h-5 text-red-600\" />;\n-      default: return <Percent className=\"w-5 h-5 text-gray-600\" />;\n+      case 'sibling':\n+        return <Users className=\"w-5 h-5 text-blue-600\" />\n+      case 'merit':\n+        return <Award className=\"w-5 h-5 text-yellow-600\" />\n+      case 'staff':\n+        return <UserCheck className=\"w-5 h-5 text-green-600\" />\n+      case 'scholarship':\n+        return <GraduationCap className=\"w-5 h-5 text-purple-600\" />\n+      case 'financial_aid':\n+        return <Heart className=\"w-5 h-5 text-red-600\" />\n+      default:\n+        return <Percent className=\"w-5 h-5 text-gray-600\" />\n     }\n-  };\n+  }\n \n-  const getStatusColor = (status) => {\n+  const getStatusColor = status => {\n     switch (status) {\n-      case 'active': return 'text-green-600 bg-green-100';\n-      case 'inactive': return 'text-gray-600 bg-gray-100';\n-      case 'expired': return 'text-red-600 bg-red-100';\n-      default: return 'text-gray-600 bg-gray-100';\n+      case 'active':\n+        return 'text-green-600 bg-green-100'\n+      case 'inactive':\n+        return 'text-gray-600 bg-gray-100'\n+      case 'expired':\n+        return 'text-red-600 bg-red-100'\n+      default:\n+        return 'text-gray-600 bg-gray-100'\n     }\n-  };\n+  }\n \n   const getDiscountValue = () => {\n     if (discount.discountType === 'percentage') {\n-      return `${discount.value}%`;\n+      return `${discount.value}%`\n     } else {\n-      return `₹${discount.value.toLocaleString()}`;\n+      return `₹${discount.value.toLocaleString()}`\n     }\n-  };\n+  }\n \n   return (\n     <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n       <div className=\"flex justify-between items-start mb-4\">\n@@ -65,30 +82,40 @@\n             <p className=\"text-sm text-gray-600\">{discount.description}</p>\n           </div>\n         </div>\n         <div className=\"flex items-center gap-2\">\n-          <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(discount.status)}`}>\n+          <span\n+            className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(discount.status)}`}\n+          >\n             {discount.status.charAt(0).toUpperCase() + discount.status.slice(1)}\n           </span>\n         </div>\n       </div>\n \n       <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n         <div>\n           <span className=\"text-gray-500\">Discount Value:</span>\n-          <div className=\"font-medium text-lg text-green-600\">{getDiscountValue()}</div>\n+          <div className=\"font-medium text-lg text-green-600\">\n+            {getDiscountValue()}\n+          </div>\n         </div>\n         <div>\n           <span className=\"text-gray-500\">Category:</span>\n-          <div className=\"font-medium capitalize\">{discount.category.replace('_', ' ')}</div>\n+          <div className=\"font-medium capitalize\">\n+            {discount.category.replace('_', ' ')}\n+          </div>\n         </div>\n         <div>\n           <span className=\"text-gray-500\">Applicable Classes:</span>\n-          <div className=\"font-medium\">{discount.applicableClasses?.length || 0} classes</div>\n+          <div className=\"font-medium\">\n+            {discount.applicableClasses?.length || 0} classes\n+          </div>\n         </div>\n         <div>\n           <span className=\"text-gray-500\">Students Applied:</span>\n-          <div className=\"font-medium\">{discount.studentsCount || 0} students</div>\n+          <div className=\"font-medium\">\n+            {discount.studentsCount || 0} students\n+          </div>\n         </div>\n       </div>\n \n       {discount.conditions && discount.conditions.length > 0 && (\n@@ -112,19 +139,25 @@\n       <div className=\"border-t pt-3 mb-4\">\n         <div className=\"grid grid-cols-2 gap-4 text-sm\">\n           <div>\n             <span className=\"text-gray-500\">Valid From:</span>\n-            <div className=\"font-medium\">{new Date(discount.validFrom).toLocaleDateString()}</div>\n+            <div className=\"font-medium\">\n+              {new Date(discount.validFrom).toLocaleDateString()}\n+            </div>\n           </div>\n           <div>\n             <span className=\"text-gray-500\">Valid Until:</span>\n             <div className=\"font-medium\">\n-              {discount.validUntil ? new Date(discount.validUntil).toLocaleDateString() : 'No expiry'}\n+              {discount.validUntil\n+                ? new Date(discount.validUntil).toLocaleDateString()\n+                : 'No expiry'}\n             </div>\n           </div>\n           <div>\n             <span className=\"text-gray-500\">Max Usage:</span>\n-            <div className=\"font-medium\">{discount.maxUsage || 'Unlimited'}</div>\n+            <div className=\"font-medium\">\n+              {discount.maxUsage || 'Unlimited'}\n+            </div>\n           </div>\n           <div>\n             <span className=\"text-gray-500\">Used:</span>\n             <div className=\"font-medium\">{discount.usageCount || 0} times</div>\n@@ -174,9 +207,9 @@\n           </button>\n         </div>\n       </div>\n     </div>\n-  );\n+  )\n };\n \n const DiscountDialog = ({ discount, open, onClose, onSave }) => {\n   const [formData, setFormData] = useState({\n@@ -193,65 +226,68 @@\n     status: discount?.status || 'active',\n     conditions: discount?.conditions || [],\n     autoApply: discount?.autoApply || false,\n     stackable: discount?.stackable || false,\n-    priority: discount?.priority || 1\n-  });\n+    priority: discount?.priority || 1,\n+  })\n \n   const { data: classesData } = useQuery({\n     queryKey: ['classes', 'all'],\n-    queryFn: () => feesApi.getClasses()\n-  });\n+    queryFn: () => feesApi.getClasses(),\n+  })\n \n   const { data: feeTypesData } = useQuery({\n     queryKey: ['fee-types', 'all'],\n-    queryFn: () => feesApi.getFeeTypes()\n-  });\n+    queryFn: () => feesApi.getFeeTypes(),\n+  })\n \n   const handleSave = () => {\n-    onSave(discount?.id, formData);\n-    onClose();\n+    onSave(discount?.id, formData)\n+    onClose()\n   };\n \n-  const toggleClass = (classId) => {\n+  const toggleClass = classId => {\n     setFormData(prev => ({\n       ...prev,\n       applicableClasses: prev.applicableClasses.includes(classId)\n         ? prev.applicableClasses.filter(id => id !== classId)\n-        : [...prev.applicableClasses, classId]\n-    }));\n+        : [...prev.applicableClasses, classId],\n+    }))\n   };\n \n-  const toggleFeeType = (feeTypeId) => {\n+  const toggleFeeType = feeTypeId => {\n     setFormData(prev => ({\n       ...prev,\n       applicableFeeTypes: prev.applicableFeeTypes.includes(feeTypeId)\n         ? prev.applicableFeeTypes.filter(id => id !== feeTypeId)\n-        : [...prev.applicableFeeTypes, feeTypeId]\n-    }));\n+        : [...prev.applicableFeeTypes, feeTypeId],\n+    }))\n   };\n \n   const addCondition = () => {\n     setFormData(prev => ({\n       ...prev,\n-      conditions: [...prev.conditions, { type: 'minimum_amount', value: '', description: '' }]\n-    }));\n+      conditions: [\n+        ...prev.conditions,\n+        { type: 'minimum_amount', value: '', description: '' },\n+      ],\n+    }))\n   };\n \n   const updateCondition = (index, field, value) => {\n     setFormData(prev => ({\n       ...prev,\n-      conditions: prev.conditions.map((condition, i) => \n-        i === index ? { ...condition, [field]: value } : condition\n+      conditions: prev.conditions.map((condition, i) =>\n+        i === index ? { ...condition, [field]: value } : condition,\n       )\n-    }));\n+    }))\n   };\n \n-  const removeCondition = (index) => {\n+  const removeCondition = index => {\n     setFormData(prev => ({\n       ...prev,\n-      conditions: prev.conditions.filter((_, i) => i !== index)\n-    }));\n+      conditions: prev.conditions.filter((_, i) => i !== index),\n+    }))\n   };\n \n   const discountCategories = [\n     { value: 'general', label: 'General Discount' },\n@@ -260,23 +296,23 @@\n     { value: 'staff', label: 'Staff Discount' },\n     { value: 'scholarship', label: 'Scholarship' },\n     { value: 'financial_aid', label: 'Financial Aid' },\n     { value: 'early_payment', label: 'Early Payment' },\n-    { value: 'bulk_payment', label: 'Bulk Payment' }\n+    { value: 'bulk_payment', label: 'Bulk Payment' },\n   ];\n \n   const conditionTypes = [\n     { value: 'minimum_amount', label: 'Minimum Amount' },\n     { value: 'grade_requirement', label: 'Grade Requirement' },\n     { value: 'attendance_requirement', label: 'Attendance Requirement' },\n     { value: 'sibling_count', label: 'Number of Siblings' },\n-    { value: 'payment_date', label: 'Payment Before Date' }\n+    { value: 'payment_date', label: 'Payment Before Date' },\n   ];\n \n   return (\n-    <Dialog \n-      open={open} \n-      onClose={onClose} \n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n       title={discount ? 'Edit Discount' : 'Create Discount'}\n       size=\"xl\"\n     >\n       <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n@@ -284,32 +320,39 @@\n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n           <Input\n             label=\"Discount Name *\"\n             value={formData.name}\n-            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, name: e.target.value }))\n+            }\n             placeholder=\"e.g., Sibling Discount 2024\"\n           />\n           <div>\n             <label className=\"block text-sm font-medium mb-1\">Category *</label>\n             <select\n               value={formData.category}\n-              onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, category: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n-              {Array.isArray(discountCategories) && discountCategories.map(category => (\n-                <option key={category.value} value={category.value}>\n-                  {category.label}\n-                </option>\n-              ))}\n+              {Array.isArray(discountCategories) &&\n+                discountCategories.map(category => (\n+                  <option key={category.value} value={category.value}>\n+                    {category.label}\n+                  </option>\n+                ))}\n             </select>\n           </div>\n         </div>\n \n         <div>\n           <label className=\"block text-sm font-medium mb-1\">Description</label>\n           <textarea\n             value={formData.description}\n-            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, description: e.target.value }))\n+            }\n             rows={3}\n             className=\"w-full border rounded-lg px-3 py-2\"\n             placeholder=\"Discount description...\"\n           />\n@@ -319,12 +362,19 @@\n         <div>\n           <h3 className=\"font-medium mb-3\">Discount Configuration</h3>\n           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n             <div>\n-              <label className=\"block text-sm font-medium mb-1\">Discount Type *</label>\n+              <label className=\"block text-sm font-medium mb-1\">\n+                Discount Type *\n+              </label>\n               <select\n                 value={formData.discountType}\n-                onChange={(e) => setFormData(prev => ({ ...prev, discountType: e.target.value }))}\n+                onChange={e =>\n+                  setFormData(prev => ({\n+                    ...prev,\n+                    discountType: e.target.value,\n+                  }))\n+                }\n                 className=\"w-full border rounded-lg px-3 py-2\"\n               >\n                 <option value=\"percentage\">Percentage</option>\n                 <option value=\"fixed\">Fixed Amount</option>\n@@ -333,17 +383,27 @@\n             <Input\n               label={`Discount Value * ${formData.discountType === 'percentage' ? '(%)' : '(₹)'}`}\n               type=\"number\"\n               value={formData.value}\n-              onChange={(e) => setFormData(prev => ({ ...prev, value: parseFloat(e.target.value) || 0 }))}\n+              onChange={e =>\n+                setFormData(prev => ({\n+                  ...prev,\n+                  value: parseFloat(e.target.value) || 0,\n+                }))\n+              }\n               min=\"0\"\n               max={formData.discountType === 'percentage' ? 100 : undefined}\n             />\n             <Input\n               label=\"Priority (1-10)\"\n               type=\"number\"\n               value={formData.priority}\n-              onChange={(e) => setFormData(prev => ({ ...prev, priority: parseInt(e.target.value) || 1 }))}\n+              onChange={e =>\n+                setFormData(prev => ({\n+                  ...prev,\n+                  priority: parseInt(e.target.value) || 1,\n+                }))\n+              }\n               min=\"1\"\n               max=\"10\"\n             />\n           </div>\n@@ -356,47 +416,61 @@\n             <Input\n               label=\"Valid From *\"\n               type=\"date\"\n               value={formData.validFrom}\n-              onChange={(e) => setFormData(prev => ({ ...prev, validFrom: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, validFrom: e.target.value }))\n+              }\n             />\n             <Input\n               label=\"Valid Until\"\n               type=\"date\"\n               value={formData.validUntil}\n-              onChange={(e) => setFormData(prev => ({ ...prev, validUntil: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, validUntil: e.target.value }))\n+              }\n             />\n             <Input\n               label=\"Max Usage (Optional)\"\n               type=\"number\"\n               value={formData.maxUsage}\n-              onChange={(e) => setFormData(prev => ({ ...prev, maxUsage: parseInt(e.target.value) || '' }))}\n+              onChange={e =>\n+                setFormData(prev => ({\n+                  ...prev,\n+                  maxUsage: parseInt(e.target.value) || '',\n+                }))\n+              }\n               placeholder=\"Unlimited\"\n             />\n           </div>\n         </div>\n \n         {/* Applicable Classes */}\n         <div>\n-          <label className=\"block text-sm font-medium mb-2\">Applicable Classes *</label>\n+          <label className=\"block text-sm font-medium mb-2\">\n+            Applicable Classes *\n+          </label>\n           <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n-            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n-              <label key={cls.id} className=\"flex items-center gap-2\">\n-                <input\n-                  type=\"checkbox\"\n-                  checked={formData.applicableClasses.includes(cls.id)}\n-                  onChange={() => toggleClass(cls.id)}\n-                  className=\"rounded\"\n-                />\n-                <span className=\"text-sm\">{cls.name}</span>\n-              </label>\n-            ))}\n+            {Array.isArray(classesData?.data) &&\n+              classesData.data.map(cls => (\n+                <label key={cls.id} className=\"flex items-center gap-2\">\n+                  <input\n+                    type=\"checkbox\"\n+                    checked={formData.applicableClasses.includes(cls.id)}\n+                    onChange={() => toggleClass(cls.id)}\n+                    className=\"rounded\"\n+                  />\n+                  <span className=\"text-sm\">{cls.name}</span>\n+                </label>\n+              ))}\n           </div>\n         </div>\n \n         {/* Applicable Fee Types */}\n         <div>\n-          <label className=\"block text-sm font-medium mb-2\">Applicable Fee Types</label>\n+          <label className=\"block text-sm font-medium mb-2\">\n+            Applicable Fee Types\n+          </label>\n           <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n             {feeTypesData?.data?.map(feeType => (\n               <label key={feeType.id} className=\"flex items-center gap-2\">\n                 <input\n@@ -426,43 +500,54 @@\n               Add Condition\n             </button>\n           </div>\n           <div className=\"space-y-3\">\n-            {Array.isArray(formData.conditions) && formData.conditions.map((condition, index) => (\n-              <div key={index} className=\"grid grid-cols-1 md:grid-cols-4 gap-2 p-3 border rounded\">\n-                <select\n-                  value={condition.type}\n-                  onChange={(e) => updateCondition(index, 'type', e.target.value)}\n-                  className=\"border rounded px-2 py-1 text-sm\"\n+            {Array.isArray(formData.conditions) &&\n+              formData.conditions.map((condition, index) => (\n+                <div\n+                  key={index}\n+                  className=\"grid grid-cols-1 md:grid-cols-4 gap-2 p-3 border rounded\"\n                 >\n-                  {Array.isArray(conditionTypes) && conditionTypes.map(type => (\n-                    <option key={type.value} value={type.value}>\n-                      {type.label}\n-                    </option>\n-                  ))}\n-                </select>\n-                <input\n-                  type=\"text\"\n-                  value={condition.value}\n-                  onChange={(e) => updateCondition(index, 'value', e.target.value)}\n-                  placeholder=\"Value\"\n-                  className=\"border rounded px-2 py-1 text-sm\"\n-                />\n-                <input\n-                  type=\"text\"\n-                  value={condition.description}\n-                  onChange={(e) => updateCondition(index, 'description', e.target.value)}\n-                  placeholder=\"Description\"\n-                  className=\"border rounded px-2 py-1 text-sm\"\n-                />\n-                <button\n-                  onClick={() => removeCondition(index)}\n-                  className=\"text-red-600 hover:text-red-700\"\n-                >\n-                  <Trash2 className=\"w-4 h-4\" />\n-                </button>\n-              </div>\n-            ))}\n+                  <select\n+                    value={condition.type}\n+                    onChange={e =>\n+                      updateCondition(index, 'type', e.target.value)\n+                    }\n+                    className=\"border rounded px-2 py-1 text-sm\"\n+                  >\n+                    {Array.isArray(conditionTypes) &&\n+                      conditionTypes.map(type => (\n+                        <option key={type.value} value={type.value}>\n+                          {type.label}\n+                        </option>\n+                      ))}\n+                  </select>\n+                  <input\n+                    type=\"text\"\n+                    value={condition.value}\n+                    onChange={e =>\n+                      updateCondition(index, 'value', e.target.value)\n+                    }\n+                    placeholder=\"Value\"\n+                    className=\"border rounded px-2 py-1 text-sm\"\n+                  />\n+                  <input\n+                    type=\"text\"\n+                    value={condition.description}\n+                    onChange={e =>\n+                      updateCondition(index, 'description', e.target.value)\n+                    }\n+                    placeholder=\"Description\"\n+                    className=\"border rounded px-2 py-1 text-sm\"\n+                  />\n+                  <button\n+                    onClick={() => removeCondition(index)}\n+                    className=\"text-red-600 hover:text-red-700\"\n+                  >\n+                    <Trash2 className=\"w-4 h-4\" />\n+                  </button>\n+                </div>\n+              ))}\n           </div>\n         </div>\n \n         {/* Advanced Settings */}\n@@ -472,21 +557,35 @@\n             <label className=\"flex items-center gap-2\">\n               <input\n                 type=\"checkbox\"\n                 checked={formData.autoApply}\n-                onChange={(e) => setFormData(prev => ({ ...prev, autoApply: e.target.checked }))}\n+                onChange={e =>\n+                  setFormData(prev => ({\n+                    ...prev,\n+                    autoApply: e.target.checked,\n+                  }))\n+                }\n                 className=\"rounded\"\n               />\n-              <span className=\"text-sm\">Auto-apply when conditions are met</span>\n+              <span className=\"text-sm\">\n+                Auto-apply when conditions are met\n+              </span>\n             </label>\n             <label className=\"flex items-center gap-2\">\n               <input\n                 type=\"checkbox\"\n                 checked={formData.stackable}\n-                onChange={(e) => setFormData(prev => ({ ...prev, stackable: e.target.checked }))}\n+                onChange={e =>\n+                  setFormData(prev => ({\n+                    ...prev,\n+                    stackable: e.target.checked,\n+                  }))\n+                }\n                 className=\"rounded\"\n               />\n-              <span className=\"text-sm\">Can be combined with other discounts</span>\n+              <span className=\"text-sm\">\n+                Can be combined with other discounts\n+              </span>\n             </label>\n           </div>\n         </div>\n \n@@ -494,9 +593,11 @@\n         <div>\n           <label className=\"block text-sm font-medium mb-1\">Status</label>\n           <select\n             value={formData.status}\n-            onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, status: e.target.value }))\n+            }\n             className=\"w-full border rounded-lg px-3 py-2 max-w-xs\"\n           >\n             <option value=\"active\">Active</option>\n             <option value=\"inactive\">Inactive</option>\n@@ -512,74 +613,95 @@\n             Cancel\n           </button>\n           <button\n             onClick={handleSave}\n-            disabled={!formData.name.trim() || formData.applicableClasses.length === 0}\n+            disabled={\n+              !formData.name.trim() || formData.applicableClasses.length === 0\n+            }\n             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n           >\n             <Save className=\"w-4 h-4\" />\n             {discount ? 'Update' : 'Create'} Discount\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n+  )\n };\n \n const ApplyDiscountDialog = ({ discount, open, onClose, onApply }) => {\n-  const [selectedStudents, setSelectedStudents] = useState([]);\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [filterClass, setFilterClass] = useState('');\n+  const [selectedStudents, setSelectedStudents] = useState([])\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [filterClass, setFilterClass] = useState('')\n \n   const { data: studentsData, isLoading } = useQuery({\n-    queryKey: ['students', 'eligible-for-discount', discount?.id, searchTerm, filterClass],\n-    queryFn: () => feesApi.getEligibleStudents(discount?.id, { searchTerm, classId: filterClass }),\n-    enabled: !!discount && open\n-  });\n+    queryKey: [\n+      'students',\n+      'eligible-for-discount',\n+      discount?.id,\n+      searchTerm,\n+      filterClass,\n+    ],\n+    queryFn: () =>\n+      feesApi.getEligibleStudents(discount?.id, {\n+        searchTerm,\n+        classId: filterClass,\n+      }),\n+    enabled: !!discount && open,\n+  })\n \n   const { data: classesData } = useQuery({\n     queryKey: ['classes', 'all'],\n-    queryFn: () => feesApi.getClasses()\n-  });\n+    queryFn: () => feesApi.getClasses(),\n+  })\n \n   const handleApply = () => {\n-    onApply(discount.id, selectedStudents);\n-    onClose();\n-    setSelectedStudents([]);\n+    onApply(discount.id, selectedStudents)\n+    onClose()\n+    setSelectedStudents([])\n   };\n \n-  const toggleStudent = (studentId) => {\n-    setSelectedStudents(prev => \n-      prev.includes(studentId) \n+  const toggleStudent = studentId => {\n+    setSelectedStudents(prev =>\n+      prev.includes(studentId)\n         ? prev.filter(id => id !== studentId)\n-        : [...prev, studentId]\n+        : [...prev, studentId],\n     );\n-  };\n+  }\n \n   const toggleAll = () => {\n-    const allStudentIds = studentsData?.data?.map(s => s.id) || [];\n-    setSelectedStudents(prev => \n-      prev.length === allStudentIds.length ? [] : allStudentIds\n+    const allStudentIds = studentsData?.data?.map(s => s.id) || []\n+    setSelectedStudents(prev =>\n+      prev.length === allStudentIds.length ? [] : allStudentIds,\n     );\n-  };\n+  }\n \n-  if (!discount) return null;\n+  if (!discount) return null\n \n   return (\n-    <Dialog open={open} onClose={onClose} title={`Apply ${discount.name}`} size=\"xl\">\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      title={`Apply ${discount.name}`}\n+      size=\"xl\"\n+    >\n       <div className=\"space-y-6\">\n         <div className=\"bg-blue-50 rounded-lg p-4\">\n           <h3 className=\"font-medium mb-2\">Discount Details</h3>\n           <div className=\"grid grid-cols-2 gap-4 text-sm\">\n             <div>\n               <span className=\"text-gray-600\">Discount:</span>\n               <span className=\"font-medium ml-2\">\n-                {discount.discountType === 'percentage' ? `${discount.value}%` : `₹${discount.value}`}\n+                {discount.discountType === 'percentage'\n+                  ? `${discount.value}%`\n+                  : `₹${discount.value}`}\n               </span>\n             </div>\n             <div>\n               <span className=\"text-gray-600\">Category:</span>\n-              <span className=\"font-medium ml-2 capitalize\">{discount.category.replace('_', ' ')}</span>\n+              <span className=\"font-medium ml-2 capitalize\">\n+                {discount.category.replace('_', ' ')}\n+              </span>\n             </div>\n           </div>\n         </div>\n \n@@ -590,23 +712,24 @@\n             <input\n               type=\"text\"\n               placeholder=\"Search students...\"\n               value={searchTerm}\n-              onChange={(e) => setSearchTerm(e.target.value)}\n+              onChange={e => setSearchTerm(e.target.value)}\n               className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n             />\n           </div>\n           <select\n             value={filterClass}\n-            onChange={(e) => setFilterClass(e.target.value)}\n+            onChange={e => setFilterClass(e.target.value)}\n             className=\"border rounded-lg px-3 py-2\"\n           >\n             <option value=\"\">All Classes</option>\n-            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n-              <option key={cls.id} value={cls.id}>\n-                {cls.name}\n-              </option>\n-            ))}\n+            {Array.isArray(classesData?.data) &&\n+              classesData.data.map(cls => (\n+                <option key={cls.id} value={cls.id}>\n+                  {cls.name}\n+                </option>\n+              ))}\n           </select>\n         </div>\n \n         {/* Student Selection */}\n@@ -614,15 +737,18 @@\n           <div className=\"flex justify-between items-center mb-3\">\n             <h3 className=\"font-medium\">Eligible Students</h3>\n             <div className=\"flex items-center gap-4\">\n               <span className=\"text-sm text-gray-600\">\n-                {selectedStudents.length} of {studentsData?.data?.length || 0} selected\n+                {selectedStudents.length} of {studentsData?.data?.length || 0}{' '}\n+                selected\n               </span>\n               <button\n                 onClick={toggleAll}\n                 className=\"text-sm text-blue-600 hover:text-blue-700\"\n               >\n-                {selectedStudents.length === studentsData?.data?.length ? 'Deselect All' : 'Select All'}\n+                {selectedStudents.length === studentsData?.data?.length\n+                  ? 'Deselect All'\n+                  : 'Select All'}\n               </button>\n             </div>\n           </div>\n \n@@ -635,9 +761,13 @@\n                   <tr>\n                     <th className=\"text-left py-3 px-4 w-12\">\n                       <input\n                         type=\"checkbox\"\n-                        checked={selectedStudents.length === studentsData?.data?.length && studentsData?.data?.length > 0}\n+                        checked={\n+                          selectedStudents.length ===\n+                            studentsData?.data?.length &&\n+                          studentsData?.data?.length > 0\n+                        }\n                         onChange={toggleAll}\n                         className=\"rounded\"\n                       />\n                     </th>\n@@ -647,35 +777,50 @@\n                     <th className=\"text-right py-3 px-4\">Discount Amount</th>\n                   </tr>\n                 </thead>\n                 <tbody>\n-                  {Array.isArray(studentsData?.data) && studentsData.data.map(student => {\n-                    const discountAmount = discount.discountType === 'percentage' \n-                      ? (student.totalDue * discount.value) / 100\n-                      : discount.value;\n-                    \n-                    return (\n-                      <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n-                        <td className=\"py-3 px-4\">\n-                          <input\n-                            type=\"checkbox\"\n-                            checked={selectedStudents.includes(student.id)}\n-                            onChange={() => toggleStudent(student.id)}\n-                            className=\"rounded\"\n-                          />\n-                        </td>\n-                        <td className=\"py-3 px-4\">\n-                          <div className=\"font-medium\">{student.name}</div>\n-                          <div className=\"text-sm text-gray-500\">Roll: {student.rollNumber}</div>\n-                        </td>\n-                        <td className=\"py-3 px-4\">{student.className} - {student.section}</td>\n-                        <td className=\"py-3 px-4 text-right\">₹{student.totalDue?.toLocaleString()}</td>\n-                        <td className=\"py-3 px-4 text-right text-green-600 font-medium\">\n-                          ₹{Math.min(discountAmount, student.totalDue).toLocaleString()}\n-                        </td>\n-                      </tr>\n-                    );\n-                  })}\n+                  {Array.isArray(studentsData?.data) &&\n+                    studentsData.data.map(student => {\n+                      const discountAmount =\n+                        discount.discountType === 'percentage'\n+                          ? (student.totalDue * discount.value) / 100\n+                          : discount.value\n+\n+                      return (\n+                        <tr\n+                          key={student.id}\n+                          className=\"border-b hover:bg-gray-50\"\n+                        >\n+                          <td className=\"py-3 px-4\">\n+                            <input\n+                              type=\"checkbox\"\n+                              checked={selectedStudents.includes(student.id)}\n+                              onChange={() => toggleStudent(student.id)}\n+                              className=\"rounded\"\n+                            />\n+                          </td>\n+                          <td className=\"py-3 px-4\">\n+                            <div className=\"font-medium\">{student.name}</div>\n+                            <div className=\"text-sm text-gray-500\">\n+                              Roll: {student.rollNumber}\n+                            </div>\n+                          </td>\n+                          <td className=\"py-3 px-4\">\n+                            {student.className} - {student.section}\n+                          </td>\n+                          <td className=\"py-3 px-4 text-right\">\n+                            ₹{student.totalDue?.toLocaleString()}\n+                          </td>\n+                          <td className=\"py-3 px-4 text-right text-green-600 font-medium\">\n+                            ₹\n+                            {Math.min(\n+                              discountAmount,\n+                              student.totalDue\n+                            ).toLocaleString()}\n+                          </td>\n+                        </tr>\n+                      )\n+                    })}\n                 </tbody>\n               </table>\n             </div>\n           )}\n@@ -699,120 +844,133 @@\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n+  )\n };\n \n const FeesDiscount = () => {\n-  const [selectedDiscount, setSelectedDiscount] = useState(null);\n-  const [showDiscountDialog, setShowDiscountDialog] = useState(false);\n-  const [showApplyDialog, setShowApplyDialog] = useState(false);\n-  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n-  const [filterCategory, setFilterCategory] = useState('all');\n-  const [filterStatus, setFilterStatus] = useState('all');\n-  const [searchTerm, setSearchTerm] = useState('');\n+  const [selectedDiscount, setSelectedDiscount] = useState(null)\n+  const [showDiscountDialog, setShowDiscountDialog] = useState(false)\n+  const [showApplyDialog, setShowApplyDialog] = useState(false)\n+  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n+  const [filterCategory, setFilterCategory] = useState('all')\n+  const [filterStatus, setFilterStatus] = useState('all')\n+  const [searchTerm, setSearchTerm] = useState('')\n \n-  const queryClient = useQueryClient();\n+  const queryClient = useQueryClient()\n \n   const { data: discountsData, isLoading } = useQuery({\n     queryKey: ['discounts', 'all'],\n-    queryFn: () => feesApi.getDiscounts()\n-  });\n+    queryFn: () => feesApi.getDiscounts(),\n+  })\n \n   const saveDiscountMutation = useMutation({\n-    mutationFn: ({ id, data }) => id ? feesApi.updateDiscount(id, data) : feesApi.createDiscount(data),\n+    mutationFn: ({ id, data }) =>\n+      id ? feesApi.updateDiscount(id, data) : feesApi.createDiscount(data),\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['discounts']);\n-      setShowDiscountDialog(false);\n-      setSelectedDiscount(null);\n+      queryClient.invalidateQueries(['discounts'])\n+      setShowDiscountDialog(false)\n+      setSelectedDiscount(null)\n     }\n-  });\n+  })\n \n   const deleteDiscountMutation = useMutation({\n     mutationFn: feesApi.deleteDiscount,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['discounts']);\n+      queryClient.invalidateQueries(['discounts'])\n     }\n-  });\n+  })\n \n   const applyDiscountMutation = useMutation({\n-    mutationFn: ({ discountId, studentIds }) => feesApi.applyDiscountToStudents(discountId, studentIds),\n+    mutationFn: ({ discountId, studentIds }) =>\n+      feesApi.applyDiscountToStudents(discountId, studentIds),\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['discounts']);\n-      setShowApplyDialog(false);\n+      queryClient.invalidateQueries(['discounts'])\n+      setShowApplyDialog(false)\n     }\n-  });\n+  })\n \n-  const handleEditDiscount = (discount) => {\n-    setSelectedDiscount(discount);\n-    setShowDiscountDialog(true);\n+  const handleEditDiscount = discount => {\n+    setSelectedDiscount(discount)\n+    setShowDiscountDialog(true)\n   };\n \n-  const handleDeleteDiscount = (discount) => {\n+  const handleDeleteDiscount = discount => {\n     if (confirm(`Are you sure you want to delete \"${discount.name}\"?`)) {\n-      deleteDiscountMutation.mutate(discount.id);\n+      deleteDiscountMutation.mutate(discount.id)\n     }\n-  };\n+  }\n \n-  const handleDuplicateDiscount = (discount) => {\n+  const handleDuplicateDiscount = discount => {\n     const duplicatedDiscount = {\n       ...discount,\n       name: `${discount.name} (Copy)`,\n-      id: undefined\n+      id: undefined,\n     };\n-    setSelectedDiscount(duplicatedDiscount);\n-    setShowDiscountDialog(true);\n+    setSelectedDiscount(duplicatedDiscount)\n+    setShowDiscountDialog(true)\n   };\n \n-  const handleViewDetails = (discount) => {\n-    setSelectedDiscount(discount);\n-    setShowDetailsDialog(true);\n+  const handleViewDetails = discount => {\n+    setSelectedDiscount(discount)\n+    setShowDetailsDialog(true)\n   };\n \n-  const handleApplyToStudents = (discount) => {\n-    setSelectedDiscount(discount);\n-    setShowApplyDialog(true);\n+  const handleApplyToStudents = discount => {\n+    setSelectedDiscount(discount)\n+    setShowApplyDialog(true)\n   };\n \n   const handleSaveDiscount = (id, data) => {\n-    saveDiscountMutation.mutate({ id, data });\n+    saveDiscountMutation.mutate({ id, data })\n   };\n \n   const handleApplyDiscount = (discountId, studentIds) => {\n-    applyDiscountMutation.mutate({ discountId, studentIds });\n+    applyDiscountMutation.mutate({ discountId, studentIds })\n   };\n \n   const handleAddDiscount = () => {\n-    setSelectedDiscount(null);\n-    setShowDiscountDialog(true);\n+    setSelectedDiscount(null)\n+    setShowDiscountDialog(true)\n   };\n \n-  const filteredDiscounts = discountsData?.data?.filter(discount => {\n-    const matchesCategory = filterCategory === 'all' || discount.category === filterCategory;\n-    const matchesStatus = filterStatus === 'all' || discount.status === filterStatus;\n-    const matchesSearch = discount.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-                         discount.description.toLowerCase().includes(searchTerm.toLowerCase());\n-    return matchesCategory && matchesStatus && matchesSearch;\n-  }) || [];\n+  const filteredDiscounts =\n+    discountsData?.data?.filter(discount => {\n+      const matchesCategory =\n+        filterCategory === 'all' || discount.category === filterCategory\n+      const matchesStatus =\n+        filterStatus === 'all' || discount.status === filterStatus\n+      const matchesSearch =\n+        discount.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        discount.description.toLowerCase().includes(searchTerm.toLowerCase())\n+      return matchesCategory && matchesStatus && matchesSearch\n+    }) || []\n \n   const getStatistics = () => {\n-    const discounts = discountsData?.data || [];\n-    const totalSavings = Array.isArray(discounts) ? discounts.reduce((sum, discount) => {\n-      return sum + (discount.totalSavings || 0);\n-    }, 0) : 0;\n-    \n+    const discounts = discountsData?.data || []\n+    const totalSavings = Array.isArray(discounts)\n+      ? discounts.reduce((sum, discount) => {\n+          return sum + (discount.totalSavings || 0)\n+        }, 0)\n+      : 0\n+\n     return {\n       total: discounts.length,\n       active: discounts.filter(d => d.status === 'active').length,\n       totalSavings,\n-      studentsHelped: Array.isArray(discounts) ? discounts.reduce((sum, discount) => sum + (discount.studentsCount || 0), 0) : 0\n-    };\n+      studentsHelped: Array.isArray(discounts)\n+        ? discounts.reduce(\n+            (sum, discount) => sum + (discount.studentsCount || 0),\n+            0\n+          )\n+        : 0,\n+    }\n   };\n \n-  const stats = getStatistics();\n+  const stats = getStatistics()\n \n-  if (isLoading) return <LoadingSkeleton />;\n+  if (isLoading) return <LoadingSkeleton />\n \n   return (\n     <div className=\"space-y-6\">\n       <div className=\"flex justify-between items-center\">\n@@ -849,9 +1007,11 @@\n         <div className=\"bg-white p-4 rounded-lg shadow\">\n           <div className=\"flex items-center gap-3\">\n             <DollarSign className=\"w-8 h-8 text-green-600\" />\n             <div>\n-              <p className=\"text-2xl font-bold\">₹{stats.totalSavings.toLocaleString()}</p>\n+              <p className=\"text-2xl font-bold\">\n+                ₹{stats.totalSavings.toLocaleString()}\n+              </p>\n               <p className=\"text-sm text-gray-600\">Total Savings</p>\n             </div>\n           </div>\n         </div>\n@@ -874,15 +1034,15 @@\n             <input\n               type=\"text\"\n               placeholder=\"Search discounts...\"\n               value={searchTerm}\n-              onChange={(e) => setSearchTerm(e.target.value)}\n+              onChange={e => setSearchTerm(e.target.value)}\n               className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n             />\n           </div>\n           <select\n             value={filterCategory}\n-            onChange={(e) => setFilterCategory(e.target.value)}\n+            onChange={e => setFilterCategory(e.target.value)}\n             className=\"border rounded-lg px-3 py-2\"\n           >\n             <option value=\"all\">All Categories</option>\n             <option value=\"general\">General</option>\n@@ -893,18 +1053,19 @@\n             <option value=\"financial_aid\">Financial Aid</option>\n           </select>\n           <select\n             value={filterStatus}\n-            onChange={(e) => setFilterStatus(e.target.value)}\n+            onChange={e => setFilterStatus(e.target.value)}\n             className=\"border rounded-lg px-3 py-2\"\n           >\n             <option value=\"all\">All Status</option>\n             <option value=\"active\">Active</option>\n             <option value=\"inactive\">Inactive</option>\n             <option value=\"expired\">Expired</option>\n           </select>\n           <div className=\"text-sm text-gray-500 flex items-center\">\n-            Showing {filteredDiscounts.length} of {discountsData?.data?.length || 0} discounts\n+            Showing {filteredDiscounts.length} of{' '}\n+            {discountsData?.data?.length || 0} discounts\n           </div>\n         </div>\n       </div>\n \n@@ -912,14 +1073,15 @@\n       <div className=\"space-y-4\">\n         {filteredDiscounts.length === 0 ? (\n           <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n             <Percent className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n-            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Discounts Found</h3>\n+            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n+              No Discounts Found\n+            </h3>\n             <p className=\"text-gray-500 mb-4\">\n-              {discountsData?.data?.length === 0 \n+              {discountsData?.data?.length === 0\n                 ? 'Create your first discount to get started.'\n-                : 'No discounts match your current filters.'\n-              }\n+                : 'No discounts match your current filters.'}\n             </p>\n             {discountsData?.data?.length === 0 && (\n               <button\n                 onClick={handleAddDiscount}\n@@ -930,19 +1092,20 @@\n             )}\n           </div>\n         ) : (\n           <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n-            {Array.isArray(filteredDiscounts) && filteredDiscounts.map(discount => (\n-              <DiscountCard\n-                key={discount.id}\n-                discount={discount}\n-                onEdit={handleEditDiscount}\n-                onDelete={handleDeleteDiscount}\n-                onDuplicate={handleDuplicateDiscount}\n-                onViewDetails={handleViewDetails}\n-                onApplyToStudents={handleApplyToStudents}\n-              />\n-            ))}\n+            {Array.isArray(filteredDiscounts) &&\n+              filteredDiscounts.map(discount => (\n+                <DiscountCard\n+                  key={discount.id}\n+                  discount={discount}\n+                  onEdit={handleEditDiscount}\n+                  onDelete={handleDeleteDiscount}\n+                  onDuplicate={handleDuplicateDiscount}\n+                  onViewDetails={handleViewDetails}\n+                  onApplyToStudents={handleApplyToStudents}\n+                />\n+              ))}\n           </div>\n         )}\n       </div>\n \n@@ -961,8 +1124,8 @@\n         onClose={() => setShowApplyDialog(false)}\n         onApply={handleApplyDiscount}\n       />\n     </div>\n-  );\n+  )\n };\n \n\\ No newline at end of file\n-export default FeesDiscount;\n+export default FeesDiscount\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755994925742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   GraduationCap,\n   Heart,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { feesApi } from '../../lib/api/fees'\n \n const DiscountCard = ({\n@@ -208,9 +208,9 @@\n         </div>\n       </div>\n     </div>\n   )\n-};\n+}\n \n const DiscountDialog = ({ discount, open, onClose, onSave }) => {\n   const [formData, setFormData] = useState({\n     name: discount?.name || '',\n@@ -242,27 +242,27 @@\n \n   const handleSave = () => {\n     onSave(discount?.id, formData)\n     onClose()\n-  };\n+  }\n \n   const toggleClass = classId => {\n     setFormData(prev => ({\n       ...prev,\n       applicableClasses: prev.applicableClasses.includes(classId)\n         ? prev.applicableClasses.filter(id => id !== classId)\n         : [...prev.applicableClasses, classId],\n     }))\n-  };\n+  }\n \n   const toggleFeeType = feeTypeId => {\n     setFormData(prev => ({\n       ...prev,\n       applicableFeeTypes: prev.applicableFeeTypes.includes(feeTypeId)\n         ? prev.applicableFeeTypes.filter(id => id !== feeTypeId)\n         : [...prev.applicableFeeTypes, feeTypeId],\n     }))\n-  };\n+  }\n \n   const addCondition = () => {\n     setFormData(prev => ({\n       ...prev,\n@@ -270,25 +270,25 @@\n         ...prev.conditions,\n         { type: 'minimum_amount', value: '', description: '' },\n       ],\n     }))\n-  };\n+  }\n \n   const updateCondition = (index, field, value) => {\n     setFormData(prev => ({\n       ...prev,\n       conditions: prev.conditions.map((condition, i) =>\n-        i === index ? { ...condition, [field]: value } : condition,\n-      )\n+        i === index ? { ...condition, [field]: value } : condition\n+      ),\n     }))\n-  };\n+  }\n \n   const removeCondition = index => {\n     setFormData(prev => ({\n       ...prev,\n       conditions: prev.conditions.filter((_, i) => i !== index),\n     }))\n-  };\n+  }\n \n   const discountCategories = [\n     { value: 'general', label: 'General Discount' },\n     { value: 'sibling', label: 'Sibling Discount' },\n@@ -297,17 +297,17 @@\n     { value: 'scholarship', label: 'Scholarship' },\n     { value: 'financial_aid', label: 'Financial Aid' },\n     { value: 'early_payment', label: 'Early Payment' },\n     { value: 'bulk_payment', label: 'Bulk Payment' },\n-  ];\n+  ]\n \n   const conditionTypes = [\n     { value: 'minimum_amount', label: 'Minimum Amount' },\n     { value: 'grade_requirement', label: 'Grade Requirement' },\n     { value: 'attendance_requirement', label: 'Attendance Requirement' },\n     { value: 'sibling_count', label: 'Number of Siblings' },\n     { value: 'payment_date', label: 'Payment Before Date' },\n-  ];\n+  ]\n \n   return (\n     <Dialog\n       open={open}\n@@ -625,9 +625,9 @@\n         </div>\n       </div>\n     </Dialog>\n   )\n-};\n+}\n \n const ApplyDiscountDialog = ({ discount, open, onClose, onApply }) => {\n   const [selectedStudents, setSelectedStudents] = useState([])\n   const [searchTerm, setSearchTerm] = useState('')\n@@ -657,23 +657,23 @@\n   const handleApply = () => {\n     onApply(discount.id, selectedStudents)\n     onClose()\n     setSelectedStudents([])\n-  };\n+  }\n \n   const toggleStudent = studentId => {\n     setSelectedStudents(prev =>\n       prev.includes(studentId)\n         ? prev.filter(id => id !== studentId)\n-        : [...prev, studentId],\n-    );\n+        : [...prev, studentId]\n+    )\n   }\n \n   const toggleAll = () => {\n     const allStudentIds = studentsData?.data?.map(s => s.id) || []\n     setSelectedStudents(prev =>\n-      prev.length === allStudentIds.length ? [] : allStudentIds,\n-    );\n+      prev.length === allStudentIds.length ? [] : allStudentIds\n+    )\n   }\n \n   if (!discount) return null\n \n@@ -813,9 +813,9 @@\n                           <td className=\"py-3 px-4 text-right text-green-600 font-medium\">\n                             ₹\n                             {Math.min(\n                               discountAmount,\n-                              student.totalDue\n+                              student.totalDue,\n                             ).toLocaleString()}\n                           </td>\n                         </tr>\n                       )\n@@ -845,9 +845,9 @@\n         </div>\n       </div>\n     </Dialog>\n   )\n-};\n+}\n \n const FeesDiscount = () => {\n   const [selectedDiscount, setSelectedDiscount] = useState(null)\n   const [showDiscountDialog, setShowDiscountDialog] = useState(false)\n@@ -870,31 +870,31 @@\n     onSuccess: () => {\n       queryClient.invalidateQueries(['discounts'])\n       setShowDiscountDialog(false)\n       setSelectedDiscount(null)\n-    }\n+    },\n   })\n \n   const deleteDiscountMutation = useMutation({\n     mutationFn: feesApi.deleteDiscount,\n     onSuccess: () => {\n       queryClient.invalidateQueries(['discounts'])\n-    }\n+    },\n   })\n \n   const applyDiscountMutation = useMutation({\n     mutationFn: ({ discountId, studentIds }) =>\n       feesApi.applyDiscountToStudents(discountId, studentIds),\n     onSuccess: () => {\n       queryClient.invalidateQueries(['discounts'])\n       setShowApplyDialog(false)\n-    }\n+    },\n   })\n \n   const handleEditDiscount = discount => {\n     setSelectedDiscount(discount)\n     setShowDiscountDialog(true)\n-  };\n+  }\n \n   const handleDeleteDiscount = discount => {\n     if (confirm(`Are you sure you want to delete \"${discount.name}\"?`)) {\n       deleteDiscountMutation.mutate(discount.id)\n@@ -905,35 +905,35 @@\n     const duplicatedDiscount = {\n       ...discount,\n       name: `${discount.name} (Copy)`,\n       id: undefined,\n-    };\n+    }\n     setSelectedDiscount(duplicatedDiscount)\n     setShowDiscountDialog(true)\n-  };\n+  }\n \n   const handleViewDetails = discount => {\n     setSelectedDiscount(discount)\n     setShowDetailsDialog(true)\n-  };\n+  }\n \n   const handleApplyToStudents = discount => {\n     setSelectedDiscount(discount)\n     setShowApplyDialog(true)\n-  };\n+  }\n \n   const handleSaveDiscount = (id, data) => {\n     saveDiscountMutation.mutate({ id, data })\n-  };\n+  }\n \n   const handleApplyDiscount = (discountId, studentIds) => {\n     applyDiscountMutation.mutate({ discountId, studentIds })\n-  };\n+  }\n \n   const handleAddDiscount = () => {\n     setSelectedDiscount(null)\n     setShowDiscountDialog(true)\n-  };\n+  }\n \n   const filteredDiscounts =\n     discountsData?.data?.filter(discount => {\n       const matchesCategory =\n@@ -960,13 +960,13 @@\n       totalSavings,\n       studentsHelped: Array.isArray(discounts)\n         ? discounts.reduce(\n             (sum, discount) => sum + (discount.studentsCount || 0),\n-            0\n+            0,\n           )\n         : 0,\n     }\n-  };\n+  }\n \n   const stats = getStatistics()\n \n   if (isLoading) return <LoadingSkeleton />\n@@ -1125,7 +1125,7 @@\n         onApply={handleApplyDiscount}\n       />\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default FeesDiscount\n+export default FeesDiscount\n"
                }
            ],
            "date": 1755987434757,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  Percent,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Copy,\n  Users,\n  DollarSign,\n  Calendar,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Filter,\n  Search,\n  Save,\n  Award,\n  UserCheck,\n  GraduationCap,\n  Heart\n} from 'lucide-react';\nimport Input from '../../components/ui/Input';\nimport Dialog from '../../components/ui/Dialog';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport { feesApi } from '../../lib/api/fees';\n\nconst DiscountCard = ({ discount, onEdit, onDelete, onDuplicate, onViewDetails, onApplyToStudents }) => {\n  const getDiscountTypeIcon = (type) => {\n    switch (type) {\n      case 'sibling': return <Users className=\"w-5 h-5 text-blue-600\" />;\n      case 'merit': return <Award className=\"w-5 h-5 text-yellow-600\" />;\n      case 'staff': return <UserCheck className=\"w-5 h-5 text-green-600\" />;\n      case 'scholarship': return <GraduationCap className=\"w-5 h-5 text-purple-600\" />;\n      case 'financial_aid': return <Heart className=\"w-5 h-5 text-red-600\" />;\n      default: return <Percent className=\"w-5 h-5 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'inactive': return 'text-gray-600 bg-gray-100';\n      case 'expired': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getDiscountValue = () => {\n    if (discount.discountType === 'percentage') {\n      return `${discount.value}%`;\n    } else {\n      return `₹${discount.value.toLocaleString()}`;\n    }\n  };\n\n  return (\n    <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <div className=\"flex items-center gap-3\">\n          {getDiscountTypeIcon(discount.category)}\n          <div>\n            <h3 className=\"text-lg font-semibold\">{discount.name}</h3>\n            <p className=\"text-sm text-gray-600\">{discount.description}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(discount.status)}`}>\n            {discount.status.charAt(0).toUpperCase() + discount.status.slice(1)}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n        <div>\n          <span className=\"text-gray-500\">Discount Value:</span>\n          <div className=\"font-medium text-lg text-green-600\">{getDiscountValue()}</div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">Category:</span>\n          <div className=\"font-medium capitalize\">{discount.category.replace('_', ' ')}</div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">Applicable Classes:</span>\n          <div className=\"font-medium\">{discount.applicableClasses?.length || 0} classes</div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">Students Applied:</span>\n          <div className=\"font-medium\">{discount.studentsCount || 0} students</div>\n        </div>\n      </div>\n\n      {discount.conditions && discount.conditions.length > 0 && (\n        <div className=\"border-t pt-3 mb-4\">\n          <div className=\"text-sm text-gray-600 mb-2\">Conditions:</div>\n          <div className=\"space-y-1\">\n            {discount.conditions.slice(0, 2).map((condition, index) => (\n              <div key={index} className=\"text-sm bg-gray-50 p-2 rounded\">\n                {condition.description}\n              </div>\n            ))}\n            {discount.conditions.length > 2 && (\n              <div className=\"text-sm text-gray-500\">\n                +{discount.conditions.length - 2} more conditions\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      <div className=\"border-t pt-3 mb-4\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-500\">Valid From:</span>\n            <div className=\"font-medium\">{new Date(discount.validFrom).toLocaleDateString()}</div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Valid Until:</span>\n            <div className=\"font-medium\">\n              {discount.validUntil ? new Date(discount.validUntil).toLocaleDateString() : 'No expiry'}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Max Usage:</span>\n            <div className=\"font-medium\">{discount.maxUsage || 'Unlimited'}</div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Used:</span>\n            <div className=\"font-medium\">{discount.usageCount || 0} times</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"text-xs text-gray-500\">\n          Created: {new Date(discount.createdAt).toLocaleDateString()}\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onViewDetails(discount)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"View Details\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onApplyToStudents(discount)}\n            className=\"p-1 text-gray-400 hover:text-green-600\"\n            title=\"Apply to Students\"\n          >\n            <Users className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDuplicate(discount)}\n            className=\"p-1 text-gray-400 hover:text-purple-600\"\n            title=\"Duplicate\"\n          >\n            <Copy className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onEdit(discount)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"Edit\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDelete(discount)}\n            className=\"p-1 text-gray-400 hover:text-red-600\"\n            title=\"Delete\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst DiscountDialog = ({ discount, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    name: discount?.name || '',\n    description: discount?.description || '',\n    category: discount?.category || 'general',\n    discountType: discount?.discountType || 'percentage',\n    value: discount?.value || 0,\n    applicableClasses: discount?.applicableClasses || [],\n    applicableFeeTypes: discount?.applicableFeeTypes || [],\n    validFrom: discount?.validFrom || new Date().toISOString().split('T')[0],\n    validUntil: discount?.validUntil || '',\n    maxUsage: discount?.maxUsage || '',\n    status: discount?.status || 'active',\n    conditions: discount?.conditions || [],\n    autoApply: discount?.autoApply || false,\n    stackable: discount?.stackable || false,\n    priority: discount?.priority || 1\n  });\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => feesApi.getClasses()\n  });\n\n  const { data: feeTypesData } = useQuery({\n    queryKey: ['fee-types', 'all'],\n    queryFn: () => feesApi.getFeeTypes()\n  });\n\n  const handleSave = () => {\n    onSave(discount?.id, formData);\n    onClose();\n  };\n\n  const toggleClass = (classId) => {\n    setFormData(prev => ({\n      ...prev,\n      applicableClasses: prev.applicableClasses.includes(classId)\n        ? prev.applicableClasses.filter(id => id !== classId)\n        : [...prev.applicableClasses, classId]\n    }));\n  };\n\n  const toggleFeeType = (feeTypeId) => {\n    setFormData(prev => ({\n      ...prev,\n      applicableFeeTypes: prev.applicableFeeTypes.includes(feeTypeId)\n        ? prev.applicableFeeTypes.filter(id => id !== feeTypeId)\n        : [...prev.applicableFeeTypes, feeTypeId]\n    }));\n  };\n\n  const addCondition = () => {\n    setFormData(prev => ({\n      ...prev,\n      conditions: [...prev.conditions, { type: 'minimum_amount', value: '', description: '' }]\n    }));\n  };\n\n  const updateCondition = (index, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      conditions: prev.conditions.map((condition, i) => \n        i === index ? { ...condition, [field]: value } : condition\n      )\n    }));\n  };\n\n  const removeCondition = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      conditions: prev.conditions.filter((_, i) => i !== index)\n    }));\n  };\n\n  const discountCategories = [\n    { value: 'general', label: 'General Discount' },\n    { value: 'sibling', label: 'Sibling Discount' },\n    { value: 'merit', label: 'Merit Scholarship' },\n    { value: 'staff', label: 'Staff Discount' },\n    { value: 'scholarship', label: 'Scholarship' },\n    { value: 'financial_aid', label: 'Financial Aid' },\n    { value: 'early_payment', label: 'Early Payment' },\n    { value: 'bulk_payment', label: 'Bulk Payment' }\n  ];\n\n  const conditionTypes = [\n    { value: 'minimum_amount', label: 'Minimum Amount' },\n    { value: 'grade_requirement', label: 'Grade Requirement' },\n    { value: 'attendance_requirement', label: 'Attendance Requirement' },\n    { value: 'sibling_count', label: 'Number of Siblings' },\n    { value: 'payment_date', label: 'Payment Before Date' }\n  ];\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      title={discount ? 'Edit Discount' : 'Create Discount'}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Discount Name *\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"e.g., Sibling Discount 2024\"\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Category *</label>\n            <select\n              value={formData.category}\n              onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              {Array.isArray(discountCategories) && discountCategories.map(category => (\n                <option key={category.value} value={category.value}>\n                  {category.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Description</label>\n          <textarea\n            value={formData.description}\n            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Discount description...\"\n          />\n        </div>\n\n        {/* Discount Configuration */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Discount Configuration</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Discount Type *</label>\n              <select\n                value={formData.discountType}\n                onChange={(e) => setFormData(prev => ({ ...prev, discountType: e.target.value }))}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"percentage\">Percentage</option>\n                <option value=\"fixed\">Fixed Amount</option>\n              </select>\n            </div>\n            <Input\n              label={`Discount Value * ${formData.discountType === 'percentage' ? '(%)' : '(₹)'}`}\n              type=\"number\"\n              value={formData.value}\n              onChange={(e) => setFormData(prev => ({ ...prev, value: parseFloat(e.target.value) || 0 }))}\n              min=\"0\"\n              max={formData.discountType === 'percentage' ? 100 : undefined}\n            />\n            <Input\n              label=\"Priority (1-10)\"\n              type=\"number\"\n              value={formData.priority}\n              onChange={(e) => setFormData(prev => ({ ...prev, priority: parseInt(e.target.value) || 1 }))}\n              min=\"1\"\n              max=\"10\"\n            />\n          </div>\n        </div>\n\n        {/* Validity Period */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Validity Period</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              label=\"Valid From *\"\n              type=\"date\"\n              value={formData.validFrom}\n              onChange={(e) => setFormData(prev => ({ ...prev, validFrom: e.target.value }))}\n            />\n            <Input\n              label=\"Valid Until\"\n              type=\"date\"\n              value={formData.validUntil}\n              onChange={(e) => setFormData(prev => ({ ...prev, validUntil: e.target.value }))}\n            />\n            <Input\n              label=\"Max Usage (Optional)\"\n              type=\"number\"\n              value={formData.maxUsage}\n              onChange={(e) => setFormData(prev => ({ ...prev, maxUsage: parseInt(e.target.value) || '' }))}\n              placeholder=\"Unlimited\"\n            />\n          </div>\n        </div>\n\n        {/* Applicable Classes */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Applicable Classes *</label>\n          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n              <label key={cls.id} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.applicableClasses.includes(cls.id)}\n                  onChange={() => toggleClass(cls.id)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">{cls.name}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Applicable Fee Types */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Applicable Fee Types</label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n            {feeTypesData?.data?.map(feeType => (\n              <label key={feeType.id} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.applicableFeeTypes.includes(feeType.id)}\n                  onChange={() => toggleFeeType(feeType.id)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">{feeType.name}</span>\n              </label>\n            ))}\n          </div>\n          <div className=\"text-xs text-gray-500 mt-1\">\n            Leave empty to apply to all fee types\n          </div>\n        </div>\n\n        {/* Conditions */}\n        <div>\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"font-medium\">Conditions</h3>\n            <button\n              onClick={addCondition}\n              className=\"text-sm text-blue-600 hover:text-blue-700 flex items-center gap-1\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Add Condition\n            </button>\n          </div>\n          <div className=\"space-y-3\">\n            {Array.isArray(formData.conditions) && formData.conditions.map((condition, index) => (\n              <div key={index} className=\"grid grid-cols-1 md:grid-cols-4 gap-2 p-3 border rounded\">\n                <select\n                  value={condition.type}\n                  onChange={(e) => updateCondition(index, 'type', e.target.value)}\n                  className=\"border rounded px-2 py-1 text-sm\"\n                >\n                  {Array.isArray(conditionTypes) && conditionTypes.map(type => (\n                    <option key={type.value} value={type.value}>\n                      {type.label}\n                    </option>\n                  ))}\n                </select>\n                <input\n                  type=\"text\"\n                  value={condition.value}\n                  onChange={(e) => updateCondition(index, 'value', e.target.value)}\n                  placeholder=\"Value\"\n                  className=\"border rounded px-2 py-1 text-sm\"\n                />\n                <input\n                  type=\"text\"\n                  value={condition.description}\n                  onChange={(e) => updateCondition(index, 'description', e.target.value)}\n                  placeholder=\"Description\"\n                  className=\"border rounded px-2 py-1 text-sm\"\n                />\n                <button\n                  onClick={() => removeCondition(index)}\n                  className=\"text-red-600 hover:text-red-700\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Advanced Settings */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Advanced Settings</h3>\n          <div className=\"space-y-3\">\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.autoApply}\n                onChange={(e) => setFormData(prev => ({ ...prev, autoApply: e.target.checked }))}\n                className=\"rounded\"\n              />\n              <span className=\"text-sm\">Auto-apply when conditions are met</span>\n            </label>\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.stackable}\n                onChange={(e) => setFormData(prev => ({ ...prev, stackable: e.target.checked }))}\n                className=\"rounded\"\n              />\n              <span className=\"text-sm\">Can be combined with other discounts</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Status */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Status</label>\n          <select\n            value={formData.status}\n            onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n            className=\"w-full border rounded-lg px-3 py-2 max-w-xs\"\n          >\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n          </select>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!formData.name.trim() || formData.applicableClasses.length === 0}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            {discount ? 'Update' : 'Create'} Discount\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst ApplyDiscountDialog = ({ discount, open, onClose, onApply }) => {\n  const [selectedStudents, setSelectedStudents] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterClass, setFilterClass] = useState('');\n\n  const { data: studentsData, isLoading } = useQuery({\n    queryKey: ['students', 'eligible-for-discount', discount?.id, searchTerm, filterClass],\n    queryFn: () => feesApi.getEligibleStudents(discount?.id, { searchTerm, classId: filterClass }),\n    enabled: !!discount && open\n  });\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => feesApi.getClasses()\n  });\n\n  const handleApply = () => {\n    onApply(discount.id, selectedStudents);\n    onClose();\n    setSelectedStudents([]);\n  };\n\n  const toggleStudent = (studentId) => {\n    setSelectedStudents(prev => \n      prev.includes(studentId) \n        ? prev.filter(id => id !== studentId)\n        : [...prev, studentId]\n    );\n  };\n\n  const toggleAll = () => {\n    const allStudentIds = studentsData?.data?.map(s => s.id) || [];\n    setSelectedStudents(prev => \n      prev.length === allStudentIds.length ? [] : allStudentIds\n    );\n  };\n\n  if (!discount) return null;\n\n  return (\n    <Dialog open={open} onClose={onClose} title={`Apply ${discount.name}`} size=\"xl\">\n      <div className=\"space-y-6\">\n        <div className=\"bg-blue-50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-2\">Discount Details</h3>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-600\">Discount:</span>\n              <span className=\"font-medium ml-2\">\n                {discount.discountType === 'percentage' ? `${discount.value}%` : `₹${discount.value}`}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Category:</span>\n              <span className=\"font-medium ml-2 capitalize\">{discount.category.replace('_', ' ')}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search students...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n            />\n          </div>\n          <select\n            value={filterClass}\n            onChange={(e) => setFilterClass(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"\">All Classes</option>\n            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n              <option key={cls.id} value={cls.id}>\n                {cls.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Student Selection */}\n        <div>\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"font-medium\">Eligible Students</h3>\n            <div className=\"flex items-center gap-4\">\n              <span className=\"text-sm text-gray-600\">\n                {selectedStudents.length} of {studentsData?.data?.length || 0} selected\n              </span>\n              <button\n                onClick={toggleAll}\n                className=\"text-sm text-blue-600 hover:text-blue-700\"\n              >\n                {selectedStudents.length === studentsData?.data?.length ? 'Deselect All' : 'Select All'}\n              </button>\n            </div>\n          </div>\n\n          {isLoading ? (\n            <LoadingSkeleton />\n          ) : (\n            <div className=\"max-h-96 overflow-y-auto border rounded-lg\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-50 sticky top-0\">\n                  <tr>\n                    <th className=\"text-left py-3 px-4 w-12\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedStudents.length === studentsData?.data?.length && studentsData?.data?.length > 0}\n                        onChange={toggleAll}\n                        className=\"rounded\"\n                      />\n                    </th>\n                    <th className=\"text-left py-3 px-4\">Student</th>\n                    <th className=\"text-left py-3 px-4\">Class</th>\n                    <th className=\"text-right py-3 px-4\">Current Due</th>\n                    <th className=\"text-right py-3 px-4\">Discount Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Array.isArray(studentsData?.data) && studentsData.data.map(student => {\n                    const discountAmount = discount.discountType === 'percentage' \n                      ? (student.totalDue * discount.value) / 100\n                      : discount.value;\n                    \n                    return (\n                      <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n                        <td className=\"py-3 px-4\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedStudents.includes(student.id)}\n                            onChange={() => toggleStudent(student.id)}\n                            className=\"rounded\"\n                          />\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"font-medium\">{student.name}</div>\n                          <div className=\"text-sm text-gray-500\">Roll: {student.rollNumber}</div>\n                        </td>\n                        <td className=\"py-3 px-4\">{student.className} - {student.section}</td>\n                        <td className=\"py-3 px-4 text-right\">₹{student.totalDue?.toLocaleString()}</td>\n                        <td className=\"py-3 px-4 text-right text-green-600 font-medium\">\n                          ₹{Math.min(discountAmount, student.totalDue).toLocaleString()}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleApply}\n            disabled={selectedStudents.length === 0}\n            className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <CheckCircle className=\"w-4 h-4\" />\n            Apply to {selectedStudents.length} Students\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst FeesDiscount = () => {\n  const [selectedDiscount, setSelectedDiscount] = useState(null);\n  const [showDiscountDialog, setShowDiscountDialog] = useState(false);\n  const [showApplyDialog, setShowApplyDialog] = useState(false);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n  const [filterCategory, setFilterCategory] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const queryClient = useQueryClient();\n\n  const { data: discountsData, isLoading } = useQuery({\n    queryKey: ['discounts', 'all'],\n    queryFn: () => feesApi.getDiscounts()\n  });\n\n  const saveDiscountMutation = useMutation({\n    mutationFn: ({ id, data }) => id ? feesApi.updateDiscount(id, data) : feesApi.createDiscount(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['discounts']);\n      setShowDiscountDialog(false);\n      setSelectedDiscount(null);\n    }\n  });\n\n  const deleteDiscountMutation = useMutation({\n    mutationFn: feesApi.deleteDiscount,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['discounts']);\n    }\n  });\n\n  const applyDiscountMutation = useMutation({\n    mutationFn: ({ discountId, studentIds }) => feesApi.applyDiscountToStudents(discountId, studentIds),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['discounts']);\n      setShowApplyDialog(false);\n    }\n  });\n\n  const handleEditDiscount = (discount) => {\n    setSelectedDiscount(discount);\n    setShowDiscountDialog(true);\n  };\n\n  const handleDeleteDiscount = (discount) => {\n    if (confirm(`Are you sure you want to delete \"${discount.name}\"?`)) {\n      deleteDiscountMutation.mutate(discount.id);\n    }\n  };\n\n  const handleDuplicateDiscount = (discount) => {\n    const duplicatedDiscount = {\n      ...discount,\n      name: `${discount.name} (Copy)`,\n      id: undefined\n    };\n    setSelectedDiscount(duplicatedDiscount);\n    setShowDiscountDialog(true);\n  };\n\n  const handleViewDetails = (discount) => {\n    setSelectedDiscount(discount);\n    setShowDetailsDialog(true);\n  };\n\n  const handleApplyToStudents = (discount) => {\n    setSelectedDiscount(discount);\n    setShowApplyDialog(true);\n  };\n\n  const handleSaveDiscount = (id, data) => {\n    saveDiscountMutation.mutate({ id, data });\n  };\n\n  const handleApplyDiscount = (discountId, studentIds) => {\n    applyDiscountMutation.mutate({ discountId, studentIds });\n  };\n\n  const handleAddDiscount = () => {\n    setSelectedDiscount(null);\n    setShowDiscountDialog(true);\n  };\n\n  const filteredDiscounts = discountsData?.data?.filter(discount => {\n    const matchesCategory = filterCategory === 'all' || discount.category === filterCategory;\n    const matchesStatus = filterStatus === 'all' || discount.status === filterStatus;\n    const matchesSearch = discount.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         discount.description.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesCategory && matchesStatus && matchesSearch;\n  }) || [];\n\n  const getStatistics = () => {\n    const discounts = discountsData?.data || [];\n    const totalSavings = Array.isArray(discounts) ? discounts.reduce((sum, discount) => {\n      return sum + (discount.totalSavings || 0);\n    }, 0) : 0;\n    \n    return {\n      total: discounts.length,\n      active: discounts.filter(d => d.status === 'active').length,\n      totalSavings,\n      studentsHelped: Array.isArray(discounts) ? discounts.reduce((sum, discount) => sum + (discount.studentsCount || 0), 0) : 0\n    };\n  };\n\n  const stats = getStatistics();\n\n  if (isLoading) return <LoadingSkeleton />;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Fees Discount Management</h1>\n        <button\n          onClick={handleAddDiscount}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Create Discount\n        </button>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Percent className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.total}</p>\n              <p className=\"text-sm text-gray-600\">Total Discounts</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.active}</p>\n              <p className=\"text-sm text-gray-600\">Active Discounts</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <DollarSign className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">₹{stats.totalSavings.toLocaleString()}</p>\n              <p className=\"text-sm text-gray-600\">Total Savings</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Users className=\"w-8 h-8 text-purple-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.studentsHelped}</p>\n              <p className=\"text-sm text-gray-600\">Students Helped</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search discounts...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n            />\n          </div>\n          <select\n            value={filterCategory}\n            onChange={(e) => setFilterCategory(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Categories</option>\n            <option value=\"general\">General</option>\n            <option value=\"sibling\">Sibling</option>\n            <option value=\"merit\">Merit</option>\n            <option value=\"staff\">Staff</option>\n            <option value=\"scholarship\">Scholarship</option>\n            <option value=\"financial_aid\">Financial Aid</option>\n          </select>\n          <select\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Status</option>\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n            <option value=\"expired\">Expired</option>\n          </select>\n          <div className=\"text-sm text-gray-500 flex items-center\">\n            Showing {filteredDiscounts.length} of {discountsData?.data?.length || 0} discounts\n          </div>\n        </div>\n      </div>\n\n      {/* Discounts List */}\n      <div className=\"space-y-4\">\n        {filteredDiscounts.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n            <Percent className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Discounts Found</h3>\n            <p className=\"text-gray-500 mb-4\">\n              {discountsData?.data?.length === 0 \n                ? 'Create your first discount to get started.'\n                : 'No discounts match your current filters.'\n              }\n            </p>\n            {discountsData?.data?.length === 0 && (\n              <button\n                onClick={handleAddDiscount}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n              >\n                Create Discount\n              </button>\n            )}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {Array.isArray(filteredDiscounts) && filteredDiscounts.map(discount => (\n              <DiscountCard\n                key={discount.id}\n                discount={discount}\n                onEdit={handleEditDiscount}\n                onDelete={handleDeleteDiscount}\n                onDuplicate={handleDuplicateDiscount}\n                onViewDetails={handleViewDetails}\n                onApplyToStudents={handleApplyToStudents}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Discount Dialog */}\n      <DiscountDialog\n        discount={selectedDiscount}\n        open={showDiscountDialog}\n        onClose={() => setShowDiscountDialog(false)}\n        onSave={handleSaveDiscount}\n      />\n\n      {/* Apply Discount Dialog */}\n      <ApplyDiscountDialog\n        discount={selectedDiscount}\n        open={showApplyDialog}\n        onClose={() => setShowApplyDialog(false)}\n        onApply={handleApplyDiscount}\n      />\n    </div>\n  );\n};\n\nexport default FeesDiscount;"
        }
    ]
}