{
    "sourceFile": "src/pages/timetable/ClassTimetable.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755994925600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756039695825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n import Input from '../../components/ui/Input'\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n-import Dropdown from '../../components/ui/Dropdown'\n+import { Dropdown } from '../../components/ui/Dropdown'\n import { timetableApi } from '../../lib/api/timetable'\n import { classesApi } from '../../lib/api/classes'\n import { sectionsApi } from '../../lib/api/sections'\n import { subjectsApi } from '../../lib/api/subjects'\n"
                },
                {
                    "date": 1756039870189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import {\n   Save,\n   Download,\n   Upload,\n-  Print,\n+  \n   Copy,\n   AlertTriangle,\n   Clock,\n   Users,\n@@ -13,8 +13,9 @@\n   MapPin,\n   Eye,\n   Edit3,\n   RotateCcw,\n+  Printer,\n } from 'lucide-react'\n import { DndProvider, useDrag, useDrop } from 'react-dnd'\n import { HTML5Backend } from 'react-dnd-html5-backend'\n import Input from '../../components/ui/Input'\n@@ -376,9 +377,9 @@\n               onClick={handlePrint}\n               disabled={!selectedClass || !selectedSection}\n               className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2 disabled:opacity-50\"\n             >\n-              <Print className=\"w-4 h-4\" />\n+              <Printer className=\"w-4 h-4\" />\n               Print\n             </button>\n           </div>\n         </div>\n"
                }
            ],
            "date": 1755994925600,
            "name": "Commit-0",
            "content": "import React, { useState, useCallback } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Save,\n  Download,\n  Upload,\n  Print,\n  Copy,\n  AlertTriangle,\n  Clock,\n  Users,\n  BookOpen,\n  MapPin,\n  Eye,\n  Edit3,\n  RotateCcw,\n} from 'lucide-react'\nimport { DndProvider, useDrag, useDrop } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport Dropdown from '../../components/ui/Dropdown'\nimport { timetableApi } from '../../lib/api/timetable'\nimport { classesApi } from '../../lib/api/classes'\nimport { sectionsApi } from '../../lib/api/sections'\nimport { subjectsApi } from '../../lib/api/subjects'\nimport { staffApi } from '../../lib/api/staff'\n\nconst DAYS = [\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n]\nconst PERIODS = [\n  { id: 1, name: 'Period 1', time: '08:00-08:45' },\n  { id: 2, name: 'Period 2', time: '08:45-09:30' },\n  { id: 3, name: 'Period 3', time: '09:30-10:15' },\n  { id: 4, name: 'Break', time: '10:15-10:30', isBreak: true },\n  { id: 5, name: 'Period 4', time: '10:30-11:15' },\n  { id: 6, name: 'Period 5', time: '11:15-12:00' },\n  { id: 7, name: 'Period 6', time: '12:00-12:45' },\n  { id: 8, name: 'Lunch', time: '12:45-13:30', isBreak: true },\n  { id: 9, name: 'Period 7', time: '13:30-14:15' },\n  { id: 10, name: 'Period 8', time: '14:15-15:00' },\n]\n\nconst DraggableSubject = ({ subject, teacher, room }) => {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'subject',\n    item: { subject, teacher, room },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  })\n\n  return (\n    <div\n      ref={drag}\n      className={`p-2 bg-blue-100 border border-blue-300 rounded cursor-move text-xs ${\n        isDragging ? 'opacity-50' : ''\n      }`}\n    >\n      <div className=\"font-medium text-blue-800\">{subject?.name}</div>\n      <div className=\"text-blue-600\">{teacher?.name}</div>\n      {room && <div className=\"text-blue-500\">{room}</div>}\n    </div>\n  )\n}\n\nconst TimetableCell = ({ day, period, entry, onDrop, conflicts }) => {\n  const [{ isOver }, drop] = useDrop({\n    accept: 'subject',\n    drop: item => onDrop(day, period.id, item),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n    }),\n  })\n\n  const hasConflict = conflicts.some(\n    c => c.day === day && c.periodId === period.id,\n  )\n\n  if (period.isBreak) {\n    return (\n      <td className=\"border border-gray-300 bg-gray-100 text-center text-gray-500 text-sm p-2\">\n        {period.name}\n      </td>\n    )\n  }\n\n  return (\n    <td\n      ref={drop}\n      className={`border border-gray-300 p-1 h-20 relative ${\n        isOver ? 'bg-blue-50' : 'bg-white'\n      } ${hasConflict ? 'bg-red-50 border-red-300' : ''}`}\n    >\n      {entry ? (\n        <div className=\"relative h-full\">\n          <DraggableSubject\n            subject={entry.subject}\n            teacher={entry.teacher}\n            room={entry.room}\n          />\n          {hasConflict && (\n            <AlertTriangle className=\"absolute top-0 right-0 w-4 h-4 text-red-500\" />\n          )}\n        </div>\n      ) : (\n        <div className=\"h-full flex items-center justify-center text-gray-400 text-xs\">\n          Drop here\n        </div>\n      )}\n    </td>\n  )\n}\n\nconst SubjectPool = ({ subjects, teachers, onAssignTeacher }) => {\n  const [selectedSubject, setSelectedSubject] = useState('')\n  const [selectedTeacher, setSelectedTeacher] = useState('')\n  const [room, setRoom] = useState('')\n\n  const handleCreateEntry = () => {\n    if (!selectedSubject || !selectedTeacher) return\n\n    const subject = subjects.find(s => s.id === selectedSubject)\n    const teacher = teachers.find(t => t.id === selectedTeacher)\n\n    onAssignTeacher({ subject, teacher, room })\n\n    setSelectedSubject('')\n    setSelectedTeacher('')\n    setRoom('')\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4\">\n      <h3 className=\"font-medium mb-4\">Subject Pool</h3>\n\n      <div className=\"space-y-3 mb-4\">\n        <select\n          value={selectedSubject}\n          onChange={e => setSelectedSubject(e.target.value)}\n          className=\"w-full border rounded px-3 py-2 text-sm\"\n        >\n          <option value=\"\">Select Subject</option>\n          {Array.isArray(subjects) &&\n            subjects.map(subject => (\n              <option key={subject.id} value={subject.id}>\n                {subject.name} ({subject.code})\n              </option>\n            ))}\n        </select>\n\n        <select\n          value={selectedTeacher}\n          onChange={e => setSelectedTeacher(e.target.value)}\n          className=\"w-full border rounded px-3 py-2 text-sm\"\n        >\n          <option value=\"\">Select Teacher</option>\n          {Array.isArray(teachers) &&\n            teachers.map(teacher => (\n              <option key={teacher.id} value={teacher.id}>\n                {teacher.name}\n              </option>\n            ))}\n        </select>\n\n        <Input\n          placeholder=\"Room (optional)\"\n          value={room}\n          onChange={e => setRoom(e.target.value)}\n          size=\"sm\"\n        />\n\n        <button\n          onClick={handleCreateEntry}\n          disabled={!selectedSubject || !selectedTeacher}\n          className=\"w-full bg-blue-600 text-white py-2 rounded text-sm hover:bg-blue-700 disabled:opacity-50\"\n        >\n          Create Entry\n        </button>\n      </div>\n\n      <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n        {Array.isArray(subjects) &&\n          subjects.map(subject => (\n            <div key={subject.id} className=\"p-2 border rounded text-sm\">\n              <div className=\"font-medium\">{subject.name}</div>\n              <div className=\"text-gray-500 text-xs\">{subject.code}</div>\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nconst ClassTimetable = () => {\n  const [selectedClass, setSelectedClass] = useState('')\n  const [selectedSection, setSelectedSection] = useState('')\n  const [timetableData, setTimetableData] = useState({})\n  const [conflicts, setConflicts] = useState([])\n  const [showPreview, setShowPreview] = useState(false)\n  const [isDraft, setIsDraft] = useState(true)\n  const [hasChanges, setHasChanges] = useState(false)\n  const [showImportDialog, setShowImportDialog] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => classesApi.getAll({ all: true }),\n  })\n\n  const { data: sectionsData } = useQuery({\n    queryKey: ['sections', 'by-class', selectedClass],\n    queryFn: () => sectionsApi.getByClass(selectedClass),\n    enabled: !!selectedClass,\n  })\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'by-class', selectedClass],\n    queryFn: () => subjectsApi.getByClass(selectedClass),\n    enabled: !!selectedClass,\n  })\n\n  const { data: teachersData } = useQuery({\n    queryKey: ['staff', 'teachers'],\n    queryFn: () => staffApi.getTeachers(),\n  })\n\n  const { data: currentTimetable, isLoading } = useQuery({\n    queryKey: ['timetable', 'class', selectedClass, selectedSection],\n    queryFn: () =>\n      timetableApi.getClassTimetable(selectedClass, selectedSection),\n    enabled: !!selectedClass && !!selectedSection,\n  })\n\n  const saveTimetableMutation = useMutation({\n    mutationFn: timetableApi.saveClassTimetable,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['timetable'])\n      setHasChanges(false)\n    },\n  })\n\n  const publishTimetableMutation = useMutation({\n    mutationFn: timetableApi.publishTimetable,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['timetable'])\n      setIsDraft(false)\n      setHasChanges(false)\n    },\n  })\n\n  const checkConflictsMutation = useMutation({\n    mutationFn: timetableApi.checkConflicts,\n    onSuccess: data => {\n      setConflicts(data.conflicts || [])\n    },\n  })\n\n  // Initialize timetable data\n  React.useEffect(() => {\n    if (currentTimetable?.data) {\n      setTimetableData(currentTimetable.data.schedule || {})\n      setIsDraft(currentTimetable.data.status === 'draft')\n      setConflicts(currentTimetable.data.conflicts || [])\n    } else {\n      setTimetableData({})\n      setConflicts([])\n    }\n  }, [currentTimetable])\n\n  const handleDrop = useCallback(\n    (day, periodId, item) => {\n      const key = `${day}-${periodId}`\n      const newTimetableData = {\n        ...timetableData,\n        [key]: item,\n      }\n\n      setTimetableData(newTimetableData)\n      setHasChanges(true)\n\n      // Check for conflicts\n      checkConflictsMutation.mutate({\n        classId: selectedClass,\n        sectionId: selectedSection,\n        schedule: newTimetableData,\n      })\n    },\n    [timetableData, selectedClass, selectedSection, checkConflictsMutation]\n  )\n\n  const handleSave = (publish = false) => {\n    const data = {\n      classId: selectedClass,\n      sectionId: selectedSection,\n      schedule: timetableData,\n      status: publish ? 'published' : 'draft',\n    }\n\n    if (publish) {\n      publishTimetableMutation.mutate(data)\n    } else {\n      saveTimetableMutation.mutate(data)\n    }\n  }\n\n  const handleExport = () => {\n    const csvData = generateCSV()\n    const blob = new Blob([csvData], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `timetable-${selectedClass}-${selectedSection}.csv`\n    a.click()\n  }\n\n  const generateCSV = () => {\n    let csv = 'Day,'\n    csv += `${PERIODS.filter(p => !p.isBreak)\n      .map(p => p.name)\n      .join(',')}\\n`\n\n    DAYS.forEach(day => {\n      csv += `${day},`\n      const row = PERIODS.filter(p => !p.isBreak).map(period => {\n        const entry = timetableData[`${day}-${period.id}`]\n        return entry ? `${entry.subject?.name} (${entry.teacher?.name})` : ''\n      })\n      csv += `${row.join(',')}\\n`\n    })\n\n    return csv\n  }\n\n  const handlePrint = () => {\n    window.print()\n  }\n\n  const getTimetableEntry = (day, periodId) => {\n    return timetableData[`${day}-${periodId}`]\n  }\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold\">Class Timetable</h1>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setShowImportDialog(true)}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n            >\n              <Upload className=\"w-4 h-4\" />\n              Import\n            </button>\n            <button\n              onClick={handleExport}\n              disabled={!selectedClass || !selectedSection}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2 disabled:opacity-50\"\n            >\n              <Download className=\"w-4 h-4\" />\n              Export\n            </button>\n            <button\n              onClick={handlePrint}\n              disabled={!selectedClass || !selectedSection}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2 disabled:opacity-50\"\n            >\n              <Print className=\"w-4 h-4\" />\n              Print\n            </button>\n          </div>\n        </div>\n\n        {/* Class and Section Selection */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Class</label>\n              <select\n                value={selectedClass}\n                onChange={e => {\n                  setSelectedClass(e.target.value)\n                  setSelectedSection('')\n                }}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"\">Select Class</option>\n                {Array.isArray(classesData?.data) &&\n                  classesData.data.map(cls => (\n                    <option key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </option>\n                  ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Section</label>\n              <select\n                value={selectedSection}\n                onChange={e => setSelectedSection(e.target.value)}\n                disabled={!selectedClass}\n                className=\"w-full border rounded-lg px-3 py-2 disabled:bg-gray-100\"\n              >\n                <option value=\"\">Select Section</option>\n                {Array.isArray(sectionsData?.data) &&\n                  sectionsData.data.map(section => (\n                    <option key={section.id} value={section.id}>\n                      {section.name}\n                    </option>\n                  ))}\n              </select>\n            </div>\n            <div className=\"flex items-end gap-2\">\n              {hasChanges && (\n                <button\n                  onClick={() => handleSave(false)}\n                  disabled={saveTimetableMutation.isPending}\n                  className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n                >\n                  <Save className=\"w-4 h-4\" />\n                  Save Draft\n                </button>\n              )}\n              {isDraft && selectedClass && selectedSection && (\n                <button\n                  onClick={() => handleSave(true)}\n                  disabled={\n                    publishTimetableMutation.isPending || conflicts.length > 0\n                  }\n                  className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center gap-2\"\n                >\n                  <Eye className=\"w-4 h-4\" />\n                  Publish\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Status and Conflicts */}\n        {selectedClass && selectedSection && (\n          <div className=\"flex gap-4\">\n            <div\n              className={`px-4 py-2 rounded-lg text-sm ${\n                isDraft\n                  ? 'bg-yellow-100 text-yellow-800'\n                  : 'bg-green-100 text-green-800'\n              }`}\n            >\n              Status: {isDraft ? 'Draft' : 'Published'}\n            </div>\n            {conflicts.length > 0 && (\n              <div className=\"px-4 py-2 rounded-lg text-sm bg-red-100 text-red-800 flex items-center gap-2\">\n                <AlertTriangle className=\"w-4 h-4\" />\n                {conflicts.length} Conflicts\n              </div>\n            )}\n          </div>\n        )}\n\n        {selectedClass && selectedSection && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            {/* Subject Pool */}\n            <div className=\"lg:col-span-1\">\n              <SubjectPool\n                subjects={subjectsData?.data}\n                teachers={teachersData?.data}\n                onAssignTeacher={entry => {\n                  // This could be used for quick assignment\n                  console.log('Quick assign:', entry)\n                }}\n              />\n            </div>\n\n            {/* Timetable Grid */}\n            <div className=\"lg:col-span-3\">\n              <div className=\"bg-white rounded-lg shadow overflow-x-auto\">\n                <table className=\"w-full border-collapse\">\n                  <thead>\n                    <tr>\n                      <th className=\"border border-gray-300 bg-gray-50 p-3 text-left font-medium\">\n                        Day / Period\n                      </th>\n                      {Array.isArray(PERIODS) &&\n                        PERIODS.map(period => (\n                          <th\n                            key={period.id}\n                            className={`border border-gray-300 p-2 text-center text-sm font-medium ${\n                              period.isBreak ? 'bg-gray-100' : 'bg-gray-50'\n                            }`}\n                          >\n                            <div>{period.name}</div>\n                            <div className=\"text-xs text-gray-500\">\n                              {period.time}\n                            </div>\n                          </th>\n                        ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Array.isArray(DAYS) &&\n                      DAYS.map(day => (\n                        <tr key={day}>\n                          <td className=\"border border-gray-300 bg-gray-50 p-3 font-medium\">\n                            {day}\n                          </td>\n                          {Array.isArray(PERIODS) &&\n                            PERIODS.map(period => (\n                              <TimetableCell\n                                key={`${day}-${period.id}`}\n                                day={day}\n                                period={period}\n                                entry={getTimetableEntry(day, period.id)}\n                                onDrop={handleDrop}\n                                conflicts={conflicts}\n                              />\n                            ))}\n                        </tr>\n                      ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Conflicts List */}\n        {conflicts.length > 0 && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <h3 className=\"font-medium text-red-800 mb-2 flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5\" />\n              Timetable Conflicts\n            </h3>\n            <div className=\"space-y-2\">\n              {Array.isArray(conflicts) &&\n                conflicts.map((conflict, index) => (\n                  <div key={index} className=\"text-red-700 text-sm\">\n                    • {conflict.message}\n                  </div>\n                ))}\n            </div>\n          </div>\n        )}\n\n        {/* Import Dialog */}\n        <Dialog\n          open={showImportDialog}\n          onClose={() => setShowImportDialog(false)}\n          title=\"Import Timetable\"\n        >\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Upload CSV File\n              </label>\n              <input\n                type=\"file\"\n                accept=\".csv\"\n                className=\"w-full border rounded-lg px-3 py-2\"\n              />\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              <p>CSV format should include:</p>\n              <ul className=\"list-disc list-inside mt-1\">\n                <li>First row: Day, Period 1, Period 2, ...</li>\n                <li>Each row: Day name, Subject (Teacher), ...</li>\n              </ul>\n            </div>\n            <div className=\"flex gap-2 pt-4\">\n              <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\">\n                Import\n              </button>\n              <button\n                onClick={() => setShowImportDialog(false)}\n                className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </Dialog>\n      </div>\n    </DndProvider>\n  )\n}\n\nexport default ClassTimetable\n"
        }
    ]
}