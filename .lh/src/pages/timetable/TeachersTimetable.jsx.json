{
    "sourceFile": "src/pages/timetable/TeachersTimetable.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1755986163481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755986778955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState, useCallback } from 'react';\n-import { useState } from 'react'\n import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n import { \n   Save, \n   Download, \n"
                },
                {
                    "date": 1755988587613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,10 @@\n const TeacherWorkloadSummary = ({ teacherId, timetableData }) => {\n   const getWorkloadStats = () => {\n     const entries = Object.values(timetableData).filter(entry => entry);\n     const totalPeriods = entries.length;\n-    const uniqueClasses = new Set(Array.isArray(entries) ? entries.map(e => e.classData?.id)).size;\n-    const uniqueSubjects = new Set(Array.isArray(entries) ? entries.map(e => e.subject?.id)).size;\n+    const uniqueClasses = new Set(Array.isArray(entries) ? entries.map(e => e.classData?.id) : []).size;\n+    const uniqueSubjects = new Set(Array.isArray(entries) ? entries.map(e => e.subject?.id) : []).size;\n     \n     const dailyLoad = DAYS.map(day => {\n       const dayEntries = Object.entries(timetableData)\n         .filter(([key, entry]) => key.startsWith(day) && entry)\n"
                },
                {
                    "date": 1755994925717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,43 @@\n-import React, { useState, useCallback } from 'react';\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n-import { \n-  Save, \n-  Download, \n-  Upload, \n-  Print, \n+import React, { useState, useCallback } from 'react'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n+  Save,\n+  Download,\n+  Upload,\n+  Print,\n   Search,\n   Filter,\n-  AlertTriangle, \n+  AlertTriangle,\n   Clock,\n   Users,\n   BookOpen,\n   MapPin,\n   Eye,\n   Calendar,\n-  User\n-} from 'lucide-react';\n-import { DndProvider, useDrag, useDrop } from 'react-dnd';\n-import { HTML5Backend } from 'react-dnd-html5-backend';\n-import Input from '../../components/ui/Input';\n-import Dialog from '../../components/ui/Dialog';\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n-import ErrorState from '../../components/ui/ErrorState';\n-import Dropdown from '../../components/ui/Dropdown';\n-import Table from '../../components/ui/Table';\n-import { timetableApi } from '../../lib/api/timetable';\n-import { staffApi } from '../../lib/api/staff';\n-import { classesApi } from '../../lib/api/classes';\n-import { subjectsApi } from '../../lib/api/subjects';\n+  User,\n+} from 'lucide-react'\n+import { DndProvider, useDrag, useDrop } from 'react-dnd'\n+import { HTML5Backend } from 'react-dnd-html5-backend'\n+import Input from '../../components/ui/Input'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import ErrorState from '../../components/ui/ErrorState'\n+import Dropdown from '../../components/ui/Dropdown'\n+import Table from '../../components/ui/Table'\n+import { timetableApi } from '../../lib/api/timetable'\n+import { staffApi } from '../../lib/api/staff'\n+import { classesApi } from '../../lib/api/classes'\n+import { subjectsApi } from '../../lib/api/subjects'\n \n-const DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n+const DAYS = [\n+  'Monday',\n+  'Tuesday',\n+  'Wednesday',\n+  'Thursday',\n+  'Friday',\n+  'Saturday',\n+]\n const PERIODS = [\n   { id: 1, name: 'Period 1', time: '08:00-08:45' },\n   { id: 2, name: 'Period 2', time: '08:45-09:30' },\n   { id: 3, name: 'Period 3', time: '09:30-10:15' },\n@@ -39,19 +46,19 @@\n   { id: 6, name: 'Period 5', time: '11:15-12:00' },\n   { id: 7, name: 'Period 6', time: '12:00-12:45' },\n   { id: 8, name: 'Lunch', time: '12:45-13:30', isBreak: true },\n   { id: 9, name: 'Period 7', time: '13:30-14:15' },\n-  { id: 10, name: 'Period 8', time: '14:15-15:00' }\n-];\n+  { id: 10, name: 'Period 8', time: '14:15-15:00' },\n+]\n \n const DraggableClass = ({ classData, subject, room }) => {\n   const [{ isDragging }, drag] = useDrag({\n     type: 'class',\n     item: { classData, subject, room },\n-    collect: (monitor) => ({\n+    collect: monitor => ({\n       isDragging: monitor.isDragging(),\n     }),\n-  });\n+  })\n \n   return (\n     <div\n       ref={drag}\n@@ -62,30 +69,37 @@\n       <div className=\"font-medium text-green-800\">{classData?.name}</div>\n       <div className=\"text-green-600\">{subject?.name}</div>\n       {room && <div className=\"text-green-500\">{room}</div>}\n     </div>\n-  );\n-};\n+  )\n+}\n \n-const TeacherTimetableCell = ({ day, period, entry, onDrop, conflicts, teacherId }) => {\n+const TeacherTimetableCell = ({\n+  day,\n+  period,\n+  entry,\n+  onDrop,\n+  conflicts,\n+  teacherId,\n+}) => {\n   const [{ isOver }, drop] = useDrop({\n     accept: 'class',\n-    drop: (item) => onDrop(day, period.id, item),\n-    collect: (monitor) => ({\n+    drop: item => onDrop(day, period.id, item),\n+    collect: monitor => ({\n       isOver: monitor.isOver(),\n     }),\n-  });\n+  })\n \n-  const hasConflict = conflicts.some(c => \n-    c.day === day && c.periodId === period.id && c.teacherId === teacherId\n-  );\n+  const hasConflict = conflicts.some(\n+    c => c.day === day && c.periodId === period.id && c.teacherId === teacherId,\n+  )\n \n   if (period.isBreak) {\n     return (\n       <td className=\"border border-gray-300 bg-gray-100 text-center text-gray-500 text-sm p-2\">\n         {period.name}\n       </td>\n-    );\n+    )\n   }\n \n   return (\n     <td\n@@ -110,353 +124,379 @@\n           Drop here\n         </div>\n       )}\n     </td>\n-  );\n-};\n+  )\n+}\n \n const TeacherWorkloadSummary = ({ teacherId, timetableData }) => {\n   const getWorkloadStats = () => {\n-    const entries = Object.values(timetableData).filter(entry => entry);\n-    const totalPeriods = entries.length;\n-    const uniqueClasses = new Set(Array.isArray(entries) ? entries.map(e => e.classData?.id) : []).size;\n-    const uniqueSubjects = new Set(Array.isArray(entries) ? entries.map(e => e.subject?.id) : []).size;\n-    \n+    const entries = Object.values(timetableData).filter(entry => entry)\n+    const totalPeriods = entries.length\n+    const uniqueClasses = new Set(\n+      Array.isArray(entries) ? entries.map(e => e.classData?.id) : []\n+    ).size\n+    const uniqueSubjects = new Set(\n+      Array.isArray(entries) ? entries.map(e => e.subject?.id) : []\n+    ).size\n+\n     const dailyLoad = DAYS.map(day => {\n-      const dayEntries = Object.entries(timetableData)\n-        .filter(([key, entry]) => key.startsWith(day) && entry)\n-        .length;\n-      return { day, periods: dayEntries };\n-    });\n+      const dayEntries = Object.entries(timetableData).filter(\n+        ([key, entry]) => key.startsWith(day) && entry\n+      ).length\n+      return { day, periods: dayEntries }\n+    })\n \n-    return { totalPeriods, uniqueClasses, uniqueSubjects, dailyLoad };\n-  };\n+    return { totalPeriods, uniqueClasses, uniqueSubjects, dailyLoad }\n+  }\n \n-  const stats = getWorkloadStats();\n+  const stats = getWorkloadStats()\n \n   return (\n     <div className=\"bg-white rounded-lg shadow p-4\">\n       <h3 className=\"font-medium mb-4\">Workload Summary</h3>\n-      \n+\n       <div className=\"grid grid-cols-2 gap-4 mb-4\">\n         <div className=\"text-center p-3 bg-blue-50 rounded\">\n-          <div className=\"text-2xl font-bold text-blue-600\">{stats.totalPeriods}</div>\n+          <div className=\"text-2xl font-bold text-blue-600\">\n+            {stats.totalPeriods}\n+          </div>\n           <div className=\"text-sm text-blue-800\">Total Periods</div>\n         </div>\n         <div className=\"text-center p-3 bg-green-50 rounded\">\n-          <div className=\"text-2xl font-bold text-green-600\">{stats.uniqueClasses}</div>\n+          <div className=\"text-2xl font-bold text-green-600\">\n+            {stats.uniqueClasses}\n+          </div>\n           <div className=\"text-sm text-green-800\">Classes</div>\n         </div>\n         <div className=\"text-center p-3 bg-purple-50 rounded\">\n-          <div className=\"text-2xl font-bold text-purple-600\">{stats.uniqueSubjects}</div>\n+          <div className=\"text-2xl font-bold text-purple-600\">\n+            {stats.uniqueSubjects}\n+          </div>\n           <div className=\"text-sm text-purple-800\">Subjects</div>\n         </div>\n         <div className=\"text-center p-3 bg-orange-50 rounded\">\n           <div className=\"text-2xl font-bold text-orange-600\">\n-            {Math.round(stats.totalPeriods / 6 * 10) / 10}\n+            {Math.round((stats.totalPeriods / 6) * 10) / 10}\n           </div>\n           <div className=\"text-sm text-orange-800\">Avg/Day</div>\n         </div>\n       </div>\n \n       <div className=\"space-y-2\">\n         <h4 className=\"text-sm font-medium\">Daily Distribution</h4>\n-        {Array.isArray(stats.dailyLoad) && stats.dailyLoad.map(({ day, periods }) => (\n-          <div key={day} className=\"flex justify-between text-sm\">\n-            <span>{day.slice(0, 3)}</span>\n-            <span className=\"font-medium\">{periods} periods</span>\n-          </div>\n-        ))}\n+        {Array.isArray(stats.dailyLoad) &&\n+          stats.dailyLoad.map(({ day, periods }) => (\n+            <div key={day} className=\"flex justify-between text-sm\">\n+              <span>{day.slice(0, 3)}</span>\n+              <span className=\"font-medium\">{periods} periods</span>\n+            </div>\n+          ))}\n       </div>\n     </div>\n-  );\n-};\n+  )\n+}\n \n const ClassPool = ({ classes, subjects, onAssignClass }) => {\n-  const [selectedClass, setSelectedClass] = useState('');\n-  const [selectedSubject, setSelectedSubject] = useState('');\n-  const [room, setRoom] = useState('');\n+  const [selectedClass, setSelectedClass] = useState('')\n+  const [selectedSubject, setSelectedSubject] = useState('')\n+  const [room, setRoom] = useState('')\n \n   const handleCreateEntry = () => {\n-    if (!selectedClass || !selectedSubject) return;\n-    \n-    const classData = classes.find(c => c.id === selectedClass);\n-    const subject = subjects.find(s => s.id === selectedSubject);\n-    \n-    onAssignClass({ classData, subject, room });\n-    \n-    setSelectedClass('');\n-    setSelectedSubject('');\n-    setRoom('');\n-  };\n+    if (!selectedClass || !selectedSubject) return\n \n+    const classData = classes.find(c => c.id === selectedClass)\n+    const subject = subjects.find(s => s.id === selectedSubject)\n+\n+    onAssignClass({ classData, subject, room })\n+\n+    setSelectedClass('')\n+    setSelectedSubject('')\n+    setRoom('')\n+  }\n+\n   return (\n     <div className=\"bg-white rounded-lg shadow p-4\">\n       <h3 className=\"font-medium mb-4\">Class Pool</h3>\n-      \n+\n       <div className=\"space-y-3 mb-4\">\n         <select\n           value={selectedClass}\n-          onChange={(e) => setSelectedClass(e.target.value)}\n+          onChange={e => setSelectedClass(e.target.value)}\n           className=\"w-full border rounded px-3 py-2 text-sm\"\n         >\n           <option value=\"\">Select Class</option>\n-          {Array.isArray(classes) && classes.map(cls => (\n-            <option key={cls.id} value={cls.id}>\n-              {cls.name}\n-            </option>\n-          ))}\n+          {Array.isArray(classes) &&\n+            classes.map(cls => (\n+              <option key={cls.id} value={cls.id}>\n+                {cls.name}\n+              </option>\n+            ))}\n         </select>\n-        \n+\n         <select\n           value={selectedSubject}\n-          onChange={(e) => setSelectedSubject(e.target.value)}\n+          onChange={e => setSelectedSubject(e.target.value)}\n           className=\"w-full border rounded px-3 py-2 text-sm\"\n         >\n           <option value=\"\">Select Subject</option>\n-          {Array.isArray(subjects) && subjects.map(subject => (\n-            <option key={subject.id} value={subject.id}>\n-              {subject.name}\n-            </option>\n-          ))}\n+          {Array.isArray(subjects) &&\n+            subjects.map(subject => (\n+              <option key={subject.id} value={subject.id}>\n+                {subject.name}\n+              </option>\n+            ))}\n         </select>\n-        \n+\n         <Input\n           placeholder=\"Room (optional)\"\n           value={room}\n-          onChange={(e) => setRoom(e.target.value)}\n+          onChange={e => setRoom(e.target.value)}\n           size=\"sm\"\n         />\n-        \n+\n         <button\n           onClick={handleCreateEntry}\n           disabled={!selectedClass || !selectedSubject}\n           className=\"w-full bg-green-600 text-white py-2 rounded text-sm hover:bg-green-700 disabled:opacity-50\"\n         >\n           Create Entry\n         </button>\n       </div>\n-      \n+\n       <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n-        {Array.isArray(classes) && classes.map(cls => (\n-          <div key={cls.id} className=\"p-2 border rounded text-sm\">\n-            <div className=\"font-medium\">{cls.name}</div>\n-            <div className=\"text-gray-500 text-xs\">\n-              {cls.sections?.length || 0} sections\n+        {Array.isArray(classes) &&\n+          classes.map(cls => (\n+            <div key={cls.id} className=\"p-2 border rounded text-sm\">\n+              <div className=\"font-medium\">{cls.name}</div>\n+              <div className=\"text-gray-500 text-xs\">\n+                {cls.sections?.length || 0} sections\n+              </div>\n             </div>\n-          </div>\n-        ))}\n+          ))}\n       </div>\n     </div>\n-  );\n-};\n+  )\n+}\n \n const TeachersTimetable = () => {\n-  const [viewMode, setViewMode] = useState('individual'); // 'individual' or 'overview'\n-  const [selectedTeacher, setSelectedTeacher] = useState('');\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [timetableData, setTimetableData] = useState({});\n-  const [conflicts, setConflicts] = useState([]);\n-  const [hasChanges, setHasChanges] = useState(false);\n-  const [showImportDialog, setShowImportDialog] = useState(false);\n+  const [viewMode, setViewMode] = useState('individual') // 'individual' or 'overview'\n+  const [selectedTeacher, setSelectedTeacher] = useState('')\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [timetableData, setTimetableData] = useState({})\n+  const [conflicts, setConflicts] = useState([])\n+  const [hasChanges, setHasChanges] = useState(false)\n+  const [showImportDialog, setShowImportDialog] = useState(false)\n \n-  const queryClient = useQueryClient();\n+  const queryClient = useQueryClient()\n \n   const { data: teachersData } = useQuery({\n     queryKey: ['staff', 'teachers'],\n-    queryFn: () => staffApi.getTeachers()\n-  });\n+    queryFn: () => staffApi.getTeachers(),\n+  })\n \n   const { data: classesData } = useQuery({\n     queryKey: ['classes', 'all'],\n-    queryFn: () => classesApi.getAll({ all: true })\n-  });\n+    queryFn: () => classesApi.getAll({ all: true }),\n+  })\n \n   const { data: subjectsData } = useQuery({\n     queryKey: ['subjects', 'all'],\n-    queryFn: () => subjectsApi.getAll({ all: true })\n-  });\n+    queryFn: () => subjectsApi.getAll({ all: true }),\n+  })\n \n   const { data: currentTimetable, isLoading } = useQuery({\n     queryKey: ['timetable', 'teacher', selectedTeacher],\n     queryFn: () => timetableApi.getTeacherTimetable(selectedTeacher),\n-    enabled: !!selectedTeacher\n-  });\n+    enabled: !!selectedTeacher,\n+  })\n \n   const { data: allTimetables } = useQuery({\n     queryKey: ['timetable', 'teachers', 'overview'],\n     queryFn: () => timetableApi.getAllTeacherTimetables(),\n-    enabled: viewMode === 'overview'\n-  });\n+    enabled: viewMode === 'overview',\n+  })\n \n   const saveTimetableMutation = useMutation({\n     mutationFn: timetableApi.saveTeacherTimetable,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['timetable']);\n-      setHasChanges(false);\n-    }\n-  });\n+      queryClient.invalidateQueries(['timetable'])\n+      setHasChanges(false)\n+    },\n+  })\n \n   const checkConflictsMutation = useMutation({\n     mutationFn: timetableApi.checkTeacherConflicts,\n-    onSuccess: (data) => {\n-      setConflicts(data.conflicts || []);\n-    }\n-  });\n+    onSuccess: data => {\n+      setConflicts(data.conflicts || [])\n+    },\n+  })\n \n   // Initialize timetable data\n   React.useEffect(() => {\n     if (currentTimetable?.data) {\n-      setTimetableData(currentTimetable.data.schedule || {});\n-      setConflicts(currentTimetable.data.conflicts || []);\n+      setTimetableData(currentTimetable.data.schedule || {})\n+      setConflicts(currentTimetable.data.conflicts || [])\n     } else {\n-      setTimetableData({});\n-      setConflicts([]);\n+      setTimetableData({})\n+      setConflicts([])\n     }\n-  }, [currentTimetable]);\n+  }, [currentTimetable])\n \n-  const handleDrop = useCallback((day, periodId, item) => {\n-    const key = `${day}-${periodId}`;\n-    const newTimetableData = {\n-      ...timetableData,\n-      [key]: item\n-    };\n-    \n-    setTimetableData(newTimetableData);\n-    setHasChanges(true);\n-    \n-    // Check for conflicts\n-    checkConflictsMutation.mutate({\n-      teacherId: selectedTeacher,\n-      schedule: newTimetableData\n-    });\n-  }, [timetableData, selectedTeacher, checkConflictsMutation]);\n+  const handleDrop = useCallback(\n+    (day, periodId, item) => {\n+      const key = `${day}-${periodId}`\n+      const newTimetableData = {\n+        ...timetableData,\n+        [key]: item,\n+      }\n \n+      setTimetableData(newTimetableData)\n+      setHasChanges(true)\n+\n+      // Check for conflicts\n+      checkConflictsMutation.mutate({\n+        teacherId: selectedTeacher,\n+        schedule: newTimetableData,\n+      })\n+    },\n+    [timetableData, selectedTeacher, checkConflictsMutation]\n+  )\n+\n   const handleSave = () => {\n     saveTimetableMutation.mutate({\n       teacherId: selectedTeacher,\n-      schedule: timetableData\n-    });\n-  };\n+      schedule: timetableData,\n+    })\n+  }\n \n   const handleExport = () => {\n     if (viewMode === 'individual') {\n-      exportIndividualTimetable();\n+      exportIndividualTimetable()\n     } else {\n-      exportAllTimetables();\n+      exportAllTimetables()\n     }\n-  };\n+  }\n \n   const exportIndividualTimetable = () => {\n-    const teacher = teachersData?.data?.find(t => t.id === selectedTeacher);\n-    const csvData = generateTeacherCSV(teacher, timetableData);\n-    downloadCSV(csvData, `teacher-timetable-${teacher?.name}.csv`);\n-  };\n+    const teacher = teachersData?.data?.find(t => t.id === selectedTeacher)\n+    const csvData = generateTeacherCSV(teacher, timetableData)\n+    downloadCSV(csvData, `teacher-timetable-${teacher?.name}.csv`)\n+  }\n \n   const exportAllTimetables = () => {\n-    const csvData = generateAllTeachersCSV();\n-    downloadCSV(csvData, 'all-teachers-timetable.csv');\n-  };\n+    const csvData = generateAllTeachersCSV()\n+    downloadCSV(csvData, 'all-teachers-timetable.csv')\n+  }\n \n   const generateTeacherCSV = (teacher, schedule) => {\n-    let csv = `Teacher: ${teacher?.name}\\n`;\n-    csv += 'Day,';\n-    csv += PERIODS.filter(p => !p.isBreak).map(p => p.name).join(',') + '\\n';\n-    \n+    let csv = `Teacher: ${teacher?.name}\\n`\n+    csv += 'Day,'\n+    csv += `${PERIODS.filter(p => !p.isBreak)\n+      .map(p => p.name)\n+      .join(',')}\\n`\n+\n     DAYS.forEach(day => {\n-      csv += day + ',';\n+      csv += `${day},`\n       const row = PERIODS.filter(p => !p.isBreak).map(period => {\n-        const entry = schedule[`${day}-${period.id}`];\n-        return entry ? `${entry.classData?.name} - ${entry.subject?.name}` : '';\n-      });\n-      csv += row.join(',') + '\\n';\n-    });\n-    \n-    return csv;\n-  };\n+        const entry = schedule[`${day}-${period.id}`]\n+        return entry ? `${entry.classData?.name} - ${entry.subject?.name}` : ''\n+      })\n+      csv += `${row.join(',')}\\n`\n+    })\n \n+    return csv\n+  }\n+\n   const generateAllTeachersCSV = () => {\n-    let csv = 'Teacher,Day,Period,Class,Subject,Room\\n';\n-    \n+    let csv = 'Teacher,Day,Period,Class,Subject,Room\\n'\n+\n     allTimetables?.data?.forEach(teacherData => {\n-      const schedule = teacherData.schedule || {};\n+      const schedule = teacherData.schedule || {}\n       Object.entries(schedule).forEach(([key, entry]) => {\n-        const [day, periodId] = key.split('-');\n-        const period = PERIODS.find(p => p.id === parseInt(periodId));\n+        const [day, periodId] = key.split('-')\n+        const period = PERIODS.find(p => p.id === parseInt(periodId))\n         if (entry && !period?.isBreak) {\n-          csv += `${teacherData.teacher.name},${day},${period.name},${entry.classData?.name || ''},${entry.subject?.name || ''},${entry.room || ''}\\n`;\n+          csv += `${teacherData.teacher.name},${day},${period.name},${entry.classData?.name || ''},${entry.subject?.name || ''},${entry.room || ''}\\n`\n         }\n-      });\n-    });\n-    \n-    return csv;\n-  };\n+      })\n+    })\n \n+    return csv\n+  }\n+\n   const downloadCSV = (csvData, filename) => {\n-    const blob = new Blob([csvData], { type: 'text/csv' });\n-    const url = window.URL.createObjectURL(blob);\n-    const a = document.createElement('a');\n-    a.href = url;\n-    a.download = filename;\n-    a.click();\n-  };\n+    const blob = new Blob([csvData], { type: 'text/csv' })\n+    const url = window.URL.createObjectURL(blob)\n+    const a = document.createElement('a')\n+    a.href = url\n+    a.download = filename\n+    a.click()\n+  }\n \n   const getTimetableEntry = (day, periodId) => {\n-    return timetableData[`${day}-${periodId}`];\n-  };\n+    return timetableData[`${day}-${periodId}`]\n+  }\n \n-  const filteredTeachers = teachersData?.data?.filter(teacher =>\n-    teacher.name.toLowerCase().includes(searchTerm.toLowerCase())\n-  ) || [];\n+  const filteredTeachers =\n+    teachersData?.data?.filter(teacher =>\n+      teacher.name.toLowerCase().includes(searchTerm.toLowerCase()),\n+    ) || []\n \n   const renderOverviewTable = () => {\n     const columns = [\n       { key: 'name', header: 'Teacher Name', sortable: true },\n       { key: 'department', header: 'Department' },\n       {\n         key: 'totalPeriods',\n         header: 'Total Periods',\n-        render: (teacher) => {\n-          const schedule = allTimetables?.data?.find(t => t.teacherId === teacher.id)?.schedule || {};\n-          return Object.values(schedule).filter(entry => entry).length;\n-        }\n+        render: teacher => {\n+          const schedule =\n+            allTimetables?.data?.find(t => t.teacherId === teacher.id)\n+              ?.schedule || {}\n+          return Object.values(schedule).filter(entry => entry).length\n+        },\n       },\n       {\n         key: 'classes',\n         header: 'Classes',\n-        render: (teacher) => {\n-          const schedule = allTimetables?.data?.find(t => t.teacherId === teacher.id)?.schedule || {};\n+        render: teacher => {\n+          const schedule =\n+            allTimetables?.data?.find(t => t.teacherId === teacher.id)\n+              ?.schedule || {}\n           const uniqueClasses = new Set(\n             Object.values(schedule)\n               .filter(entry => entry)\n-              .map(entry => entry.classData?.name)\n-          );\n-          return uniqueClasses.size;\n-        }\n+              .map(entry => entry.classData?.name),\n+          )\n+          return uniqueClasses.size\n+        },\n       },\n       {\n         key: 'conflicts',\n         header: 'Conflicts',\n-        render: (teacher) => {\n-          const teacherConflicts = conflicts.filter(c => c.teacherId === teacher.id);\n+        render: teacher => {\n+          const teacherConflicts = conflicts.filter(\n+            c => c.teacherId === teacher.id\n+          )\n           return teacherConflicts.length > 0 ? (\n             <span className=\"px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full\">\n               {teacherConflicts.length}\n             </span>\n           ) : (\n             <span className=\"text-green-600\">None</span>\n-          );\n-        }\n+          )\n+        },\n       },\n       {\n         key: 'actions',\n         header: 'Actions',\n-        render: (teacher) => (\n+        render: teacher => (\n           <div className=\"flex gap-2\">\n             <button\n               onClick={() => {\n-                setSelectedTeacher(teacher.id);\n-                setViewMode('individual');\n+                setSelectedTeacher(teacher.id)\n+                setViewMode('individual')\n               }}\n               className=\"text-blue-600 hover:text-blue-800 text-sm\"\n             >\n               Edit\n@@ -467,11 +507,11 @@\n             >\n               View\n             </button>\n           </div>\n-        )\n-      }\n-    ];\n+        ),\n+      },\n+    ]\n \n     return (\n       <div className=\"bg-white rounded-lg shadow\">\n         <div className=\"p-6 border-b\">\n@@ -480,47 +520,48 @@\n             <div className=\"flex gap-4 items-center\">\n               <Input\n                 placeholder=\"Search teachers...\"\n                 value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n+                onChange={e => setSearchTerm(e.target.value)}\n                 icon={Search}\n                 size=\"sm\"\n               />\n             </div>\n           </div>\n         </div>\n-        <Table\n-          data={filteredTeachers}\n-          columns={columns}\n-        />\n+        <Table data={filteredTeachers} columns={columns} />\n       </div>\n-    );\n-  };\n+    )\n+  }\n \n   const renderIndividualTimetable = () => {\n     if (!selectedTeacher) {\n       return (\n         <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n           <User className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n-          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Teacher</h3>\n-          <p className=\"text-gray-500\">Choose a teacher to view and edit their timetable</p>\n+          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n+            Select a Teacher\n+          </h3>\n+          <p className=\"text-gray-500\">\n+            Choose a teacher to view and edit their timetable\n+          </p>\n         </div>\n-      );\n+      )\n     }\n \n-    if (isLoading) return <LoadingSkeleton />;\n+    if (isLoading) return <LoadingSkeleton />\n \n-    const teacher = teachersData?.data?.find(t => t.id === selectedTeacher);\n+    const teacher = teachersData?.data?.find(t => t.id === selectedTeacher)\n \n     return (\n       <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n         {/* Class Pool and Workload */}\n         <div className=\"lg:col-span-1 space-y-6\">\n           <ClassPool\n             classes={classesData?.data}\n             subjects={subjectsData?.data}\n-            onAssignClass={(entry) => {\n-              console.log('Quick assign:', entry);\n+            onAssignClass={entry => {\n+              console.log('Quick assign:', entry)\n             }}\n           />\n           <TeacherWorkloadSummary\n             teacherId={selectedTeacher}\n@@ -547,56 +588,61 @@\n                   </button>\n                 )}\n               </div>\n             </div>\n-            \n+\n             <div className=\"overflow-x-auto\">\n               <table className=\"w-full border-collapse\">\n                 <thead>\n                   <tr>\n                     <th className=\"border border-gray-300 bg-gray-50 p-3 text-left font-medium\">\n                       Day / Period\n                     </th>\n-                    {Array.isArray(PERIODS) && PERIODS.map(period => (\n-                      <th\n-                        key={period.id}\n-                        className={`border border-gray-300 p-2 text-center text-sm font-medium ${\n-                          period.isBreak ? 'bg-gray-100' : 'bg-gray-50'\n-                        }`}\n-                      >\n-                        <div>{period.name}</div>\n-                        <div className=\"text-xs text-gray-500\">{period.time}</div>\n-                      </th>\n-                    ))}\n+                    {Array.isArray(PERIODS) &&\n+                      PERIODS.map(period => (\n+                        <th\n+                          key={period.id}\n+                          className={`border border-gray-300 p-2 text-center text-sm font-medium ${\n+                            period.isBreak ? 'bg-gray-100' : 'bg-gray-50'\n+                          }`}\n+                        >\n+                          <div>{period.name}</div>\n+                          <div className=\"text-xs text-gray-500\">\n+                            {period.time}\n+                          </div>\n+                        </th>\n+                      ))}\n                   </tr>\n                 </thead>\n                 <tbody>\n-                  {Array.isArray(DAYS) && DAYS.map(day => (\n-                    <tr key={day}>\n-                      <td className=\"border border-gray-300 bg-gray-50 p-3 font-medium\">\n-                        {day}\n-                      </td>\n-                      {Array.isArray(PERIODS) && PERIODS.map(period => (\n-                        <TeacherTimetableCell\n-                          key={`${day}-${period.id}`}\n-                          day={day}\n-                          period={period}\n-                          entry={getTimetableEntry(day, period.id)}\n-                          onDrop={handleDrop}\n-                          conflicts={conflicts}\n-                          teacherId={selectedTeacher}\n-                        />\n-                      ))}\n-                    </tr>\n-                  ))}\n+                  {Array.isArray(DAYS) &&\n+                    DAYS.map(day => (\n+                      <tr key={day}>\n+                        <td className=\"border border-gray-300 bg-gray-50 p-3 font-medium\">\n+                          {day}\n+                        </td>\n+                        {Array.isArray(PERIODS) &&\n+                          PERIODS.map(period => (\n+                            <TeacherTimetableCell\n+                              key={`${day}-${period.id}`}\n+                              day={day}\n+                              period={period}\n+                              entry={getTimetableEntry(day, period.id)}\n+                              onDrop={handleDrop}\n+                              conflicts={conflicts}\n+                              teacherId={selectedTeacher}\n+                            />\n+                          ))}\n+                      </tr>\n+                    ))}\n                 </tbody>\n               </table>\n             </div>\n           </div>\n         </div>\n       </div>\n-    );\n-  };\n+    )\n+  }\n \n   return (\n     <DndProvider backend={HTML5Backend}>\n       <div className=\"space-y-6\">\n@@ -653,20 +699,23 @@\n         {viewMode === 'individual' && (\n           <div className=\"bg-white rounded-lg shadow p-6\">\n             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n               <div>\n-                <label className=\"block text-sm font-medium mb-1\">Select Teacher</label>\n+                <label className=\"block text-sm font-medium mb-1\">\n+                  Select Teacher\n+                </label>\n                 <select\n                   value={selectedTeacher}\n-                  onChange={(e) => setSelectedTeacher(e.target.value)}\n+                  onChange={e => setSelectedTeacher(e.target.value)}\n                   className=\"w-full border rounded-lg px-3 py-2\"\n                 >\n                   <option value=\"\">Choose a teacher</option>\n-                  {Array.isArray(teachersData?.data) && teachersData.data.map(teacher => (\n-                    <option key={teacher.id} value={teacher.id}>\n-                      {teacher.name} - {teacher.department}\n-                    </option>\n-                  ))}\n+                  {Array.isArray(teachersData?.data) &&\n+                    teachersData.data.map(teacher => (\n+                      <option key={teacher.id} value={teacher.id}>\n+                        {teacher.name} - {teacher.department}\n+                      </option>\n+                    ))}\n                 </select>\n               </div>\n               <div className=\"flex items-end\">\n                 {conflicts.length > 0 && (\n@@ -680,9 +729,11 @@\n           </div>\n         )}\n \n         {/* Content based on view mode */}\n-        {viewMode === 'overview' ? renderOverviewTable() : renderIndividualTimetable()}\n+        {viewMode === 'overview'\n+          ? renderOverviewTable()\n+          : renderIndividualTimetable()}\n \n         {/* Conflicts List */}\n         {conflicts.length > 0 && viewMode === 'individual' && (\n           <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n@@ -690,13 +741,14 @@\n               <AlertTriangle className=\"w-5 h-5\" />\n               Teacher Timetable Conflicts\n             </h3>\n             <div className=\"space-y-2\">\n-              {Array.isArray(conflicts) && conflicts.map((conflict, index) => (\n-                <div key={index} className=\"text-red-700 text-sm\">\n-                  • {conflict.message}\n-                </div>\n-              ))}\n+              {Array.isArray(conflicts) &&\n+                conflicts.map((conflict, index) => (\n+                  <div key={index} className=\"text-red-700 text-sm\">\n+                    • {conflict.message}\n+                  </div>\n+                ))}\n             </div>\n           </div>\n         )}\n \n@@ -707,9 +759,11 @@\n           title=\"Import Teacher Timetables\"\n         >\n           <div className=\"space-y-4\">\n             <div>\n-              <label className=\"block text-sm font-medium mb-1\">Upload CSV File</label>\n+              <label className=\"block text-sm font-medium mb-1\">\n+                Upload CSV File\n+              </label>\n               <input\n                 type=\"file\"\n                 accept=\".csv\"\n                 className=\"w-full border rounded-lg px-3 py-2\"\n@@ -736,8 +790,8 @@\n           </div>\n         </Dialog>\n       </div>\n     </DndProvider>\n-  );\n-};\n+  )\n+}\n\\ No newline at end of file\n \n-export default TeachersTimetable;\n+export default TeachersTimetable\n"
                },
                {
                    "date": 1755995169572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import Dropdown from '../../components/ui/Dropdown'\n-import Table from '../../components/ui/Table'\n+import { Table } from '../../components/ui/Table'\n import { timetableApi } from '../../lib/api/timetable'\n import { staffApi } from '../../lib/api/staff'\n import { classesApi } from '../../lib/api/classes'\n import { subjectsApi } from '../../lib/api/subjects'\n@@ -793,5 +793,5 @@\n     </DndProvider>\n   )\n }\n \n-export default TeachersTimetable\n\\ No newline at end of file\n+export default TeachersTimetable\n"
                },
                {
                    "date": 1756039695719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n import Input from '../../components/ui/Input'\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n-import Dropdown from '../../components/ui/Dropdown'\n+import { Dropdown } from '../../components/ui/Dropdown'\n import { Table } from '../../components/ui/Table'\n import { timetableApi } from '../../lib/api/timetable'\n import { staffApi } from '../../lib/api/staff'\n import { classesApi } from '../../lib/api/classes'\n"
                },
                {
                    "date": 1756039889126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import {\n   Save,\n   Download,\n   Upload,\n-  Print,\n+\n   Search,\n   Filter,\n   AlertTriangle,\n   Clock,\n@@ -14,8 +14,9 @@\n   MapPin,\n   Eye,\n   Calendar,\n   User,\n+  Printer,\n } from 'lucide-react'\n import { DndProvider, useDrag, useDrop } from 'react-dnd'\n import { HTML5Backend } from 'react-dnd-html5-backend'\n import Input from '../../components/ui/Input'\n@@ -688,9 +689,9 @@\n             <button\n               onClick={() => window.print()}\n               className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n             >\n-              <Print className=\"w-4 h-4\" />\n+              <Printer className=\"w-4 h-4\" />\n               Print\n             </button>\n           </div>\n         </div>\n"
                }
            ],
            "date": 1755986163481,
            "name": "Commit-0",
            "content": "import React, { useState, useCallback } from 'react';\nimport { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  Save, \n  Download, \n  Upload, \n  Print, \n  Search,\n  Filter,\n  AlertTriangle, \n  Clock,\n  Users,\n  BookOpen,\n  MapPin,\n  Eye,\n  Calendar,\n  User\n} from 'lucide-react';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Input from '../../components/ui/Input';\nimport Dialog from '../../components/ui/Dialog';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport ErrorState from '../../components/ui/ErrorState';\nimport Dropdown from '../../components/ui/Dropdown';\nimport Table from '../../components/ui/Table';\nimport { timetableApi } from '../../lib/api/timetable';\nimport { staffApi } from '../../lib/api/staff';\nimport { classesApi } from '../../lib/api/classes';\nimport { subjectsApi } from '../../lib/api/subjects';\n\nconst DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst PERIODS = [\n  { id: 1, name: 'Period 1', time: '08:00-08:45' },\n  { id: 2, name: 'Period 2', time: '08:45-09:30' },\n  { id: 3, name: 'Period 3', time: '09:30-10:15' },\n  { id: 4, name: 'Break', time: '10:15-10:30', isBreak: true },\n  { id: 5, name: 'Period 4', time: '10:30-11:15' },\n  { id: 6, name: 'Period 5', time: '11:15-12:00' },\n  { id: 7, name: 'Period 6', time: '12:00-12:45' },\n  { id: 8, name: 'Lunch', time: '12:45-13:30', isBreak: true },\n  { id: 9, name: 'Period 7', time: '13:30-14:15' },\n  { id: 10, name: 'Period 8', time: '14:15-15:00' }\n];\n\nconst DraggableClass = ({ classData, subject, room }) => {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'class',\n    item: { classData, subject, room },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  return (\n    <div\n      ref={drag}\n      className={`p-2 bg-green-100 border border-green-300 rounded cursor-move text-xs ${\n        isDragging ? 'opacity-50' : ''\n      }`}\n    >\n      <div className=\"font-medium text-green-800\">{classData?.name}</div>\n      <div className=\"text-green-600\">{subject?.name}</div>\n      {room && <div className=\"text-green-500\">{room}</div>}\n    </div>\n  );\n};\n\nconst TeacherTimetableCell = ({ day, period, entry, onDrop, conflicts, teacherId }) => {\n  const [{ isOver }, drop] = useDrop({\n    accept: 'class',\n    drop: (item) => onDrop(day, period.id, item),\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n    }),\n  });\n\n  const hasConflict = conflicts.some(c => \n    c.day === day && c.periodId === period.id && c.teacherId === teacherId\n  );\n\n  if (period.isBreak) {\n    return (\n      <td className=\"border border-gray-300 bg-gray-100 text-center text-gray-500 text-sm p-2\">\n        {period.name}\n      </td>\n    );\n  }\n\n  return (\n    <td\n      ref={drop}\n      className={`border border-gray-300 p-1 h-20 relative ${\n        isOver ? 'bg-green-50' : 'bg-white'\n      } ${hasConflict ? 'bg-red-50 border-red-300' : ''}`}\n    >\n      {entry ? (\n        <div className=\"relative h-full\">\n          <DraggableClass\n            classData={entry.classData}\n            subject={entry.subject}\n            room={entry.room}\n          />\n          {hasConflict && (\n            <AlertTriangle className=\"absolute top-0 right-0 w-4 h-4 text-red-500\" />\n          )}\n        </div>\n      ) : (\n        <div className=\"h-full flex items-center justify-center text-gray-400 text-xs\">\n          Drop here\n        </div>\n      )}\n    </td>\n  );\n};\n\nconst TeacherWorkloadSummary = ({ teacherId, timetableData }) => {\n  const getWorkloadStats = () => {\n    const entries = Object.values(timetableData).filter(entry => entry);\n    const totalPeriods = entries.length;\n    const uniqueClasses = new Set(Array.isArray(entries) ? entries.map(e => e.classData?.id)).size;\n    const uniqueSubjects = new Set(Array.isArray(entries) ? entries.map(e => e.subject?.id)).size;\n    \n    const dailyLoad = DAYS.map(day => {\n      const dayEntries = Object.entries(timetableData)\n        .filter(([key, entry]) => key.startsWith(day) && entry)\n        .length;\n      return { day, periods: dayEntries };\n    });\n\n    return { totalPeriods, uniqueClasses, uniqueSubjects, dailyLoad };\n  };\n\n  const stats = getWorkloadStats();\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4\">\n      <h3 className=\"font-medium mb-4\">Workload Summary</h3>\n      \n      <div className=\"grid grid-cols-2 gap-4 mb-4\">\n        <div className=\"text-center p-3 bg-blue-50 rounded\">\n          <div className=\"text-2xl font-bold text-blue-600\">{stats.totalPeriods}</div>\n          <div className=\"text-sm text-blue-800\">Total Periods</div>\n        </div>\n        <div className=\"text-center p-3 bg-green-50 rounded\">\n          <div className=\"text-2xl font-bold text-green-600\">{stats.uniqueClasses}</div>\n          <div className=\"text-sm text-green-800\">Classes</div>\n        </div>\n        <div className=\"text-center p-3 bg-purple-50 rounded\">\n          <div className=\"text-2xl font-bold text-purple-600\">{stats.uniqueSubjects}</div>\n          <div className=\"text-sm text-purple-800\">Subjects</div>\n        </div>\n        <div className=\"text-center p-3 bg-orange-50 rounded\">\n          <div className=\"text-2xl font-bold text-orange-600\">\n            {Math.round(stats.totalPeriods / 6 * 10) / 10}\n          </div>\n          <div className=\"text-sm text-orange-800\">Avg/Day</div>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <h4 className=\"text-sm font-medium\">Daily Distribution</h4>\n        {Array.isArray(stats.dailyLoad) && stats.dailyLoad.map(({ day, periods }) => (\n          <div key={day} className=\"flex justify-between text-sm\">\n            <span>{day.slice(0, 3)}</span>\n            <span className=\"font-medium\">{periods} periods</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst ClassPool = ({ classes, subjects, onAssignClass }) => {\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [room, setRoom] = useState('');\n\n  const handleCreateEntry = () => {\n    if (!selectedClass || !selectedSubject) return;\n    \n    const classData = classes.find(c => c.id === selectedClass);\n    const subject = subjects.find(s => s.id === selectedSubject);\n    \n    onAssignClass({ classData, subject, room });\n    \n    setSelectedClass('');\n    setSelectedSubject('');\n    setRoom('');\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4\">\n      <h3 className=\"font-medium mb-4\">Class Pool</h3>\n      \n      <div className=\"space-y-3 mb-4\">\n        <select\n          value={selectedClass}\n          onChange={(e) => setSelectedClass(e.target.value)}\n          className=\"w-full border rounded px-3 py-2 text-sm\"\n        >\n          <option value=\"\">Select Class</option>\n          {Array.isArray(classes) && classes.map(cls => (\n            <option key={cls.id} value={cls.id}>\n              {cls.name}\n            </option>\n          ))}\n        </select>\n        \n        <select\n          value={selectedSubject}\n          onChange={(e) => setSelectedSubject(e.target.value)}\n          className=\"w-full border rounded px-3 py-2 text-sm\"\n        >\n          <option value=\"\">Select Subject</option>\n          {Array.isArray(subjects) && subjects.map(subject => (\n            <option key={subject.id} value={subject.id}>\n              {subject.name}\n            </option>\n          ))}\n        </select>\n        \n        <Input\n          placeholder=\"Room (optional)\"\n          value={room}\n          onChange={(e) => setRoom(e.target.value)}\n          size=\"sm\"\n        />\n        \n        <button\n          onClick={handleCreateEntry}\n          disabled={!selectedClass || !selectedSubject}\n          className=\"w-full bg-green-600 text-white py-2 rounded text-sm hover:bg-green-700 disabled:opacity-50\"\n        >\n          Create Entry\n        </button>\n      </div>\n      \n      <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n        {Array.isArray(classes) && classes.map(cls => (\n          <div key={cls.id} className=\"p-2 border rounded text-sm\">\n            <div className=\"font-medium\">{cls.name}</div>\n            <div className=\"text-gray-500 text-xs\">\n              {cls.sections?.length || 0} sections\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst TeachersTimetable = () => {\n  const [viewMode, setViewMode] = useState('individual'); // 'individual' or 'overview'\n  const [selectedTeacher, setSelectedTeacher] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [timetableData, setTimetableData] = useState({});\n  const [conflicts, setConflicts] = useState([]);\n  const [hasChanges, setHasChanges] = useState(false);\n  const [showImportDialog, setShowImportDialog] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  const { data: teachersData } = useQuery({\n    queryKey: ['staff', 'teachers'],\n    queryFn: () => staffApi.getTeachers()\n  });\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => classesApi.getAll({ all: true })\n  });\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'all'],\n    queryFn: () => subjectsApi.getAll({ all: true })\n  });\n\n  const { data: currentTimetable, isLoading } = useQuery({\n    queryKey: ['timetable', 'teacher', selectedTeacher],\n    queryFn: () => timetableApi.getTeacherTimetable(selectedTeacher),\n    enabled: !!selectedTeacher\n  });\n\n  const { data: allTimetables } = useQuery({\n    queryKey: ['timetable', 'teachers', 'overview'],\n    queryFn: () => timetableApi.getAllTeacherTimetables(),\n    enabled: viewMode === 'overview'\n  });\n\n  const saveTimetableMutation = useMutation({\n    mutationFn: timetableApi.saveTeacherTimetable,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['timetable']);\n      setHasChanges(false);\n    }\n  });\n\n  const checkConflictsMutation = useMutation({\n    mutationFn: timetableApi.checkTeacherConflicts,\n    onSuccess: (data) => {\n      setConflicts(data.conflicts || []);\n    }\n  });\n\n  // Initialize timetable data\n  React.useEffect(() => {\n    if (currentTimetable?.data) {\n      setTimetableData(currentTimetable.data.schedule || {});\n      setConflicts(currentTimetable.data.conflicts || []);\n    } else {\n      setTimetableData({});\n      setConflicts([]);\n    }\n  }, [currentTimetable]);\n\n  const handleDrop = useCallback((day, periodId, item) => {\n    const key = `${day}-${periodId}`;\n    const newTimetableData = {\n      ...timetableData,\n      [key]: item\n    };\n    \n    setTimetableData(newTimetableData);\n    setHasChanges(true);\n    \n    // Check for conflicts\n    checkConflictsMutation.mutate({\n      teacherId: selectedTeacher,\n      schedule: newTimetableData\n    });\n  }, [timetableData, selectedTeacher, checkConflictsMutation]);\n\n  const handleSave = () => {\n    saveTimetableMutation.mutate({\n      teacherId: selectedTeacher,\n      schedule: timetableData\n    });\n  };\n\n  const handleExport = () => {\n    if (viewMode === 'individual') {\n      exportIndividualTimetable();\n    } else {\n      exportAllTimetables();\n    }\n  };\n\n  const exportIndividualTimetable = () => {\n    const teacher = teachersData?.data?.find(t => t.id === selectedTeacher);\n    const csvData = generateTeacherCSV(teacher, timetableData);\n    downloadCSV(csvData, `teacher-timetable-${teacher?.name}.csv`);\n  };\n\n  const exportAllTimetables = () => {\n    const csvData = generateAllTeachersCSV();\n    downloadCSV(csvData, 'all-teachers-timetable.csv');\n  };\n\n  const generateTeacherCSV = (teacher, schedule) => {\n    let csv = `Teacher: ${teacher?.name}\\n`;\n    csv += 'Day,';\n    csv += PERIODS.filter(p => !p.isBreak).map(p => p.name).join(',') + '\\n';\n    \n    DAYS.forEach(day => {\n      csv += day + ',';\n      const row = PERIODS.filter(p => !p.isBreak).map(period => {\n        const entry = schedule[`${day}-${period.id}`];\n        return entry ? `${entry.classData?.name} - ${entry.subject?.name}` : '';\n      });\n      csv += row.join(',') + '\\n';\n    });\n    \n    return csv;\n  };\n\n  const generateAllTeachersCSV = () => {\n    let csv = 'Teacher,Day,Period,Class,Subject,Room\\n';\n    \n    allTimetables?.data?.forEach(teacherData => {\n      const schedule = teacherData.schedule || {};\n      Object.entries(schedule).forEach(([key, entry]) => {\n        const [day, periodId] = key.split('-');\n        const period = PERIODS.find(p => p.id === parseInt(periodId));\n        if (entry && !period?.isBreak) {\n          csv += `${teacherData.teacher.name},${day},${period.name},${entry.classData?.name || ''},${entry.subject?.name || ''},${entry.room || ''}\\n`;\n        }\n      });\n    });\n    \n    return csv;\n  };\n\n  const downloadCSV = (csvData, filename) => {\n    const blob = new Blob([csvData], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n  };\n\n  const getTimetableEntry = (day, periodId) => {\n    return timetableData[`${day}-${periodId}`];\n  };\n\n  const filteredTeachers = teachersData?.data?.filter(teacher =>\n    teacher.name.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const renderOverviewTable = () => {\n    const columns = [\n      { key: 'name', header: 'Teacher Name', sortable: true },\n      { key: 'department', header: 'Department' },\n      {\n        key: 'totalPeriods',\n        header: 'Total Periods',\n        render: (teacher) => {\n          const schedule = allTimetables?.data?.find(t => t.teacherId === teacher.id)?.schedule || {};\n          return Object.values(schedule).filter(entry => entry).length;\n        }\n      },\n      {\n        key: 'classes',\n        header: 'Classes',\n        render: (teacher) => {\n          const schedule = allTimetables?.data?.find(t => t.teacherId === teacher.id)?.schedule || {};\n          const uniqueClasses = new Set(\n            Object.values(schedule)\n              .filter(entry => entry)\n              .map(entry => entry.classData?.name)\n          );\n          return uniqueClasses.size;\n        }\n      },\n      {\n        key: 'conflicts',\n        header: 'Conflicts',\n        render: (teacher) => {\n          const teacherConflicts = conflicts.filter(c => c.teacherId === teacher.id);\n          return teacherConflicts.length > 0 ? (\n            <span className=\"px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full\">\n              {teacherConflicts.length}\n            </span>\n          ) : (\n            <span className=\"text-green-600\">None</span>\n          );\n        }\n      },\n      {\n        key: 'actions',\n        header: 'Actions',\n        render: (teacher) => (\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => {\n                setSelectedTeacher(teacher.id);\n                setViewMode('individual');\n              }}\n              className=\"text-blue-600 hover:text-blue-800 text-sm\"\n            >\n              Edit\n            </button>\n            <button\n              onClick={() => console.log('View details for', teacher.id)}\n              className=\"text-green-600 hover:text-green-800 text-sm\"\n            >\n              View\n            </button>\n          </div>\n        )\n      }\n    ];\n\n    return (\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6 border-b\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-lg font-medium\">Teachers Overview</h2>\n            <div className=\"flex gap-4 items-center\">\n              <Input\n                placeholder=\"Search teachers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                icon={Search}\n                size=\"sm\"\n              />\n            </div>\n          </div>\n        </div>\n        <Table\n          data={filteredTeachers}\n          columns={columns}\n        />\n      </div>\n    );\n  };\n\n  const renderIndividualTimetable = () => {\n    if (!selectedTeacher) {\n      return (\n        <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n          <User className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Teacher</h3>\n          <p className=\"text-gray-500\">Choose a teacher to view and edit their timetable</p>\n        </div>\n      );\n    }\n\n    if (isLoading) return <LoadingSkeleton />;\n\n    const teacher = teachersData?.data?.find(t => t.id === selectedTeacher);\n\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Class Pool and Workload */}\n        <div className=\"lg:col-span-1 space-y-6\">\n          <ClassPool\n            classes={classesData?.data}\n            subjects={subjectsData?.data}\n            onAssignClass={(entry) => {\n              console.log('Quick assign:', entry);\n            }}\n          />\n          <TeacherWorkloadSummary\n            teacherId={selectedTeacher}\n            timetableData={timetableData}\n          />\n        </div>\n\n        {/* Timetable Grid */}\n        <div className=\"lg:col-span-3\">\n          <div className=\"bg-white rounded-lg shadow\">\n            <div className=\"p-4 border-b\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-medium\">\n                  {teacher?.name} - Timetable\n                </h2>\n                {hasChanges && (\n                  <button\n                    onClick={handleSave}\n                    disabled={saveTimetableMutation.isPending}\n                    className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n                  >\n                    <Save className=\"w-4 h-4\" />\n                    Save Changes\n                  </button>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse\">\n                <thead>\n                  <tr>\n                    <th className=\"border border-gray-300 bg-gray-50 p-3 text-left font-medium\">\n                      Day / Period\n                    </th>\n                    {Array.isArray(PERIODS) && PERIODS.map(period => (\n                      <th\n                        key={period.id}\n                        className={`border border-gray-300 p-2 text-center text-sm font-medium ${\n                          period.isBreak ? 'bg-gray-100' : 'bg-gray-50'\n                        }`}\n                      >\n                        <div>{period.name}</div>\n                        <div className=\"text-xs text-gray-500\">{period.time}</div>\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {Array.isArray(DAYS) && DAYS.map(day => (\n                    <tr key={day}>\n                      <td className=\"border border-gray-300 bg-gray-50 p-3 font-medium\">\n                        {day}\n                      </td>\n                      {Array.isArray(PERIODS) && PERIODS.map(period => (\n                        <TeacherTimetableCell\n                          key={`${day}-${period.id}`}\n                          day={day}\n                          period={period}\n                          entry={getTimetableEntry(day, period.id)}\n                          onDrop={handleDrop}\n                          conflicts={conflicts}\n                          teacherId={selectedTeacher}\n                        />\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold\">Teachers Timetable</h1>\n          <div className=\"flex gap-2\">\n            <div className=\"flex border rounded-lg\">\n              <button\n                onClick={() => setViewMode('individual')}\n                className={`px-4 py-2 text-sm ${\n                  viewMode === 'individual'\n                    ? 'bg-blue-600 text-white'\n                    : 'text-gray-600 hover:bg-gray-50'\n                }`}\n              >\n                Individual\n              </button>\n              <button\n                onClick={() => setViewMode('overview')}\n                className={`px-4 py-2 text-sm ${\n                  viewMode === 'overview'\n                    ? 'bg-blue-600 text-white'\n                    : 'text-gray-600 hover:bg-gray-50'\n                }`}\n              >\n                Overview\n              </button>\n            </div>\n            <button\n              onClick={() => setShowImportDialog(true)}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n            >\n              <Upload className=\"w-4 h-4\" />\n              Import\n            </button>\n            <button\n              onClick={handleExport}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              Export\n            </button>\n            <button\n              onClick={() => window.print()}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n            >\n              <Print className=\"w-4 h-4\" />\n              Print\n            </button>\n          </div>\n        </div>\n\n        {/* Teacher Selection for Individual View */}\n        {viewMode === 'individual' && (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Select Teacher</label>\n                <select\n                  value={selectedTeacher}\n                  onChange={(e) => setSelectedTeacher(e.target.value)}\n                  className=\"w-full border rounded-lg px-3 py-2\"\n                >\n                  <option value=\"\">Choose a teacher</option>\n                  {Array.isArray(teachersData?.data) && teachersData.data.map(teacher => (\n                    <option key={teacher.id} value={teacher.id}>\n                      {teacher.name} - {teacher.department}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"flex items-end\">\n                {conflicts.length > 0 && (\n                  <div className=\"px-4 py-2 rounded-lg text-sm bg-red-100 text-red-800 flex items-center gap-2\">\n                    <AlertTriangle className=\"w-4 h-4\" />\n                    {conflicts.length} Conflicts\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Content based on view mode */}\n        {viewMode === 'overview' ? renderOverviewTable() : renderIndividualTimetable()}\n\n        {/* Conflicts List */}\n        {conflicts.length > 0 && viewMode === 'individual' && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <h3 className=\"font-medium text-red-800 mb-2 flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5\" />\n              Teacher Timetable Conflicts\n            </h3>\n            <div className=\"space-y-2\">\n              {Array.isArray(conflicts) && conflicts.map((conflict, index) => (\n                <div key={index} className=\"text-red-700 text-sm\">\n                  • {conflict.message}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Import Dialog */}\n        <Dialog\n          open={showImportDialog}\n          onClose={() => setShowImportDialog(false)}\n          title=\"Import Teacher Timetables\"\n        >\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Upload CSV File</label>\n              <input\n                type=\"file\"\n                accept=\".csv\"\n                className=\"w-full border rounded-lg px-3 py-2\"\n              />\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              <p>CSV format should include:</p>\n              <ul className=\"list-disc list-inside mt-1\">\n                <li>Teacher, Day, Period, Class, Subject, Room</li>\n                <li>One row per class assignment</li>\n              </ul>\n            </div>\n            <div className=\"flex gap-2 pt-4\">\n              <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\">\n                Import\n              </button>\n              <button\n                onClick={() => setShowImportDialog(false)}\n                className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </Dialog>\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default TeachersTimetable;"
        }
    ]
}