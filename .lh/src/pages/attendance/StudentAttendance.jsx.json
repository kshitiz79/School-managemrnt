{
    "sourceFile": "src/pages/attendance/StudentAttendance.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755986163481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755988776892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState } from 'react'\n-import { useState } from 'react'\n import { useForm, Controller } from 'react-hook-form'\n import { zodResolver } from '@hookform/resolvers/zod'\n import { z } from 'zod'\n import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n"
                },
                {
                    "date": 1755991756194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n           ))}\n       </div>\n     </div>\n   )\n-};\n+}\n \n const AttendanceGrid = ({\n   students,\n   attendance,\n@@ -83,25 +83,25 @@\n }) => {\n   const getAttendanceStatus = studentId => {\n     const record = attendance.find(a => a.studentId === studentId)\n     return record?.status || 'present'\n-  };\n+  }\n \n   const getAttendanceReason = studentId => {\n     const record = attendance.find(a => a.studentId === studentId)\n     return record?.reason || ''\n-  };\n+  }\n \n   const handleStatusChange = (studentId, status) => {\n     if (!isEditable) return\n     onAttendanceChange(studentId, { status, reason: '' })\n-  };\n+  }\n \n   const handleReasonChange = (studentId, reason) => {\n     if (!isEditable) return\n     const currentStatus = getAttendanceStatus(studentId)\n     onAttendanceChange(studentId, { status: currentStatus, reason })\n-  };\n+  }\n \n   return (\n     <div className=\"space-y-4\">\n       <div className=\"grid grid-cols-1 gap-2\">\n@@ -130,10 +130,9 @@\n                   <div className=\"text-sm text-gray-500\">\n                     Roll: {student.rollNumber}\n                   </div>\n                 </div>\n-\n-\n+              </div>\n               <div className=\"flex items-center gap-4\">\n                 <div className=\"flex gap-2\">\n                   <button\n                     type=\"button\"\n@@ -172,9 +171,9 @@\n                     <Clock className=\"w-4 h-4\" />\n                   </button>\n                 </div>\n \n-              {getAttendanceStatus(student.id) === 'absent' && (\n+                {getAttendanceStatus(student.id) === 'absent' && (\n                   <input\n                     type=\"text\"\n                     placeholder=\"Reason for absence\"\n                     value={getAttendanceReason(student.id)}\n@@ -190,9 +189,9 @@\n           ))}\n       </div>\n     </div>\n   )\n-};\n+}\n \n const StudentAttendance = () => {\n   const [selectedPeriod, setSelectedPeriod] = useState('')\n   const [attendance, setAttendance] = useState([])\n@@ -212,9 +211,9 @@\n     mode: 'onChange',\n     defaultValues: {\n       date: new Date().toISOString().split('T')[0],\n       attendanceType: 'daily',\n-    }\n+    },\n   })\n \n   const watchedClass = watch('classId')\n   const watchedSection = watch('sectionId')\n@@ -274,17 +273,17 @@\n     mutationFn: studentAttendanceApi.saveAttendance,\n     onSuccess: () => {\n       queryClient.invalidateQueries(['attendance'])\n       setHasChanges(false)\n-    }\n+    },\n   })\n \n   const bulkMarkMutation = useMutation({\n     mutationFn: studentAttendanceApi.bulkMark,\n     onSuccess: () => {\n       queryClient.invalidateQueries(['attendance'])\n       setHasChanges(false)\n-    }\n+    },\n   })\n \n   // Initialize attendance when data loads\n   React.useEffect(() => {\n@@ -303,12 +302,10 @@\n \n   const handleAttendanceChange = (studentId, { status, reason }) => {\n     setAttendance(prev => {\n       const updated = prev.map(record =>\n-        record.studentId === studentId\n-          ? { ...record, status, reason }\n-          : record,\n-      );\n+        record.studentId === studentId ? { ...record, status, reason } : record\n+      )\n \n       // If student not found, add new record\n       if (!prev.find(record => record.studentId === studentId)) {\n         updated.push({ studentId, status, reason })\n@@ -316,9 +313,9 @@\n \n       return updated\n     })\n     setHasChanges(true)\n-  };\n+  }\n \n   const handleBulkMark = status => {\n     const bulkData = {\n       classId: watchedClass,\n@@ -327,13 +324,13 @@\n       type: watchedType,\n       period: selectedPeriod,\n       status,\n       studentIds: studentsData?.data?.map(s => s.id) || [],\n-    };\n+    }\n \n     bulkMarkMutation.mutate(bulkData)\n     setShowBulkActions(false)\n-  };\n+  }\n \n   const handleSaveAttendance = () => {\n     const data = {\n       classId: watchedClass,\n@@ -341,21 +338,21 @@\n       date: watchedDate,\n       type: watchedType,\n       period: selectedPeriod,\n       attendance,\n-    };\n+    }\n \n     saveAttendanceMutation.mutate(data)\n-  };\n+  }\n \n   const getAttendanceStats = () => {\n     const total = attendance.length\n     const present = attendance.filter(a => a.status === 'present').length\n     const absent = attendance.filter(a => a.status === 'absent').length\n     const late = attendance.filter(a => a.status === 'late').length\n-    \n+\n     return { total, present, absent, late }\n-  };\n+  }\n \n   const stats = getAttendanceStats()\n   const periods = ['1', '2', '3', '4', '5', '6', '7', '8']\n \n@@ -650,7 +647,7 @@\n         </div>\n       </Dialog>\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default StudentAttendance\n+export default StudentAttendance\n"
                },
                {
                    "date": 1755994925615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   BarChart3,\n   User,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { studentAttendanceApi } from '../../lib/api/studentAttendance'\n import { classesApi } from '../../lib/api/classes'\n import { sectionsApi } from '../../lib/api/sections'\n@@ -649,5 +649,5 @@\n     </div>\n   )\n }\n \n-export default StudentAttendance\n\\ No newline at end of file\n+export default StudentAttendance\n"
                }
            ],
            "date": 1755986163481,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Clock,\n  Users,\n  CheckCircle,\n  XCircle,\n  Download,\n  Save,\n  TrendingUp,\n  BarChart3,\n  User,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport Dialog from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { studentAttendanceApi } from '../../lib/api/studentAttendance'\nimport { classesApi } from '../../lib/api/classes'\nimport { sectionsApi } from '../../lib/api/sections'\nimport { studentsApi } from '../../lib/api/students'\n\n// Validation Schema\nconst attendanceSchema = z.object({\n  classId: z.string().min(1, 'Class is required'),\n  sectionId: z.string().min(1, 'Section is required'),\n  date: z.string().min(1, 'Date is required'),\n  period: z.string().optional(),\n  attendanceType: z.enum(['daily', 'period'], {\n    required_error: 'Attendance type is required',\n  }),\n  notes: z.string().optional(),\n})\n\nconst AttendanceChart = ({ data, type = 'daily' }) => {\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <BarChart3 className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n        <p>No attendance data available</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"font-medium\">Attendance Trends</h3>\n      <div className=\"grid grid-cols-7 gap-2\">\n        {Array.isArray(data) &&\n          data.map((day, index) => (\n            <div key={index} className=\"text-center\">\n              <div className=\"text-xs text-gray-500 mb-1\">\n                {new Date(day.date).toLocaleDateString('en', {\n                  weekday: 'short',\n                })}\n              </div>\n              <div className=\"relative h-20 bg-gray-100 rounded\">\n                <div\n                  className=\"absolute bottom-0 w-full bg-green-500 rounded\"\n                  style={{ height: `${(day.present / day.total) * 100}%` }}\n                />\n                <div className=\"absolute inset-0 flex items-center justify-center text-xs font-medium\">\n                  {Math.round((day.present / day.total) * 100)}%\n                </div>\n              </div>\n              <div className=\"text-xs text-gray-600 mt-1\">\n                {day.present}/{day.total}\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n};\n\nconst AttendanceGrid = ({\n  students,\n  attendance,\n  onAttendanceChange,\n  isEditable = true,\n}) => {\n  const getAttendanceStatus = studentId => {\n    const record = attendance.find(a => a.studentId === studentId)\n    return record?.status || 'present'\n  };\n\n  const getAttendanceReason = studentId => {\n    const record = attendance.find(a => a.studentId === studentId)\n    return record?.reason || ''\n  };\n\n  const handleStatusChange = (studentId, status) => {\n    if (!isEditable) return\n    onAttendanceChange(studentId, { status, reason: '' })\n  };\n\n  const handleReasonChange = (studentId, reason) => {\n    if (!isEditable) return\n    const currentStatus = getAttendanceStatus(studentId)\n    onAttendanceChange(studentId, { status: currentStatus, reason })\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 gap-2\">\n        {Array.isArray(students) &&\n          students.map(student => (\n            <div\n              key={student.id}\n              className=\"flex items-center justify-between p-3 border rounded-lg\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-full overflow-hidden bg-gray-200\">\n                  {student.photo ? (\n                    <img\n                      src={student.photo}\n                      alt={student.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full flex items-center justify-center\">\n                      <User className=\"w-5 h-5 text-gray-400\" />\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <div className=\"font-medium\">{student.name}</div>\n                  <div className=\"text-sm text-gray-500\">\n                    Roll: {student.rollNumber}\n                  </div>\n                </div>\n\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex gap-2\">\n                  <button\n                    type=\"button\"\n                    onClick={() => handleStatusChange(student.id, 'present')}\n                    disabled={!isEditable}\n                    className={`p-2 rounded-lg ${\n                      getAttendanceStatus(student.id) === 'present'\n                        ? 'bg-green-100 text-green-800 border-green-300'\n                        : 'bg-gray-100 text-gray-600 hover:bg-green-50'\n                    } ${!isEditable ? 'cursor-not-allowed opacity-50' : 'border'}`}\n                  >\n                    <CheckCircle className=\"w-4 h-4\" />\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleStatusChange(student.id, 'absent')}\n                    disabled={!isEditable}\n                    className={`p-2 rounded-lg ${\n                      getAttendanceStatus(student.id) === 'absent'\n                        ? 'bg-red-100 text-red-800 border-red-300'\n                        : 'bg-gray-100 text-gray-600 hover:bg-red-50'\n                    } ${!isEditable ? 'cursor-not-allowed opacity-50' : 'border'}`}\n                  >\n                    <XCircle className=\"w-4 h-4\" />\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleStatusChange(student.id, 'late')}\n                    disabled={!isEditable}\n                    className={`p-2 rounded-lg ${\n                      getAttendanceStatus(student.id) === 'late'\n                        ? 'bg-yellow-100 text-yellow-800 border-yellow-300'\n                        : 'bg-gray-100 text-gray-600 hover:bg-yellow-50'\n                    } ${!isEditable ? 'cursor-not-allowed opacity-50' : 'border'}`}\n                  >\n                    <Clock className=\"w-4 h-4\" />\n                  </button>\n                </div>\n\n              {getAttendanceStatus(student.id) === 'absent' && (\n                  <input\n                    type=\"text\"\n                    placeholder=\"Reason for absence\"\n                    value={getAttendanceReason(student.id)}\n                    onChange={e =>\n                      handleReasonChange(student.id, e.target.value)\n                    }\n                    disabled={!isEditable}\n                    className=\"text-sm border rounded px-2 py-1 w-40 disabled:bg-gray-100\"\n                  />\n                )}\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n};\n\nconst StudentAttendance = () => {\n  const [selectedPeriod, setSelectedPeriod] = useState('')\n  const [attendance, setAttendance] = useState([])\n  const [showBulkActions, setShowBulkActions] = useState(false)\n  const [showTrends, setShowTrends] = useState(false)\n  const [hasChanges, setHasChanges] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    watch,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(attendanceSchema),\n    mode: 'onChange',\n    defaultValues: {\n      date: new Date().toISOString().split('T')[0],\n      attendanceType: 'daily',\n    }\n  })\n\n  const watchedClass = watch('classId')\n  const watchedSection = watch('sectionId')\n  const watchedDate = watch('date')\n  const watchedType = watch('attendanceType')\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => classesApi.getAll({ all: true }),\n  })\n\n  const { data: sectionsData } = useQuery({\n    queryKey: ['sections', 'by-class', watchedClass],\n    queryFn: () => sectionsApi.getByClass(watchedClass),\n    enabled: !!watchedClass,\n  })\n\n  const { data: studentsData } = useQuery({\n    queryKey: ['students', 'by-section', watchedSection],\n    queryFn: () => studentsApi.getBySection(watchedSection),\n    enabled: !!watchedSection,\n  })\n\n  const { data: attendanceData, isLoading } = useQuery({\n    queryKey: [\n      'attendance',\n      'student',\n      watchedClass,\n      watchedSection,\n      watchedDate,\n      watchedType,\n      selectedPeriod,\n    ],\n    queryFn: () =>\n      studentAttendanceApi.getAttendance({\n        classId: watchedClass,\n        sectionId: watchedSection,\n        date: watchedDate,\n        type: watchedType,\n        period: selectedPeriod,\n      }),\n    enabled: !!watchedClass && !!watchedSection && !!watchedDate,\n  })\n\n  const { data: trendsData } = useQuery({\n    queryKey: ['attendance', 'trends', watchedClass, watchedSection],\n    queryFn: () =>\n      studentAttendanceApi.getTrends({\n        classId: watchedClass,\n        sectionId: watchedSection,\n        days: 7,\n      }),\n    enabled: !!watchedClass && !!watchedSection && showTrends,\n  })\n\n  const saveAttendanceMutation = useMutation({\n    mutationFn: studentAttendanceApi.saveAttendance,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['attendance'])\n      setHasChanges(false)\n    }\n  })\n\n  const bulkMarkMutation = useMutation({\n    mutationFn: studentAttendanceApi.bulkMark,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['attendance'])\n      setHasChanges(false)\n    }\n  })\n\n  // Initialize attendance when data loads\n  React.useEffect(() => {\n    if (attendanceData?.data) {\n      setAttendance(attendanceData.data)\n    } else if (studentsData?.data) {\n      // Initialize with all present\n      const initialAttendance = studentsData.data.map(student => ({\n        studentId: student.id,\n        status: 'present',\n        reason: '',\n      }))\n      setAttendance(initialAttendance)\n    }\n  }, [attendanceData, studentsData])\n\n  const handleAttendanceChange = (studentId, { status, reason }) => {\n    setAttendance(prev => {\n      const updated = prev.map(record =>\n        record.studentId === studentId\n          ? { ...record, status, reason }\n          : record,\n      );\n\n      // If student not found, add new record\n      if (!prev.find(record => record.studentId === studentId)) {\n        updated.push({ studentId, status, reason })\n      }\n\n      return updated\n    })\n    setHasChanges(true)\n  };\n\n  const handleBulkMark = status => {\n    const bulkData = {\n      classId: watchedClass,\n      sectionId: watchedSection,\n      date: watchedDate,\n      type: watchedType,\n      period: selectedPeriod,\n      status,\n      studentIds: studentsData?.data?.map(s => s.id) || [],\n    };\n\n    bulkMarkMutation.mutate(bulkData)\n    setShowBulkActions(false)\n  };\n\n  const handleSaveAttendance = () => {\n    const data = {\n      classId: watchedClass,\n      sectionId: watchedSection,\n      date: watchedDate,\n      type: watchedType,\n      period: selectedPeriod,\n      attendance,\n    };\n\n    saveAttendanceMutation.mutate(data)\n  };\n\n  const getAttendanceStats = () => {\n    const total = attendance.length\n    const present = attendance.filter(a => a.status === 'present').length\n    const absent = attendance.filter(a => a.status === 'absent').length\n    const late = attendance.filter(a => a.status === 'late').length\n    \n    return { total, present, absent, late }\n  };\n\n  const stats = getAttendanceStats()\n  const periods = ['1', '2', '3', '4', '5', '6', '7', '8']\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Student Attendance</h1>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setShowTrends(true)}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n          >\n            <TrendingUp className=\"w-4 h-4\" />\n            View Trends\n          </button>\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n          {hasChanges && (\n            <button\n              onClick={handleSaveAttendance}\n              disabled={saveAttendanceMutation.isPending}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n            >\n              <Save className=\"w-4 h-4\" />\n              {saveAttendanceMutation.isPending\n                ? 'Saving...'\n                : 'Save Attendance'}\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Attendance Form */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n          <Controller\n            name=\"date\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Date\"\n                type=\"date\"\n                {...field}\n                error={errors.date?.message}\n              />\n            )}\n          />\n          <Controller\n            name=\"classId\"\n            control={control}\n            render={({ field }) => (\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Class</label>\n                <select\n                  {...field}\n                  onChange={e => {\n                    field.onChange(e)\n                    setValue('sectionId', '')\n                  }}\n                  className={`w-full border rounded-lg px-3 py-2 ${\n                    errors.classId ? 'border-red-500' : ''\n                  }`}\n                >\n                  <option value=\"\">Select Class</option>\n                  {Array.isArray(classesData?.data) &&\n                    classesData.data.map(cls => (\n                      <option key={cls.id} value={cls.id}>\n                        {cls.name}\n                      </option>\n                    ))}\n                </select>\n                {errors.classId && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.classId.message}\n                  </p>\n                )}\n              </div>\n            )}\n          />\n          <Controller\n            name=\"sectionId\"\n            control={control}\n            render={({ field }) => (\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  Section\n                </label>\n                <select\n                  {...field}\n                  disabled={!watchedClass}\n                  className={`w-full border rounded-lg px-3 py-2 disabled:bg-gray-100 ${\n                    errors.sectionId ? 'border-red-500' : ''\n                  }`}\n                >\n                  <option value=\"\">Select Section</option>\n                  {Array.isArray(sectionsData?.data) &&\n                    sectionsData.data.map(section => (\n                      <option key={section.id} value={section.id}>\n                        {section.name}\n                      </option>\n                    ))}\n                </select>\n                {errors.sectionId && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.sectionId.message}\n                  </p>\n                )}\n              </div>\n            )}\n          />\n          <Controller\n            name=\"attendanceType\"\n            control={control}\n            render={({ field }) => (\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Type</label>\n                <select\n                  {...field}\n                  className=\"w-full border rounded-lg px-3 py-2\"\n                >\n                  <option value=\"daily\">Daily</option>\n                  <option value=\"period\">Period Wise</option>\n                </select>\n              </div>\n            )}\n          />\n          {watchedType === 'period' && (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Period</label>\n              <select\n                value={selectedPeriod}\n                onChange={e => setSelectedPeriod(e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"\">Select Period</option>\n                {Array.isArray(periods) &&\n                  periods.map(period => (\n                    <option key={period} value={period}>\n                      Period {period}\n                    </option>\n                  ))}\n              </select>\n            </div>\n          )}\n          <div className=\"flex items-end\">\n            <button\n              onClick={() => setShowBulkActions(true)}\n              disabled={!watchedClass || !watchedSection}\n              className=\"w-full bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 disabled:opacity-50\"\n            >\n              Bulk Actions\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {studentsData?.data && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <div className=\"flex items-center gap-3\">\n              <Users className=\"w-8 h-8 text-blue-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.total}</p>\n                <p className=\"text-sm text-gray-600\">Total Students</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.present}</p>\n                <p className=\"text-sm text-gray-600\">Present</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <div className=\"flex items-center gap-3\">\n              <XCircle className=\"w-8 h-8 text-red-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.absent}</p>\n                <p className=\"text-sm text-gray-600\">Absent</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-white p-4 rounded-lg shadow\">\n            <div className=\"flex items-center gap-3\">\n              <Clock className=\"w-8 h-8 text-yellow-600\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.late}</p>\n                <p className=\"text-sm text-gray-600\">Late</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Attendance Grid */}\n      {studentsData?.data && (\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-lg font-medium\">\n              Mark Attendance -{' '}\n              {classesData?.data?.find(c => c.id === watchedClass)?.name}\n              {sectionsData?.data?.find(s => s.id === watchedSection)?.name &&\n                ` - ${sectionsData.data.find(s => s.id === watchedSection).name}`}\n            </h2>\n            <div className=\"text-sm text-gray-500\">\n              {new Date(watchedDate).toLocaleDateString()}\n              {watchedType === 'period' &&\n                selectedPeriod &&\n                ` - Period ${selectedPeriod}`}\n            </div>\n          </div>\n\n          <AttendanceGrid\n            students={studentsData.data}\n            attendance={attendance}\n            onAttendanceChange={handleAttendanceChange}\n          />\n        </div>\n      )}\n\n      {/* Bulk Actions Dialog */}\n      <Dialog\n        open={showBulkActions}\n        onClose={() => setShowBulkActions(false)}\n        title=\"Bulk Attendance Actions\"\n      >\n        <div className=\"space-y-4\">\n          <p>\n            Apply attendance status to all students in the selected\n            class/section:\n          </p>\n          <div className=\"flex gap-4\">\n            <button\n              onClick={() => handleBulkMark('present')}\n              disabled={bulkMarkMutation.isPending}\n              className=\"flex-1 bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center justify-center gap-2\"\n            >\n              <CheckCircle className=\"w-5 h-5\" />\n              Mark All Present\n            </button>\n            <button\n              onClick={() => handleBulkMark('absent')}\n              disabled={bulkMarkMutation.isPending}\n              className=\"flex-1 bg-red-600 text-white py-3 rounded-lg hover:bg-red-700 disabled:opacity-50 flex items-center justify-center gap-2\"\n            >\n              <XCircle className=\"w-5 h-5\" />\n              Mark All Absent\n            </button>\n          </div>\n          <button\n            onClick={() => setShowBulkActions(false)}\n            className=\"w-full border py-2 rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n        </div>\n      </Dialog>\n\n      {/* Trends Dialog */}\n      <Dialog\n        open={showTrends}\n        onClose={() => setShowTrends(false)}\n        title=\"Attendance Trends\"\n        size=\"lg\"\n      >\n        <div className=\"space-y-6\">\n          {trendsData?.data ? (\n            <AttendanceChart data={trendsData.data} />\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <TrendingUp className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n              <p>Loading trends data...</p>\n            </div>\n          )}\n\n          <div className=\"flex justify-end\">\n            <button\n              onClick={() => setShowTrends(false)}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </Dialog>\n    </div>\n  )\n};\n\nexport default StudentAttendance"
        }
    ]
}