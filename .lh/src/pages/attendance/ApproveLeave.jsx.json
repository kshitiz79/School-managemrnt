{
    "sourceFile": "src/pages/attendance/ApproveLeave.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925597,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Calendar,\n  Clock,\n  User,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Search,\n  Filter,\n  FileText,\n  MessageSquare,\n  Download,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { leaveRequestsApi } from '../../lib/api/leaveRequests'\n\nconst LeaveRequestCard = ({ request, onApprove, onReject, onViewDetails }) => {\n  const getStatusColor = status => {\n    switch (status) {\n      case 'approved':\n        return 'text-green-600 bg-green-100'\n      case 'rejected':\n        return 'text-red-600 bg-red-100'\n      case 'pending':\n        return 'text-yellow-600 bg-yellow-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  const getTypeIcon = type => {\n    switch (type) {\n      case 'sick':\n        return <AlertTriangle className=\"w-4 h-4 text-red-500\" />\n      case 'personal':\n        return <User className=\"w-4 h-4 text-blue-500\" />\n      case 'emergency':\n        return <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\n      default:\n        return <Calendar className=\"w-4 h-4 text-gray-500\" />\n    }\n  }\n\n  const calculateDays = () => {\n    const start = new Date(request.startDate)\n    const end = new Date(request.endDate)\n    const diffTime = Math.abs(end - start)\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1\n    return diffDays\n  }\n\n  return (\n    <div className=\"bg-white border rounded-lg p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-3\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center\">\n            <User className=\"w-5 h-5 text-gray-600\" />\n          </div>\n          <div>\n            <h3 className=\"font-medium\">{request.userName}</h3>\n            <p className=\"text-sm text-gray-500\">\n              {request.userType === 'student'\n                ? `Roll: ${request.rollNumber}`\n                : `ID: ${request.employeeId}`}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {getTypeIcon(request.type)}\n          <span\n            className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(request.status)}`}\n          >\n            {request.status.charAt(0).toUpperCase() + request.status.slice(1)}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"space-y-2 mb-4\">\n        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n          <Calendar className=\"w-4 h-4\" />\n          <span>\n            {new Date(request.startDate).toLocaleDateString()} -{' '}\n            {new Date(request.endDate).toLocaleDateString()}({calculateDays()}{' '}\n            day{calculateDays() > 1 ? 's' : ''})\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n          <Clock className=\"w-4 h-4\" />\n          <span>\n            Applied: {new Date(request.appliedAt).toLocaleDateString()}\n          </span>\n        </div>\n        <div className=\"text-sm\">\n          <span className=\"font-medium\">Reason: </span>\n          <span className=\"text-gray-600\">{request.reason}</span>\n        </div>\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <button\n          onClick={() => onViewDetails(request)}\n          className=\"text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center gap-1\"\n        >\n          <FileText className=\"w-4 h-4\" />\n          View Details\n        </button>\n\n        {request.status === 'pending' && (\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => onReject(request.id)}\n              className=\"px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200 flex items-center gap-1\"\n            >\n              <XCircle className=\"w-4 h-4\" />\n              Reject\n            </button>\n            <button\n              onClick={() => onApprove(request.id)}\n              className=\"px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200 flex items-center gap-1\"\n            >\n              <CheckCircle className=\"w-4 h-4\" />\n              Approve\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst LeaveDetailsDialog = ({ request, open, onClose }) => {\n  if (!request) return null\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title=\"Leave Request Details\"\n      size=\"lg\"\n    >\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Applicant\n            </label>\n            <p className=\"text-sm\">{request.userName}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Type\n            </label>\n            <p className=\"text-sm capitalize\">{request.userType}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Leave Type\n            </label>\n            <p className=\"text-sm capitalize\">{request.type}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Status\n            </label>\n            <p className=\"text-sm capitalize\">{request.status}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Start Date\n            </label>\n            <p className=\"text-sm\">\n              {new Date(request.startDate).toLocaleDateString()}\n            </p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              End Date\n            </label>\n            <p className=\"text-sm\">\n              {new Date(request.endDate).toLocaleDateString()}\n            </p>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Reason\n          </label>\n          <p className=\"text-sm bg-gray-50 p-3 rounded\">{request.reason}</p>\n        </div>\n\n        {request.attachments && request.attachments.length > 0 && (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Attachments\n            </label>\n            <div className=\"space-y-2\">\n              {Array.isArray(request.attachments) &&\n                request.attachments.map((attachment, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center gap-2 p-2 bg-gray-50 rounded\"\n                  >\n                    <FileText className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-sm\">{attachment}</span>\n                    <button className=\"ml-auto text-blue-600 hover:text-blue-800 text-sm\">\n                      <Download className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                ))}\n            </div>\n          </div>\n        )}\n\n        {request.remarks && (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Remarks\n            </label>\n            <p className=\"text-sm bg-gray-50 p-3 rounded\">{request.remarks}</p>\n          </div>\n        )}\n\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst ApprovalDialog = ({ request, action, open, onClose, onConfirm }) => {\n  const [remarks, setRemarks] = useState('')\n\n  const handleConfirm = () => {\n    onConfirm(request?.id, remarks)\n    setRemarks('')\n    onClose()\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title={`${action === 'approve' ? 'Approve' : 'Reject'} Leave Request`}\n    >\n      <div className=\"space-y-4\">\n        <p>\n          Are you sure you want to {action} the leave request from{' '}\n          <strong>{request?.userName}</strong>?\n        </p>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Remarks {action === 'reject' ? '(Required)' : '(Optional)'}\n          </label>\n          <textarea\n            value={remarks}\n            onChange={e => setRemarks(e.target.value)}\n            placeholder={`Add remarks for ${action}ing this request...`}\n            className=\"w-full border rounded-lg px-3 py-2 h-20 resize-none\"\n            required={action === 'reject'}\n          />\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleConfirm}\n            disabled={action === 'reject' && !remarks.trim()}\n            className={`px-4 py-2 rounded-lg text-white disabled:opacity-50 ${\n              action === 'approve'\n                ? 'bg-green-600 hover:bg-green-700'\n                : 'bg-red-600 hover:bg-red-700'\n            }`}\n          >\n            {action === 'approve' ? 'Approve' : 'Reject'}\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst ApproveLeave = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState('all')\n  const [typeFilter, setTypeFilter] = useState('all')\n  const [userTypeFilter, setUserTypeFilter] = useState('all')\n  const [selectedRequest, setSelectedRequest] = useState(null)\n  const [showDetails, setShowDetails] = useState(false)\n  const [showApproval, setShowApproval] = useState(false)\n  const [approvalAction, setApprovalAction] = useState('approve')\n\n  const queryClient = useQueryClient()\n\n  const { data: leaveRequestsData, isLoading } = useQuery({\n    queryKey: ['leave-requests', 'pending-approval'],\n    queryFn: () => leaveRequestsApi.getPendingRequests(),\n  })\n\n  const approveMutation = useMutation({\n    mutationFn: ({ id, remarks }) => leaveRequestsApi.approve(id, remarks),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['leave-requests'])\n    },\n  })\n\n  const rejectMutation = useMutation({\n    mutationFn: ({ id, remarks }) => leaveRequestsApi.reject(id, remarks),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['leave-requests'])\n    },\n  })\n\n  const handleApprove = requestId => {\n    const request = leaveRequestsData?.data?.find(r => r.id === requestId)\n    setSelectedRequest(request)\n    setApprovalAction('approve')\n    setShowApproval(true)\n  }\n\n  const handleReject = requestId => {\n    const request = leaveRequestsData?.data?.find(r => r.id === requestId)\n    setSelectedRequest(request)\n    setApprovalAction('reject')\n    setShowApproval(true)\n  }\n\n  const handleViewDetails = request => {\n    setSelectedRequest(request)\n    setShowDetails(true)\n  }\n\n  const handleConfirmApproval = (requestId, remarks) => {\n    if (approvalAction === 'approve') {\n      approveMutation.mutate({ id: requestId, remarks })\n    } else {\n      rejectMutation.mutate({ id: requestId, remarks })\n    }\n  }\n\n  const filteredRequests =\n    leaveRequestsData?.data?.filter(request => {\n      const matchesSearch =\n        request.userName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        request.reason.toLowerCase().includes(searchTerm.toLowerCase())\n      const matchesStatus =\n        statusFilter === 'all' || request.status === statusFilter\n      const matchesType = typeFilter === 'all' || request.type === typeFilter\n      const matchesUserType =\n        userTypeFilter === 'all' || request.userType === userTypeFilter\n\n      return matchesSearch && matchesStatus && matchesType && matchesUserType\n    }) || []\n\n  const getStatusCounts = () => {\n    const requests = leaveRequestsData?.data || []\n    return {\n      total: requests.length,\n      pending: requests.filter(r => r.status === 'pending').length,\n      approved: requests.filter(r => r.status === 'approved').length,\n      rejected: requests.filter(r => r.status === 'rejected').length,\n    }\n  }\n\n  const counts = getStatusCounts()\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Leave Approval</h1>\n        <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n          <Download className=\"w-4 h-4\" />\n          Export Report\n        </button>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <FileText className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{counts.total}</p>\n              <p className=\"text-sm text-gray-600\">Total Requests</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{counts.pending}</p>\n              <p className=\"text-sm text-gray-600\">Pending</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{counts.approved}</p>\n              <p className=\"text-sm text-gray-600\">Approved</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <XCircle className=\"w-8 h-8 text-red-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{counts.rejected}</p>\n              <p className=\"text-sm text-gray-600\">Rejected</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search requests...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border rounded-lg\"\n            />\n          </div>\n          <select\n            value={statusFilter}\n            onChange={e => setStatusFilter(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Status</option>\n            <option value=\"pending\">Pending</option>\n            <option value=\"approved\">Approved</option>\n            <option value=\"rejected\">Rejected</option>\n          </select>\n          <select\n            value={typeFilter}\n            onChange={e => setTypeFilter(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Types</option>\n            <option value=\"sick\">Sick Leave</option>\n            <option value=\"personal\">Personal</option>\n            <option value=\"emergency\">Emergency</option>\n            <option value=\"vacation\">Vacation</option>\n          </select>\n          <select\n            value={userTypeFilter}\n            onChange={e => setUserTypeFilter(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Users</option>\n            <option value=\"student\">Students</option>\n            <option value=\"staff\">Staff</option>\n          </select>\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Filter className=\"w-4 h-4\" />\n            More Filters\n          </button>\n        </div>\n      </div>\n\n      {/* Leave Requests */}\n      <div className=\"space-y-4\">\n        {filteredRequests.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n            <MessageSquare className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              No Leave Requests\n            </h3>\n            <p className=\"text-gray-500\">\n              No leave requests match your current filters.\n            </p>\n          </div>\n        ) : (\n          filteredRequests.map(request => (\n            <LeaveRequestCard\n              key={request.id}\n              request={request}\n              onApprove={handleApprove}\n              onReject={handleReject}\n              onViewDetails={handleViewDetails}\n            />\n          ))\n        )}\n      </div>\n\n      {/* Details Dialog */}\n      <LeaveDetailsDialog\n        request={selectedRequest}\n        open={showDetails}\n        onClose={() => setShowDetails(false)}\n      />\n\n      {/* Approval Dialog */}\n      <ApprovalDialog\n        request={selectedRequest}\n        action={approvalAction}\n        open={showApproval}\n        onClose={() => setShowApproval(false)}\n        onConfirm={handleConfirmApproval}\n      />\n    </div>\n  )\n}\n\nexport default ApproveLeave\n"
        }
    ]
}