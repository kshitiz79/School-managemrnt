{
    "sourceFile": "src/pages/attendance/QrAttendance.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925598,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  QrCode,\n  Scan,\n  Calendar,\n  Clock,\n  Users,\n  CheckCircle,\n  XCircle,\n  RefreshCw,\n  Download,\n  Settings,\n  Smartphone,\n  Monitor,\n  AlertTriangle,\n  Eye,\n  EyeOff,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { qrAttendanceApi } from '../../lib/api/qrAttendance'\n\n// Mock QR Code Component (in real app, use a QR library like qrcode.js)\nconst QRCodeDisplay = ({ value, size = 200 }) => {\n  return (\n    <div\n      className=\"border-2 border-gray-300 flex items-center justify-center bg-white\"\n      style={{ width: size, height: size }}\n    >\n      <div className=\"text-center p-4\">\n        <QrCode className=\"w-16 h-16 mx-auto mb-2 text-gray-400\" />\n        <div className=\"text-xs text-gray-500 break-all\">{value}</div>\n      </div>\n    </div>\n  )\n}\n\nconst QRScanner = ({ onScan, isActive }) => {\n  const [scanResult, setScanResult] = useState('')\n  const [isScanning, setIsScanning] = useState(false)\n\n  // Mock scanner - in real app, integrate with camera API\n  const simulateScan = () => {\n    setIsScanning(true)\n    setTimeout(() => {\n      const mockQRData = `QR_ATT_${Date.now()}_CLASS_10_A_PERIOD_1`\n      setScanResult(mockQRData)\n      onScan(mockQRData)\n      setIsScanning(false)\n    }, 2000)\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n        {isActive ? (\n          <div className=\"space-y-4\">\n            <div className=\"w-48 h-48 mx-auto border-2 border-blue-500 rounded-lg flex items-center justify-center bg-blue-50\">\n              {isScanning ? (\n                <div className=\"text-center\">\n                  <RefreshCw className=\"w-12 h-12 mx-auto mb-2 text-blue-600 animate-spin\" />\n                  <p className=\"text-blue-600\">Scanning...</p>\n                </div>\n              ) : (\n                <div className=\"text-center\">\n                  <Scan className=\"w-12 h-12 mx-auto mb-2 text-blue-600\" />\n                  <p className=\"text-blue-600\">Position QR code here</p>\n                </div>\n              )}\n            </div>\n            <button\n              onClick={simulateScan}\n              disabled={isScanning}\n              className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {isScanning ? 'Scanning...' : 'Simulate Scan'}\n            </button>\n          </div>\n        ) : (\n          <div className=\"text-gray-400\">\n            <Scan className=\"w-12 h-12 mx-auto mb-2\" />\n            <p>Scanner inactive</p>\n          </div>\n        )}\n      </div>\n\n      {scanResult && (\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n          <div className=\"flex items-center gap-2 text-green-800\">\n            <CheckCircle className=\"w-5 h-5\" />\n            <span className=\"font-medium\">Scan successful!</span>\n          </div>\n          <p className=\"text-sm text-green-700 mt-1\">Data: {scanResult}</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst QRGenerationPanel = ({ classData, onGenerate, generatedQR }) => {\n  const [selectedClass, setSelectedClass] = useState('')\n  const [selectedSection, setSelectedSection] = useState('')\n  const [selectedPeriod, setSelectedPeriod] = useState('')\n  const [qrType, setQrType] = useState('period') // period, daily\n  const [expiryMinutes, setExpiryMinutes] = useState(30)\n\n  const handleGenerate = () => {\n    const qrData = {\n      type: qrType,\n      classId: selectedClass,\n      section: selectedSection,\n      period: qrType === 'period' ? selectedPeriod : null,\n      date: new Date().toISOString().split('T')[0],\n      timestamp: Date.now(),\n      expiresAt: Date.now() + expiryMinutes * 60 * 1000,\n    }\n\n    onGenerate(qrData)\n  }\n\n  const periods = ['1', '2', '3', '4', '5', '6', '7', '8']\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium\">Generate QR Code</h3>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Type</label>\n              <select\n                value={qrType}\n                onChange={e => setQrType(e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"daily\">Daily Attendance</option>\n                <option value=\"period\">Period Wise</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Expires In (minutes)\n              </label>\n              <input\n                type=\"number\"\n                value={expiryMinutes}\n                onChange={e => setExpiryMinutes(parseInt(e.target.value))}\n                min=\"5\"\n                max=\"480\"\n                className=\"w-full border rounded-lg px-3 py-2\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Class</label>\n              <select\n                value={selectedClass}\n                onChange={e => setSelectedClass(e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"\">Select Class</option>\n                {classData?.map(cls => (\n                  <option key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Section</label>\n              <select\n                value={selectedSection}\n                onChange={e => setSelectedSection(e.target.value)}\n                disabled={!selectedClass}\n                className=\"w-full border rounded-lg px-3 py-2 disabled:bg-gray-100\"\n              >\n                <option value=\"\">Select Section</option>\n                <option value=\"A\">Section A</option>\n                <option value=\"B\">Section B</option>\n                <option value=\"C\">Section C</option>\n              </select>\n            </div>\n          </div>\n\n          {qrType === 'period' && (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Period</label>\n              <select\n                value={selectedPeriod}\n                onChange={e => setSelectedPeriod(e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"\">Select Period</option>\n                {Array.isArray(periods) &&\n                  periods.map(period => (\n                    <option key={period} value={period}>\n                      Period {period}\n                    </option>\n                  ))}\n              </select>\n            </div>\n          )}\n\n          <button\n            onClick={handleGenerate}\n            disabled={\n              !selectedClass ||\n              !selectedSection ||\n              (qrType === 'period' && !selectedPeriod)\n            }\n            className=\"w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n          >\n            <QrCode className=\"w-4 h-4\" />\n            Generate QR Code\n          </button>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium\">Generated QR Code</h3>\n          {generatedQR ? (\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-center\">\n                <QRCodeDisplay value={JSON.stringify(generatedQR)} size={200} />\n              </div>\n              <div className=\"bg-gray-50 p-4 rounded-lg text-sm\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div>\n                    <strong>Type:</strong> {generatedQR.type}\n                  </div>\n                  <div>\n                    <strong>Class:</strong> {generatedQR.classId}\n                  </div>\n                  <div>\n                    <strong>Section:</strong> {generatedQR.section}\n                  </div>\n                  {generatedQR.period && (\n                    <div>\n                      <strong>Period:</strong> {generatedQR.period}\n                    </div>\n                  )}\n                  <div>\n                    <strong>Date:</strong> {generatedQR.date}\n                  </div>\n                  <div>\n                    <strong>Expires:</strong>{' '}\n                    {new Date(generatedQR.expiresAt).toLocaleTimeString()}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <button className=\"flex-1 border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center justify-center gap-2\">\n                  <Download className=\"w-4 h-4\" />\n                  Download\n                </button>\n                <button className=\"flex-1 border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center justify-center gap-2\">\n                  <Monitor className=\"w-4 h-4\" />\n                  Display\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center text-gray-500\">\n              <QrCode className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n              <p>QR code will appear here</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst ScanEventsList = ({ events }) => {\n  if (!events || events.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <Scan className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n        <p>No scan events recorded</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      {Array.isArray(events) &&\n        events.map((event, index) => (\n          <div\n            key={index}\n            className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <div\n                className={`w-2 h-2 rounded-full ${\n                  event.status === 'success'\n                    ? 'bg-green-500'\n                    : event.status === 'duplicate'\n                      ? 'bg-yellow-500'\n                      : 'bg-red-500'\n                }`}\n              />\n              <div>\n                <div className=\"font-medium\">{event.studentName}</div>\n                <div className=\"text-sm text-gray-500\">\n                  {event.className} - {event.section}\n                  {event.period && ` • Period ${event.period}`}\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm font-medium\">\n                {new Date(event.timestamp).toLocaleTimeString()}\n              </div>\n              <div\n                className={`text-xs ${\n                  event.status === 'success'\n                    ? 'text-green-600'\n                    : event.status === 'duplicate'\n                      ? 'text-yellow-600'\n                      : 'text-red-600'\n                }`}\n              >\n                {event.status === 'success'\n                  ? 'Marked Present'\n                  : event.status === 'duplicate'\n                    ? 'Already Marked'\n                    : 'Failed'}\n              </div>\n            </div>\n          </div>\n        ))}\n    </div>\n  )\n}\n\nconst QrAttendance = () => {\n  const [activeTab, setActiveTab] = useState('generate') // generate, scan, events\n  const [generatedQR, setGeneratedQR] = useState(null)\n  const [scannerActive, setScannerActive] = useState(false)\n  const [scanEvents, setScanEvents] = useState([])\n  const [showSettings, setShowSettings] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => qrAttendanceApi.getClasses(),\n  })\n\n  const { data: scanEventsData } = useQuery({\n    queryKey: [\n      'qr-attendance',\n      'scan-events',\n      new Date().toISOString().split('T')[0],\n    ],\n    queryFn: () =>\n      qrAttendanceApi.getScanEvents(new Date().toISOString().split('T')[0]),\n  })\n\n  const generateQRMutation = useMutation({\n    mutationFn: qrAttendanceApi.generateQR,\n    onSuccess: data => {\n      setGeneratedQR(data)\n    },\n  })\n\n  const processScanMutation = useMutation({\n    mutationFn: qrAttendanceApi.processScan,\n    onSuccess: data => {\n      setScanEvents(prev => [data, ...prev])\n      queryClient.invalidateQueries(['qr-attendance', 'scan-events'])\n    },\n  })\n\n  const handleGenerateQR = qrData => {\n    generateQRMutation.mutate(qrData)\n  }\n\n  const handleScan = qrData => {\n    try {\n      const parsedData = JSON.parse(qrData)\n\n      // Validate QR code\n      if (parsedData.expiresAt < Date.now()) {\n        alert('QR code has expired')\n        return\n      }\n\n      // Process scan\n      processScanMutation.mutate({\n        qrData: parsedData,\n        studentId: 'student-1', // In real app, get from authentication\n        timestamp: Date.now(),\n      })\n    } catch (error) {\n      alert('Invalid QR code')\n    }\n  }\n\n  // Auto-refresh QR code every 30 minutes\n  useEffect(() => {\n    if (generatedQR) {\n      const interval = setInterval(() => {\n        if (generatedQR.expiresAt < Date.now()) {\n          setGeneratedQR(null)\n        }\n      }, 60000) // Check every minute\n\n      return () => clearInterval(interval)\n    }\n  }, [generatedQR])\n\n  const getTabIcon = tab => {\n    switch (tab) {\n      case 'generate':\n        return QrCode\n      case 'scan':\n        return Scan\n      case 'events':\n        return Clock\n      default:\n        return QrCode\n    }\n  }\n\n  const tabs = [\n    { id: 'generate', label: 'Generate QR', icon: QrCode },\n    { id: 'scan', label: 'Scan QR', icon: Scan },\n    { id: 'events', label: 'Scan Events', icon: Clock },\n  ]\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">QR Code Attendance</h1>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setShowSettings(true)}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n          >\n            <Settings className=\"w-4 h-4\" />\n            Settings\n          </button>\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export Events\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <QrCode className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{generatedQR ? 1 : 0}</p>\n              <p className=\"text-sm text-gray-600\">Active QR Codes</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Scan className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {scanEventsData?.data?.length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Today's Scans</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {scanEventsData?.data?.filter(e => e.status === 'success')\n                  .length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Successful</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <XCircle className=\"w-8 h-8 text-red-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {scanEventsData?.data?.filter(e => e.status === 'failed')\n                  .length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Failed</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"border-b\">\n          <nav className=\"flex\">\n            {Array.isArray(tabs) &&\n              tabs.map(tab => {\n                const Icon = tab.icon\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`flex items-center gap-2 px-6 py-4 font-medium ${\n                      activeTab === tab.id\n                        ? 'border-b-2 border-blue-500 text-blue-600'\n                        : 'text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {tab.label}\n                  </button>\n                )\n              })}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'generate' && (\n            <QRGenerationPanel\n              classData={classesData?.data}\n              onGenerate={handleGenerateQR}\n              generatedQR={generatedQR}\n            />\n          )}\n\n          {activeTab === 'scan' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"font-medium\">QR Code Scanner</h3>\n                <button\n                  onClick={() => setScannerActive(!scannerActive)}\n                  className={`px-4 py-2 rounded-lg flex items-center gap-2 ${\n                    scannerActive\n                      ? 'bg-red-100 text-red-700 hover:bg-red-200'\n                      : 'bg-green-100 text-green-700 hover:bg-green-200'\n                  }`}\n                >\n                  {scannerActive ? (\n                    <EyeOff className=\"w-4 h-4\" />\n                  ) : (\n                    <Eye className=\"w-4 h-4\" />\n                  )}\n                  {scannerActive ? 'Stop Scanner' : 'Start Scanner'}\n                </button>\n              </div>\n\n              <QRScanner onScan={handleScan} isActive={scannerActive} />\n\n              {scanEvents.length > 0 && (\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">Recent Scans</h4>\n                  <ScanEventsList events={scanEvents.slice(0, 5)} />\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'events' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"font-medium\">Today's Scan Events</h3>\n                <div className=\"text-sm text-gray-500\">\n                  {new Date().toLocaleDateString()}\n                </div>\n              </div>\n\n              <ScanEventsList events={scanEventsData?.data || []} />\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Settings Dialog */}\n      <Dialog\n        open={showSettings}\n        onClose={() => setShowSettings(false)}\n        title=\"QR Attendance Settings\"\n      >\n        <div className=\"space-y-6\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">\n              Default QR Expiry (minutes)\n            </label>\n            <input\n              type=\"number\"\n              defaultValue={30}\n              min=\"5\"\n              max=\"480\"\n              className=\"w-full border rounded-lg px-3 py-2\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">\n              Auto-refresh QR Codes\n            </label>\n            <label className=\"flex items-center gap-2\">\n              <input type=\"checkbox\" defaultChecked />\n              <span className=\"text-sm\">\n                Automatically refresh expired QR codes\n              </span>\n            </label>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">\n              Duplicate Scan Prevention\n            </label>\n            <label className=\"flex items-center gap-2\">\n              <input type=\"checkbox\" defaultChecked />\n              <span className=\"text-sm\">\n                Prevent duplicate scans within same period\n              </span>\n            </label>\n          </div>\n\n          <div className=\"flex justify-end gap-2\">\n            <button\n              onClick={() => setShowSettings(false)}\n              className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={() => setShowSettings(false)}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            >\n              Save Settings\n            </button>\n          </div>\n        </div>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default QrAttendance\n"
        }
    ]
}