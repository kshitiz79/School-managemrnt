{
    "sourceFile": "src/pages/attendance/AttendanceByDate.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755988587612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755988587612,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  Calendar,\n  Users,\n  CheckCircle,\n  XCircle,\n  Clock,\n  TrendingUp,\n  Download,\n  Filter,\n  Search,\n  BarChart3,\n  PieChart\n} from 'lucide-react';\nimport Input from '../../components/ui/Input';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport { attendanceApi } from '../../lib/api/attendance';\n\nconst AttendanceChart = ({ data, type = 'bar' }) => {\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <BarChart3 className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n        <p>No data available for chart</p>\n      </div>\n    );\n  }\n\n  if (type === 'pie') {\n    const total = data.reduce((sum, item) => sum + item.value, 0);\n    return (\n      <div className=\"flex items-center justify-center\">\n        <div className=\"relative w-48 h-48\">\n          <svg className=\"w-full h-full transform -rotate-90\" viewBox=\"0 0 100 100\">\n            {Array.isArray(data) && data.map((item, index) => {\n              const percentage = (item.value / total) * 100;\n              const strokeDasharray = `${percentage} ${100 - percentage}`;\n              const strokeDashoffset = data.slice(0, index).reduce((sum, prev) => sum + (prev.value / total) * 100, 0);\n              \n              return (\n                <circle\n                  key={index}\n                  cx=\"50\"\n                  cy=\"50\"\n                  r=\"15.915\"\n                  fill=\"transparent\"\n                  stroke={item.color}\n                  strokeWidth=\"8\"\n                  strokeDasharray={strokeDasharray}\n                  strokeDashoffset={-strokeDashoffset}\n                  className=\"transition-all duration-300\"\n                />\n              );\n            })}\n          </svg>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">{total}</div>\n              <div className=\"text-sm text-gray-500\">Total</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"ml-6 space-y-2\">\n          {Array.isArray(data) && data.map((item, index) => (\n            <div key={index} className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full`} style={{ backgroundColor: item.color }}></div>\n              <span className=\"text-sm\">{item.label}: {item.value}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"font-medium\">Attendance Overview</h3>\n        <div className=\"text-sm text-gray-500\">\n          Total: {data.reduce((sum, item) => sum + item.present + item.absent + item.late, 0)} students\n        </div>\n      </div>\n      <div className=\"space-y-2\">\n        {Array.isArray(data) && data.map((item, index) => (\n          <div key={index} className=\"space-y-1\">\n            <div className=\"flex justify-between text-sm\">\n              <span>{item.className} - {item.section}</span>\n              <span>{Math.round((item.present / (item.present + item.absent + item.late)) * 100)}%</span>\n            </div>\n            <div className=\"flex h-4 bg-gray-200 rounded overflow-hidden\">\n              <div \n                className=\"bg-green-500\" \n                style={{ width: `${(item.present / (item.present + item.absent + item.late)) * 100}%` }}\n              />\n              <div \n                className=\"bg-red-500\" \n                style={{ width: `${(item.absent / (item.present + item.absent + item.late)) * 100}%` }}\n              />\n              <div \n                className=\"bg-yellow-500\" \n                style={{ width: `${(item.late / (item.present + item.absent + item.late)) * 100}%` }}\n              />\n            </div>\n            <div className=\"flex justify-between text-xs text-gray-500\">\n              <span>Present: {item.present}</span>\n              <span>Absent: {item.absent}</span>\n              <span>Late: {item.late}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst AttendanceSummaryCard = ({ title, value, total, icon: Icon, color }) => {\n  const percentage = total > 0 ? Math.round((value / total) * 100) : 0;\n  \n  return (\n    <div className=\"bg-white p-4 rounded-lg shadow\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm text-gray-600\">{title}</p>\n          <p className=\"text-2xl font-bold\">{value}</p>\n          <p className=\"text-sm text-gray-500\">{percentage}% of total</p>\n        </div>\n        <Icon className={`w-8 h-8 ${color}`} />\n      </div>\n    </div>\n  );\n};\n\nconst ClassAttendanceTable = ({ data, onClassClick }) => {\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <Users className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n        <p>No attendance data available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"border-b\">\n            <th className=\"text-left py-3 px-4\">Class</th>\n            <th className=\"text-left py-3 px-4\">Section</th>\n            <th className=\"text-center py-3 px-4\">Total</th>\n            <th className=\"text-center py-3 px-4\">Present</th>\n            <th className=\"text-center py-3 px-4\">Absent</th>\n            <th className=\"text-center py-3 px-4\">Late</th>\n            <th className=\"text-center py-3 px-4\">Attendance %</th>\n            <th className=\"text-center py-3 px-4\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.isArray(data) && data.map((classData, index) => {\n            const total = classData.present + classData.absent + classData.late;\n            const percentage = total > 0 ? Math.round((classData.present / total) * 100) : 0;\n            \n            return (\n              <tr key={index} className=\"border-b hover:bg-gray-50\">\n                <td className=\"py-3 px-4 font-medium\">{classData.className}</td>\n                <td className=\"py-3 px-4\">{classData.section}</td>\n                <td className=\"py-3 px-4 text-center\">{total}</td>\n                <td className=\"py-3 px-4 text-center\">\n                  <span className=\"inline-flex items-center gap-1 text-green-600\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    {classData.present}\n                  </span>\n                </td>\n                <td className=\"py-3 px-4 text-center\">\n                  <span className=\"inline-flex items-center gap-1 text-red-600\">\n                    <XCircle className=\"w-4 h-4\" />\n                    {classData.absent}\n                  </span>\n                </td>\n                <td className=\"py-3 px-4 text-center\">\n                  <span className=\"inline-flex items-center gap-1 text-yellow-600\">\n                    <Clock className=\"w-4 h-4\" />\n                    {classData.late}\n                  </span>\n                </td>\n                <td className=\"py-3 px-4 text-center\">\n                  <span className={`font-medium ${\n                    percentage >= 90 ? 'text-green-600' : \n                    percentage >= 75 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {percentage}%\n                  </span>\n                </td>\n                <td className=\"py-3 px-4 text-center\">\n                  <button\n                    onClick={() => onClassClick(classData)}\n                    className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\"\n                  >\n                    View Details\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst AttendanceByDate = () => {\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [viewType, setViewType] = useState('summary'); // summary, chart, table\n  const [chartType, setChartType] = useState('bar');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [classFilter, setClassFilter] = useState('all');\n\n  const { data: attendanceData, isLoading } = useQuery({\n    queryKey: ['attendance', 'by-date', selectedDate],\n    queryFn: () => attendanceApi.getByDate(selectedDate)\n  });\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => attendanceApi.getClasses()\n  });\n\n  const handleClassClick = (classData) => {\n    // Navigate to detailed view or show modal\n    console.log('View details for:', classData);\n  };\n\n  const getOverallStats = () => {\n    if (!attendanceData?.data) return { total: 0, present: 0, absent: 0, late: 0 };\n    \n    return Array.isArray(attendanceData.data) ? attendanceData.data.reduce((acc, classData) => ({\n      total: acc.total + classData.present + classData.absent + classData.late,\n      present: acc.present + classData.present,\n      absent: acc.absent + classData.absent,\n      late: acc.late + classData.late\n    }), { total: 0, present: 0, absent: 0, late: 0 }) : { total: 0, present: 0, absent: 0, late: 0 };\n  };\n\n  const getChartData = () => {\n    if (!attendanceData?.data) return [];\n    \n    if (chartType === 'pie') {\n      const stats = getOverallStats();\n      return [\n        { label: 'Present', value: stats.present, color: '#10b981' },\n        { label: 'Absent', value: stats.absent, color: '#ef4444' },\n        { label: 'Late', value: stats.late, color: '#f59e0b' }\n      ];\n    }\n    \n    return attendanceData.data;\n  };\n\n  const filteredData = attendanceData?.data?.filter(classData => {\n    const matchesSearch = classData.className.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         classData.section.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesClass = classFilter === 'all' || classData.classId === classFilter;\n    \n    return matchesSearch && matchesClass;\n  }) || [];\n\n  const stats = getOverallStats();\n\n  if (isLoading) return <LoadingSkeleton />;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Attendance by Date</h1>\n        <div className=\"flex gap-2\">\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <TrendingUp className=\"w-4 h-4\" />\n            Compare Dates\n          </button>\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export Report\n          </button>\n        </div>\n      </div>\n\n      {/* Date Selection and Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <Input\n            label=\"Select Date\"\n            type=\"date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e.target.value)}\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">View Type</label>\n            <select\n              value={viewType}\n              onChange={(e) => setViewType(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"summary\">Summary</option>\n              <option value=\"chart\">Chart View</option>\n              <option value=\"table\">Table View</option>\n            </select>\n          </div>\n          {viewType === 'chart' && (\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Chart Type</label>\n              <select\n                value={chartType}\n                onChange={(e) => setChartType(e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"bar\">Bar Chart</option>\n                <option value=\"pie\">Pie Chart</option>\n              </select>\n            </div>\n          )}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4 mt-6\" />\n            <Input\n              label=\"Search Classes\"\n              type=\"text\"\n              placeholder=\"Search by class or section...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Filter by Class</label>\n            <select\n              value={classFilter}\n              onChange={(e) => setClassFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Classes</option>\n              {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n                <option key={cls.id} value={cls.id}>\n                  {cls.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Overall Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <AttendanceSummaryCard\n          title=\"Total Students\"\n          value={stats.total}\n          total={stats.total}\n          icon={Users}\n          color=\"text-blue-600\"\n        />\n        <AttendanceSummaryCard\n          title=\"Present\"\n          value={stats.present}\n          total={stats.total}\n          icon={CheckCircle}\n          color=\"text-green-600\"\n        />\n        <AttendanceSummaryCard\n          title=\"Absent\"\n          value={stats.absent}\n          total={stats.total}\n          icon={XCircle}\n          color=\"text-red-600\"\n        />\n        <AttendanceSummaryCard\n          title=\"Late\"\n          value={stats.late}\n          total={stats.total}\n          icon={Clock}\n          color=\"text-yellow-600\"\n        />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-lg font-medium\">\n            Attendance for {new Date(selectedDate).toLocaleDateString('en-US', { \n              weekday: 'long', \n              year: 'numeric', \n              month: 'long', \n              day: 'numeric' \n            })}\n          </h2>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setViewType('summary')}\n              className={`px-3 py-1 rounded text-sm ${\n                viewType === 'summary' ? 'bg-blue-100 text-blue-700' : 'text-gray-600 hover:bg-gray-100'\n              }`}\n            >\n              Summary\n            </button>\n            <button\n              onClick={() => setViewType('chart')}\n              className={`px-3 py-1 rounded text-sm ${\n                viewType === 'chart' ? 'bg-blue-100 text-blue-700' : 'text-gray-600 hover:bg-gray-100'\n              }`}\n            >\n              <BarChart3 className=\"w-4 h-4 inline mr-1\" />\n              Chart\n            </button>\n            <button\n              onClick={() => setViewType('table')}\n              className={`px-3 py-1 rounded text-sm ${\n                viewType === 'table' ? 'bg-blue-100 text-blue-700' : 'text-gray-600 hover:bg-gray-100'\n              }`}\n            >\n              Table\n            </button>\n          </div>\n        </div>\n\n        {viewType === 'summary' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <AttendanceChart data={filteredData} type=\"bar\" />\n            <AttendanceChart data={getChartData()} type=\"pie\" />\n          </div>\n        )}\n\n        {viewType === 'chart' && (\n          <AttendanceChart data={getChartData()} type={chartType} />\n        )}\n\n        {viewType === 'table' && (\n          <ClassAttendanceTable data={filteredData} onClassClick={handleClassClick} />\n        )}\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-medium mb-4\">Quick Actions</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\">\n            <Calendar className=\"w-6 h-6 text-blue-600 mb-2\" />\n            <h4 className=\"font-medium\">Mark Today's Attendance</h4>\n            <p className=\"text-sm text-gray-600\">Quickly mark attendance for all classes</p>\n          </button>\n          <button className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\">\n            <TrendingUp className=\"w-6 h-6 text-green-600 mb-2\" />\n            <h4 className=\"font-medium\">View Trends</h4>\n            <p className=\"text-sm text-gray-600\">Analyze attendance patterns over time</p>\n          </button>\n          <button className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\">\n            <Download className=\"w-6 h-6 text-purple-600 mb-2\" />\n            <h4 className=\"font-medium\">Generate Report</h4>\n            <p className=\"text-sm text-gray-600\">Create detailed attendance reports</p>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AttendanceByDate;"
        }
    ]
}