{
    "sourceFile": "src/pages/exams/ExamResult.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755986163482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755991757047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n-import React, { useState, useRef } from 'react';\n-import { useState, useRef } from 'react'\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n-import { \n+import React, { useState, useRef } from 'react'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n   FileSpreadsheet,\n   Upload,\n   Download,\n   Save,\n@@ -16,141 +15,161 @@\n   Award,\n   Users,\n   Filter,\n   Search,\n-  RefreshCw\n-} from 'lucide-react';\n-import Input from '../../components/ui/Input';\n-import Dialog from '../../components/ui/Dialog';\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n-import { examApi } from '../../lib/api/exams';\n+  RefreshCw,\n+} from 'lucide-react'\n+import Input from '../../components/ui/Input'\n+import Dialog from '../../components/ui/Dialog'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import { examApi } from '../../lib/api/exams'\n \n-const MarksEntryGrid = ({ examSchedule, students, marks, onMarksChange, onSave, isPublished }) => {\n-  const [selectedCell, setSelectedCell] = useState(null);\n-  const [editingCell, setEditingCell] = useState(null);\n-  const [tempValue, setTempValue] = useState('');\n-  const gridRef = useRef(null);\n+const MarksEntryGrid = ({\n+  examSchedule,\n+  students,\n+  marks,\n+  onMarksChange,\n+  onSave,\n+  isPublished,\n+}) => {\n+  const [selectedCell, setSelectedCell] = useState(null)\n+  const [editingCell, setEditingCell] = useState(null)\n+  const [tempValue, setTempValue] = useState('')\n+  const gridRef = useRef(null)\n \n   const handleCellClick = (studentId, field) => {\n-    if (isPublished) return;\n-    setSelectedCell({ studentId, field });\n-    setEditingCell({ studentId, field });\n-    const currentValue = getFieldValue(studentId, field);\n-    setTempValue(currentValue?.toString() || '');\n+    if (isPublished) return\n+    setSelectedCell({ studentId, field })\n+    setEditingCell({ studentId, field })\n+    const currentValue = getFieldValue(studentId, field)\n+    setTempValue(currentValue?.toString() || '')\n   };\n \n   const handleCellKeyDown = (e, studentId, field) => {\n-    if (isPublished) return;\n+    if (isPublished) return\n     \n     switch (e.key) {\n       case 'Enter':\n-        handleCellSave();\n+        handleCellSave()\n         // Move to next row\n-        const currentIndex = students.findIndex(s => s.id === studentId);\n+        const currentIndex = students.findIndex(s => s.id === studentId)\n         if (currentIndex < students.length - 1) {\n-          const nextStudent = students[currentIndex + 1];\n-          handleCellClick(nextStudent.id, field);\n+          const nextStudent = students[currentIndex + 1]\n+          handleCellClick(nextStudent.id, field)\n         }\n-        break;\n+        break\n       case 'Tab':\n-        e.preventDefault();\n-        handleCellSave();\n+        e.preventDefault()\n+        handleCellSave()\n         // Move to next column or next row\n         if (field === 'marksObtained') {\n-          handleCellClick(studentId, 'remarks');\n+          handleCellClick(studentId, 'remarks')\n         } else {\n-          const currentIndex = students.findIndex(s => s.id === studentId);\n+          const currentIndex = students.findIndex(s => s.id === studentId)\n           if (currentIndex < students.length - 1) {\n-            const nextStudent = students[currentIndex + 1];\n-            handleCellClick(nextStudent.id, 'marksObtained');\n+            const nextStudent = students[currentIndex + 1]\n+            handleCellClick(nextStudent.id, 'marksObtained')\n           }\n         }\n-        break;\n+        break\n       case 'Escape':\n-        setEditingCell(null);\n-        setSelectedCell(null);\n-        setTempValue('');\n+        setEditingCell(null)\n+        setSelectedCell(null)\n+        setTempValue('')\n         break;\n     }\n-  };\n+  }\n \n   const handleCellSave = () => {\n     if (editingCell) {\n-      const { studentId, field } = editingCell;\n-      let value = tempValue;\n+      const { studentId, field } = editingCell\n+      let value = tempValue\n       \n       if (field === 'marksObtained') {\n         // Validate marks\n         if (value === 'AB' || value === 'ab') {\n-          value = 'AB';\n+          value = 'AB'\n         } else {\n-          const numValue = parseFloat(value);\n+          const numValue = parseFloat(value)\n           if (isNaN(numValue)) {\n-            value = '';\n+            value = ''\n           } else if (numValue < 0) {\n-            value = 0;\n+            value = 0\n           } else if (numValue > examSchedule.maxMarks) {\n-            value = examSchedule.maxMarks;\n+            value = examSchedule.maxMarks\n           } else {\n-            value = numValue;\n+            value = numValue\n           }\n         }\n       }\n-      \n-      onMarksChange(studentId, field, value);\n+\n+      onMarksChange(studentId, field, value)\n     }\n-    \n-    setEditingCell(null);\n-    setSelectedCell(null);\n-    setTempValue('');\n+\n+    setEditingCell(null)\n+    setSelectedCell(null)\n+    setTempValue('')\n   };\n \n   const getFieldValue = (studentId, field) => {\n-    const studentMark = marks.find(m => m.studentId === studentId);\n-    return studentMark ? studentMark[field] : '';\n+    const studentMark = marks.find(m => m.studentId === studentId)\n+    return studentMark ? studentMark[field] : ''\n   };\n \n   const calculateGrade = (marksObtained, maxMarks) => {\n-    if (marksObtained === 'AB') return 'AB';\n-    if (!marksObtained || marksObtained === '') return '';\n+    if (marksObtained === 'AB') return 'AB'\n+    if (!marksObtained || marksObtained === '') return ''\n     \n-    const percentage = (marksObtained / maxMarks) * 100;\n+    const percentage = (marksObtained / maxMarks) * 100\n     \n-    if (percentage >= 91) return 'A+';\n-    if (percentage >= 81) return 'A';\n-    if (percentage >= 71) return 'B+';\n-    if (percentage >= 61) return 'B';\n-    if (percentage >= 51) return 'C+';\n-    if (percentage >= 41) return 'C';\n-    if (percentage >= 33) return 'D';\n-    return 'E';\n+    if (percentage >= 91) return 'A+'\n+    if (percentage >= 81) return 'A'\n+    if (percentage >= 71) return 'B+'\n+    if (percentage >= 61) return 'B'\n+    if (percentage >= 51) return 'C+'\n+    if (percentage >= 41) return 'C'\n+    if (percentage >= 33) return 'D'\n+    return 'E'\n   };\n \n-  const getGradeColor = (grade) => {\n+  const getGradeColor = grade => {\n     switch (grade) {\n-      case 'A+': case 'A': return 'text-green-600 bg-green-50';\n-      case 'B+': case 'B': return 'text-blue-600 bg-blue-50';\n-      case 'C+': case 'C': return 'text-yellow-600 bg-yellow-50';\n-      case 'D': case 'E': return 'text-red-600 bg-red-50';\n-      case 'AB': return 'text-gray-600 bg-gray-50';\n-      default: return '';\n+      case 'A+':\n+      case 'A':\n+        return 'text-green-600 bg-green-50'\n+      case 'B+':\n+      case 'B':\n+        return 'text-blue-600 bg-blue-50'\n+      case 'C+':\n+      case 'C':\n+        return 'text-yellow-600 bg-yellow-50'\n+      case 'D':\n+      case 'E':\n+        return 'text-red-600 bg-red-50'\n+      case 'AB':\n+        return 'text-gray-600 bg-gray-50'\n+      default:\n+        return ''\n     }\n-  };\n+  }\n \n   const isValidMarks = (value, maxMarks) => {\n-    if (value === 'AB' || value === '') return true;\n-    const numValue = parseFloat(value);\n-    return !isNaN(numValue) && numValue >= 0 && numValue <= maxMarks;\n+    if (value === 'AB' || value === '') return true\n+    const numValue = parseFloat(value)\n+    return !isNaN(numValue) && numValue >= 0 && numValue <= maxMarks\n   };\n \n   return (\n     <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n       <div className=\"p-4 border-b bg-gray-50\">\n         <div className=\"flex justify-between items-center\">\n           <div>\n-            <h3 className=\"font-medium\">{examSchedule.subjectName} - {examSchedule.className}</h3>\n+            <h3 className=\"font-medium\">\n+              {examSchedule.subjectName} - {examSchedule.className}\n+            </h3>\n             <p className=\"text-sm text-gray-600\">\n-              Max Marks: {examSchedule.maxMarks} | Pass Marks: {examSchedule.passMarks}\n+              Max Marks: {examSchedule.maxMarks} | Pass Marks:{' '}\n+              {examSchedule.passMarks}\n             </p>\n           </div>\n           <div className=\"flex gap-2\">\n             {!isPublished && (\n@@ -189,101 +208,132 @@\n               <th className=\"text-left py-3 px-4\">Remarks</th>\n             </tr>\n           </thead>\n           <tbody>\n-            {Array.isArray(students) && students.map((student, index) => {\n-              const marksObtained = getFieldValue(student.id, 'marksObtained');\n-              const remarks = getFieldValue(student.id, 'remarks');\n-              const grade = calculateGrade(marksObtained, examSchedule.maxMarks);\n-              const isPass = marksObtained !== 'AB' && marksObtained >= examSchedule.passMarks;\n-              const isAbsent = marksObtained === 'AB';\n+            {Array.isArray(students) &&\n+              students.map((student, index) => {\n+                const marksObtained = getFieldValue(student.id, 'marksObtained')\n+                const remarks = getFieldValue(student.id, 'remarks')\n+                const grade = calculateGrade(\n+                  marksObtained,\n+                  examSchedule.maxMarks\n+                )\n+                const isPass =\n+                  marksObtained !== 'AB' &&\n+                  marksObtained >= examSchedule.passMarks\n+                const isAbsent = marksObtained === 'AB'\n \n-              return (\n-                <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n-                  <td className=\"py-2 px-4 border-r text-center\">{index + 1}</td>\n-                  <td className=\"py-2 px-4 border-r font-medium\">{student.rollNumber}</td>\n-                  <td className=\"py-2 px-4 border-r\">{student.name}</td>\n-                  \n+                return (\n+                  <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n+                    <td className=\"py-2 px-4 border-r text-center\">\n+                      {index + 1}\n+                    </td>\n+                    <td className=\"py-2 px-4 border-r font-medium\">\n+                      {student.rollNumber}\n+                    </td>\n+                    <td className=\"py-2 px-4 border-r\">{student.name}</td>\n+\n                   {/* Marks Input Cell */}\n-                  <td className=\"py-2 px-4 border-r text-center\">\n-                    {editingCell?.studentId === student.id && editingCell?.field === 'marksObtained' ? (\n-                      <input\n-                        type=\"text\"\n-                        value={tempValue}\n-                        onChange={(e) => setTempValue(e.target.value)}\n-                        onBlur={handleCellSave}\n-                        onKeyDown={(e) => handleCellKeyDown(e, student.id, 'marksObtained')}\n-                        className={`w-20 px-2 py-1 border rounded text-center ${\n-                          !isValidMarks(tempValue, examSchedule.maxMarks) ? 'border-red-500' : ''\n-                        }`}\n-                        placeholder=\"0 or AB\"\n-                        autoFocus\n-                      />\n-                    ) : (\n-                      <div\n-                        onClick={() => handleCellClick(student.id, 'marksObtained')}\n-                        className={`w-20 mx-auto px-2 py-1 rounded cursor-pointer hover:bg-gray-100 ${\n-                          selectedCell?.studentId === student.id && selectedCell?.field === 'marksObtained'\n-                            ? 'ring-2 ring-blue-500'\n-                            : ''\n-                        } ${isPublished ? 'cursor-not-allowed' : ''}`}\n+                    <td className=\"py-2 px-4 border-r text-center\">\n+                      {editingCell?.studentId === student.id &&\n+                      editingCell?.field === 'marksObtained' ? (\n+                        <input\n+                          type=\"text\"\n+                          value={tempValue}\n+                          onChange={e => setTempValue(e.target.value)}\n+                          onBlur={handleCellSave}\n+                          onKeyDown={e =>\n+                            handleCellKeyDown(e, student.id, 'marksObtained')\n+                          }\n+                          className={`w-20 px-2 py-1 border rounded text-center ${\n+                            !isValidMarks(tempValue, examSchedule.maxMarks)\n+                              ? 'border-red-500'\n+                              : ''\n+                          }`}\n+                          placeholder=\"0 or AB\"\n+                          autoFocus\n+                        />\n+                      ) : (\n+                        <div\n+                          onClick={() =>\n+                            handleCellClick(student.id, 'marksObtained')\n+                          }\n+                          className={`w-20 mx-auto px-2 py-1 rounded cursor-pointer hover:bg-gray-100 ${\n+                            selectedCell?.studentId === student.id &&\n+                            selectedCell?.field === 'marksObtained'\n+                              ? 'ring-2 ring-blue-500'\n+                              : ''\n+                          } ${isPublished ? 'cursor-not-allowed' : ''}`}\n+                        >\n+                          {marksObtained || '-'}\n+                        </div>\n+                      )}\n+                    </td>\n+\n+                  {/* Grade Cell */}\n+                    <td className=\"py-2 px-4 border-r text-center\">\n+                      <span\n+                        className={`px-2 py-1 rounded text-sm font-medium ${getGradeColor(grade)}`}\n                       >\n-                        {marksObtained || '-'}\n-                      </div>\n-                    )}\n-                  </td>\n-                  \n-                  {/* Grade Cell */}\n-                  <td className=\"py-2 px-4 border-r text-center\">\n-                    <span className={`px-2 py-1 rounded text-sm font-medium ${getGradeColor(grade)}`}>\n-                      {grade || '-'}\n-                    </span>\n-                  </td>\n-                  \n+                        {grade || '-'}\n+                      </span>\n+                    </td>\n+\n+\n                   {/* Status Cell */}\n-                  <td className=\"py-2 px-4 border-r text-center\">\n-                    {isAbsent ? (\n-                      <span className=\"px-2 py-1 bg-gray-100 text-gray-800 rounded text-sm\">Absent</span>\n-                    ) : marksObtained ? (\n-                      <span className={`px-2 py-1 rounded text-sm ${\n-                        isPass ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n-                      }`}>\n-                        {isPass ? 'Pass' : 'Fail'}\n-                      </span>\n-                    ) : (\n-                      <span className=\"text-gray-400\">-</span>\n-                    )}\n-                  </td>\n-                  \n+                    <td className=\"py-2 px-4 border-r text-center\">\n+                      {isAbsent ? (\n+                        <span className=\"px-2 py-1 bg-gray-100 text-gray-800 rounded text-sm\">\n+                          Absent\n+                        </span>\n+                      ) : marksObtained ? (\n+                        <span\n+                          className={`px-2 py-1 rounded text-sm ${\n+                            isPass\n+                              ? 'bg-green-100 text-green-800'\n+                              : 'bg-red-100 text-red-800'\n+                          }`}\n+                        >\n+                          {isPass ? 'Pass' : 'Fail'}\n+                        </span>\n+                      ) : (\n+                        <span className=\"text-gray-400\">-</span>\n+                      )}\n+                    </td>\n+\n                   {/* Remarks Cell */}\n-                  <td className=\"py-2 px-4\">\n-                    {editingCell?.studentId === student.id && editingCell?.field === 'remarks' ? (\n-                      <input\n-                        type=\"text\"\n-                        value={tempValue}\n-                        onChange={(e) => setTempValue(e.target.value)}\n-                        onBlur={handleCellSave}\n-                        onKeyDown={(e) => handleCellKeyDown(e, student.id, 'remarks')}\n-                        className=\"w-full px-2 py-1 border rounded\"\n-                        placeholder=\"Add remarks...\"\n-                        autoFocus\n-                      />\n-                    ) : (\n-                      <div\n-                        onClick={() => handleCellClick(student.id, 'remarks')}\n-                        className={`px-2 py-1 rounded cursor-pointer hover:bg-gray-100 min-h-[28px] ${\n-                          selectedCell?.studentId === student.id && selectedCell?.field === 'remarks'\n-                            ? 'ring-2 ring-blue-500'\n-                            : ''\n-                        } ${isPublished ? 'cursor-not-allowed' : ''}`}\n-                      >\n-                        {remarks || ''}\n-                      </div>\n-                    )}\n-                  </td>\n-                </tr>\n-              );\n-            })}\n+                    <td className=\"py-2 px-4\">\n+                      {editingCell?.studentId === student.id &&\n+                      editingCell?.field === 'remarks' ? (\n+                        <input\n+                          type=\"text\"\n+                          value={tempValue}\n+                          onChange={e => setTempValue(e.target.value)}\n+                          onBlur={handleCellSave}\n+                          onKeyDown={e =>\n+                            handleCellKeyDown(e, student.id, 'remarks')\n+                          }\n+                          className=\"w-full px-2 py-1 border rounded\"\n+                          placeholder=\"Add remarks...\"\n+                          autoFocus\n+                        />\n+                      ) : (\n+                        <div\n+                          onClick={() => handleCellClick(student.id, 'remarks')}\n+                          className={`px-2 py-1 rounded cursor-pointer hover:bg-gray-100 min-h-[28px] ${\n+                            selectedCell?.studentId === student.id &&\n+                            selectedCell?.field === 'remarks'\n+                              ? 'ring-2 ring-blue-500'\n+                              : ''\n+                          } ${isPublished ? 'cursor-not-allowed' : ''}`}\n+                        >\n+                          {remarks || ''}\n+                        </div>\n+                      )}\n+                    </td>\n+                  </tr>\n+                )\n+              })}\n           </tbody>\n         </table>\n       </div>\n \n@@ -291,19 +341,27 @@\n       <div className=\"p-4 bg-gray-50 border-t text-sm text-gray-600\">\n         <div className=\"flex flex-wrap gap-4\">\n           <span>• Click on cells to edit marks or remarks</span>\n           <span>• Use \"AB\" for absent students</span>\n-          <span>• Press Enter to move to next row, Tab to move to next column</span>\n+          <span>\n+            • Press Enter to move to next row, Tab to move to next column\n+          </span>\n           <span>• Press Escape to cancel editing</span>\n         </div>\n       </div>\n     </div>\n-  );\n-};const Anal\n-yticsWidgets = ({ examSchedule, marks, students }) => {\n+  )\n+};\n+\n+const AnalyticsWidgets = ({ examSchedule, marks, students }) => {\n   const calculateAnalytics = () => {\n-    const validMarks = marks.filter(m => m.marksObtained !== 'AB' && m.marksObtained !== '' && m.marksObtained !== null);\n-    const absentCount = marks.filter(m => m.marksObtained === 'AB').length;\n+    const validMarks = marks.filter(\n+      m =>\n+        m.marksObtained !== 'AB' &&\n+        m.marksObtained !== '' &&\n+        m.marksObtained !== null\n+    )\n+    const absentCount = marks.filter(m => m.marksObtained === 'AB').length\n     \n     if (validMarks.length === 0) {\n       return {\n         totalStudents: students.length,\n@@ -315,88 +373,96 @@\n         average: 0,\n         highest: 0,\n         lowest: 0,\n         toppers: [],\n-        gradeDistribution: {}\n+        gradeDistribution: {},\n       };\n     }\n \n-    const marksArray = validMarks.map(m => parseFloat(m.marksObtained));\n-    const passed = validMarks.filter(m => parseFloat(m.marksObtained) >= examSchedule.passMarks).length;\n-    const failed = validMarks.length - passed;\n+    const marksArray = validMarks.map(m => parseFloat(m.marksObtained))\n+    const passed = validMarks.filter(\n+      m => parseFloat(m.marksObtained) >= examSchedule.passMarks\n+    ).length\n+    const failed = validMarks.length - passed\n     \n-    const average = Array.isArray(marksArray) ? marksArray.reduce((sum, mark) => sum + mark, 0) / marksArray.length;\n-    const highest = Math.max(...marksArray);\n-    const lowest = Math.min(...marksArray);\n+    const average = Array.isArray(marksArray)\n+      ? marksArray.reduce((sum, mark) => sum + mark, 0) / marksArray.length\n+      : 0\n+    const highest = Math.max(...marksArray)\n+    const lowest = Math.min(...marksArray)\n     \n     // Get top 3 students\n     const toppers = validMarks\n       .map(m => ({\n         ...students.find(s => s.id === m.studentId),\n-        marks: parseFloat(m.marksObtained)\n-      })) : [];\n+        marks: parseFloat(m.marksObtained),\n+      }))\n       .sort((a, b) => b.marks - a.marks)\n-      .slice(0, 3);\n+      .slice(0, 3)\n \n     // Grade distribution\n-    const gradeDistribution = Array.isArray(validMarks) ? validMarks.reduce((acc, m) => {\n-      const percentage = (parseFloat(m.marksObtained) / examSchedule.maxMarks) * 100;\n-      let grade;\n-      if (percentage >= 91) grade = 'A+';\n-      else if (percentage >= 81) grade = 'A';\n-      else if (percentage >= 71) grade = 'B+';\n-      else if (percentage >= 61) grade = 'B';\n-      else if (percentage >= 51) grade = 'C+';\n-      else if (percentage >= 41) grade = 'C';\n-      else if (percentage >= 33) grade = 'D';\n-      else grade = 'E';\n-      \n-      acc[grade] = (acc[grade] || 0) + 1;\n-      return acc;\n-    }, {}) : 0;\n+    const gradeDistribution = Array.isArray(validMarks)\n+      ? validMarks.reduce((acc, m) => {\n+          const percentage =\n+            (parseFloat(m.marksObtained) / examSchedule.maxMarks) * 100\n+          let grade\n+          if (percentage >= 91) grade = 'A+'\n+          else if (percentage >= 81) grade = 'A'\n+          else if (percentage >= 71) grade = 'B+'\n+          else if (percentage >= 61) grade = 'B'\n+          else if (percentage >= 51) grade = 'C+'\n+          else if (percentage >= 41) grade = 'C'\n+          else if (percentage >= 33) grade = 'D'\n+          else grade = 'E'\n \n+\n+      acc[grade] = (acc[grade] || 0) + 1\n+      return acc\n+    }, {}) : {}\n+\n     return {\n       totalStudents: students.length,\n       appeared: validMarks.length,\n       absent: absentCount,\n       passed,\n       failed,\n-      passPercentage: validMarks.length > 0 ? (passed / validMarks.length) * 100 : 0,\n+      passPercentage:\n+        validMarks.length > 0 ? (passed / validMarks.length) * 100 : 0,\n       average: Math.round(average * 100) / 100,\n       highest,\n       lowest,\n       toppers,\n-      gradeDistribution\n+      gradeDistribution,\n     };\n-  };\n+  }\n \n-  const analytics = calculateAnalytics();\n+  const analytics = calculateAnalytics()\n \n   return (\n     <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n       {/* Statistics Cards */}\n       <div className=\"space-y-4\">\n         <h3 className=\"font-medium\">Performance Statistics</h3>\n-        \n+\n         <div className=\"grid grid-cols-2 gap-4\">\n           <div className=\"bg-white p-4 rounded-lg shadow text-center\">\n             <Users className=\"w-6 h-6 mx-auto mb-2 text-blue-600\" />\n             <div className=\"text-2xl font-bold\">{analytics.appeared}</div>\n             <div className=\"text-sm text-gray-600\">Appeared</div>\n           </div>\n-          \n+\n           <div className=\"bg-white p-4 rounded-lg shadow text-center\">\n             <XCircle className=\"w-6 h-6 mx-auto mb-2 text-gray-600\" />\n             <div className=\"text-2xl font-bold\">{analytics.absent}</div>\n             <div className=\"text-sm text-gray-600\">Absent</div>\n           </div>\n-          \n+\n           <div className=\"bg-white p-4 rounded-lg shadow text-center\">\n             <CheckCircle className=\"w-6 h-6 mx-auto mb-2 text-green-600\" />\n             <div className=\"text-2xl font-bold\">{analytics.passed}</div>\n             <div className=\"text-sm text-gray-600\">Passed</div>\n           </div>\n-          \n+\n           <div className=\"bg-white p-4 rounded-lg shadow text-center\">\n             <AlertTriangle className=\"w-6 h-6 mx-auto mb-2 text-red-600\" />\n             <div className=\"text-2xl font-bold\">{analytics.failed}</div>\n             <div className=\"text-sm text-gray-600\">Failed</div>\n@@ -419,9 +485,11 @@\n             <span className=\"font-medium\">{analytics.average}</span>\n           </div>\n           <div className=\"flex justify-between\">\n             <span className=\"text-gray-600\">Highest:</span>\n-            <span className=\"font-medium text-green-600\">{analytics.highest}</span>\n+            <span className=\"font-medium text-green-600\">\n+              {analytics.highest}\n+            </span>\n           </div>\n           <div className=\"flex justify-between\">\n             <span className=\"text-gray-600\">Lowest:</span>\n             <span className=\"font-medium text-red-600\">{analytics.lowest}</span>\n@@ -433,35 +501,52 @@\n       <div className=\"space-y-4\">\n         <h3 className=\"font-medium\">Grade Distribution</h3>\n         <div className=\"bg-white p-4 rounded-lg shadow\">\n           <div className=\"space-y-3\">\n-            {Array.isArray(Object.entries(analytics.gradeDistribution)) && Object.entries(analytics.gradeDistribution).map(([grade, count]) => {\n-              const percentage = analytics.appeared > 0 ? (count / analytics.appeared) * 100 : 0;\n-              const getGradeColor = (grade) => {\n-                switch (grade) {\n-                  case 'A+': case 'A': return 'bg-green-500';\n-                  case 'B+': case 'B': return 'bg-blue-500';\n-                  case 'C+': case 'C': return 'bg-yellow-500';\n-                  case 'D': case 'E': return 'bg-red-500';\n-                  default: return 'bg-gray-500';\n+            {Array.isArray(Object.entries(analytics.gradeDistribution)) &&\n+              Object.entries(analytics.gradeDistribution).map(\n+                ([grade, count]) => {\n+                  const percentage =\n+                    analytics.appeared > 0\n+                      ? (count / analytics.appeared) * 100\n+                      : 0\n+                  const getGradeColor = grade => {\n+                    switch (grade) {\n+                      case 'A+':\n+                      case 'A':\n+                        return 'bg-green-500'\n+                      case 'B+':\n+                      case 'B':\n+                        return 'bg-blue-500'\n+                      case 'C+':\n+                      case 'C':\n+                        return 'bg-yellow-500'\n+                      case 'D':\n+                      case 'E':\n+                        return 'bg-red-500'\n+                      default:\n+                        return 'bg-gray-500'\n+                    }\n+                  }\n+\n+                  return (\n+                    <div key={grade} className=\"space-y-1\">\n+                      <div className=\"flex justify-between text-sm\">\n+                        <span className=\"font-medium\">Grade {grade}</span>\n+                        <span>\n+                          {count} ({Math.round(percentage)}%)\n+                        </span>\n+                      </div>\n+                      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n+                        <div\n+                          className={`h-2 rounded-full ${getGradeColor(grade)}`}\n+                          style={{ width: `${percentage}%` }}\n+                        />\n+                      </div>\n+                    </div>\n+                  )\n                 }\n-              };\n-\n-              return (\n-                <div key={grade} className=\"space-y-1\">\n-                  <div className=\"flex justify-between text-sm\">\n-                    <span className=\"font-medium\">Grade {grade}</span>\n-                    <span>{count} ({Math.round(percentage)}%)</span>\n-                  </div>\n-                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n-                    <div\n-                      className={`h-2 rounded-full ${getGradeColor(grade)}`}\n-                      style={{ width: `${percentage}%` }}\n-                    />\n-                  </div>\n-                </div>\n-              );\n-            })}\n+              )}\n           </div>\n         </div>\n       </div>\n \n@@ -475,129 +560,153 @@\n               <p>No results available</p>\n             </div>\n           ) : (\n             <div className=\"space-y-3\">\n-              {Array.isArray(analytics.toppers) && analytics.toppers.map((student, index) => (\n-                <div key={student.id} className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n-                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${\n-                    index === 0 ? 'bg-yellow-500' : \n-                    index === 1 ? 'bg-gray-400' : 'bg-orange-500'\n-                  }`}>\n-                    {index + 1}\n-                  </div>\n-                  <div className=\"flex-1\">\n-                    <div className=\"font-medium\">{student.name}</div>\n-                    <div className=\"text-sm text-gray-500\">Roll: {student.rollNumber}</div>\n-                  </div>\n-                  <div className=\"text-right\">\n-                    <div className=\"font-bold text-lg\">{student.marks}</div>\n-                    <div className=\"text-sm text-gray-500\">\n-                      {Math.round((student.marks / examSchedule.maxMarks) * 100)}%\n+              {Array.isArray(analytics.toppers) &&\n+                analytics.toppers.map((student, index) => (\n+                  <div\n+                    key={student.id}\n+                    className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\"\n+                  >\n+                    <div\n+                      className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${\n+                        index === 0\n+                          ? 'bg-yellow-500'\n+                          : index === 1\n+                            ? 'bg-gray-400'\n+                            : 'bg-orange-500'\n+                      }`}\n+                    >\n+                      {index + 1}\n                     </div>\n+                    <div className=\"flex-1\">\n+                      <div className=\"font-medium\">{student.name}</div>\n+                      <div className=\"text-sm text-gray-500\">\n+                        Roll: {student.rollNumber}\n+                      </div>\n+                    </div>\n+                    <div className=\"text-right\">\n+                      <div className=\"font-bold text-lg\">{student.marks}</div>\n+                      <div className=\"text-sm text-gray-500\">\n+                        {Math.round(\n+                          (student.marks / examSchedule.maxMarks) * 100\n+                        )}\n+                        %\n+                      </div>\n+                    </div>\n                   </div>\n-                </div>\n-              ))}\n+                ))}\n             </div>\n           )}\n         </div>\n       </div>\n     </div>\n-  );\n+  )\n };\n \n const CSVImportDialog = ({ open, onClose, onImport, examSchedule }) => {\n-  const [csvData, setCsvData] = useState('');\n-  const [previewData, setPreviewData] = useState([]);\n-  const [errors, setErrors] = useState([]);\n-  const fileInputRef = useRef(null);\n+  const [csvData, setCsvData] = useState('')\n+  const [previewData, setPreviewData] = useState([])\n+  const [errors, setErrors] = useState([])\n+  const fileInputRef = useRef(null)\n \n-  const handleFileUpload = (event) => {\n-    const file = event.target.files[0];\n+  const handleFileUpload = event => {\n+    const file = event.target.files[0]\n     if (file && file.type === 'text/csv') {\n-      const reader = new FileReader();\n-      reader.onload = (e) => {\n-        const csv = e.target.result;\n-        setCsvData(csv);\n-        parseCSV(csv);\n+      const reader = new FileReader()\n+      reader.onload = e => {\n+        const csv = e.target.result\n+        setCsvData(csv)\n+        parseCSV(csv)\n       };\n-      reader.readAsText(file);\n+      reader.readAsText(file)\n     }\n-  };\n+  }\n \n-  const parseCSV = (csv) => {\n-    const lines = csv.split('\\n').filter(line => line.trim());\n+  const parseCSV = csv => {\n+    const lines = csv.split('\\n').filter(line => line.trim())\n     if (lines.length < 2) {\n-      setErrors(['CSV file must have at least a header row and one data row']);\n+      setErrors(['CSV file must have at least a header row and one data row'])\n       return;\n     }\n \n-    const headers = lines[0].split(',').map(h => h.trim());\n-    const expectedHeaders = ['rollNumber', 'marksObtained', 'remarks'];\n+    const headers = lines[0].split(',').map(h => h.trim())\n+    const expectedHeaders = ['rollNumber', 'marksObtained', 'remarks']\n     \n-    const missingHeaders = expectedHeaders.filter(h => !headers.includes(h));\n+    const missingHeaders = expectedHeaders.filter(h => !headers.includes(h))\n     if (missingHeaders.length > 0) {\n-      setErrors([`Missing required headers: ${missingHeaders.join(', ')}`]);\n+      setErrors([`Missing required headers: ${missingHeaders.join(', ')}`])\n       return;\n     }\n \n-    const data = [];\n-    const validationErrors = [];\n+    const data = []\n+    const validationErrors = []\n \n     for (let i = 1; i < lines.length; i++) {\n-      const values = lines[i].split(',').map(v => v.trim());\n-      const row = {};\n+      const values = lines[i].split(',').map(v => v.trim())\n+      const row = {}\n       \n       headers.forEach((header, index) => {\n-        row[header] = values[index] || '';\n-      });\n+        row[header] = values[index] || ''\n+      })\n \n       // Validate marks\n-      const marks = row.marksObtained;\n+      const marks = row.marksObtained\n       if (marks !== 'AB' && marks !== '') {\n-        const numMarks = parseFloat(marks);\n+        const numMarks = parseFloat(marks)\n         if (isNaN(numMarks)) {\n-          validationErrors.push(`Row ${i + 1}: Invalid marks \"${marks}\"`);\n+          validationErrors.push(`Row ${i + 1}: Invalid marks \"${marks}\"`)\n         } else if (numMarks < 0 || numMarks > examSchedule.maxMarks) {\n-          validationErrors.push(`Row ${i + 1}: Marks must be between 0 and ${examSchedule.maxMarks}`);\n+          validationErrors.push(\n+            `Row ${i + 1}: Marks must be between 0 and ${examSchedule.maxMarks}`\n+          )\n         }\n       }\n \n-      data.push(row);\n+      data.push(row)\n     }\n \n-    setPreviewData(data);\n-    setErrors(validationErrors);\n+    setPreviewData(data)\n+    setErrors(validationErrors)\n   };\n \n   const handleImport = () => {\n     if (errors.length === 0 && previewData.length > 0) {\n-      onImport(previewData);\n-      onClose();\n+      onImport(previewData)\n+      onClose()\n     }\n-  };\n+  }\n \n   const sampleCSV = `rollNumber,marksObtained,remarks\n 001,85,Good performance\n 002,AB,Absent due to illness\n-003,72,Needs improvement in calculation`;\n+003,72,Needs improvement in calculation`\n \n   return (\n-    <Dialog open={open} onClose={onClose} title=\"Import Marks from CSV\" size=\"xl\">\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      title=\"Import Marks from CSV\"\n+      size=\"xl\"\n+    >\n       <div className=\"space-y-6\">\n         <div>\n           <h3 className=\"font-medium mb-2\">CSV Format Requirements</h3>\n           <div className=\"bg-gray-50 p-4 rounded-lg\">\n             <p className=\"text-sm text-gray-600 mb-2\">\n-              Your CSV file must include these columns: rollNumber, marksObtained, remarks\n+              Your CSV file must include these columns: rollNumber,\n+              marksObtained, remarks\n             </p>\n             <div className=\"text-xs font-mono bg-white p-2 rounded border\">\n               {sampleCSV}\n             </div>\n           </div>\n         </div>\n \n         <div>\n-          <label className=\"block text-sm font-medium mb-2\">Upload CSV File</label>\n+          <label className=\"block text-sm font-medium mb-2\">\n+            Upload CSV File\n+          </label>\n           <input\n             ref={fileInputRef}\n             type=\"file\"\n             accept=\".csv\"\n@@ -607,20 +716,23 @@\n         </div>\n \n         {errors.length > 0 && (\n           <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n-            <h4 className=\"font-medium text-red-800 mb-2\">Validation Errors:</h4>\n+            <h4 className=\"font-medium text-red-800 mb-2\">\n+              Validation Errors:\n+            </h4>\n             <ul className=\"text-sm text-red-700 space-y-1\">\n-              {Array.isArray(errors) && errors.map((error, index) => (\n-                <li key={index}>• {error}</li>\n-              ))}\n+              {Array.isArray(errors) &&\n+                errors.map((error, index) => <li key={index}>• {error}</li>)}\n             </ul>\n           </div>\n         )}\n \n         {previewData.length > 0 && errors.length === 0 && (\n           <div>\n-            <h4 className=\"font-medium mb-2\">Preview ({previewData.length} records)</h4>\n+            <h4 className=\"font-medium mb-2\">\n+              Preview ({previewData.length} records)\n+            </h4>\n             <div className=\"max-h-64 overflow-y-auto border rounded-lg\">\n               <table className=\"w-full text-sm\">\n                 <thead className=\"bg-gray-50\">\n                   <tr>\n@@ -664,34 +776,40 @@\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n+  )\n };const\n  ParentalViewPreview = ({ examSchedule, studentMarks, student, open, onClose }) => {\n-  if (!student || !studentMarks) return null;\n+  if (!student || !studentMarks) return null\n \n   const calculateGrade = (marksObtained, maxMarks) => {\n-    if (marksObtained === 'AB') return 'AB';\n-    if (!marksObtained) return '';\n+    if (marksObtained === 'AB') return 'AB'\n+    if (!marksObtained) return ''\n     \n-    const percentage = (marksObtained / maxMarks) * 100;\n+    const percentage = (marksObtained / maxMarks) * 100\n     \n-    if (percentage >= 91) return 'A+';\n-    if (percentage >= 81) return 'A';\n-    if (percentage >= 71) return 'B+';\n-    if (percentage >= 61) return 'B';\n-    if (percentage >= 51) return 'C+';\n-    if (percentage >= 41) return 'C';\n-    if (percentage >= 33) return 'D';\n-    return 'E';\n+    if (percentage >= 91) return 'A+'\n+    if (percentage >= 81) return 'A'\n+    if (percentage >= 71) return 'B+'\n+    if (percentage >= 61) return 'B'\n+    if (percentage >= 51) return 'C+'\n+    if (percentage >= 41) return 'C'\n+    if (percentage >= 33) return 'D'\n+    return 'E'\n   };\n \n-  const grade = calculateGrade(studentMarks.marksObtained, examSchedule.maxMarks);\n-  const percentage = studentMarks.marksObtained !== 'AB' && studentMarks.marksObtained \n-    ? Math.round((studentMarks.marksObtained / examSchedule.maxMarks) * 100) \n-    : 0;\n-  const isPass = studentMarks.marksObtained !== 'AB' && studentMarks.marksObtained >= examSchedule.passMarks;\n+  const grade = calculateGrade(\n+    studentMarks.marksObtained,\n+    examSchedule.maxMarks\n+  )\n+  const percentage =\n+    studentMarks.marksObtained !== 'AB' && studentMarks.marksObtained\n+      ? Math.round((studentMarks.marksObtained / examSchedule.maxMarks) * 100)\n+      : 0\n+  const isPass =\n+    studentMarks.marksObtained !== 'AB' &&\n+    studentMarks.marksObtained >= examSchedule.passMarks\n \n   return (\n     <Dialog open={open} onClose={onClose} title=\"Parent View Preview\" size=\"lg\">\n       <div className=\"space-y-6\">\n@@ -714,9 +832,11 @@\n               <div className=\"font-medium\">{student.rollNumber}</div>\n             </div>\n             <div>\n               <span className=\"text-gray-600\">Class:</span>\n-              <div className=\"font-medium\">{examSchedule.className} - {examSchedule.section}</div>\n+              <div className=\"font-medium\">\n+                {examSchedule.className} - {examSchedule.section}\n+              </div>\n             </div>\n             <div>\n               <span className=\"text-gray-600\">Father's Name:</span>\n               <div className=\"font-medium\">{student.fatherName || 'N/A'}</div>\n@@ -737,9 +857,11 @@\n               <div className=\"font-medium\">{examSchedule.subjectName}</div>\n             </div>\n             <div>\n               <span className=\"text-gray-600\">Exam Date:</span>\n-              <div className=\"font-medium\">{new Date(examSchedule.examDate).toLocaleDateString()}</div>\n+              <div className=\"font-medium\">\n+                {new Date(examSchedule.examDate).toLocaleDateString()}\n+              </div>\n             </div>\n             <div>\n               <span className=\"text-gray-600\">Max Marks:</span>\n               <div className=\"font-medium\">{examSchedule.maxMarks}</div>\n@@ -749,24 +871,31 @@\n \n         {/* Result Summary */}\n         <div className=\"bg-white border-2 border-gray-200 p-6 rounded-lg\">\n           <h3 className=\"font-semibold mb-4 text-center\">RESULT SUMMARY</h3>\n-          \n+\n           <div className=\"grid grid-cols-2 gap-6\">\n             <div className=\"text-center\">\n               <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n-                {studentMarks.marksObtained === 'AB' ? 'AB' : studentMarks.marksObtained || '-'}\n+                {studentMarks.marksObtained === 'AB'\n+                  ? 'AB'\n+                  : studentMarks.marksObtained || '-'}\n               </div>\n               <div className=\"text-sm text-gray-600\">Marks Obtained</div>\n             </div>\n-            \n+\n             <div className=\"text-center\">\n-              <div className={`text-3xl font-bold mb-2 ${\n-                grade === 'A+' || grade === 'A' ? 'text-green-600' :\n-                grade === 'B+' || grade === 'B' ? 'text-blue-600' :\n-                grade === 'C+' || grade === 'C' ? 'text-yellow-600' :\n-                'text-red-600'\n-              }`}>\n+              <div\n+                className={`text-3xl font-bold mb-2 ${\n+                  grade === 'A+' || grade === 'A'\n+                    ? 'text-green-600'\n+                    : grade === 'B+' || grade === 'B'\n+                      ? 'text-blue-600'\n+                      : grade === 'C+' || grade === 'C'\n+                        ? 'text-yellow-600'\n+                        : 'text-red-600'\n+                }`}\n+              >\n                 {grade || '-'}\n               </div>\n               <div className=\"text-sm text-gray-600\">Grade</div>\n             </div>\n@@ -782,10 +911,16 @@\n                 <div className=\"font-medium\">{examSchedule.passMarks}</div>\n                 <div className=\"text-gray-600\">Pass Marks</div>\n               </div>\n               <div>\n-                <div className={`font-medium ${isPass ? 'text-green-600' : 'text-red-600'}`}>\n-                  {studentMarks.marksObtained === 'AB' ? 'ABSENT' : isPass ? 'PASS' : 'FAIL'}\n+                <div\n+                  className={`font-medium ${isPass ? 'text-green-600' : 'text-red-600'}`}\n+                >\n+                  {studentMarks.marksObtained === 'AB'\n+                    ? 'ABSENT'\n+                    : isPass\n+                      ? 'PASS'\n+                      : 'FAIL'}\n                 </div>\n                 <div className=\"text-gray-600\">Result</div>\n               </div>\n             </div>\n@@ -842,10 +977,15 @@\n         </div>\n \n         {/* Footer */}\n         <div className=\"text-center text-sm text-gray-500 border-t pt-4\">\n-          <p>This is a computer-generated result. For any queries, please contact the school.</p>\n-          <p className=\"mt-1\">Generated on: {new Date().toLocaleDateString()}</p>\n+          <p>\n+            This is a computer-generated result. For any queries, please contact\n+            the school.\n+          </p>\n+          <p className=\"mt-1\">\n+            Generated on: {new Date().toLocaleDateString()}\n+          </p>\n         </div>\n \n         <div className=\"flex justify-end\">\n           <button\n@@ -856,163 +996,180 @@\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n+  )\n };\n \n const ExamResult = () => {\n-  const [selectedExamSchedule, setSelectedExamSchedule] = useState(null);\n-  const [marks, setMarks] = useState([]);\n-  const [students, setStudents] = useState([]);\n-  const [showCSVImport, setShowCSVImport] = useState(false);\n-  const [showParentPreview, setShowParentPreview] = useState(false);\n-  const [previewStudent, setPreviewStudent] = useState(null);\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [filterExamGroup, setFilterExamGroup] = useState('all');\n-  const [filterStatus, setFilterStatus] = useState('all');\n+  const [selectedExamSchedule, setSelectedExamSchedule] = useState(null)\n+  const [marks, setMarks] = useState([])\n+  const [students, setStudents] = useState([])\n+  const [showCSVImport, setShowCSVImport] = useState(false)\n+  const [showParentPreview, setShowParentPreview] = useState(false)\n+  const [previewStudent, setPreviewStudent] = useState(null)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [filterExamGroup, setFilterExamGroup] = useState('all')\n+  const [filterStatus, setFilterStatus] = useState('all')\n \n-  const queryClient = useQueryClient();\n+  const queryClient = useQueryClient()\n \n   const { data: examSchedulesData, isLoading } = useQuery({\n     queryKey: ['exam-schedules', 'for-results'],\n-    queryFn: () => examApi.getExamSchedulesForResults()\n-  });\n+    queryFn: () => examApi.getExamSchedulesForResults(),\n+  })\n \n   const { data: examGroupsData } = useQuery({\n     queryKey: ['exam-groups', 'active'],\n-    queryFn: () => examApi.getActiveExamGroups()\n-  });\n+    queryFn: () => examApi.getActiveExamGroups(),\n+  })\n \n   const { data: studentsData } = useQuery({\n     queryKey: ['students', 'by-schedule', selectedExamSchedule?.id],\n     queryFn: () => examApi.getStudentsBySchedule(selectedExamSchedule.id),\n-    enabled: !!selectedExamSchedule\n-  });\n+    enabled: !!selectedExamSchedule,\n+  })\n \n   const { data: marksData } = useQuery({\n     queryKey: ['marks', selectedExamSchedule?.id],\n     queryFn: () => examApi.getMarksBySchedule(selectedExamSchedule.id),\n-    enabled: !!selectedExamSchedule\n-  });\n+    enabled: !!selectedExamSchedule,\n+  })\n \n   const saveMarksMutation = useMutation({\n     mutationFn: ({ scheduleId, marks }) => examApi.saveMarks(scheduleId, marks),\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['marks']);\n+      queryClient.invalidateQueries(['marks'])\n     }\n-  });\n+  })\n \n   const publishResultsMutation = useMutation({\n     mutationFn: examApi.publishResults,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['exam-schedules']);\n+      queryClient.invalidateQueries(['exam-schedules'])\n     }\n-  });\n+  })\n \n   const importMarksMutation = useMutation({\n-    mutationFn: ({ scheduleId, csvData }) => examApi.importMarks(scheduleId, csvData),\n+    mutationFn: ({ scheduleId, csvData }) =>\n+      examApi.importMarks(scheduleId, csvData),\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['marks']);\n+      queryClient.invalidateQueries(['marks'])\n     }\n-  });\n+  })\n \n   React.useEffect(() => {\n     if (studentsData?.data) {\n-      setStudents(studentsData.data);\n+      setStudents(studentsData.data)\n     }\n-  }, [studentsData]);\n+  }, [studentsData])\n \n   React.useEffect(() => {\n     if (marksData?.data) {\n-      setMarks(marksData.data);\n+      setMarks(marksData.data)\n     } else if (students.length > 0) {\n       // Initialize empty marks for all students\n       const initialMarks = students.map(student => ({\n         studentId: student.id,\n         marksObtained: '',\n-        remarks: ''\n-      })) : [];\n-      setMarks(initialMarks);\n+        remarks: '',\n+      }))\n+      setMarks(initialMarks)\n     }\n-  }, [marksData, students]);\n+  }, [marksData, students])\n \n-  const handleScheduleSelect = (schedule) => {\n-    setSelectedExamSchedule(schedule);\n-    setMarks([]);\n+  const handleScheduleSelect = schedule => {\n+    setSelectedExamSchedule(schedule)\n+    setMarks([])\n   };\n \n   const handleMarksChange = (studentId, field, value) => {\n     setMarks(prev => {\n-      const updated = prev.map(mark => \n-        mark.studentId === studentId \n+      const updated = prev.map(mark =>\n+        mark.studentId === studentId\n           ? { ...mark, [field]: value }\n-          : mark\n+          : mark,\n       );\n-      \n+\n       // If student not found, add new record\n       if (!prev.find(mark => mark.studentId === studentId)) {\n-        updated.push({ studentId, marksObtained: '', remarks: '', [field]: value });\n-      }\n-      \n-      return updated;\n-    });\n-  };\n+        updated.push({\n+          studentId,\n+          marksObtained: '',\n+          remarks: '',\n+          [field]: value,\n+        })\n \n+      return updated\n+    })\n+  }\n+\n   const handleSaveMarks = () => {\n     if (selectedExamSchedule) {\n       saveMarksMutation.mutate({\n         scheduleId: selectedExamSchedule.id,\n-        marks\n-      });\n+        marks,\n+      })\n     }\n-  };\n+  }\n \n   const handlePublishResults = () => {\n-    if (selectedExamSchedule && confirm('Are you sure you want to publish these results? This action cannot be undone.')) {\n-      publishResultsMutation.mutate(selectedExamSchedule.id);\n+    if (\n+      selectedExamSchedule &&\n+      confirm(\n+        'Are you sure you want to publish these results? This action cannot be undone.'\n+      )\n+    ) {\n+      publishResultsMutation.mutate(selectedExamSchedule.id)\n     }\n-  };\n+  }\n \n-  const handleCSVImport = (csvData) => {\n+  const handleCSVImport = csvData => {\n     if (selectedExamSchedule) {\n       importMarksMutation.mutate({\n         scheduleId: selectedExamSchedule.id,\n-        csvData\n-      });\n+        csvData,\n+      })\n     }\n-  };\n+  }\n \n-  const handleParentPreview = (student) => {\n-    setPreviewStudent(student);\n-    setShowParentPreview(true);\n+  const handleParentPreview = student => {\n+    setPreviewStudent(student)\n+    setShowParentPreview(true)\n   };\n \n   const handleExportResults = () => {\n     if (selectedExamSchedule) {\n       // Export functionality\n-      console.log('Exporting results for:', selectedExamSchedule.id);\n+      console.log('Exporting results for:', selectedExamSchedule.id)\n     }\n-  };\n+  }\n \n-  const filteredSchedules = examSchedulesData?.data?.filter(schedule => {\n-    const matchesSearch = schedule.subjectName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-                         schedule.examGroupName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-                         schedule.className.toLowerCase().includes(searchTerm.toLowerCase());\n-    const matchesExamGroup = filterExamGroup === 'all' || schedule.examGroupId === filterExamGroup;\n-    const matchesStatus = filterStatus === 'all' || \n-                         (filterStatus === 'published' && schedule.isPublished) ||\n-                         (filterStatus === 'unpublished' && !schedule.isPublished);\n-    \n-    return matchesSearch && matchesExamGroup && matchesStatus;\n-  }) || [];\n+  const filteredSchedules =\n+    examSchedulesData?.data?.filter(schedule => {\n+      const matchesSearch =\n+        schedule.subjectName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        schedule.examGroupName\n+          .toLowerCase()\n+          .includes(searchTerm.toLowerCase()) ||\n+        schedule.className.toLowerCase().includes(searchTerm.toLowerCase())\n+      const matchesExamGroup =\n+        filterExamGroup === 'all' || schedule.examGroupId === filterExamGroup\n+      const matchesStatus =\n+        filterStatus === 'all' ||\n+        (filterStatus === 'published' && schedule.isPublished) ||\n+        (filterStatus === 'unpublished' && !schedule.isPublished)\n \n+\n+    return matchesSearch && matchesExamGroup && matchesStatus\n+  }) || []\n+\n   const getPreviewStudentMarks = () => {\n-    if (!previewStudent) return null;\n-    return marks.find(m => m.studentId === previewStudent.id);\n+    if (!previewStudent) return null\n+    return marks.find(m => m.studentId === previewStudent.id)\n   };\n \n-  if (isLoading) return <LoadingSkeleton />;\n+  if (isLoading) return <LoadingSkeleton />\n \n   return (\n     <div className=\"space-y-6\">\n       <div className=\"flex justify-between items-center\">\n@@ -1039,10 +1196,16 @@\n                   onClick={handlePublishResults}\n                   disabled={publishResultsMutation.isPending}\n                   className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center gap-2\"\n                 >\n-                  {selectedExamSchedule.isPublished ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n-                  {publishResultsMutation.isPending ? 'Publishing...' : 'Publish Results'}\n+                  {selectedExamSchedule.isPublished ? (\n+                    <EyeOff className=\"w-4 h-4\" />\n+                  ) : (\n+                    <Eye className=\"w-4 h-4\" />\n+                  )}\n+                  {publishResultsMutation.isPending\n+                    ? 'Publishing...'\n+                    : 'Publish Results'}\n                 </button>\n               )}\n             </>\n           )}\n@@ -1059,15 +1222,15 @@\n               <input\n                 type=\"text\"\n                 placeholder=\"Search schedules...\"\n                 value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n+                onChange={e => setSearchTerm(e.target.value)}\n                 className=\"pl-10 pr-4 py-2 border rounded-lg w-64\"\n               />\n             </div>\n             <select\n               value={filterExamGroup}\n-              onChange={(e) => setFilterExamGroup(e.target.value)}\n+              onChange={e => setFilterExamGroup(e.target.value)}\n               className=\"border rounded-lg px-3 py-2\"\n             >\n               <option value=\"all\">All Exam Groups</option>\n               {examGroupsData?.data?.map(group => (\n@@ -1077,9 +1240,9 @@\n               ))}\n             </select>\n             <select\n               value={filterStatus}\n-              onChange={(e) => setFilterStatus(e.target.value)}\n+              onChange={e => setFilterStatus(e.target.value)}\n               className=\"border rounded-lg px-3 py-2\"\n             >\n               <option value=\"all\">All Status</option>\n               <option value=\"published\">Published</option>\n@@ -1088,31 +1251,38 @@\n           </div>\n         </div>\n \n         <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-          {Array.isArray(filteredSchedules) && filteredSchedules.map(schedule => (\n-            <div\n-              key={schedule.id}\n-              onClick={() => handleScheduleSelect(schedule)}\n-              className={`p-4 border rounded-lg cursor-pointer hover:shadow-md transition-shadow ${\n-                selectedExamSchedule?.id === schedule.id ? 'border-blue-500 bg-blue-50' : ''\n-              }`}\n-            >\n-              <div className=\"flex justify-between items-start mb-2\">\n-                <h3 className=\"font-medium\">{schedule.subjectName}</h3>\n-                {schedule.isPublished && (\n-                  <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-xs\">\n-                    Published\n-                  </span>\n-                )}\n+          {Array.isArray(filteredSchedules) &&\n+            filteredSchedules.map(schedule => (\n+              <div\n+                key={schedule.id}\n+                onClick={() => handleScheduleSelect(schedule)}\n+                className={`p-4 border rounded-lg cursor-pointer hover:shadow-md transition-shadow ${\n+                  selectedExamSchedule?.id === schedule.id\n+                    ? 'border-blue-500 bg-blue-50'\n+                    : ''\n+                }`}\n+              >\n+                <div className=\"flex justify-between items-start mb-2\">\n+                  <h3 className=\"font-medium\">{schedule.subjectName}</h3>\n+                  {schedule.isPublished && (\n+                    <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-xs\">\n+                      Published\n+                    </span>\n+                  )}\n+                </div>\n+                <p className=\"text-sm text-gray-600\">\n+                  {schedule.examGroupName}\n+                </p>\n+                <p className=\"text-sm text-gray-600\">\n+                  {schedule.className} - {schedule.section}\n+                </p>\n+                <p className=\"text-sm text-gray-500 mt-2\">\n+                  {new Date(schedule.examDate).toLocaleDateString()}\n+                </p>\n               </div>\n-              <p className=\"text-sm text-gray-600\">{schedule.examGroupName}</p>\n-              <p className=\"text-sm text-gray-600\">{schedule.className} - {schedule.section}</p>\n-              <p className=\"text-sm text-gray-500 mt-2\">\n-                {new Date(schedule.examDate).toLocaleDateString()}\n-              </p>\n-            </div>\n-          ))}\n+            ))}\n         </div>\n       </div>\n \n       {/* Marks Entry and Analytics */}\n@@ -1174,8 +1344,8 @@\n         open={showParentPreview}\n         onClose={() => setShowParentPreview(false)}\n       />\n     </div>\n-  );\n+  )\n };\n \n\\ No newline at end of file\n-export default ExamResult;\n+export default ExamResult\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755992055228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1097,8 +1097,9 @@\n           marksObtained: '',\n           remarks: '',\n           [field]: value,\n         })\n+      }\n \n       return updated\n     })\n   }\n@@ -1158,10 +1159,9 @@\n         filterStatus === 'all' ||\n         (filterStatus === 'published' && schedule.isPublished) ||\n         (filterStatus === 'unpublished' && !schedule.isPublished)\n \n-\n-    return matchesSearch && matchesExamGroup && matchesStatus\n+      return matchesSearch && matchesExamGroup && matchesStatus\n   }) || []\n \n   const getPreviewStudentMarks = () => {\n     if (!previewStudent) return null\n"
                },
                {
                    "date": 1755994925695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   Search,\n   RefreshCw,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { examApi } from '../../lib/api/exams'\n \n const MarksEntryGrid = ({\n@@ -41,13 +41,13 @@\n     setSelectedCell({ studentId, field })\n     setEditingCell({ studentId, field })\n     const currentValue = getFieldValue(studentId, field)\n     setTempValue(currentValue?.toString() || '')\n-  };\n+  }\n \n   const handleCellKeyDown = (e, studentId, field) => {\n     if (isPublished) return\n-    \n+\n     switch (e.key) {\n       case 'Enter':\n         handleCellSave()\n         // Move to next row\n@@ -74,17 +74,17 @@\n       case 'Escape':\n         setEditingCell(null)\n         setSelectedCell(null)\n         setTempValue('')\n-        break;\n+        break\n     }\n   }\n \n   const handleCellSave = () => {\n     if (editingCell) {\n       const { studentId, field } = editingCell\n       let value = tempValue\n-      \n+\n       if (field === 'marksObtained') {\n         // Validate marks\n         if (value === 'AB' || value === 'ab') {\n           value = 'AB'\n@@ -107,30 +107,30 @@\n \n     setEditingCell(null)\n     setSelectedCell(null)\n     setTempValue('')\n-  };\n+  }\n \n   const getFieldValue = (studentId, field) => {\n     const studentMark = marks.find(m => m.studentId === studentId)\n     return studentMark ? studentMark[field] : ''\n-  };\n+  }\n \n   const calculateGrade = (marksObtained, maxMarks) => {\n     if (marksObtained === 'AB') return 'AB'\n     if (!marksObtained || marksObtained === '') return ''\n-    \n+\n     const percentage = (marksObtained / maxMarks) * 100\n-    \n+\n     if (percentage >= 91) return 'A+'\n     if (percentage >= 81) return 'A'\n     if (percentage >= 71) return 'B+'\n     if (percentage >= 61) return 'B'\n     if (percentage >= 51) return 'C+'\n     if (percentage >= 41) return 'C'\n     if (percentage >= 33) return 'D'\n     return 'E'\n-  };\n+  }\n \n   const getGradeColor = grade => {\n     switch (grade) {\n       case 'A+':\n@@ -155,9 +155,9 @@\n   const isValidMarks = (value, maxMarks) => {\n     if (value === 'AB' || value === '') return true\n     const numValue = parseFloat(value)\n     return !isNaN(numValue) && numValue >= 0 && numValue <= maxMarks\n-  };\n+  }\n \n   return (\n     <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n       <div className=\"p-4 border-b bg-gray-50\">\n@@ -214,9 +214,9 @@\n                 const marksObtained = getFieldValue(student.id, 'marksObtained')\n                 const remarks = getFieldValue(student.id, 'remarks')\n                 const grade = calculateGrade(\n                   marksObtained,\n-                  examSchedule.maxMarks\n+                  examSchedule.maxMarks,\n                 )\n                 const isPass =\n                   marksObtained !== 'AB' &&\n                   marksObtained >= examSchedule.passMarks\n@@ -231,9 +231,9 @@\n                       {student.rollNumber}\n                     </td>\n                     <td className=\"py-2 px-4 border-r\">{student.name}</td>\n \n-                  {/* Marks Input Cell */}\n+                    {/* Marks Input Cell */}\n                     <td className=\"py-2 px-4 border-r text-center\">\n                       {editingCell?.studentId === student.id &&\n                       editingCell?.field === 'marksObtained' ? (\n                         <input\n@@ -268,19 +268,18 @@\n                         </div>\n                       )}\n                     </td>\n \n-                  {/* Grade Cell */}\n+                    {/* Grade Cell */}\n                     <td className=\"py-2 px-4 border-r text-center\">\n                       <span\n                         className={`px-2 py-1 rounded text-sm font-medium ${getGradeColor(grade)}`}\n                       >\n                         {grade || '-'}\n                       </span>\n                     </td>\n \n-\n-                  {/* Status Cell */}\n+                    {/* Status Cell */}\n                     <td className=\"py-2 px-4 border-r text-center\">\n                       {isAbsent ? (\n                         <span className=\"px-2 py-1 bg-gray-100 text-gray-800 rounded text-sm\">\n                           Absent\n@@ -299,9 +298,9 @@\n                         <span className=\"text-gray-400\">-</span>\n                       )}\n                     </td>\n \n-                  {/* Remarks Cell */}\n+                    {/* Remarks Cell */}\n                     <td className=\"py-2 px-4\">\n                       {editingCell?.studentId === student.id &&\n                       editingCell?.field === 'remarks' ? (\n                         <input\n@@ -349,20 +348,20 @@\n         </div>\n       </div>\n     </div>\n   )\n-};\n+}\n \n const AnalyticsWidgets = ({ examSchedule, marks, students }) => {\n   const calculateAnalytics = () => {\n     const validMarks = marks.filter(\n       m =>\n         m.marksObtained !== 'AB' &&\n         m.marksObtained !== '' &&\n-        m.marksObtained !== null\n+        m.marksObtained !== null,\n     )\n     const absentCount = marks.filter(m => m.marksObtained === 'AB').length\n-    \n+\n     if (validMarks.length === 0) {\n       return {\n         totalStudents: students.length,\n         appeared: 0,\n@@ -374,23 +373,23 @@\n         highest: 0,\n         lowest: 0,\n         toppers: [],\n         gradeDistribution: {},\n-      };\n+      }\n     }\n \n     const marksArray = validMarks.map(m => parseFloat(m.marksObtained))\n     const passed = validMarks.filter(\n-      m => parseFloat(m.marksObtained) >= examSchedule.passMarks\n+      m => parseFloat(m.marksObtained) >= examSchedule.passMarks,\n     ).length\n     const failed = validMarks.length - passed\n-    \n+\n     const average = Array.isArray(marksArray)\n       ? marksArray.reduce((sum, mark) => sum + mark, 0) / marksArray.length\n       : 0\n     const highest = Math.max(...marksArray)\n     const lowest = Math.min(...marksArray)\n-    \n+\n     // Get top 3 students\n     const toppers = validMarks\n       .map(m => ({\n         ...students.find(s => s.id === m.studentId),\n@@ -413,13 +412,13 @@\n           else if (percentage >= 41) grade = 'C'\n           else if (percentage >= 33) grade = 'D'\n           else grade = 'E'\n \n+          acc[grade] = (acc[grade] || 0) + 1\n+          return acc\n+        }, {})\n+      : {}\n \n-      acc[grade] = (acc[grade] || 0) + 1\n-      return acc\n-    }, {}) : {}\n-\n     return {\n       totalStudents: students.length,\n       appeared: validMarks.length,\n       absent: absentCount,\n@@ -431,9 +430,9 @@\n       highest,\n       lowest,\n       toppers,\n       gradeDistribution,\n-    };\n+    }\n   }\n \n   const analytics = calculateAnalytics()\n \n@@ -543,9 +542,9 @@\n                         />\n                       </div>\n                     </div>\n                   )\n-                }\n+                },\n               )}\n           </div>\n         </div>\n       </div>\n@@ -587,9 +586,9 @@\n                     <div className=\"text-right\">\n                       <div className=\"font-bold text-lg\">{student.marks}</div>\n                       <div className=\"text-sm text-gray-500\">\n                         {Math.round(\n-                          (student.marks / examSchedule.maxMarks) * 100\n+                          (student.marks / examSchedule.maxMarks) * 100,\n                         )}\n                         %\n                       </div>\n                     </div>\n@@ -600,9 +599,9 @@\n         </div>\n       </div>\n     </div>\n   )\n-};\n+}\n \n const CSVImportDialog = ({ open, onClose, onImport, examSchedule }) => {\n   const [csvData, setCsvData] = useState('')\n   const [previewData, setPreviewData] = useState([])\n@@ -616,36 +615,36 @@\n       reader.onload = e => {\n         const csv = e.target.result\n         setCsvData(csv)\n         parseCSV(csv)\n-      };\n+      }\n       reader.readAsText(file)\n     }\n   }\n \n   const parseCSV = csv => {\n     const lines = csv.split('\\n').filter(line => line.trim())\n     if (lines.length < 2) {\n       setErrors(['CSV file must have at least a header row and one data row'])\n-      return;\n+      return\n     }\n \n     const headers = lines[0].split(',').map(h => h.trim())\n     const expectedHeaders = ['rollNumber', 'marksObtained', 'remarks']\n-    \n+\n     const missingHeaders = expectedHeaders.filter(h => !headers.includes(h))\n     if (missingHeaders.length > 0) {\n       setErrors([`Missing required headers: ${missingHeaders.join(', ')}`])\n-      return;\n+      return\n     }\n \n     const data = []\n     const validationErrors = []\n \n     for (let i = 1; i < lines.length; i++) {\n       const values = lines[i].split(',').map(v => v.trim())\n       const row = {}\n-      \n+\n       headers.forEach((header, index) => {\n         row[header] = values[index] || ''\n       })\n \n@@ -656,9 +655,9 @@\n         if (isNaN(numMarks)) {\n           validationErrors.push(`Row ${i + 1}: Invalid marks \"${marks}\"`)\n         } else if (numMarks < 0 || numMarks > examSchedule.maxMarks) {\n           validationErrors.push(\n-            `Row ${i + 1}: Marks must be between 0 and ${examSchedule.maxMarks}`\n+            `Row ${i + 1}: Marks must be between 0 and ${examSchedule.maxMarks}`,\n           )\n         }\n       }\n \n@@ -666,9 +665,9 @@\n     }\n \n     setPreviewData(data)\n     setErrors(validationErrors)\n-  };\n+  }\n \n   const handleImport = () => {\n     if (errors.length === 0 && previewData.length > 0) {\n       onImport(previewData)\n@@ -777,31 +776,37 @@\n         </div>\n       </div>\n     </Dialog>\n   )\n-};const\n- ParentalViewPreview = ({ examSchedule, studentMarks, student, open, onClose }) => {\n+}\n+const ParentalViewPreview = ({\n+  examSchedule,\n+  studentMarks,\n+  student,\n+  open,\n+  onClose,\n+}) => {\n   if (!student || !studentMarks) return null\n \n   const calculateGrade = (marksObtained, maxMarks) => {\n     if (marksObtained === 'AB') return 'AB'\n     if (!marksObtained) return ''\n-    \n+\n     const percentage = (marksObtained / maxMarks) * 100\n-    \n+\n     if (percentage >= 91) return 'A+'\n     if (percentage >= 81) return 'A'\n     if (percentage >= 71) return 'B+'\n     if (percentage >= 61) return 'B'\n     if (percentage >= 51) return 'C+'\n     if (percentage >= 41) return 'C'\n     if (percentage >= 33) return 'D'\n     return 'E'\n-  };\n+  }\n \n   const grade = calculateGrade(\n     studentMarks.marksObtained,\n-    examSchedule.maxMarks\n+    examSchedule.maxMarks,\n   )\n   const percentage =\n     studentMarks.marksObtained !== 'AB' && studentMarks.marksObtained\n       ? Math.round((studentMarks.marksObtained / examSchedule.maxMarks) * 100)\n@@ -997,9 +1002,9 @@\n         </div>\n       </div>\n     </Dialog>\n   )\n-};\n+}\n \n const ExamResult = () => {\n   const [selectedExamSchedule, setSelectedExamSchedule] = useState(null)\n   const [marks, setMarks] = useState([])\n@@ -1038,24 +1043,24 @@\n   const saveMarksMutation = useMutation({\n     mutationFn: ({ scheduleId, marks }) => examApi.saveMarks(scheduleId, marks),\n     onSuccess: () => {\n       queryClient.invalidateQueries(['marks'])\n-    }\n+    },\n   })\n \n   const publishResultsMutation = useMutation({\n     mutationFn: examApi.publishResults,\n     onSuccess: () => {\n       queryClient.invalidateQueries(['exam-schedules'])\n-    }\n+    },\n   })\n \n   const importMarksMutation = useMutation({\n     mutationFn: ({ scheduleId, csvData }) =>\n       examApi.importMarks(scheduleId, csvData),\n     onSuccess: () => {\n       queryClient.invalidateQueries(['marks'])\n-    }\n+    },\n   })\n \n   React.useEffect(() => {\n     if (studentsData?.data) {\n@@ -1079,17 +1084,15 @@\n \n   const handleScheduleSelect = schedule => {\n     setSelectedExamSchedule(schedule)\n     setMarks([])\n-  };\n+  }\n \n   const handleMarksChange = (studentId, field, value) => {\n     setMarks(prev => {\n       const updated = prev.map(mark =>\n-        mark.studentId === studentId\n-          ? { ...mark, [field]: value }\n-          : mark,\n-      );\n+        mark.studentId === studentId ? { ...mark, [field]: value } : mark\n+      )\n \n       // If student not found, add new record\n       if (!prev.find(mark => mark.studentId === studentId)) {\n         updated.push({\n@@ -1116,9 +1119,9 @@\n   const handlePublishResults = () => {\n     if (\n       selectedExamSchedule &&\n       confirm(\n-        'Are you sure you want to publish these results? This action cannot be undone.'\n+        'Are you sure you want to publish these results? This action cannot be undone.',\n       )\n     ) {\n       publishResultsMutation.mutate(selectedExamSchedule.id)\n     }\n@@ -1135,9 +1138,9 @@\n \n   const handleParentPreview = student => {\n     setPreviewStudent(student)\n     setShowParentPreview(true)\n-  };\n+  }\n \n   const handleExportResults = () => {\n     if (selectedExamSchedule) {\n       // Export functionality\n@@ -1160,14 +1163,14 @@\n         (filterStatus === 'published' && schedule.isPublished) ||\n         (filterStatus === 'unpublished' && !schedule.isPublished)\n \n       return matchesSearch && matchesExamGroup && matchesStatus\n-  }) || []\n+    }) || []\n \n   const getPreviewStudentMarks = () => {\n     if (!previewStudent) return null\n     return marks.find(m => m.studentId === previewStudent.id)\n-  };\n+  }\n \n   if (isLoading) return <LoadingSkeleton />\n \n   return (\n@@ -1345,7 +1348,7 @@\n         onClose={() => setShowParentPreview(false)}\n       />\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default ExamResult\n+export default ExamResult\n"
                }
            ],
            "date": 1755986163482,
            "name": "Commit-0",
            "content": "import React, { useState, useRef } from 'react';\nimport { useState, useRef } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  FileSpreadsheet,\n  Upload,\n  Download,\n  Save,\n  Eye,\n  EyeOff,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  BarChart3,\n  TrendingUp,\n  Award,\n  Users,\n  Filter,\n  Search,\n  RefreshCw\n} from 'lucide-react';\nimport Input from '../../components/ui/Input';\nimport Dialog from '../../components/ui/Dialog';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport { examApi } from '../../lib/api/exams';\n\nconst MarksEntryGrid = ({ examSchedule, students, marks, onMarksChange, onSave, isPublished }) => {\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [editingCell, setEditingCell] = useState(null);\n  const [tempValue, setTempValue] = useState('');\n  const gridRef = useRef(null);\n\n  const handleCellClick = (studentId, field) => {\n    if (isPublished) return;\n    setSelectedCell({ studentId, field });\n    setEditingCell({ studentId, field });\n    const currentValue = getFieldValue(studentId, field);\n    setTempValue(currentValue?.toString() || '');\n  };\n\n  const handleCellKeyDown = (e, studentId, field) => {\n    if (isPublished) return;\n    \n    switch (e.key) {\n      case 'Enter':\n        handleCellSave();\n        // Move to next row\n        const currentIndex = students.findIndex(s => s.id === studentId);\n        if (currentIndex < students.length - 1) {\n          const nextStudent = students[currentIndex + 1];\n          handleCellClick(nextStudent.id, field);\n        }\n        break;\n      case 'Tab':\n        e.preventDefault();\n        handleCellSave();\n        // Move to next column or next row\n        if (field === 'marksObtained') {\n          handleCellClick(studentId, 'remarks');\n        } else {\n          const currentIndex = students.findIndex(s => s.id === studentId);\n          if (currentIndex < students.length - 1) {\n            const nextStudent = students[currentIndex + 1];\n            handleCellClick(nextStudent.id, 'marksObtained');\n          }\n        }\n        break;\n      case 'Escape':\n        setEditingCell(null);\n        setSelectedCell(null);\n        setTempValue('');\n        break;\n    }\n  };\n\n  const handleCellSave = () => {\n    if (editingCell) {\n      const { studentId, field } = editingCell;\n      let value = tempValue;\n      \n      if (field === 'marksObtained') {\n        // Validate marks\n        if (value === 'AB' || value === 'ab') {\n          value = 'AB';\n        } else {\n          const numValue = parseFloat(value);\n          if (isNaN(numValue)) {\n            value = '';\n          } else if (numValue < 0) {\n            value = 0;\n          } else if (numValue > examSchedule.maxMarks) {\n            value = examSchedule.maxMarks;\n          } else {\n            value = numValue;\n          }\n        }\n      }\n      \n      onMarksChange(studentId, field, value);\n    }\n    \n    setEditingCell(null);\n    setSelectedCell(null);\n    setTempValue('');\n  };\n\n  const getFieldValue = (studentId, field) => {\n    const studentMark = marks.find(m => m.studentId === studentId);\n    return studentMark ? studentMark[field] : '';\n  };\n\n  const calculateGrade = (marksObtained, maxMarks) => {\n    if (marksObtained === 'AB') return 'AB';\n    if (!marksObtained || marksObtained === '') return '';\n    \n    const percentage = (marksObtained / maxMarks) * 100;\n    \n    if (percentage >= 91) return 'A+';\n    if (percentage >= 81) return 'A';\n    if (percentage >= 71) return 'B+';\n    if (percentage >= 61) return 'B';\n    if (percentage >= 51) return 'C+';\n    if (percentage >= 41) return 'C';\n    if (percentage >= 33) return 'D';\n    return 'E';\n  };\n\n  const getGradeColor = (grade) => {\n    switch (grade) {\n      case 'A+': case 'A': return 'text-green-600 bg-green-50';\n      case 'B+': case 'B': return 'text-blue-600 bg-blue-50';\n      case 'C+': case 'C': return 'text-yellow-600 bg-yellow-50';\n      case 'D': case 'E': return 'text-red-600 bg-red-50';\n      case 'AB': return 'text-gray-600 bg-gray-50';\n      default: return '';\n    }\n  };\n\n  const isValidMarks = (value, maxMarks) => {\n    if (value === 'AB' || value === '') return true;\n    const numValue = parseFloat(value);\n    return !isNaN(numValue) && numValue >= 0 && numValue <= maxMarks;\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"p-4 border-b bg-gray-50\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h3 className=\"font-medium\">{examSchedule.subjectName} - {examSchedule.className}</h3>\n            <p className=\"text-sm text-gray-600\">\n              Max Marks: {examSchedule.maxMarks} | Pass Marks: {examSchedule.passMarks}\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            {!isPublished && (\n              <button\n                onClick={onSave}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n              >\n                <Save className=\"w-4 h-4\" />\n                Save Marks\n              </button>\n            )}\n            {isPublished && (\n              <span className=\"px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium\">\n                Published\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"overflow-x-auto\" ref={gridRef}>\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50 sticky top-0\">\n            <tr>\n              <th className=\"text-left py-3 px-4 border-r\">S.No</th>\n              <th className=\"text-left py-3 px-4 border-r\">Roll No</th>\n              <th className=\"text-left py-3 px-4 border-r\">Student Name</th>\n              <th className=\"text-center py-3 px-4 border-r\">\n                Marks Obtained\n                <div className=\"text-xs text-gray-500 font-normal\">\n                  (Max: {examSchedule.maxMarks})\n                </div>\n              </th>\n              <th className=\"text-center py-3 px-4 border-r\">Grade</th>\n              <th className=\"text-center py-3 px-4 border-r\">Status</th>\n              <th className=\"text-left py-3 px-4\">Remarks</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.isArray(students) && students.map((student, index) => {\n              const marksObtained = getFieldValue(student.id, 'marksObtained');\n              const remarks = getFieldValue(student.id, 'remarks');\n              const grade = calculateGrade(marksObtained, examSchedule.maxMarks);\n              const isPass = marksObtained !== 'AB' && marksObtained >= examSchedule.passMarks;\n              const isAbsent = marksObtained === 'AB';\n\n              return (\n                <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n                  <td className=\"py-2 px-4 border-r text-center\">{index + 1}</td>\n                  <td className=\"py-2 px-4 border-r font-medium\">{student.rollNumber}</td>\n                  <td className=\"py-2 px-4 border-r\">{student.name}</td>\n                  \n                  {/* Marks Input Cell */}\n                  <td className=\"py-2 px-4 border-r text-center\">\n                    {editingCell?.studentId === student.id && editingCell?.field === 'marksObtained' ? (\n                      <input\n                        type=\"text\"\n                        value={tempValue}\n                        onChange={(e) => setTempValue(e.target.value)}\n                        onBlur={handleCellSave}\n                        onKeyDown={(e) => handleCellKeyDown(e, student.id, 'marksObtained')}\n                        className={`w-20 px-2 py-1 border rounded text-center ${\n                          !isValidMarks(tempValue, examSchedule.maxMarks) ? 'border-red-500' : ''\n                        }`}\n                        placeholder=\"0 or AB\"\n                        autoFocus\n                      />\n                    ) : (\n                      <div\n                        onClick={() => handleCellClick(student.id, 'marksObtained')}\n                        className={`w-20 mx-auto px-2 py-1 rounded cursor-pointer hover:bg-gray-100 ${\n                          selectedCell?.studentId === student.id && selectedCell?.field === 'marksObtained'\n                            ? 'ring-2 ring-blue-500'\n                            : ''\n                        } ${isPublished ? 'cursor-not-allowed' : ''}`}\n                      >\n                        {marksObtained || '-'}\n                      </div>\n                    )}\n                  </td>\n                  \n                  {/* Grade Cell */}\n                  <td className=\"py-2 px-4 border-r text-center\">\n                    <span className={`px-2 py-1 rounded text-sm font-medium ${getGradeColor(grade)}`}>\n                      {grade || '-'}\n                    </span>\n                  </td>\n                  \n                  {/* Status Cell */}\n                  <td className=\"py-2 px-4 border-r text-center\">\n                    {isAbsent ? (\n                      <span className=\"px-2 py-1 bg-gray-100 text-gray-800 rounded text-sm\">Absent</span>\n                    ) : marksObtained ? (\n                      <span className={`px-2 py-1 rounded text-sm ${\n                        isPass ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                      }`}>\n                        {isPass ? 'Pass' : 'Fail'}\n                      </span>\n                    ) : (\n                      <span className=\"text-gray-400\">-</span>\n                    )}\n                  </td>\n                  \n                  {/* Remarks Cell */}\n                  <td className=\"py-2 px-4\">\n                    {editingCell?.studentId === student.id && editingCell?.field === 'remarks' ? (\n                      <input\n                        type=\"text\"\n                        value={tempValue}\n                        onChange={(e) => setTempValue(e.target.value)}\n                        onBlur={handleCellSave}\n                        onKeyDown={(e) => handleCellKeyDown(e, student.id, 'remarks')}\n                        className=\"w-full px-2 py-1 border rounded\"\n                        placeholder=\"Add remarks...\"\n                        autoFocus\n                      />\n                    ) : (\n                      <div\n                        onClick={() => handleCellClick(student.id, 'remarks')}\n                        className={`px-2 py-1 rounded cursor-pointer hover:bg-gray-100 min-h-[28px] ${\n                          selectedCell?.studentId === student.id && selectedCell?.field === 'remarks'\n                            ? 'ring-2 ring-blue-500'\n                            : ''\n                        } ${isPublished ? 'cursor-not-allowed' : ''}`}\n                      >\n                        {remarks || ''}\n                      </div>\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Instructions */}\n      <div className=\"p-4 bg-gray-50 border-t text-sm text-gray-600\">\n        <div className=\"flex flex-wrap gap-4\">\n          <span>• Click on cells to edit marks or remarks</span>\n          <span>• Use \"AB\" for absent students</span>\n          <span>• Press Enter to move to next row, Tab to move to next column</span>\n          <span>• Press Escape to cancel editing</span>\n        </div>\n      </div>\n    </div>\n  );\n};const Anal\nyticsWidgets = ({ examSchedule, marks, students }) => {\n  const calculateAnalytics = () => {\n    const validMarks = marks.filter(m => m.marksObtained !== 'AB' && m.marksObtained !== '' && m.marksObtained !== null);\n    const absentCount = marks.filter(m => m.marksObtained === 'AB').length;\n    \n    if (validMarks.length === 0) {\n      return {\n        totalStudents: students.length,\n        appeared: 0,\n        absent: absentCount,\n        passed: 0,\n        failed: 0,\n        passPercentage: 0,\n        average: 0,\n        highest: 0,\n        lowest: 0,\n        toppers: [],\n        gradeDistribution: {}\n      };\n    }\n\n    const marksArray = validMarks.map(m => parseFloat(m.marksObtained));\n    const passed = validMarks.filter(m => parseFloat(m.marksObtained) >= examSchedule.passMarks).length;\n    const failed = validMarks.length - passed;\n    \n    const average = Array.isArray(marksArray) ? marksArray.reduce((sum, mark) => sum + mark, 0) / marksArray.length;\n    const highest = Math.max(...marksArray);\n    const lowest = Math.min(...marksArray);\n    \n    // Get top 3 students\n    const toppers = validMarks\n      .map(m => ({\n        ...students.find(s => s.id === m.studentId),\n        marks: parseFloat(m.marksObtained)\n      })) : [];\n      .sort((a, b) => b.marks - a.marks)\n      .slice(0, 3);\n\n    // Grade distribution\n    const gradeDistribution = Array.isArray(validMarks) ? validMarks.reduce((acc, m) => {\n      const percentage = (parseFloat(m.marksObtained) / examSchedule.maxMarks) * 100;\n      let grade;\n      if (percentage >= 91) grade = 'A+';\n      else if (percentage >= 81) grade = 'A';\n      else if (percentage >= 71) grade = 'B+';\n      else if (percentage >= 61) grade = 'B';\n      else if (percentage >= 51) grade = 'C+';\n      else if (percentage >= 41) grade = 'C';\n      else if (percentage >= 33) grade = 'D';\n      else grade = 'E';\n      \n      acc[grade] = (acc[grade] || 0) + 1;\n      return acc;\n    }, {}) : 0;\n\n    return {\n      totalStudents: students.length,\n      appeared: validMarks.length,\n      absent: absentCount,\n      passed,\n      failed,\n      passPercentage: validMarks.length > 0 ? (passed / validMarks.length) * 100 : 0,\n      average: Math.round(average * 100) / 100,\n      highest,\n      lowest,\n      toppers,\n      gradeDistribution\n    };\n  };\n\n  const analytics = calculateAnalytics();\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n      {/* Statistics Cards */}\n      <div className=\"space-y-4\">\n        <h3 className=\"font-medium\">Performance Statistics</h3>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-white p-4 rounded-lg shadow text-center\">\n            <Users className=\"w-6 h-6 mx-auto mb-2 text-blue-600\" />\n            <div className=\"text-2xl font-bold\">{analytics.appeared}</div>\n            <div className=\"text-sm text-gray-600\">Appeared</div>\n          </div>\n          \n          <div className=\"bg-white p-4 rounded-lg shadow text-center\">\n            <XCircle className=\"w-6 h-6 mx-auto mb-2 text-gray-600\" />\n            <div className=\"text-2xl font-bold\">{analytics.absent}</div>\n            <div className=\"text-sm text-gray-600\">Absent</div>\n          </div>\n          \n          <div className=\"bg-white p-4 rounded-lg shadow text-center\">\n            <CheckCircle className=\"w-6 h-6 mx-auto mb-2 text-green-600\" />\n            <div className=\"text-2xl font-bold\">{analytics.passed}</div>\n            <div className=\"text-sm text-gray-600\">Passed</div>\n          </div>\n          \n          <div className=\"bg-white p-4 rounded-lg shadow text-center\">\n            <AlertTriangle className=\"w-6 h-6 mx-auto mb-2 text-red-600\" />\n            <div className=\"text-2xl font-bold\">{analytics.failed}</div>\n            <div className=\"text-sm text-gray-600\">Failed</div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"text-center\">\n            <TrendingUp className=\"w-8 h-8 mx-auto mb-2 text-purple-600\" />\n            <div className=\"text-3xl font-bold text-purple-600\">\n              {Math.round(analytics.passPercentage)}%\n            </div>\n            <div className=\"text-sm text-gray-600\">Pass Percentage</div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-4 rounded-lg shadow space-y-3\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Average:</span>\n            <span className=\"font-medium\">{analytics.average}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Highest:</span>\n            <span className=\"font-medium text-green-600\">{analytics.highest}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Lowest:</span>\n            <span className=\"font-medium text-red-600\">{analytics.lowest}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Grade Distribution */}\n      <div className=\"space-y-4\">\n        <h3 className=\"font-medium\">Grade Distribution</h3>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"space-y-3\">\n            {Array.isArray(Object.entries(analytics.gradeDistribution)) && Object.entries(analytics.gradeDistribution).map(([grade, count]) => {\n              const percentage = analytics.appeared > 0 ? (count / analytics.appeared) * 100 : 0;\n              const getGradeColor = (grade) => {\n                switch (grade) {\n                  case 'A+': case 'A': return 'bg-green-500';\n                  case 'B+': case 'B': return 'bg-blue-500';\n                  case 'C+': case 'C': return 'bg-yellow-500';\n                  case 'D': case 'E': return 'bg-red-500';\n                  default: return 'bg-gray-500';\n                }\n              };\n\n              return (\n                <div key={grade} className=\"space-y-1\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"font-medium\">Grade {grade}</span>\n                    <span>{count} ({Math.round(percentage)}%)</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className={`h-2 rounded-full ${getGradeColor(grade)}`}\n                      style={{ width: `${percentage}%` }}\n                    />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Top Performers */}\n      <div className=\"space-y-4\">\n        <h3 className=\"font-medium\">Top Performers</h3>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          {analytics.toppers.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Award className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n              <p>No results available</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {Array.isArray(analytics.toppers) && analytics.toppers.map((student, index) => (\n                <div key={student.id} className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${\n                    index === 0 ? 'bg-yellow-500' : \n                    index === 1 ? 'bg-gray-400' : 'bg-orange-500'\n                  }`}>\n                    {index + 1}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{student.name}</div>\n                    <div className=\"text-sm text-gray-500\">Roll: {student.rollNumber}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-bold text-lg\">{student.marks}</div>\n                    <div className=\"text-sm text-gray-500\">\n                      {Math.round((student.marks / examSchedule.maxMarks) * 100)}%\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst CSVImportDialog = ({ open, onClose, onImport, examSchedule }) => {\n  const [csvData, setCsvData] = useState('');\n  const [previewData, setPreviewData] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const fileInputRef = useRef(null);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file && file.type === 'text/csv') {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const csv = e.target.result;\n        setCsvData(csv);\n        parseCSV(csv);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const parseCSV = (csv) => {\n    const lines = csv.split('\\n').filter(line => line.trim());\n    if (lines.length < 2) {\n      setErrors(['CSV file must have at least a header row and one data row']);\n      return;\n    }\n\n    const headers = lines[0].split(',').map(h => h.trim());\n    const expectedHeaders = ['rollNumber', 'marksObtained', 'remarks'];\n    \n    const missingHeaders = expectedHeaders.filter(h => !headers.includes(h));\n    if (missingHeaders.length > 0) {\n      setErrors([`Missing required headers: ${missingHeaders.join(', ')}`]);\n      return;\n    }\n\n    const data = [];\n    const validationErrors = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      const values = lines[i].split(',').map(v => v.trim());\n      const row = {};\n      \n      headers.forEach((header, index) => {\n        row[header] = values[index] || '';\n      });\n\n      // Validate marks\n      const marks = row.marksObtained;\n      if (marks !== 'AB' && marks !== '') {\n        const numMarks = parseFloat(marks);\n        if (isNaN(numMarks)) {\n          validationErrors.push(`Row ${i + 1}: Invalid marks \"${marks}\"`);\n        } else if (numMarks < 0 || numMarks > examSchedule.maxMarks) {\n          validationErrors.push(`Row ${i + 1}: Marks must be between 0 and ${examSchedule.maxMarks}`);\n        }\n      }\n\n      data.push(row);\n    }\n\n    setPreviewData(data);\n    setErrors(validationErrors);\n  };\n\n  const handleImport = () => {\n    if (errors.length === 0 && previewData.length > 0) {\n      onImport(previewData);\n      onClose();\n    }\n  };\n\n  const sampleCSV = `rollNumber,marksObtained,remarks\n001,85,Good performance\n002,AB,Absent due to illness\n003,72,Needs improvement in calculation`;\n\n  return (\n    <Dialog open={open} onClose={onClose} title=\"Import Marks from CSV\" size=\"xl\">\n      <div className=\"space-y-6\">\n        <div>\n          <h3 className=\"font-medium mb-2\">CSV Format Requirements</h3>\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <p className=\"text-sm text-gray-600 mb-2\">\n              Your CSV file must include these columns: rollNumber, marksObtained, remarks\n            </p>\n            <div className=\"text-xs font-mono bg-white p-2 rounded border\">\n              {sampleCSV}\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Upload CSV File</label>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleFileUpload}\n            className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n          />\n        </div>\n\n        {errors.length > 0 && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <h4 className=\"font-medium text-red-800 mb-2\">Validation Errors:</h4>\n            <ul className=\"text-sm text-red-700 space-y-1\">\n              {Array.isArray(errors) && errors.map((error, index) => (\n                <li key={index}>• {error}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {previewData.length > 0 && errors.length === 0 && (\n          <div>\n            <h4 className=\"font-medium mb-2\">Preview ({previewData.length} records)</h4>\n            <div className=\"max-h-64 overflow-y-auto border rounded-lg\">\n              <table className=\"w-full text-sm\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"text-left py-2 px-3\">Roll Number</th>\n                    <th className=\"text-left py-2 px-3\">Marks</th>\n                    <th className=\"text-left py-2 px-3\">Remarks</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {previewData.slice(0, 10).map((row, index) => (\n                    <tr key={index} className=\"border-t\">\n                      <td className=\"py-2 px-3\">{row.rollNumber}</td>\n                      <td className=\"py-2 px-3\">{row.marksObtained}</td>\n                      <td className=\"py-2 px-3\">{row.remarks}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {previewData.length > 10 && (\n                <div className=\"text-center py-2 text-gray-500 text-sm\">\n                  ... and {previewData.length - 10} more records\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleImport}\n            disabled={errors.length > 0 || previewData.length === 0}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n          >\n            Import Marks\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};const\n ParentalViewPreview = ({ examSchedule, studentMarks, student, open, onClose }) => {\n  if (!student || !studentMarks) return null;\n\n  const calculateGrade = (marksObtained, maxMarks) => {\n    if (marksObtained === 'AB') return 'AB';\n    if (!marksObtained) return '';\n    \n    const percentage = (marksObtained / maxMarks) * 100;\n    \n    if (percentage >= 91) return 'A+';\n    if (percentage >= 81) return 'A';\n    if (percentage >= 71) return 'B+';\n    if (percentage >= 61) return 'B';\n    if (percentage >= 51) return 'C+';\n    if (percentage >= 41) return 'C';\n    if (percentage >= 33) return 'D';\n    return 'E';\n  };\n\n  const grade = calculateGrade(studentMarks.marksObtained, examSchedule.maxMarks);\n  const percentage = studentMarks.marksObtained !== 'AB' && studentMarks.marksObtained \n    ? Math.round((studentMarks.marksObtained / examSchedule.maxMarks) * 100) \n    : 0;\n  const isPass = studentMarks.marksObtained !== 'AB' && studentMarks.marksObtained >= examSchedule.passMarks;\n\n  return (\n    <Dialog open={open} onClose={onClose} title=\"Parent View Preview\" size=\"lg\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"text-center border-b pb-4\">\n          <h2 className=\"text-xl font-bold\">SCHOOL EXAMINATION RESULT</h2>\n          <p className=\"text-gray-600\">Academic Year 2024-25</p>\n        </div>\n\n        {/* Student Information */}\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold mb-3\">Student Information</h3>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-600\">Student Name:</span>\n              <div className=\"font-medium\">{student.name}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Roll Number:</span>\n              <div className=\"font-medium\">{student.rollNumber}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Class:</span>\n              <div className=\"font-medium\">{examSchedule.className} - {examSchedule.section}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Father's Name:</span>\n              <div className=\"font-medium\">{student.fatherName || 'N/A'}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Exam Information */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold mb-3\">Examination Details</h3>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-600\">Exam:</span>\n              <div className=\"font-medium\">{examSchedule.examGroupName}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Subject:</span>\n              <div className=\"font-medium\">{examSchedule.subjectName}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Exam Date:</span>\n              <div className=\"font-medium\">{new Date(examSchedule.examDate).toLocaleDateString()}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">Max Marks:</span>\n              <div className=\"font-medium\">{examSchedule.maxMarks}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Result Summary */}\n        <div className=\"bg-white border-2 border-gray-200 p-6 rounded-lg\">\n          <h3 className=\"font-semibold mb-4 text-center\">RESULT SUMMARY</h3>\n          \n          <div className=\"grid grid-cols-2 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                {studentMarks.marksObtained === 'AB' ? 'AB' : studentMarks.marksObtained || '-'}\n              </div>\n              <div className=\"text-sm text-gray-600\">Marks Obtained</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className={`text-3xl font-bold mb-2 ${\n                grade === 'A+' || grade === 'A' ? 'text-green-600' :\n                grade === 'B+' || grade === 'B' ? 'text-blue-600' :\n                grade === 'C+' || grade === 'C' ? 'text-yellow-600' :\n                'text-red-600'\n              }`}>\n                {grade || '-'}\n              </div>\n              <div className=\"text-sm text-gray-600\">Grade</div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 pt-4 border-t\">\n            <div className=\"grid grid-cols-3 gap-4 text-center text-sm\">\n              <div>\n                <div className=\"font-medium\">{percentage}%</div>\n                <div className=\"text-gray-600\">Percentage</div>\n              </div>\n              <div>\n                <div className=\"font-medium\">{examSchedule.passMarks}</div>\n                <div className=\"text-gray-600\">Pass Marks</div>\n              </div>\n              <div>\n                <div className={`font-medium ${isPass ? 'text-green-600' : 'text-red-600'}`}>\n                  {studentMarks.marksObtained === 'AB' ? 'ABSENT' : isPass ? 'PASS' : 'FAIL'}\n                </div>\n                <div className=\"text-gray-600\">Result</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Remarks */}\n        {studentMarks.remarks && (\n          <div className=\"bg-yellow-50 p-4 rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">Teacher's Remarks</h3>\n            <p className=\"text-sm\">{studentMarks.remarks}</p>\n          </div>\n        )}\n\n        {/* Grade Scale */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold mb-3\">Grading Scale</h3>\n          <div className=\"grid grid-cols-4 gap-2 text-xs\">\n            <div className=\"text-center p-2 bg-green-100 rounded\">\n              <div className=\"font-medium\">A+ (91-100)</div>\n              <div className=\"text-gray-600\">Outstanding</div>\n            </div>\n            <div className=\"text-center p-2 bg-green-100 rounded\">\n              <div className=\"font-medium\">A (81-90)</div>\n              <div className=\"text-gray-600\">Excellent</div>\n            </div>\n            <div className=\"text-center p-2 bg-blue-100 rounded\">\n              <div className=\"font-medium\">B+ (71-80)</div>\n              <div className=\"text-gray-600\">Very Good</div>\n            </div>\n            <div className=\"text-center p-2 bg-blue-100 rounded\">\n              <div className=\"font-medium\">B (61-70)</div>\n              <div className=\"text-gray-600\">Good</div>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-4 gap-2 text-xs mt-2\">\n            <div className=\"text-center p-2 bg-yellow-100 rounded\">\n              <div className=\"font-medium\">C+ (51-60)</div>\n              <div className=\"text-gray-600\">Satisfactory</div>\n            </div>\n            <div className=\"text-center p-2 bg-yellow-100 rounded\">\n              <div className=\"font-medium\">C (41-50)</div>\n              <div className=\"text-gray-600\">Acceptable</div>\n            </div>\n            <div className=\"text-center p-2 bg-red-100 rounded\">\n              <div className=\"font-medium\">D (33-40)</div>\n              <div className=\"text-gray-600\">Needs Improvement</div>\n            </div>\n            <div className=\"text-center p-2 bg-red-100 rounded\">\n              <div className=\"font-medium\">E (0-32)</div>\n              <div className=\"text-gray-600\">Unsatisfactory</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500 border-t pt-4\">\n          <p>This is a computer-generated result. For any queries, please contact the school.</p>\n          <p className=\"mt-1\">Generated on: {new Date().toLocaleDateString()}</p>\n        </div>\n\n        <div className=\"flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close Preview\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst ExamResult = () => {\n  const [selectedExamSchedule, setSelectedExamSchedule] = useState(null);\n  const [marks, setMarks] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [showCSVImport, setShowCSVImport] = useState(false);\n  const [showParentPreview, setShowParentPreview] = useState(false);\n  const [previewStudent, setPreviewStudent] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterExamGroup, setFilterExamGroup] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  const queryClient = useQueryClient();\n\n  const { data: examSchedulesData, isLoading } = useQuery({\n    queryKey: ['exam-schedules', 'for-results'],\n    queryFn: () => examApi.getExamSchedulesForResults()\n  });\n\n  const { data: examGroupsData } = useQuery({\n    queryKey: ['exam-groups', 'active'],\n    queryFn: () => examApi.getActiveExamGroups()\n  });\n\n  const { data: studentsData } = useQuery({\n    queryKey: ['students', 'by-schedule', selectedExamSchedule?.id],\n    queryFn: () => examApi.getStudentsBySchedule(selectedExamSchedule.id),\n    enabled: !!selectedExamSchedule\n  });\n\n  const { data: marksData } = useQuery({\n    queryKey: ['marks', selectedExamSchedule?.id],\n    queryFn: () => examApi.getMarksBySchedule(selectedExamSchedule.id),\n    enabled: !!selectedExamSchedule\n  });\n\n  const saveMarksMutation = useMutation({\n    mutationFn: ({ scheduleId, marks }) => examApi.saveMarks(scheduleId, marks),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['marks']);\n    }\n  });\n\n  const publishResultsMutation = useMutation({\n    mutationFn: examApi.publishResults,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['exam-schedules']);\n    }\n  });\n\n  const importMarksMutation = useMutation({\n    mutationFn: ({ scheduleId, csvData }) => examApi.importMarks(scheduleId, csvData),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['marks']);\n    }\n  });\n\n  React.useEffect(() => {\n    if (studentsData?.data) {\n      setStudents(studentsData.data);\n    }\n  }, [studentsData]);\n\n  React.useEffect(() => {\n    if (marksData?.data) {\n      setMarks(marksData.data);\n    } else if (students.length > 0) {\n      // Initialize empty marks for all students\n      const initialMarks = students.map(student => ({\n        studentId: student.id,\n        marksObtained: '',\n        remarks: ''\n      })) : [];\n      setMarks(initialMarks);\n    }\n  }, [marksData, students]);\n\n  const handleScheduleSelect = (schedule) => {\n    setSelectedExamSchedule(schedule);\n    setMarks([]);\n  };\n\n  const handleMarksChange = (studentId, field, value) => {\n    setMarks(prev => {\n      const updated = prev.map(mark => \n        mark.studentId === studentId \n          ? { ...mark, [field]: value }\n          : mark\n      );\n      \n      // If student not found, add new record\n      if (!prev.find(mark => mark.studentId === studentId)) {\n        updated.push({ studentId, marksObtained: '', remarks: '', [field]: value });\n      }\n      \n      return updated;\n    });\n  };\n\n  const handleSaveMarks = () => {\n    if (selectedExamSchedule) {\n      saveMarksMutation.mutate({\n        scheduleId: selectedExamSchedule.id,\n        marks\n      });\n    }\n  };\n\n  const handlePublishResults = () => {\n    if (selectedExamSchedule && confirm('Are you sure you want to publish these results? This action cannot be undone.')) {\n      publishResultsMutation.mutate(selectedExamSchedule.id);\n    }\n  };\n\n  const handleCSVImport = (csvData) => {\n    if (selectedExamSchedule) {\n      importMarksMutation.mutate({\n        scheduleId: selectedExamSchedule.id,\n        csvData\n      });\n    }\n  };\n\n  const handleParentPreview = (student) => {\n    setPreviewStudent(student);\n    setShowParentPreview(true);\n  };\n\n  const handleExportResults = () => {\n    if (selectedExamSchedule) {\n      // Export functionality\n      console.log('Exporting results for:', selectedExamSchedule.id);\n    }\n  };\n\n  const filteredSchedules = examSchedulesData?.data?.filter(schedule => {\n    const matchesSearch = schedule.subjectName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         schedule.examGroupName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         schedule.className.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesExamGroup = filterExamGroup === 'all' || schedule.examGroupId === filterExamGroup;\n    const matchesStatus = filterStatus === 'all' || \n                         (filterStatus === 'published' && schedule.isPublished) ||\n                         (filterStatus === 'unpublished' && !schedule.isPublished);\n    \n    return matchesSearch && matchesExamGroup && matchesStatus;\n  }) || [];\n\n  const getPreviewStudentMarks = () => {\n    if (!previewStudent) return null;\n    return marks.find(m => m.studentId === previewStudent.id);\n  };\n\n  if (isLoading) return <LoadingSkeleton />;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Exam Results</h1>\n        <div className=\"flex gap-2\">\n          {selectedExamSchedule && (\n            <>\n              <button\n                onClick={() => setShowCSVImport(true)}\n                className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n              >\n                <Upload className=\"w-4 h-4\" />\n                Import CSV\n              </button>\n              <button\n                onClick={handleExportResults}\n                className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n              >\n                <Download className=\"w-4 h-4\" />\n                Export\n              </button>\n              {!selectedExamSchedule.isPublished && (\n                <button\n                  onClick={handlePublishResults}\n                  disabled={publishResultsMutation.isPending}\n                  className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center gap-2\"\n                >\n                  {selectedExamSchedule.isPublished ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  {publishResultsMutation.isPending ? 'Publishing...' : 'Publish Results'}\n                </button>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Exam Schedule Selection */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-lg font-medium\">Select Exam Schedule</h2>\n          <div className=\"flex gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search schedules...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 pr-4 py-2 border rounded-lg w-64\"\n              />\n            </div>\n            <select\n              value={filterExamGroup}\n              onChange={(e) => setFilterExamGroup(e.target.value)}\n              className=\"border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Exam Groups</option>\n              {examGroupsData?.data?.map(group => (\n                <option key={group.id} value={group.id}>\n                  {group.name}\n                </option>\n              ))}\n            </select>\n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"published\">Published</option>\n              <option value=\"unpublished\">Unpublished</option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.isArray(filteredSchedules) && filteredSchedules.map(schedule => (\n            <div\n              key={schedule.id}\n              onClick={() => handleScheduleSelect(schedule)}\n              className={`p-4 border rounded-lg cursor-pointer hover:shadow-md transition-shadow ${\n                selectedExamSchedule?.id === schedule.id ? 'border-blue-500 bg-blue-50' : ''\n              }`}\n            >\n              <div className=\"flex justify-between items-start mb-2\">\n                <h3 className=\"font-medium\">{schedule.subjectName}</h3>\n                {schedule.isPublished && (\n                  <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-xs\">\n                    Published\n                  </span>\n                )}\n              </div>\n              <p className=\"text-sm text-gray-600\">{schedule.examGroupName}</p>\n              <p className=\"text-sm text-gray-600\">{schedule.className} - {schedule.section}</p>\n              <p className=\"text-sm text-gray-500 mt-2\">\n                {new Date(schedule.examDate).toLocaleDateString()}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Marks Entry and Analytics */}\n      {selectedExamSchedule && students.length > 0 && (\n        <div className=\"space-y-6\">\n          {/* Analytics Widgets */}\n          <AnalyticsWidgets\n            examSchedule={selectedExamSchedule}\n            marks={marks}\n            students={students}\n          />\n\n          {/* Marks Entry Grid */}\n          <MarksEntryGrid\n            examSchedule={selectedExamSchedule}\n            students={students}\n            marks={marks}\n            onMarksChange={handleMarksChange}\n            onSave={handleSaveMarks}\n            isPublished={selectedExamSchedule.isPublished}\n          />\n\n          {/* Parent Preview Actions */}\n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <h3 className=\"font-medium mb-3\">Parent View Preview</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {students.slice(0, 5).map(student => (\n                <button\n                  key={student.id}\n                  onClick={() => handleParentPreview(student)}\n                  className=\"px-3 py-2 border rounded-lg hover:bg-gray-50 text-sm\"\n                >\n                  Preview: {student.name}\n                </button>\n              ))}\n              {students.length > 5 && (\n                <span className=\"px-3 py-2 text-gray-500 text-sm\">\n                  +{students.length - 5} more students\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* CSV Import Dialog */}\n      <CSVImportDialog\n        open={showCSVImport}\n        onClose={() => setShowCSVImport(false)}\n        onImport={handleCSVImport}\n        examSchedule={selectedExamSchedule}\n      />\n\n      {/* Parent View Preview Dialog */}\n      <ParentalViewPreview\n        examSchedule={selectedExamSchedule}\n        studentMarks={getPreviewStudentMarks()}\n        student={previewStudent}\n        open={showParentPreview}\n        onClose={() => setShowParentPreview(false)}\n      />\n    </div>\n  );\n};\n\nexport default ExamResult;"
        }
    ]
}