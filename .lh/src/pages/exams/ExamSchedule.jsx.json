{
    "sourceFile": "src/pages/exams/ExamSchedule.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755986163566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755991756930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1202 @@\n+import React, { useState } from 'react'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n+  Calendar,\n+  Clock,\n+  MapPin,\n+  Users,\n+  BookOpen,\n+  Plus,\n+  Edit,\n+  Trash2,\n+  Eye,\n+  Download,\n+  Upload,\n+  CheckCircle,\n+  AlertTriangle,\n+  Filter,\n+  Search,\n+} from 'lucide-react'\n+import Input from '../../components/ui/Input'\n+import Dialog from '../../components/ui/Dialog'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import { examApi } from '../../lib/api/exams'\n+\n+const ScheduleCalendarView = ({ schedules, onEditSchedule, onViewDetails }) => {\n+  const [currentDate, setCurrentDate] = useState(new Date())\n+\n+  const getDaysInMonth = date => {\n+    const year = date.getFullYear()\n+    const month = date.getMonth()\n+    const firstDay = new Date(year, month, 1)\n+    const lastDay = new Date(year, month + 1, 0)\n+    const daysInMonth = lastDay.getDate()\n+    const startingDayOfWeek = firstDay.getDay()\n+\n+    const days = []\n+\n+    // Add empty cells for days before the first day of the month\n+    for (let i = 0; i < startingDayOfWeek; i++) {\n+      days.push(null)\n+    }\n+\n+    // Add days of the month\n+    for (let day = 1; day <= daysInMonth; day++) {\n+      days.push(new Date(year, month, day))\n+    }\n+\n+    return days\n+  }\n+\n+  const getSchedulesForDate = date => {\n+    if (!date) return []\n+    const dateStr = date.toISOString().split('T')[0]\n+    return schedules?.filter(schedule => schedule.examDate === dateStr) || []\n+  }\n+\n+  const navigateMonth = direction => {\n+    setCurrentDate(prev => {\n+      const newDate = new Date(prev)\n+      newDate.setMonth(prev.getMonth() + direction)\n+      return newDate\n+    })\n+  }\n+\n+  const days = getDaysInMonth(currentDate)\n+  const monthNames = [\n+    'January',\n+    'February',\n+    'March',\n+    'April',\n+    'May',\n+    'June',\n+    'July',\n+    'August',\n+    'September',\n+    'October',\n+    'November',\n+    'December',\n+  ]\n+\n+  return (\n+    <div className=\"bg-white rounded-lg shadow p-6\">\n+      <div className=\"flex justify-between items-center mb-6\">\n+        <h2 className=\"text-lg font-semibold\">\n+          {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n+        </h2>\n+        <div className=\"flex gap-2\">\n+          <button\n+            onClick={() => navigateMonth(-1)}\n+            className=\"p-2 border rounded-lg hover:bg-gray-50\"\n+          >\n+            ←\n+          </button>\n+          <button\n+            onClick={() => setCurrentDate(new Date())}\n+            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50 text-sm\"\n+          >\n+            Today\n+          </button>\n+          <button\n+            onClick={() => navigateMonth(1)}\n+            className=\"p-2 border rounded-lg hover:bg-gray-50\"\n+          >\n+            →\n+          </button>\n+        </div>\n+      </div>\n+\n+      <div className=\"grid grid-cols-7 gap-1\">\n+        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n+          <div\n+            key={day}\n+            className=\"p-2 text-center text-sm font-medium text-gray-500 border-b\"\n+          >\n+            {day}\n+          </div>\n+        ))}\n+\n+        {Array.isArray(days) &&\n+          days.map((day, index) => {\n+            const daySchedules = day ? getSchedulesForDate(day) : []\n+            const isToday =\n+              day && day.toDateString() === new Date().toDateString()\n+\n+            return (\n+              <div\n+                key={index}\n+                className={`min-h-[100px] p-1 border border-gray-100 ${\n+                  !day\n+                    ? 'bg-gray-50'\n+                    : isToday\n+                      ? 'bg-blue-50'\n+                      : 'bg-white hover:bg-gray-50'\n+                }`}\n+              >\n+                {day && (\n+                  <>\n+                    <div\n+                      className={`text-sm font-medium mb-1 ${\n+                        isToday ? 'text-blue-600' : 'text-gray-900'\n+                      }`}\n+                    >\n+                      {day.getDate()}\n+                    </div>\n+                    <div className=\"space-y-1\">\n+                      {daySchedules.slice(0, 2).map(schedule => (\n+                        <div\n+                          key={schedule.id}\n+                          onClick={() => onViewDetails(schedule)}\n+                          className=\"text-xs p-1 bg-blue-100 text-blue-800 rounded cursor-pointer hover:bg-blue-200 truncate\"\n+                          title={`${schedule.subjectName} - ${schedule.examGroupName}`}\n+                        >\n+                          {schedule.subjectName}\n+                        </div>\n+                      ))}\n+                      {daySchedules.length > 2 && (\n+                        <div className=\"text-xs text-gray-500\">\n+                          +{daySchedules.length - 2} more\n+                        </div>\n+                      )}\n+                    </div>\n+                  </>\n+                )}\n+              </div>\n+            )\n+          })}\n+      </div>\n+    </div>\n+  )\n+}\n+\n+const ScheduleListView = ({\n+  schedules,\n+  onEditSchedule,\n+  onDeleteSchedule,\n+  onViewDetails,\n+}) => {\n+  if (!schedules || schedules.length === 0) {\n+    return (\n+      <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n+        <Calendar className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n+        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n+          No Schedules Found\n+        </h3>\n+        <p className=\"text-gray-500\">\n+          No exam schedules match your current filters.\n+        </p>\n+      </div>\n+    )\n+  }\n+\n+  const getStatusColor = status => {\n+    switch (status) {\n+      case 'scheduled':\n+        return 'text-blue-600 bg-blue-100'\n+      case 'ongoing':\n+        return 'text-green-600 bg-green-100'\n+      case 'completed':\n+        return 'text-gray-600 bg-gray-100'\n+      case 'cancelled':\n+        return 'text-red-600 bg-red-100'\n+      default:\n+        return 'text-gray-600 bg-gray-100'\n+    }\n+  }\n+\n+  return (\n+    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n+      <div className=\"overflow-x-auto\">\n+        <table className=\"w-full\">\n+          <thead className=\"bg-gray-50\">\n+            <tr>\n+              <th className=\"text-left py-3 px-4\">Date & Time</th>\n+              <th className=\"text-left py-3 px-4\">Exam Group</th>\n+              <th className=\"text-left py-3 px-4\">Subject</th>\n+              <th className=\"text-left py-3 px-4\">Class</th>\n+              <th className=\"text-left py-3 px-4\">Room</th>\n+              <th className=\"text-left py-3 px-4\">Duration</th>\n+              <th className=\"text-left py-3 px-4\">Status</th>\n+              <th className=\"text-center py-3 px-4\">Actions</th>\n+            </tr>\n+          </thead>\n+          <tbody>\n+            {Array.isArray(schedules) &&\n+              schedules.map(schedule => (\n+                <tr key={schedule.id} className=\"border-b hover:bg-gray-50\">\n+                  <td className=\"py-3 px-4\">\n+                    <div className=\"flex items-center gap-2\">\n+                      <Calendar className=\"w-4 h-4 text-gray-400\" />\n+                      <div>\n+                        <div className=\"font-medium\">\n+                          {new Date(schedule.examDate).toLocaleDateString()}\n+                        </div>\n+                        <div className=\"text-sm text-gray-500\">\n+                          {schedule.startTime} - {schedule.endTime}\n+                        </div>\n+                      </div>\n+                    </div>\n+                  </td>\n+                  <td className=\"py-3 px-4\">\n+                    <div className=\"font-medium\">{schedule.examGroupName}</div>\n+                    <div className=\"text-sm text-gray-500\">\n+                      {schedule.examType}\n+                    </div>\n+                  </td>\n+                  <td className=\"py-3 px-4\">\n+                    <div className=\"flex items-center gap-2\">\n+                      <BookOpen className=\"w-4 h-4 text-gray-400\" />\n+                      {schedule.subjectName}\n+                    </div>\n+                  </td>\n+                  <td className=\"py-3 px-4\">\n+                    <div className=\"flex items-center gap-2\">\n+                      <Users className=\"w-4 h-4 text-gray-400\" />\n+                      {schedule.className} - {schedule.section}\n+                    </div>\n+                  </td>\n+                  <td className=\"py-3 px-4\">\n+                    <div className=\"flex items-center gap-2\">\n+                      <MapPin className=\"w-4 h-4 text-gray-400\" />\n+                      {schedule.examRoom || 'Not assigned'}\n+                    </div>\n+                  </td>\n+                  <td className=\"py-3 px-4\">\n+                    <div className=\"flex items-center gap-2\">\n+                      <Clock className=\"w-4 h-4 text-gray-400\" />\n+                      {schedule.duration} min\n+                    </div>\n+                  </td>\n+                  <td className=\"py-3 px-4\">\n+                    <span\n+                      className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(schedule.status)}`}\n+                    >\n+                      {schedule.status.charAt(0).toUpperCase() +\n+                        schedule.status.slice(1)}\n+                    </span>\n+                  </td>\n+                  <td className=\"py-3 px-4 text-center\">\n+                    <div className=\"flex justify-center gap-2\">\n+                      <button\n+                        onClick={() => onViewDetails(schedule)}\n+                        className=\"p-1 text-gray-400 hover:text-blue-600\"\n+                        title=\"View Details\"\n+                      >\n+                        <Eye className=\"w-4 h-4\" />\n+                      </button>\n+                      <button\n+                        onClick={() => onEditSchedule(schedule)}\n+                        className=\"p-1 text-gray-400 hover:text-green-600\"\n+                        title=\"Edit\"\n+                      >\n+                        <Edit className=\"w-4 h-4\" />\n+                      </button>\n+                      <button\n+                        onClick={() => onDeleteSchedule(schedule)}\n+                        className=\"p-1 text-gray-400 hover:text-red-600\"\n+                        title=\"Delete\"\n+                      >\n+                        <Trash2 className=\"w-4 h-4\" />\n+                      </button>\n+                    </div>\n+                  </td>\n+                </tr>\n+              ))}\n+          </tbody>\n+        </table>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+const ScheduleDialog = ({ schedule, open, onClose, onSave }) => {\n+  const [formData, setFormData] = useState({\n+    examGroupId: schedule?.examGroupId || '',\n+    subjectId: schedule?.subjectId || '',\n+    classId: schedule?.classId || '',\n+    section: schedule?.section || '',\n+    examDate: schedule?.examDate || '',\n+    startTime: schedule?.startTime || '',\n+    endTime: schedule?.endTime || '',\n+    duration: schedule?.duration || 180,\n+    examRoom: schedule?.examRoom || '',\n+    maxStudents: schedule?.maxStudents || 30,\n+    instructions: schedule?.instructions || '',\n+    status: schedule?.status || 'scheduled',\n+    invigilators: schedule?.invigilators || [],\n+  })\n+\n+  const { data: examGroupsData } = useQuery({\n+    queryKey: ['exam-groups', 'active'],\n+    queryFn: () => examApi.getActiveExamGroups(),\n+  })\n+\n+  const { data: subjectsData } = useQuery({\n+    queryKey: ['subjects', 'all'],\n+    queryFn: () => examApi.getSubjects(),\n+  })\n+\n+  const { data: classesData } = useQuery({\n+    queryKey: ['classes', 'all'],\n+    queryFn: () => examApi.getClasses(),\n+  })\n+\n+  const { data: staffData } = useQuery({\n+    queryKey: ['staff', 'teachers'],\n+    queryFn: () => examApi.getTeachers(),\n+  })\n+\n+  const handleSave = () => {\n+    onSave(schedule?.id, formData)\n+    onClose()\n+  }\n+\n+  const calculateEndTime = (startTime, duration) => {\n+    if (!startTime || !duration) return ''\n+\n+    const [hours, minutes] = startTime.split(':').map(Number)\n+    const startMinutes = hours * 60 + minutes\n+    const endMinutes = startMinutes + parseInt(duration)\n+\n+    const endHours = Math.floor(endMinutes / 60)\n+    const endMins = endMinutes % 60\n+\n+    return `${endHours.toString().padStart(2, '0')}:${endMins.toString().padStart(2, '0')}`\n+  }\n+\n+  const handleStartTimeChange = startTime => {\n+    setFormData(prev => ({\n+      ...prev,\n+      startTime,\n+      endTime: calculateEndTime(startTime, prev.duration),\n+    }))\n+  }\n+\n+  const handleDurationChange = duration => {\n+    setFormData(prev => ({\n+      ...prev,\n+      duration: parseInt(duration) || 0,\n+      endTime: calculateEndTime(prev.startTime, duration),\n+    }))\n+  }\n+\n+  const toggleInvigilator = staffId => {\n+    setFormData(prev => ({\n+      ...prev,\n+      invigilators: prev.invigilators.includes(staffId)\n+        ? prev.invigilators.filter(id => id !== staffId)\n+        : [...prev.invigilators, staffId],\n+    }))\n+  }\n+\n+  return (\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      title={schedule ? 'Edit Exam Schedule' : 'Create Exam Schedule'}\n+      size=\"xl\"\n+    >\n+      <div className=\"space-y-6\">\n+        {/* Basic Information */}\n+        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+          <div>\n+            <label className=\"block text-sm font-medium mb-1\">\n+              Exam Group *\n+            </label>\n+            <select\n+              value={formData.examGroupId}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, examGroupId: e.target.value }))\n+              }\n+              className=\"w-full border rounded-lg px-3 py-2\"\n+            >\n+              <option value=\"\">Select Exam Group</option>\n+              {examGroupsData?.data?.map(group => (\n+                <option key={group.id} value={group.id}>\n+                  {group.name}\n+                </option>\n+              ))}\n+            </select>\n+          </div>\n+          <div>\n+            <label className=\"block text-sm font-medium mb-1\">Subject *</label>\n+            <select\n+              value={formData.subjectId}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, subjectId: e.target.value }))\n+              }\n+              className=\"w-full border rounded-lg px-3 py-2\"\n+            >\n+              <option value=\"\">Select Subject</option>\n+              {Array.isArray(subjectsData?.data) &&\n+                subjectsData.data.map(subject => (\n+                  <option key={subject.id} value={subject.id}>\n+                    {subject.name}\n+                  </option>\n+                ))}\n+            </select>\n+          </div>\n+          <div>\n+            <label className=\"block text-sm font-medium mb-1\">Class *</label>\n+            <select\n+              value={formData.classId}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, classId: e.target.value }))\n+              }\n+              className=\"w-full border rounded-lg px-3 py-2\"\n+            >\n+              <option value=\"\">Select Class</option>\n+              {Array.isArray(classesData?.data) &&\n+                classesData.data.map(cls => (\n+                  <option key={cls.id} value={cls.id}>\n+                    {cls.name}\n+                  </option>\n+                ))}\n+            </select>\n+          </div>\n+          <Input\n+            label=\"Section *\"\n+            value={formData.section}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, section: e.target.value }))\n+            }\n+            placeholder=\"A, B, C...\"\n+          />\n+        </div>\n+\n+        {/* Date and Time */}\n+        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n+          <Input\n+            label=\"Exam Date *\"\n+            type=\"date\"\n+            value={formData.examDate}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, examDate: e.target.value }))\n+            }\n+          />\n+          <Input\n+            label=\"Start Time *\"\n+            type=\"time\"\n+            value={formData.startTime}\n+            onChange={e => handleStartTimeChange(e.target.value)}\n+          />\n+          <Input\n+            label=\"Duration (minutes) *\"\n+            type=\"number\"\n+            value={formData.duration}\n+            onChange={e => handleDurationChange(e.target.value)}\n+            min=\"1\"\n+          />\n+          <Input\n+            label=\"End Time\"\n+            type=\"time\"\n+            value={formData.endTime}\n+            readOnly\n+            className=\"bg-gray-50\"\n+          />\n+        </div>\n+\n+        {/* Venue and Capacity */}\n+        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+          <Input\n+            label=\"Exam Room\"\n+            value={formData.examRoom}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, examRoom: e.target.value }))\n+            }\n+            placeholder=\"Room number or name\"\n+          />\n+          <Input\n+            label=\"Max Students\"\n+            type=\"number\"\n+            value={formData.maxStudents}\n+            onChange={e =>\n+              setFormData(prev => ({\n+                ...prev,\n+                maxStudents: parseInt(e.target.value) || 0,\n+              }))\n+            }\n+            min=\"1\"\n+          />\n+        </div>\n+\n+        {/* Invigilators */}\n+        <div>\n+          <label className=\"block text-sm font-medium mb-2\">Invigilators</label>\n+          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n+            {staffData?.data?.map(staff => (\n+              <label key={staff.id} className=\"flex items-center gap-2\">\n+                <input\n+                  type=\"checkbox\"\n+                  checked={formData.invigilators.includes(staff.id)}\n+                  onChange={() => toggleInvigilator(staff.id)}\n+                  className=\"rounded\"\n+                />\n+                <span className=\"text-sm\">{staff.name}</span>\n+              </label>\n+            ))}\n+          </div>\n+        </div>\n+\n+        {/* Instructions */}\n+        <div>\n+          <label className=\"block text-sm font-medium mb-1\">\n+            Special Instructions\n+          </label>\n+          <textarea\n+            value={formData.instructions}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, instructions: e.target.value }))\n+            }\n+            rows={3}\n+            className=\"w-full border rounded-lg px-3 py-2\"\n+            placeholder=\"Any special instructions for the exam...\"\n+          />\n+        </div>\n+\n+        {/* Status */}\n+        <div>\n+          <label className=\"block text-sm font-medium mb-1\">Status</label>\n+          <select\n+            value={formData.status}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, status: e.target.value }))\n+            }\n+            className=\"w-full border rounded-lg px-3 py-2 max-w-xs\"\n+          >\n+            <option value=\"scheduled\">Scheduled</option>\n+            <option value=\"ongoing\">Ongoing</option>\n+            <option value=\"completed\">Completed</option>\n+            <option value=\"cancelled\">Cancelled</option>\n+          </select>\n+        </div>\n+\n+        {/* Actions */}\n+        <div className=\"flex justify-end gap-2\">\n+          <button\n+            onClick={onClose}\n+            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n+          >\n+            Cancel\n+          </button>\n+          <button\n+            onClick={handleSave}\n+            disabled={\n+              !formData.examGroupId ||\n+              !formData.subjectId ||\n+              !formData.classId ||\n+              !formData.examDate\n+            }\n+            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n+          >\n+            <CheckCircle className=\"w-4 h-4\" />\n+            {schedule ? 'Update' : 'Create'} Schedule\n+          </button>\n+        </div>\n+      </div>\n+    </Dialog>\n+  )\n+}\n+\n+const BulkScheduleDialog = ({ open, onClose, onSave }) => {\n+  const [formData, setFormData] = useState({\n+    examGroupId: '',\n+    classIds: [],\n+    subjects: [],\n+    startDate: '',\n+    endDate: '',\n+    startTime: '09:00',\n+    duration: 180,\n+    examRoom: '',\n+    maxStudents: 30,\n+    skipWeekends: true,\n+    skipHolidays: true,\n+  })\n+\n+  const { data: examGroupsData } = useQuery({\n+    queryKey: ['exam-groups', 'active'],\n+    queryFn: () => examApi.getActiveExamGroups(),\n+  })\n+\n+  const { data: classesData } = useQuery({\n+    queryKey: ['classes', 'all'],\n+    queryFn: () => examApi.getClasses(),\n+  })\n+\n+  const { data: subjectsData } = useQuery({\n+    queryKey: ['subjects', 'all'],\n+    queryFn: () => examApi.getSubjects(),\n+  })\n+\n+  const handleSave = () => {\n+    onSave(formData)\n+    onClose()\n+  }\n+\n+  const toggleClass = classId => {\n+    setFormData(prev => ({\n+      ...prev,\n+      classIds: prev.classIds.includes(classId)\n+        ? prev.classIds.filter(id => id !== classId)\n+        : [...prev.classIds, classId],\n+    }))\n+  }\n+\n+  const toggleSubject = subjectId => {\n+    setFormData(prev => ({\n+      ...prev,\n+      subjects: prev.subjects.includes(subjectId)\n+        ? prev.subjects.filter(id => id !== subjectId)\n+        : [...prev.subjects, subjectId],\n+    }))\n+  }\n+\n+  return (\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      title=\"Bulk Create Exam Schedules\"\n+      size=\"xl\"\n+    >\n+      <div className=\"space-y-6\">\n+        {/* Exam Group */}\n+        <div>\n+          <label className=\"block text-sm font-medium mb-1\">Exam Group *</label>\n+          <select\n+            value={formData.examGroupId}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, examGroupId: e.target.value }))\n+            }\n+            className=\"w-full border rounded-lg px-3 py-2\"\n+          >\n+            <option value=\"\">Select Exam Group</option>\n+            {examGroupsData?.data?.map(group => (\n+              <option key={group.id} value={group.id}>\n+                {group.name}\n+              </option>\n+            ))}\n+          </select>\n+        </div>\n+\n+        {/* Classes */}\n+        <div>\n+          <label className=\"block text-sm font-medium mb-2\">Classes *</label>\n+          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n+            {Array.isArray(classesData?.data) &&\n+              classesData.data.map(cls => (\n+                <label key={cls.id} className=\"flex items-center gap-2\">\n+                  <input\n+                    type=\"checkbox\"\n+                    checked={formData.classIds.includes(cls.id)}\n+                    onChange={() => toggleClass(cls.id)}\n+                    className=\"rounded\"\n+                  />\n+                  <span className=\"text-sm\">{cls.name}</span>\n+                </label>\n+              ))}\n+          </div>\n+        </div>\n+\n+        {/* Subjects */}\n+        <div>\n+          <label className=\"block text-sm font-medium mb-2\">Subjects *</label>\n+          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n+            {Array.isArray(subjectsData?.data) &&\n+              subjectsData.data.map(subject => (\n+                <label key={subject.id} className=\"flex items-center gap-2\">\n+                  <input\n+                    type=\"checkbox\"\n+                    checked={formData.subjects.includes(subject.id)}\n+                    onChange={() => toggleSubject(subject.id)}\n+                    className=\"rounded\"\n+                  />\n+                  <span className=\"text-sm\">{subject.name}</span>\n+                </label>\n+              ))}\n+          </div>\n+        </div>\n+\n+        {/* Date Range */}\n+        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+          <Input\n+            label=\"Start Date *\"\n+            type=\"date\"\n+            value={formData.startDate}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, startDate: e.target.value }))\n+            }\n+          />\n+          <Input\n+            label=\"End Date *\"\n+            type=\"date\"\n+            value={formData.endDate}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, endDate: e.target.value }))\n+            }\n+          />\n+        </div>\n+\n+        {/* Time and Duration */}\n+        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n+          <Input\n+            label=\"Start Time *\"\n+            type=\"time\"\n+            value={formData.startTime}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, startTime: e.target.value }))\n+            }\n+          />\n+          <Input\n+            label=\"Duration (minutes) *\"\n+            type=\"number\"\n+            value={formData.duration}\n+            onChange={e =>\n+              setFormData(prev => ({\n+                ...prev,\n+                duration: parseInt(e.target.value) || 0,\n+              }))\n+            }\n+            min=\"1\"\n+          />\n+          <Input\n+            label=\"Max Students\"\n+            type=\"number\"\n+            value={formData.maxStudents}\n+            onChange={e =>\n+              setFormData(prev => ({\n+                ...prev,\n+                maxStudents: parseInt(e.target.value) || 0,\n+              }))\n+            }\n+            min=\"1\"\n+          />\n+        </div>\n+\n+        {/* Options */}\n+        <div className=\"space-y-3\">\n+          <label className=\"flex items-center gap-2\">\n+            <input\n+              type=\"checkbox\"\n+              checked={formData.skipWeekends}\n+              onChange={e =>\n+                setFormData(prev => ({\n+                  ...prev,\n+                  skipWeekends: e.target.checked,\n+                }))\n+              }\n+              className=\"rounded\"\n+            />\n+            <span className=\"text-sm\">Skip weekends</span>\n+          </label>\n+          <label className=\"flex items-center gap-2\">\n+            <input\n+              type=\"checkbox\"\n+              checked={formData.skipHolidays}\n+              onChange={e =>\n+                setFormData(prev => ({\n+                  ...prev,\n+                  skipHolidays: e.target.checked,\n+                }))\n+              }\n+              className=\"rounded\"\n+            />\n+            <span className=\"text-sm\">Skip holidays</span>\n+          </label>\n+        </div>\n+\n+        {/* Actions */}\n+        <div className=\"flex justify-end gap-2\">\n+          <button\n+            onClick={onClose}\n+            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n+          >\n+            Cancel\n+          </button>\n+          <button\n+            onClick={handleSave}\n+            disabled={\n+              !formData.examGroupId ||\n+              formData.classIds.length === 0 ||\n+              formData.subjects.length === 0\n+            }\n+            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n+          >\n+            Create Schedules\n+          </button>\n+        </div>\n+      </div>\n+    </Dialog>\n+  )\n+}\n+const ExamSchedule = () => {\n+  const [viewMode, setViewMode] = useState('calendar') // calendar, list\n+  const [selectedSchedule, setSelectedSchedule] = useState(null)\n+  const [showScheduleDialog, setShowScheduleDialog] = useState(false)\n+  const [showBulkDialog, setShowBulkDialog] = useState(false)\n+  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [filterExamGroup, setFilterExamGroup] = useState('all')\n+  const [filterStatus, setFilterStatus] = useState('all')\n+\n+  const queryClient = useQueryClient()\n+\n+  const { data: schedulesData, isLoading } = useQuery({\n+    queryKey: ['exam-schedules', 'all'],\n+    queryFn: () => examApi.getExamSchedules(),\n+  })\n+\n+  const { data: examGroupsData } = useQuery({\n+    queryKey: ['exam-groups', 'active'],\n+    queryFn: () => examApi.getActiveExamGroups(),\n+  })\n+\n+  const saveScheduleMutation = useMutation({\n+    mutationFn: ({ id, data }) =>\n+      id\n+        ? examApi.updateExamSchedule(id, data)\n+        : examApi.createExamSchedule(data),\n+    onSuccess: () => {\n+      queryClient.invalidateQueries(['exam-schedules'])\n+      setShowScheduleDialog(false)\n+      setSelectedSchedule(null)\n+    },\n+  })\n+\n+  const bulkCreateSchedulesMutation = useMutation({\n+    mutationFn: examApi.bulkCreateSchedules,\n+    onSuccess: () => {\n+      queryClient.invalidateQueries(['exam-schedules'])\n+      setShowBulkDialog(false)\n+    },\n+  })\n+\n+  const deleteScheduleMutation = useMutation({\n+    mutationFn: examApi.deleteExamSchedule,\n+    onSuccess: () => {\n+      queryClient.invalidateQueries(['exam-schedules'])\n+    },\n+  })\n+\n+  const handleEditSchedule = schedule => {\n+    setSelectedSchedule(schedule)\n+    setShowScheduleDialog(true)\n+  }\n+\n+  const handleDeleteSchedule = schedule => {\n+    if (\n+      confirm(\n+        `Are you sure you want to delete the exam schedule for ${schedule.subjectName}?`,\n+      )\n+    ) {\n+      deleteScheduleMutation.mutate(schedule.id)\n+    }\n+  }\n+\n+  const handleViewDetails = schedule => {\n+    setSelectedSchedule(schedule)\n+    setShowDetailsDialog(true)\n+  }\n+\n+  const handleSaveSchedule = (id, data) => {\n+    saveScheduleMutation.mutate({ id, data })\n+  }\n+\n+  const handleBulkCreate = data => {\n+    bulkCreateSchedulesMutation.mutate(data)\n+  }\n+\n+  const handleAddSchedule = () => {\n+    setSelectedSchedule(null)\n+    setShowScheduleDialog(true)\n+  }\n+\n+  const handleExportSchedule = () => {\n+    // Export functionality\n+    console.log('Exporting schedule...')\n+  }\n+\n+  const filteredSchedules =\n+    schedulesData?.data?.filter(schedule => {\n+      const matchesSearch =\n+        schedule.subjectName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n+        schedule.examGroupName\n+          .toLowerCase()\n+          .includes(searchTerm.toLowerCase()) ||\n+        schedule.className.toLowerCase().includes(searchTerm.toLowerCase())\n+      const matchesExamGroup =\n+        filterExamGroup === 'all' || schedule.examGroupId === filterExamGroup\n+      const matchesStatus =\n+        filterStatus === 'all' || schedule.status === filterStatus\n+\n+      return matchesSearch && matchesExamGroup && matchesStatus\n+    }) || []\n+\n+  const getStatistics = () => {\n+    const schedules = schedulesData?.data || []\n+    const today = new Date().toISOString().split('T')[0]\n+\n+    return {\n+      total: schedules.length,\n+      today: schedules.filter(s => s.examDate === today).length,\n+      upcoming: schedules.filter(\n+        s => s.examDate > today && s.status === 'scheduled',\n+      ).length,\n+      completed: schedules.filter(s => s.status === 'completed').length,\n+    }\n+  }\n+\n+  const stats = getStatistics()\n+\n+  if (isLoading) return <LoadingSkeleton />\n+\n+  return (\n+    <div className=\"space-y-6\">\n+      <div className=\"flex justify-between items-center\">\n+        <h1 className=\"text-2xl font-bold\">Exam Schedule</h1>\n+        <div className=\"flex gap-2\">\n+          <button\n+            onClick={() => setShowBulkDialog(true)}\n+            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n+          >\n+            <Plus className=\"w-4 h-4\" />\n+            Bulk Create\n+          </button>\n+          <button\n+            onClick={handleExportSchedule}\n+            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n+          >\n+            <Download className=\"w-4 h-4\" />\n+            Export\n+          </button>\n+          <button\n+            onClick={handleAddSchedule}\n+            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n+          >\n+            <Plus className=\"w-4 h-4\" />\n+            Add Schedule\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Statistics */}\n+      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <Calendar className=\"w-8 h-8 text-blue-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">{stats.total}</p>\n+              <p className=\"text-sm text-gray-600\">Total Schedules</p>\n+            </div>\n+          </div>\n+        </div>\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <Clock className=\"w-8 h-8 text-green-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">{stats.today}</p>\n+              <p className=\"text-sm text-gray-600\">Today's Exams</p>\n+            </div>\n+          </div>\n+        </div>\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <AlertTriangle className=\"w-8 h-8 text-yellow-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">{stats.upcoming}</p>\n+              <p className=\"text-sm text-gray-600\">Upcoming</p>\n+            </div>\n+          </div>\n+        </div>\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <CheckCircle className=\"w-8 h-8 text-gray-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">{stats.completed}</p>\n+              <p className=\"text-sm text-gray-600\">Completed</p>\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Filters and View Toggle */}\n+      <div className=\"bg-white rounded-lg shadow p-4\">\n+        <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n+          <div className=\"flex gap-4 flex-1\">\n+            <div className=\"relative\">\n+              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n+              <input\n+                type=\"text\"\n+                placeholder=\"Search schedules...\"\n+                value={searchTerm}\n+                onChange={e => setSearchTerm(e.target.value)}\n+                className=\"pl-10 pr-4 py-2 border rounded-lg w-64\"\n+              />\n+            </div>\n+            <select\n+              value={filterExamGroup}\n+              onChange={e => setFilterExamGroup(e.target.value)}\n+              className=\"border rounded-lg px-3 py-2\"\n+            >\n+              <option value=\"all\">All Exam Groups</option>\n+              {examGroupsData?.data?.map(group => (\n+                <option key={group.id} value={group.id}>\n+                  {group.name}\n+                </option>\n+              ))}\n+            </select>\n+            <select\n+              value={filterStatus}\n+              onChange={e => setFilterStatus(e.target.value)}\n+              className=\"border rounded-lg px-3 py-2\"\n+            >\n+              <option value=\"all\">All Status</option>\n+              <option value=\"scheduled\">Scheduled</option>\n+              <option value=\"ongoing\">Ongoing</option>\n+              <option value=\"completed\">Completed</option>\n+              <option value=\"cancelled\">Cancelled</option>\n+            </select>\n+          </div>\n+\n+          <div className=\"flex gap-2\">\n+            <button\n+              onClick={() => setViewMode('calendar')}\n+              className={`px-4 py-2 rounded-lg flex items-center gap-2 ${\n+                viewMode === 'calendar'\n+                  ? 'bg-blue-100 text-blue-700'\n+                  : 'border hover:bg-gray-50'\n+              }`}\n+            >\n+              <Calendar className=\"w-4 h-4\" />\n+              Calendar\n+            </button>\n+            <button\n+              onClick={() => setViewMode('list')}\n+              className={`px-4 py-2 rounded-lg flex items-center gap-2 ${\n+                viewMode === 'list'\n+                  ? 'bg-blue-100 text-blue-700'\n+                  : 'border hover:bg-gray-50'\n+              }`}\n+            >\n+              <Users className=\"w-4 h-4\" />\n+              List\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Schedule View */}\n+      {viewMode === 'calendar' ? (\n+        <ScheduleCalendarView\n+          schedules={filteredSchedules}\n+          onEditSchedule={handleEditSchedule}\n+          onViewDetails={handleViewDetails}\n+        />\n+      ) : (\n+        <ScheduleListView\n+          schedules={filteredSchedules}\n+          onEditSchedule={handleEditSchedule}\n+          onDeleteSchedule={handleDeleteSchedule}\n+          onViewDetails={handleViewDetails}\n+        />\n+      )}\n+\n+      {/* Schedule Dialog */}\n+      <ScheduleDialog\n+        schedule={selectedSchedule}\n+        open={showScheduleDialog}\n+        onClose={() => {\n+          setShowScheduleDialog(false)\n+          setSelectedSchedule(null)\n+        }}\n+        onSave={handleSaveSchedule}\n+      />\n+\n+      {/* Bulk Create Dialog */}\n+      <BulkScheduleDialog\n+        open={showBulkDialog}\n+        onClose={() => setShowBulkDialog(false)}\n+        onSave={handleBulkCreate}\n+      />\n+\n+      {/* Details Dialog */}\n+      <Dialog\n+        open={showDetailsDialog}\n+        onClose={() => setShowDetailsDialog(false)}\n+        title=\"Exam Schedule Details\"\n+        size=\"lg\"\n+      >\n+        {selectedSchedule && (\n+          <div className=\"space-y-4\">\n+            <div className=\"grid grid-cols-2 gap-4\">\n+              <div>\n+                <label className=\"block text-sm font-medium text-gray-700\">\n+                  Exam Group\n+                </label>\n+                <p className=\"text-sm\">{selectedSchedule.examGroupName}</p>\n+              </div>\n+              <div>\n+                <label className=\"block text-sm font-medium text-gray-700\">\n+                  Subject\n+                </label>\n+                <p className=\"text-sm\">{selectedSchedule.subjectName}</p>\n+              </div>\n+              <div>\n+                <label className=\"block text-sm font-medium text-gray-700\">\n+                  Class\n+                </label>\n+                <p className=\"text-sm\">\n+                  {selectedSchedule.className} - {selectedSchedule.section}\n+                </p>\n+              </div>\n+              <div>\n+                <label className=\"block text-sm font-medium text-gray-700\">\n+                  Date & Time\n+                </label>\n+                <p className=\"text-sm\">\n+                  {new Date(selectedSchedule.examDate).toLocaleDateString()} |\n+                  {selectedSchedule.startTime} - {selectedSchedule.endTime}\n+                </p>\n+              </div>\n+              <div>\n+                <label className=\"block text-sm font-medium text-gray-700\">\n+                  Room\n+                </label>\n+                <p className=\"text-sm\">\n+                  {selectedSchedule.examRoom || 'Not assigned'}\n+                </p>\n+              </div>\n+              <div>\n+                <label className=\"block text-sm font-medium text-gray-700\">\n+                  Duration\n+                </label>\n+                <p className=\"text-sm\">{selectedSchedule.duration} minutes</p>\n+              </div>\n+            </div>\n+\n+            {selectedSchedule.instructions && (\n+              <div>\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n+                  Instructions\n+                </label>\n+                <p className=\"text-sm bg-gray-50 p-3 rounded\">\n+                  {selectedSchedule.instructions}\n+                </p>\n+              </div>\n+            )}\n+\n+            <div className=\"flex justify-end\">\n+              <button\n+                onClick={() => setShowDetailsDialog(false)}\n+                className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n+              >\n+                Close\n+              </button>\n+            </div>\n+          </div>\n+        )}\n+      </Dialog>\n+    </div>\n+  )\n+}\n+\n+export default ExamSchedule\n"
                },
                {
                    "date": 1755994925691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   Filter,\n   Search,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { examApi } from '../../lib/api/exams'\n \n const ScheduleCalendarView = ({ schedules, onEditSchedule, onViewDetails }) => {\n@@ -1199,1064 +1199,4 @@\n   )\n }\n \n export default ExamSchedule\n-import React, { useState } from 'react';\n-import { useState } from 'react'\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n-import { \n-  Calendar,\n-  Clock,\n-  MapPin,\n-  Users,\n-  BookOpen,\n-  Plus,\n-  Edit,\n-  Trash2,\n-  Eye,\n-  Download,\n-  Upload,\n-  CheckCircle,\n-  AlertTriangle,\n-  Filter,\n-  Search\n-} from 'lucide-react';\n-import Input from '../../components/ui/Input';\n-import Dialog from '../../components/ui/Dialog';\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n-import { examApi } from '../../lib/api/exams';\n-\n-const ScheduleCalendarView = ({ schedules, onEditSchedule, onViewDetails }) => {\n-  const [currentDate, setCurrentDate] = useState(new Date());\n-  \n-  const getDaysInMonth = (date) => {\n-    const year = date.getFullYear();\n-    const month = date.getMonth();\n-    const firstDay = new Date(year, month, 1);\n-    const lastDay = new Date(year, month + 1, 0);\n-    const daysInMonth = lastDay.getDate();\n-    const startingDayOfWeek = firstDay.getDay();\n-    \n-    const days = [];\n-    \n-    // Add empty cells for days before the first day of the month\n-    for (let i = 0; i < startingDayOfWeek; i++) {\n-      days.push(null);\n-    }\n-    \n-    // Add days of the month\n-    for (let day = 1; day <= daysInMonth; day++) {\n-      days.push(new Date(year, month, day));\n-    }\n-    \n-    return days;\n-  };\n-\n-  const getSchedulesForDate = (date) => {\n-    if (!date) return [];\n-    const dateStr = date.toISOString().split('T')[0];\n-    return schedules?.filter(schedule => schedule.examDate === dateStr) || [];\n-  };\n-\n-  const navigateMonth = (direction) => {\n-    setCurrentDate(prev => {\n-      const newDate = new Date(prev);\n-      newDate.setMonth(prev.getMonth() + direction);\n-      return newDate;\n-    });\n-  };\n-\n-  const days = getDaysInMonth(currentDate);\n-  const monthNames = [\n-    'January', 'February', 'March', 'April', 'May', 'June',\n-    'July', 'August', 'September', 'October', 'November', 'December'\n-  ];\n-\n-  return (\n-    <div className=\"bg-white rounded-lg shadow p-6\">\n-      <div className=\"flex justify-between items-center mb-6\">\n-        <h2 className=\"text-lg font-semibold\">\n-          {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n-        </h2>\n-        <div className=\"flex gap-2\">\n-          <button\n-            onClick={() => navigateMonth(-1)}\n-            className=\"p-2 border rounded-lg hover:bg-gray-50\"\n-          >\n-            ←\n-          </button>\n-          <button\n-            onClick={() => setCurrentDate(new Date())}\n-            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50 text-sm\"\n-          >\n-            Today\n-          </button>\n-          <button\n-            onClick={() => navigateMonth(1)}\n-            className=\"p-2 border rounded-lg hover:bg-gray-50\"\n-          >\n-            →\n-          </button>\n-        </div>\n-      </div>\n-\n-      <div className=\"grid grid-cols-7 gap-1\">\n-        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n-          <div key={day} className=\"p-2 text-center text-sm font-medium text-gray-500 border-b\">\n-            {day}\n-          </div>\n-        ))}\n-        \n-        {Array.isArray(days) && days.map((day, index) => {\n-          const daySchedules = day ? getSchedulesForDate(day) : [];\n-          const isToday = day && day.toDateString() === new Date().toDateString();\n-          \n-          return (\n-            <div\n-              key={index}\n-              className={`min-h-[100px] p-1 border border-gray-100 ${\n-                !day ? 'bg-gray-50' : isToday ? 'bg-blue-50' : 'bg-white hover:bg-gray-50'\n-              }`}\n-            >\n-              {day && (\n-                <>\n-                  <div className={`text-sm font-medium mb-1 ${\n-                    isToday ? 'text-blue-600' : 'text-gray-900'\n-                  }`}>\n-                    {day.getDate()}\n-                  </div>\n-                  <div className=\"space-y-1\">\n-                    {daySchedules.slice(0, 2).map(schedule => (\n-                      <div\n-                        key={schedule.id}\n-                        onClick={() => onViewDetails(schedule)}\n-                        className=\"text-xs p-1 bg-blue-100 text-blue-800 rounded cursor-pointer hover:bg-blue-200 truncate\"\n-                        title={`${schedule.subjectName} - ${schedule.examGroupName}`}\n-                      >\n-                        {schedule.subjectName}\n-                      </div>\n-                    ))}\n-                    {daySchedules.length > 2 && (\n-                      <div className=\"text-xs text-gray-500\">\n-                        +{daySchedules.length - 2} more\n-                      </div>\n-                    )}\n-                  </div>\n-                </>\n-              )}\n-            </div>\n-          );\n-        })}\n-      </div>\n-    </div>\n-  );\n-};\n-\n-const ScheduleListView = ({ schedules, onEditSchedule, onDeleteSchedule, onViewDetails }) => {\n-  if (!schedules || schedules.length === 0) {\n-    return (\n-      <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n-        <Calendar className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n-        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Schedules Found</h3>\n-        <p className=\"text-gray-500\">No exam schedules match your current filters.</p>\n-      </div>\n-    );\n-  }\n-\n-  const getStatusColor = (status) => {\n-    switch (status) {\n-      case 'scheduled': return 'text-blue-600 bg-blue-100';\n-      case 'ongoing': return 'text-green-600 bg-green-100';\n-      case 'completed': return 'text-gray-600 bg-gray-100';\n-      case 'cancelled': return 'text-red-600 bg-red-100';\n-      default: return 'text-gray-600 bg-gray-100';\n-    }\n-  };\n-\n-  return (\n-    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n-      <div className=\"overflow-x-auto\">\n-        <table className=\"w-full\">\n-          <thead className=\"bg-gray-50\">\n-            <tr>\n-              <th className=\"text-left py-3 px-4\">Date & Time</th>\n-              <th className=\"text-left py-3 px-4\">Exam Group</th>\n-              <th className=\"text-left py-3 px-4\">Subject</th>\n-              <th className=\"text-left py-3 px-4\">Class</th>\n-              <th className=\"text-left py-3 px-4\">Room</th>\n-              <th className=\"text-left py-3 px-4\">Duration</th>\n-              <th className=\"text-left py-3 px-4\">Status</th>\n-              <th className=\"text-center py-3 px-4\">Actions</th>\n-            </tr>\n-          </thead>\n-          <tbody>\n-            {Array.isArray(schedules) && schedules.map(schedule => (\n-              <tr key={schedule.id} className=\"border-b hover:bg-gray-50\">\n-                <td className=\"py-3 px-4\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <Calendar className=\"w-4 h-4 text-gray-400\" />\n-                    <div>\n-                      <div className=\"font-medium\">\n-                        {new Date(schedule.examDate).toLocaleDateString()}\n-                      </div>\n-                      <div className=\"text-sm text-gray-500\">\n-                        {schedule.startTime} - {schedule.endTime}\n-                      </div>\n-                    </div>\n-                  </div>\n-                </td>\n-                <td className=\"py-3 px-4\">\n-                  <div className=\"font-medium\">{schedule.examGroupName}</div>\n-                  <div className=\"text-sm text-gray-500\">{schedule.examType}</div>\n-                </td>\n-                <td className=\"py-3 px-4\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <BookOpen className=\"w-4 h-4 text-gray-400\" />\n-                    {schedule.subjectName}\n-                  </div>\n-                </td>\n-                <td className=\"py-3 px-4\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <Users className=\"w-4 h-4 text-gray-400\" />\n-                    {schedule.className} - {schedule.section}\n-                  </div>\n-                </td>\n-                <td className=\"py-3 px-4\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <MapPin className=\"w-4 h-4 text-gray-400\" />\n-                    {schedule.examRoom || 'Not assigned'}\n-                  </div>\n-                </td>\n-                <td className=\"py-3 px-4\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <Clock className=\"w-4 h-4 text-gray-400\" />\n-                    {schedule.duration} min\n-                  </div>\n-                </td>\n-                <td className=\"py-3 px-4\">\n-                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(schedule.status)}`}>\n-                    {schedule.status.charAt(0).toUpperCase() + schedule.status.slice(1)}\n-                  </span>\n-                </td>\n-                <td className=\"py-3 px-4 text-center\">\n-                  <div className=\"flex justify-center gap-2\">\n-                    <button\n-                      onClick={() => onViewDetails(schedule)}\n-                      className=\"p-1 text-gray-400 hover:text-blue-600\"\n-                      title=\"View Details\"\n-                    >\n-                      <Eye className=\"w-4 h-4\" />\n-                    </button>\n-                    <button\n-                      onClick={() => onEditSchedule(schedule)}\n-                      className=\"p-1 text-gray-400 hover:text-green-600\"\n-                      title=\"Edit\"\n-                    >\n-                      <Edit className=\"w-4 h-4\" />\n-                    </button>\n-                    <button\n-                      onClick={() => onDeleteSchedule(schedule)}\n-                      className=\"p-1 text-gray-400 hover:text-red-600\"\n-                      title=\"Delete\"\n-                    >\n-                      <Trash2 className=\"w-4 h-4\" />\n-                    </button>\n-                  </div>\n-                </td>\n-              </tr>\n-            ))}\n-          </tbody>\n-        </table>\n-      </div>\n-    </div>\n-  );\n-};const Sche\n-duleDialog = ({ schedule, open, onClose, onSave }) => {\n-  const [formData, setFormData] = useState({\n-    examGroupId: schedule?.examGroupId || '',\n-    subjectId: schedule?.subjectId || '',\n-    classId: schedule?.classId || '',\n-    section: schedule?.section || '',\n-    examDate: schedule?.examDate || '',\n-    startTime: schedule?.startTime || '',\n-    endTime: schedule?.endTime || '',\n-    duration: schedule?.duration || 180,\n-    examRoom: schedule?.examRoom || '',\n-    maxStudents: schedule?.maxStudents || 30,\n-    instructions: schedule?.instructions || '',\n-    status: schedule?.status || 'scheduled',\n-    invigilators: schedule?.invigilators || []\n-  });\n-\n-  const { data: examGroupsData } = useQuery({\n-    queryKey: ['exam-groups', 'active'],\n-    queryFn: () => examApi.getActiveExamGroups()\n-  });\n-\n-  const { data: subjectsData } = useQuery({\n-    queryKey: ['subjects', 'all'],\n-    queryFn: () => examApi.getSubjects()\n-  });\n-\n-  const { data: classesData } = useQuery({\n-    queryKey: ['classes', 'all'],\n-    queryFn: () => examApi.getClasses()\n-  });\n-\n-  const { data: staffData } = useQuery({\n-    queryKey: ['staff', 'teachers'],\n-    queryFn: () => examApi.getTeachers()\n-  });\n-\n-  const handleSave = () => {\n-    onSave(schedule?.id, formData);\n-    onClose();\n-  };\n-\n-  const calculateEndTime = (startTime, duration) => {\n-    if (!startTime || !duration) return '';\n-    \n-    const [hours, minutes] = startTime.split(':').map(Number);\n-    const startMinutes = hours * 60 + minutes;\n-    const endMinutes = startMinutes + parseInt(duration);\n-    \n-    const endHours = Math.floor(endMinutes / 60);\n-    const endMins = endMinutes % 60;\n-    \n-    return `${endHours.toString().padStart(2, '0')}:${endMins.toString().padStart(2, '0')}`;\n-  };\n-\n-  const handleStartTimeChange = (startTime) => {\n-    setFormData(prev => ({\n-      ...prev,\n-      startTime,\n-      endTime: calculateEndTime(startTime, prev.duration)\n-    }));\n-  };\n-\n-  const handleDurationChange = (duration) => {\n-    setFormData(prev => ({\n-      ...prev,\n-      duration: parseInt(duration) || 0,\n-      endTime: calculateEndTime(prev.startTime, duration)\n-    }));\n-  };\n-\n-  const toggleInvigilator = (staffId) => {\n-    setFormData(prev => ({\n-      ...prev,\n-      invigilators: prev.invigilators.includes(staffId)\n-        ? prev.invigilators.filter(id => id !== staffId)\n-        : [...prev.invigilators, staffId]\n-    }));\n-  };\n-\n-  return (\n-    <Dialog \n-      open={open} \n-      onClose={onClose} \n-      title={schedule ? 'Edit Exam Schedule' : 'Create Exam Schedule'}\n-      size=\"xl\"\n-    >\n-      <div className=\"space-y-6\">\n-        {/* Basic Information */}\n-        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-          <div>\n-            <label className=\"block text-sm font-medium mb-1\">Exam Group *</label>\n-            <select\n-              value={formData.examGroupId}\n-              onChange={(e) => setFormData(prev => ({ ...prev, examGroupId: e.target.value }))}\n-              className=\"w-full border rounded-lg px-3 py-2\"\n-            >\n-              <option value=\"\">Select Exam Group</option>\n-              {examGroupsData?.data?.map(group => (\n-                <option key={group.id} value={group.id}>\n-                  {group.name}\n-                </option>\n-              ))}\n-            </select>\n-          </div>\n-          <div>\n-            <label className=\"block text-sm font-medium mb-1\">Subject *</label>\n-            <select\n-              value={formData.subjectId}\n-              onChange={(e) => setFormData(prev => ({ ...prev, subjectId: e.target.value }))}\n-              className=\"w-full border rounded-lg px-3 py-2\"\n-            >\n-              <option value=\"\">Select Subject</option>\n-              {Array.isArray(subjectsData?.data) && subjectsData.data.map(subject => (\n-                <option key={subject.id} value={subject.id}>\n-                  {subject.name}\n-                </option>\n-              ))}\n-            </select>\n-          </div>\n-          <div>\n-            <label className=\"block text-sm font-medium mb-1\">Class *</label>\n-            <select\n-              value={formData.classId}\n-              onChange={(e) => setFormData(prev => ({ ...prev, classId: e.target.value }))}\n-              className=\"w-full border rounded-lg px-3 py-2\"\n-            >\n-              <option value=\"\">Select Class</option>\n-              {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n-                <option key={cls.id} value={cls.id}>\n-                  {cls.name}\n-                </option>\n-              ))}\n-            </select>\n-          </div>\n-          <Input\n-            label=\"Section *\"\n-            value={formData.section}\n-            onChange={(e) => setFormData(prev => ({ ...prev, section: e.target.value }))}\n-            placeholder=\"A, B, C...\"\n-          />\n-        </div>\n-\n-        {/* Date and Time */}\n-        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n-          <Input\n-            label=\"Exam Date *\"\n-            type=\"date\"\n-            value={formData.examDate}\n-            onChange={(e) => setFormData(prev => ({ ...prev, examDate: e.target.value }))}\n-          />\n-          <Input\n-            label=\"Start Time *\"\n-            type=\"time\"\n-            value={formData.startTime}\n-            onChange={(e) => handleStartTimeChange(e.target.value)}\n-          />\n-          <Input\n-            label=\"Duration (minutes) *\"\n-            type=\"number\"\n-            value={formData.duration}\n-            onChange={(e) => handleDurationChange(e.target.value)}\n-            min=\"1\"\n-          />\n-          <Input\n-            label=\"End Time\"\n-            type=\"time\"\n-            value={formData.endTime}\n-            readOnly\n-            className=\"bg-gray-50\"\n-          />\n-        </div>\n-\n-        {/* Venue and Capacity */}\n-        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-          <Input\n-            label=\"Exam Room\"\n-            value={formData.examRoom}\n-            onChange={(e) => setFormData(prev => ({ ...prev, examRoom: e.target.value }))}\n-            placeholder=\"Room number or name\"\n-          />\n-          <Input\n-            label=\"Max Students\"\n-            type=\"number\"\n-            value={formData.maxStudents}\n-            onChange={(e) => setFormData(prev => ({ ...prev, maxStudents: parseInt(e.target.value) || 0 }))}\n-            min=\"1\"\n-          />\n-        </div>\n-\n-        {/* Invigilators */}\n-        <div>\n-          <label className=\"block text-sm font-medium mb-2\">Invigilators</label>\n-          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n-            {staffData?.data?.map(staff => (\n-              <label key={staff.id} className=\"flex items-center gap-2\">\n-                <input\n-                  type=\"checkbox\"\n-                  checked={formData.invigilators.includes(staff.id)}\n-                  onChange={() => toggleInvigilator(staff.id)}\n-                  className=\"rounded\"\n-                />\n-                <span className=\"text-sm\">{staff.name}</span>\n-              </label>\n-            ))}\n-          </div>\n-        </div>\n-\n-        {/* Instructions */}\n-        <div>\n-          <label className=\"block text-sm font-medium mb-1\">Special Instructions</label>\n-          <textarea\n-            value={formData.instructions}\n-            onChange={(e) => setFormData(prev => ({ ...prev, instructions: e.target.value }))}\n-            rows={3}\n-            className=\"w-full border rounded-lg px-3 py-2\"\n-            placeholder=\"Any special instructions for the exam...\"\n-          />\n-        </div>\n-\n-        {/* Status */}\n-        <div>\n-          <label className=\"block text-sm font-medium mb-1\">Status</label>\n-          <select\n-            value={formData.status}\n-            onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n-            className=\"w-full border rounded-lg px-3 py-2 max-w-xs\"\n-          >\n-            <option value=\"scheduled\">Scheduled</option>\n-            <option value=\"ongoing\">Ongoing</option>\n-            <option value=\"completed\">Completed</option>\n-            <option value=\"cancelled\">Cancelled</option>\n-          </select>\n-        </div>\n-\n-        {/* Actions */}\n-        <div className=\"flex justify-end gap-2\">\n-          <button\n-            onClick={onClose}\n-            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n-          >\n-            Cancel\n-          </button>\n-          <button\n-            onClick={handleSave}\n-            disabled={!formData.examGroupId || !formData.subjectId || !formData.classId || !formData.examDate}\n-            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n-          >\n-            <CheckCircle className=\"w-4 h-4\" />\n-            {schedule ? 'Update' : 'Create'} Schedule\n-          </button>\n-        </div>\n-      </div>\n-    </Dialog>\n-  );\n-};\n-\n-const BulkScheduleDialog = ({ open, onClose, onSave }) => {\n-  const [formData, setFormData] = useState({\n-    examGroupId: '',\n-    classIds: [],\n-    subjects: [],\n-    startDate: '',\n-    endDate: '',\n-    startTime: '09:00',\n-    duration: 180,\n-    examRoom: '',\n-    maxStudents: 30,\n-    skipWeekends: true,\n-    skipHolidays: true\n-  });\n-\n-  const { data: examGroupsData } = useQuery({\n-    queryKey: ['exam-groups', 'active'],\n-    queryFn: () => examApi.getActiveExamGroups()\n-  });\n-\n-  const { data: classesData } = useQuery({\n-    queryKey: ['classes', 'all'],\n-    queryFn: () => examApi.getClasses()\n-  });\n-\n-  const { data: subjectsData } = useQuery({\n-    queryKey: ['subjects', 'all'],\n-    queryFn: () => examApi.getSubjects()\n-  });\n-\n-  const handleSave = () => {\n-    onSave(formData);\n-    onClose();\n-  };\n-\n-  const toggleClass = (classId) => {\n-    setFormData(prev => ({\n-      ...prev,\n-      classIds: prev.classIds.includes(classId)\n-        ? prev.classIds.filter(id => id !== classId)\n-        : [...prev.classIds, classId]\n-    }));\n-  };\n-\n-  const toggleSubject = (subjectId) => {\n-    setFormData(prev => ({\n-      ...prev,\n-      subjects: prev.subjects.includes(subjectId)\n-        ? prev.subjects.filter(id => id !== subjectId)\n-        : [...prev.subjects, subjectId]\n-    }));\n-  };\n-\n-  return (\n-    <Dialog \n-      open={open} \n-      onClose={onClose} \n-      title=\"Bulk Create Exam Schedules\"\n-      size=\"xl\"\n-    >\n-      <div className=\"space-y-6\">\n-        {/* Exam Group */}\n-        <div>\n-          <label className=\"block text-sm font-medium mb-1\">Exam Group *</label>\n-          <select\n-            value={formData.examGroupId}\n-            onChange={(e) => setFormData(prev => ({ ...prev, examGroupId: e.target.value }))}\n-            className=\"w-full border rounded-lg px-3 py-2\"\n-          >\n-            <option value=\"\">Select Exam Group</option>\n-            {examGroupsData?.data?.map(group => (\n-              <option key={group.id} value={group.id}>\n-                {group.name}\n-              </option>\n-            ))}\n-          </select>\n-        </div>\n-\n-        {/* Classes */}\n-        <div>\n-          <label className=\"block text-sm font-medium mb-2\">Classes *</label>\n-          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n-            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n-              <label key={cls.id} className=\"flex items-center gap-2\">\n-                <input\n-                  type=\"checkbox\"\n-                  checked={formData.classIds.includes(cls.id)}\n-                  onChange={() => toggleClass(cls.id)}\n-                  className=\"rounded\"\n-                />\n-                <span className=\"text-sm\">{cls.name}</span>\n-              </label>\n-            ))}\n-          </div>\n-        </div>\n-\n-        {/* Subjects */}\n-        <div>\n-          <label className=\"block text-sm font-medium mb-2\">Subjects *</label>\n-          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n-            {Array.isArray(subjectsData?.data) && subjectsData.data.map(subject => (\n-              <label key={subject.id} className=\"flex items-center gap-2\">\n-                <input\n-                  type=\"checkbox\"\n-                  checked={formData.subjects.includes(subject.id)}\n-                  onChange={() => toggleSubject(subject.id)}\n-                  className=\"rounded\"\n-                />\n-                <span className=\"text-sm\">{subject.name}</span>\n-              </label>\n-            ))}\n-          </div>\n-        </div>\n-\n-        {/* Date Range */}\n-        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-          <Input\n-            label=\"Start Date *\"\n-            type=\"date\"\n-            value={formData.startDate}\n-            onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}\n-          />\n-          <Input\n-            label=\"End Date *\"\n-            type=\"date\"\n-            value={formData.endDate}\n-            onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}\n-          />\n-        </div>\n-\n-        {/* Time and Duration */}\n-        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n-          <Input\n-            label=\"Start Time *\"\n-            type=\"time\"\n-            value={formData.startTime}\n-            onChange={(e) => setFormData(prev => ({ ...prev, startTime: e.target.value }))}\n-          />\n-          <Input\n-            label=\"Duration (minutes) *\"\n-            type=\"number\"\n-            value={formData.duration}\n-            onChange={(e) => setFormData(prev => ({ ...prev, duration: parseInt(e.target.value) || 0 }))}\n-            min=\"1\"\n-          />\n-          <Input\n-            label=\"Max Students\"\n-            type=\"number\"\n-            value={formData.maxStudents}\n-            onChange={(e) => setFormData(prev => ({ ...prev, maxStudents: parseInt(e.target.value) || 0 }))}\n-            min=\"1\"\n-          />\n-        </div>\n-\n-        {/* Options */}\n-        <div className=\"space-y-3\">\n-          <label className=\"flex items-center gap-2\">\n-            <input\n-              type=\"checkbox\"\n-              checked={formData.skipWeekends}\n-              onChange={(e) => setFormData(prev => ({ ...prev, skipWeekends: e.target.checked }))}\n-              className=\"rounded\"\n-            />\n-            <span className=\"text-sm\">Skip weekends</span>\n-          </label>\n-          <label className=\"flex items-center gap-2\">\n-            <input\n-              type=\"checkbox\"\n-              checked={formData.skipHolidays}\n-              onChange={(e) => setFormData(prev => ({ ...prev, skipHolidays: e.target.checked }))}\n-              className=\"rounded\"\n-            />\n-            <span className=\"text-sm\">Skip holidays</span>\n-          </label>\n-        </div>\n-\n-        {/* Actions */}\n-        <div className=\"flex justify-end gap-2\">\n-          <button\n-            onClick={onClose}\n-            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n-          >\n-            Cancel\n-          </button>\n-          <button\n-            onClick={handleSave}\n-            disabled={!formData.examGroupId || formData.classIds.length === 0 || formData.subjects.length === 0}\n-            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n-          >\n-            Create Schedules\n-          </button>\n-        </div>\n-      </div>\n-    </Dialog>\n-  );\n-};const\n- ExamSchedule = () => {\n-  const [viewMode, setViewMode] = useState('calendar'); // calendar, list\n-  const [selectedSchedule, setSelectedSchedule] = useState(null);\n-  const [showScheduleDialog, setShowScheduleDialog] = useState(false);\n-  const [showBulkDialog, setShowBulkDialog] = useState(false);\n-  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [filterExamGroup, setFilterExamGroup] = useState('all');\n-  const [filterStatus, setFilterStatus] = useState('all');\n-\n-  const queryClient = useQueryClient();\n-\n-  const { data: schedulesData, isLoading } = useQuery({\n-    queryKey: ['exam-schedules', 'all'],\n-    queryFn: () => examApi.getExamSchedules()\n-  });\n-\n-  const { data: examGroupsData } = useQuery({\n-    queryKey: ['exam-groups', 'active'],\n-    queryFn: () => examApi.getActiveExamGroups()\n-  });\n-\n-  const saveScheduleMutation = useMutation({\n-    mutationFn: ({ id, data }) => id ? examApi.updateExamSchedule(id, data) : examApi.createExamSchedule(data),\n-    onSuccess: () => {\n-      queryClient.invalidateQueries(['exam-schedules']);\n-      setShowScheduleDialog(false);\n-      setSelectedSchedule(null);\n-    }\n-  });\n-\n-  const bulkCreateSchedulesMutation = useMutation({\n-    mutationFn: examApi.bulkCreateSchedules,\n-    onSuccess: () => {\n-      queryClient.invalidateQueries(['exam-schedules']);\n-      setShowBulkDialog(false);\n-    }\n-  });\n-\n-  const deleteScheduleMutation = useMutation({\n-    mutationFn: examApi.deleteExamSchedule,\n-    onSuccess: () => {\n-      queryClient.invalidateQueries(['exam-schedules']);\n-    }\n-  });\n-\n-  const handleEditSchedule = (schedule) => {\n-    setSelectedSchedule(schedule);\n-    setShowScheduleDialog(true);\n-  };\n-\n-  const handleDeleteSchedule = (schedule) => {\n-    if (confirm(`Are you sure you want to delete the exam schedule for ${schedule.subjectName}?`)) {\n-      deleteScheduleMutation.mutate(schedule.id);\n-    }\n-  };\n-\n-  const handleViewDetails = (schedule) => {\n-    setSelectedSchedule(schedule);\n-    setShowDetailsDialog(true);\n-  };\n-\n-  const handleSaveSchedule = (id, data) => {\n-    saveScheduleMutation.mutate({ id, data });\n-  };\n-\n-  const handleBulkCreate = (data) => {\n-    bulkCreateSchedulesMutation.mutate(data);\n-  };\n-\n-  const handleAddSchedule = () => {\n-    setSelectedSchedule(null);\n-    setShowScheduleDialog(true);\n-  };\n-\n-  const handleExportSchedule = () => {\n-    // Export functionality\n-    console.log('Exporting schedule...');\n-  };\n-\n-  const filteredSchedules = schedulesData?.data?.filter(schedule => {\n-    const matchesSearch = schedule.subjectName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-                         schedule.examGroupName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n-                         schedule.className.toLowerCase().includes(searchTerm.toLowerCase());\n-    const matchesExamGroup = filterExamGroup === 'all' || schedule.examGroupId === filterExamGroup;\n-    const matchesStatus = filterStatus === 'all' || schedule.status === filterStatus;\n-    \n-    return matchesSearch && matchesExamGroup && matchesStatus;\n-  }) || [];\n-\n-  const getStatistics = () => {\n-    const schedules = schedulesData?.data || [];\n-    const today = new Date().toISOString().split('T')[0];\n-    \n-    return {\n-      total: schedules.length,\n-      today: schedules.filter(s => s.examDate === today).length,\n-      upcoming: schedules.filter(s => s.examDate > today && s.status === 'scheduled').length,\n-      completed: schedules.filter(s => s.status === 'completed').length\n-    };\n-  };\n-\n-  const stats = getStatistics();\n-\n-  if (isLoading) return <LoadingSkeleton />;\n-\n-  return (\n-    <div className=\"space-y-6\">\n-      <div className=\"flex justify-between items-center\">\n-        <h1 className=\"text-2xl font-bold\">Exam Schedule</h1>\n-        <div className=\"flex gap-2\">\n-          <button\n-            onClick={() => setShowBulkDialog(true)}\n-            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n-          >\n-            <Plus className=\"w-4 h-4\" />\n-            Bulk Create\n-          </button>\n-          <button\n-            onClick={handleExportSchedule}\n-            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n-          >\n-            <Download className=\"w-4 h-4\" />\n-            Export\n-          </button>\n-          <button\n-            onClick={handleAddSchedule}\n-            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n-          >\n-            <Plus className=\"w-4 h-4\" />\n-            Add Schedule\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Statistics */}\n-      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <Calendar className=\"w-8 h-8 text-blue-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">{stats.total}</p>\n-              <p className=\"text-sm text-gray-600\">Total Schedules</p>\n-            </div>\n-          </div>\n-        </div>\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <Clock className=\"w-8 h-8 text-green-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">{stats.today}</p>\n-              <p className=\"text-sm text-gray-600\">Today's Exams</p>\n-            </div>\n-          </div>\n-        </div>\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <AlertTriangle className=\"w-8 h-8 text-yellow-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">{stats.upcoming}</p>\n-              <p className=\"text-sm text-gray-600\">Upcoming</p>\n-            </div>\n-          </div>\n-        </div>\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <CheckCircle className=\"w-8 h-8 text-gray-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">{stats.completed}</p>\n-              <p className=\"text-sm text-gray-600\">Completed</p>\n-            </div>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Filters and View Toggle */}\n-      <div className=\"bg-white rounded-lg shadow p-4\">\n-        <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n-          <div className=\"flex gap-4 flex-1\">\n-            <div className=\"relative\">\n-              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n-              <input\n-                type=\"text\"\n-                placeholder=\"Search schedules...\"\n-                value={searchTerm}\n-                onChange={(e) => setSearchTerm(e.target.value)}\n-                className=\"pl-10 pr-4 py-2 border rounded-lg w-64\"\n-              />\n-            </div>\n-            <select\n-              value={filterExamGroup}\n-              onChange={(e) => setFilterExamGroup(e.target.value)}\n-              className=\"border rounded-lg px-3 py-2\"\n-            >\n-              <option value=\"all\">All Exam Groups</option>\n-              {examGroupsData?.data?.map(group => (\n-                <option key={group.id} value={group.id}>\n-                  {group.name}\n-                </option>\n-              ))}\n-            </select>\n-            <select\n-              value={filterStatus}\n-              onChange={(e) => setFilterStatus(e.target.value)}\n-              className=\"border rounded-lg px-3 py-2\"\n-            >\n-              <option value=\"all\">All Status</option>\n-              <option value=\"scheduled\">Scheduled</option>\n-              <option value=\"ongoing\">Ongoing</option>\n-              <option value=\"completed\">Completed</option>\n-              <option value=\"cancelled\">Cancelled</option>\n-            </select>\n-          </div>\n-          \n-          <div className=\"flex gap-2\">\n-            <button\n-              onClick={() => setViewMode('calendar')}\n-              className={`px-4 py-2 rounded-lg flex items-center gap-2 ${\n-                viewMode === 'calendar' \n-                  ? 'bg-blue-100 text-blue-700' \n-                  : 'border hover:bg-gray-50'\n-              }`}\n-            >\n-              <Calendar className=\"w-4 h-4\" />\n-              Calendar\n-            </button>\n-            <button\n-              onClick={() => setViewMode('list')}\n-              className={`px-4 py-2 rounded-lg flex items-center gap-2 ${\n-                viewMode === 'list' \n-                  ? 'bg-blue-100 text-blue-700' \n-                  : 'border hover:bg-gray-50'\n-              }`}\n-            >\n-              <Users className=\"w-4 h-4\" />\n-              List\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Schedule View */}\n-      {viewMode === 'calendar' ? (\n-        <ScheduleCalendarView\n-          schedules={filteredSchedules}\n-          onEditSchedule={handleEditSchedule}\n-          onViewDetails={handleViewDetails}\n-        />\n-      ) : (\n-        <ScheduleListView\n-          schedules={filteredSchedules}\n-          onEditSchedule={handleEditSchedule}\n-          onDeleteSchedule={handleDeleteSchedule}\n-          onViewDetails={handleViewDetails}\n-        />\n-      )}\n-\n-      {/* Schedule Dialog */}\n-      <ScheduleDialog\n-        schedule={selectedSchedule}\n-        open={showScheduleDialog}\n-        onClose={() => {\n-          setShowScheduleDialog(false);\n-          setSelectedSchedule(null);\n-        }}\n-        onSave={handleSaveSchedule}\n-      />\n-\n-      {/* Bulk Create Dialog */}\n-      <BulkScheduleDialog\n-        open={showBulkDialog}\n-        onClose={() => setShowBulkDialog(false)}\n-        onSave={handleBulkCreate}\n-      />\n-\n-      {/* Details Dialog */}\n-      <Dialog\n-        open={showDetailsDialog}\n-        onClose={() => setShowDetailsDialog(false)}\n-        title=\"Exam Schedule Details\"\n-        size=\"lg\"\n-      >\n-        {selectedSchedule && (\n-          <div className=\"space-y-4\">\n-            <div className=\"grid grid-cols-2 gap-4\">\n-              <div>\n-                <label className=\"block text-sm font-medium text-gray-700\">Exam Group</label>\n-                <p className=\"text-sm\">{selectedSchedule.examGroupName}</p>\n-              </div>\n-              <div>\n-                <label className=\"block text-sm font-medium text-gray-700\">Subject</label>\n-                <p className=\"text-sm\">{selectedSchedule.subjectName}</p>\n-              </div>\n-              <div>\n-                <label className=\"block text-sm font-medium text-gray-700\">Class</label>\n-                <p className=\"text-sm\">{selectedSchedule.className} - {selectedSchedule.section}</p>\n-              </div>\n-              <div>\n-                <label className=\"block text-sm font-medium text-gray-700\">Date & Time</label>\n-                <p className=\"text-sm\">\n-                  {new Date(selectedSchedule.examDate).toLocaleDateString()} | \n-                  {selectedSchedule.startTime} - {selectedSchedule.endTime}\n-                </p>\n-              </div>\n-              <div>\n-                <label className=\"block text-sm font-medium text-gray-700\">Room</label>\n-                <p className=\"text-sm\">{selectedSchedule.examRoom || 'Not assigned'}</p>\n-              </div>\n-              <div>\n-                <label className=\"block text-sm font-medium text-gray-700\">Duration</label>\n-                <p className=\"text-sm\">{selectedSchedule.duration} minutes</p>\n-              </div>\n-            </div>\n-            \n-            {selectedSchedule.instructions && (\n-              <div>\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Instructions</label>\n-                <p className=\"text-sm bg-gray-50 p-3 rounded\">{selectedSchedule.instructions}</p>\n-              </div>\n-            )}\n-\n-            <div className=\"flex justify-end\">\n-              <button\n-                onClick={() => setShowDetailsDialog(false)}\n-                className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n-              >\n-                Close\n-              </button>\n-            </div>\n-          </div>\n-        )}\n-      </Dialog>\n-    </div>\n-  );\n-};\n-\n-export default ExamSchedule;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1755986163566,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  Calendar,\n  Clock,\n  MapPin,\n  Users,\n  BookOpen,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Download,\n  Upload,\n  CheckCircle,\n  AlertTriangle,\n  Filter,\n  Search\n} from 'lucide-react';\nimport Input from '../../components/ui/Input';\nimport Dialog from '../../components/ui/Dialog';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport { examApi } from '../../lib/api/exams';\n\nconst ScheduleCalendarView = ({ schedules, onEditSchedule, onViewDetails }) => {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  \n  const getDaysInMonth = (date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n    \n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(new Date(year, month, day));\n    }\n    \n    return days;\n  };\n\n  const getSchedulesForDate = (date) => {\n    if (!date) return [];\n    const dateStr = date.toISOString().split('T')[0];\n    return schedules?.filter(schedule => schedule.examDate === dateStr) || [];\n  };\n\n  const navigateMonth = (direction) => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      newDate.setMonth(prev.getMonth() + direction);\n      return newDate;\n    });\n  };\n\n  const days = getDaysInMonth(currentDate);\n  const monthNames = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-lg font-semibold\">\n          {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n        </h2>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => navigateMonth(-1)}\n            className=\"p-2 border rounded-lg hover:bg-gray-50\"\n          >\n            ←\n          </button>\n          <button\n            onClick={() => setCurrentDate(new Date())}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50 text-sm\"\n          >\n            Today\n          </button>\n          <button\n            onClick={() => navigateMonth(1)}\n            className=\"p-2 border rounded-lg hover:bg-gray-50\"\n          >\n            →\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-7 gap-1\">\n        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n          <div key={day} className=\"p-2 text-center text-sm font-medium text-gray-500 border-b\">\n            {day}\n          </div>\n        ))}\n        \n        {Array.isArray(days) && days.map((day, index) => {\n          const daySchedules = day ? getSchedulesForDate(day) : [];\n          const isToday = day && day.toDateString() === new Date().toDateString();\n          \n          return (\n            <div\n              key={index}\n              className={`min-h-[100px] p-1 border border-gray-100 ${\n                !day ? 'bg-gray-50' : isToday ? 'bg-blue-50' : 'bg-white hover:bg-gray-50'\n              }`}\n            >\n              {day && (\n                <>\n                  <div className={`text-sm font-medium mb-1 ${\n                    isToday ? 'text-blue-600' : 'text-gray-900'\n                  }`}>\n                    {day.getDate()}\n                  </div>\n                  <div className=\"space-y-1\">\n                    {daySchedules.slice(0, 2).map(schedule => (\n                      <div\n                        key={schedule.id}\n                        onClick={() => onViewDetails(schedule)}\n                        className=\"text-xs p-1 bg-blue-100 text-blue-800 rounded cursor-pointer hover:bg-blue-200 truncate\"\n                        title={`${schedule.subjectName} - ${schedule.examGroupName}`}\n                      >\n                        {schedule.subjectName}\n                      </div>\n                    ))}\n                    {daySchedules.length > 2 && (\n                      <div className=\"text-xs text-gray-500\">\n                        +{daySchedules.length - 2} more\n                      </div>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst ScheduleListView = ({ schedules, onEditSchedule, onDeleteSchedule, onViewDetails }) => {\n  if (!schedules || schedules.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n        <Calendar className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Schedules Found</h3>\n        <p className=\"text-gray-500\">No exam schedules match your current filters.</p>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'scheduled': return 'text-blue-600 bg-blue-100';\n      case 'ongoing': return 'text-green-600 bg-green-100';\n      case 'completed': return 'text-gray-600 bg-gray-100';\n      case 'cancelled': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"text-left py-3 px-4\">Date & Time</th>\n              <th className=\"text-left py-3 px-4\">Exam Group</th>\n              <th className=\"text-left py-3 px-4\">Subject</th>\n              <th className=\"text-left py-3 px-4\">Class</th>\n              <th className=\"text-left py-3 px-4\">Room</th>\n              <th className=\"text-left py-3 px-4\">Duration</th>\n              <th className=\"text-left py-3 px-4\">Status</th>\n              <th className=\"text-center py-3 px-4\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.isArray(schedules) && schedules.map(schedule => (\n              <tr key={schedule.id} className=\"border-b hover:bg-gray-50\">\n                <td className=\"py-3 px-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"w-4 h-4 text-gray-400\" />\n                    <div>\n                      <div className=\"font-medium\">\n                        {new Date(schedule.examDate).toLocaleDateString()}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {schedule.startTime} - {schedule.endTime}\n                      </div>\n                    </div>\n                  </div>\n                </td>\n                <td className=\"py-3 px-4\">\n                  <div className=\"font-medium\">{schedule.examGroupName}</div>\n                  <div className=\"text-sm text-gray-500\">{schedule.examType}</div>\n                </td>\n                <td className=\"py-3 px-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <BookOpen className=\"w-4 h-4 text-gray-400\" />\n                    {schedule.subjectName}\n                  </div>\n                </td>\n                <td className=\"py-3 px-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"w-4 h-4 text-gray-400\" />\n                    {schedule.className} - {schedule.section}\n                  </div>\n                </td>\n                <td className=\"py-3 px-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4 text-gray-400\" />\n                    {schedule.examRoom || 'Not assigned'}\n                  </div>\n                </td>\n                <td className=\"py-3 px-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"w-4 h-4 text-gray-400\" />\n                    {schedule.duration} min\n                  </div>\n                </td>\n                <td className=\"py-3 px-4\">\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(schedule.status)}`}>\n                    {schedule.status.charAt(0).toUpperCase() + schedule.status.slice(1)}\n                  </span>\n                </td>\n                <td className=\"py-3 px-4 text-center\">\n                  <div className=\"flex justify-center gap-2\">\n                    <button\n                      onClick={() => onViewDetails(schedule)}\n                      className=\"p-1 text-gray-400 hover:text-blue-600\"\n                      title=\"View Details\"\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </button>\n                    <button\n                      onClick={() => onEditSchedule(schedule)}\n                      className=\"p-1 text-gray-400 hover:text-green-600\"\n                      title=\"Edit\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </button>\n                    <button\n                      onClick={() => onDeleteSchedule(schedule)}\n                      className=\"p-1 text-gray-400 hover:text-red-600\"\n                      title=\"Delete\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};const Sche\nduleDialog = ({ schedule, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    examGroupId: schedule?.examGroupId || '',\n    subjectId: schedule?.subjectId || '',\n    classId: schedule?.classId || '',\n    section: schedule?.section || '',\n    examDate: schedule?.examDate || '',\n    startTime: schedule?.startTime || '',\n    endTime: schedule?.endTime || '',\n    duration: schedule?.duration || 180,\n    examRoom: schedule?.examRoom || '',\n    maxStudents: schedule?.maxStudents || 30,\n    instructions: schedule?.instructions || '',\n    status: schedule?.status || 'scheduled',\n    invigilators: schedule?.invigilators || []\n  });\n\n  const { data: examGroupsData } = useQuery({\n    queryKey: ['exam-groups', 'active'],\n    queryFn: () => examApi.getActiveExamGroups()\n  });\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'all'],\n    queryFn: () => examApi.getSubjects()\n  });\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => examApi.getClasses()\n  });\n\n  const { data: staffData } = useQuery({\n    queryKey: ['staff', 'teachers'],\n    queryFn: () => examApi.getTeachers()\n  });\n\n  const handleSave = () => {\n    onSave(schedule?.id, formData);\n    onClose();\n  };\n\n  const calculateEndTime = (startTime, duration) => {\n    if (!startTime || !duration) return '';\n    \n    const [hours, minutes] = startTime.split(':').map(Number);\n    const startMinutes = hours * 60 + minutes;\n    const endMinutes = startMinutes + parseInt(duration);\n    \n    const endHours = Math.floor(endMinutes / 60);\n    const endMins = endMinutes % 60;\n    \n    return `${endHours.toString().padStart(2, '0')}:${endMins.toString().padStart(2, '0')}`;\n  };\n\n  const handleStartTimeChange = (startTime) => {\n    setFormData(prev => ({\n      ...prev,\n      startTime,\n      endTime: calculateEndTime(startTime, prev.duration)\n    }));\n  };\n\n  const handleDurationChange = (duration) => {\n    setFormData(prev => ({\n      ...prev,\n      duration: parseInt(duration) || 0,\n      endTime: calculateEndTime(prev.startTime, duration)\n    }));\n  };\n\n  const toggleInvigilator = (staffId) => {\n    setFormData(prev => ({\n      ...prev,\n      invigilators: prev.invigilators.includes(staffId)\n        ? prev.invigilators.filter(id => id !== staffId)\n        : [...prev.invigilators, staffId]\n    }));\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      title={schedule ? 'Edit Exam Schedule' : 'Create Exam Schedule'}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Exam Group *</label>\n            <select\n              value={formData.examGroupId}\n              onChange={(e) => setFormData(prev => ({ ...prev, examGroupId: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">Select Exam Group</option>\n              {examGroupsData?.data?.map(group => (\n                <option key={group.id} value={group.id}>\n                  {group.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Subject *</label>\n            <select\n              value={formData.subjectId}\n              onChange={(e) => setFormData(prev => ({ ...prev, subjectId: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">Select Subject</option>\n              {Array.isArray(subjectsData?.data) && subjectsData.data.map(subject => (\n                <option key={subject.id} value={subject.id}>\n                  {subject.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Class *</label>\n            <select\n              value={formData.classId}\n              onChange={(e) => setFormData(prev => ({ ...prev, classId: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">Select Class</option>\n              {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n                <option key={cls.id} value={cls.id}>\n                  {cls.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <Input\n            label=\"Section *\"\n            value={formData.section}\n            onChange={(e) => setFormData(prev => ({ ...prev, section: e.target.value }))}\n            placeholder=\"A, B, C...\"\n          />\n        </div>\n\n        {/* Date and Time */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Input\n            label=\"Exam Date *\"\n            type=\"date\"\n            value={formData.examDate}\n            onChange={(e) => setFormData(prev => ({ ...prev, examDate: e.target.value }))}\n          />\n          <Input\n            label=\"Start Time *\"\n            type=\"time\"\n            value={formData.startTime}\n            onChange={(e) => handleStartTimeChange(e.target.value)}\n          />\n          <Input\n            label=\"Duration (minutes) *\"\n            type=\"number\"\n            value={formData.duration}\n            onChange={(e) => handleDurationChange(e.target.value)}\n            min=\"1\"\n          />\n          <Input\n            label=\"End Time\"\n            type=\"time\"\n            value={formData.endTime}\n            readOnly\n            className=\"bg-gray-50\"\n          />\n        </div>\n\n        {/* Venue and Capacity */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Exam Room\"\n            value={formData.examRoom}\n            onChange={(e) => setFormData(prev => ({ ...prev, examRoom: e.target.value }))}\n            placeholder=\"Room number or name\"\n          />\n          <Input\n            label=\"Max Students\"\n            type=\"number\"\n            value={formData.maxStudents}\n            onChange={(e) => setFormData(prev => ({ ...prev, maxStudents: parseInt(e.target.value) || 0 }))}\n            min=\"1\"\n          />\n        </div>\n\n        {/* Invigilators */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Invigilators</label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n            {staffData?.data?.map(staff => (\n              <label key={staff.id} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.invigilators.includes(staff.id)}\n                  onChange={() => toggleInvigilator(staff.id)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">{staff.name}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Special Instructions</label>\n          <textarea\n            value={formData.instructions}\n            onChange={(e) => setFormData(prev => ({ ...prev, instructions: e.target.value }))}\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Any special instructions for the exam...\"\n          />\n        </div>\n\n        {/* Status */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Status</label>\n          <select\n            value={formData.status}\n            onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n            className=\"w-full border rounded-lg px-3 py-2 max-w-xs\"\n          >\n            <option value=\"scheduled\">Scheduled</option>\n            <option value=\"ongoing\">Ongoing</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"cancelled\">Cancelled</option>\n          </select>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!formData.examGroupId || !formData.subjectId || !formData.classId || !formData.examDate}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <CheckCircle className=\"w-4 h-4\" />\n            {schedule ? 'Update' : 'Create'} Schedule\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst BulkScheduleDialog = ({ open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    examGroupId: '',\n    classIds: [],\n    subjects: [],\n    startDate: '',\n    endDate: '',\n    startTime: '09:00',\n    duration: 180,\n    examRoom: '',\n    maxStudents: 30,\n    skipWeekends: true,\n    skipHolidays: true\n  });\n\n  const { data: examGroupsData } = useQuery({\n    queryKey: ['exam-groups', 'active'],\n    queryFn: () => examApi.getActiveExamGroups()\n  });\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => examApi.getClasses()\n  });\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'all'],\n    queryFn: () => examApi.getSubjects()\n  });\n\n  const handleSave = () => {\n    onSave(formData);\n    onClose();\n  };\n\n  const toggleClass = (classId) => {\n    setFormData(prev => ({\n      ...prev,\n      classIds: prev.classIds.includes(classId)\n        ? prev.classIds.filter(id => id !== classId)\n        : [...prev.classIds, classId]\n    }));\n  };\n\n  const toggleSubject = (subjectId) => {\n    setFormData(prev => ({\n      ...prev,\n      subjects: prev.subjects.includes(subjectId)\n        ? prev.subjects.filter(id => id !== subjectId)\n        : [...prev.subjects, subjectId]\n    }));\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      title=\"Bulk Create Exam Schedules\"\n      size=\"xl\"\n    >\n      <div className=\"space-y-6\">\n        {/* Exam Group */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Exam Group *</label>\n          <select\n            value={formData.examGroupId}\n            onChange={(e) => setFormData(prev => ({ ...prev, examGroupId: e.target.value }))}\n            className=\"w-full border rounded-lg px-3 py-2\"\n          >\n            <option value=\"\">Select Exam Group</option>\n            {examGroupsData?.data?.map(group => (\n              <option key={group.id} value={group.id}>\n                {group.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Classes */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Classes *</label>\n          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n              <label key={cls.id} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.classIds.includes(cls.id)}\n                  onChange={() => toggleClass(cls.id)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">{cls.name}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Subjects */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Subjects *</label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(subjectsData?.data) && subjectsData.data.map(subject => (\n              <label key={subject.id} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.subjects.includes(subject.id)}\n                  onChange={() => toggleSubject(subject.id)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">{subject.name}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Date Range */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Start Date *\"\n            type=\"date\"\n            value={formData.startDate}\n            onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}\n          />\n          <Input\n            label=\"End Date *\"\n            type=\"date\"\n            value={formData.endDate}\n            onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}\n          />\n        </div>\n\n        {/* Time and Duration */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Input\n            label=\"Start Time *\"\n            type=\"time\"\n            value={formData.startTime}\n            onChange={(e) => setFormData(prev => ({ ...prev, startTime: e.target.value }))}\n          />\n          <Input\n            label=\"Duration (minutes) *\"\n            type=\"number\"\n            value={formData.duration}\n            onChange={(e) => setFormData(prev => ({ ...prev, duration: parseInt(e.target.value) || 0 }))}\n            min=\"1\"\n          />\n          <Input\n            label=\"Max Students\"\n            type=\"number\"\n            value={formData.maxStudents}\n            onChange={(e) => setFormData(prev => ({ ...prev, maxStudents: parseInt(e.target.value) || 0 }))}\n            min=\"1\"\n          />\n        </div>\n\n        {/* Options */}\n        <div className=\"space-y-3\">\n          <label className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              checked={formData.skipWeekends}\n              onChange={(e) => setFormData(prev => ({ ...prev, skipWeekends: e.target.checked }))}\n              className=\"rounded\"\n            />\n            <span className=\"text-sm\">Skip weekends</span>\n          </label>\n          <label className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              checked={formData.skipHolidays}\n              onChange={(e) => setFormData(prev => ({ ...prev, skipHolidays: e.target.checked }))}\n              className=\"rounded\"\n            />\n            <span className=\"text-sm\">Skip holidays</span>\n          </label>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!formData.examGroupId || formData.classIds.length === 0 || formData.subjects.length === 0}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n          >\n            Create Schedules\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};const\n ExamSchedule = () => {\n  const [viewMode, setViewMode] = useState('calendar'); // calendar, list\n  const [selectedSchedule, setSelectedSchedule] = useState(null);\n  const [showScheduleDialog, setShowScheduleDialog] = useState(false);\n  const [showBulkDialog, setShowBulkDialog] = useState(false);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterExamGroup, setFilterExamGroup] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  const queryClient = useQueryClient();\n\n  const { data: schedulesData, isLoading } = useQuery({\n    queryKey: ['exam-schedules', 'all'],\n    queryFn: () => examApi.getExamSchedules()\n  });\n\n  const { data: examGroupsData } = useQuery({\n    queryKey: ['exam-groups', 'active'],\n    queryFn: () => examApi.getActiveExamGroups()\n  });\n\n  const saveScheduleMutation = useMutation({\n    mutationFn: ({ id, data }) => id ? examApi.updateExamSchedule(id, data) : examApi.createExamSchedule(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['exam-schedules']);\n      setShowScheduleDialog(false);\n      setSelectedSchedule(null);\n    }\n  });\n\n  const bulkCreateSchedulesMutation = useMutation({\n    mutationFn: examApi.bulkCreateSchedules,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['exam-schedules']);\n      setShowBulkDialog(false);\n    }\n  });\n\n  const deleteScheduleMutation = useMutation({\n    mutationFn: examApi.deleteExamSchedule,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['exam-schedules']);\n    }\n  });\n\n  const handleEditSchedule = (schedule) => {\n    setSelectedSchedule(schedule);\n    setShowScheduleDialog(true);\n  };\n\n  const handleDeleteSchedule = (schedule) => {\n    if (confirm(`Are you sure you want to delete the exam schedule for ${schedule.subjectName}?`)) {\n      deleteScheduleMutation.mutate(schedule.id);\n    }\n  };\n\n  const handleViewDetails = (schedule) => {\n    setSelectedSchedule(schedule);\n    setShowDetailsDialog(true);\n  };\n\n  const handleSaveSchedule = (id, data) => {\n    saveScheduleMutation.mutate({ id, data });\n  };\n\n  const handleBulkCreate = (data) => {\n    bulkCreateSchedulesMutation.mutate(data);\n  };\n\n  const handleAddSchedule = () => {\n    setSelectedSchedule(null);\n    setShowScheduleDialog(true);\n  };\n\n  const handleExportSchedule = () => {\n    // Export functionality\n    console.log('Exporting schedule...');\n  };\n\n  const filteredSchedules = schedulesData?.data?.filter(schedule => {\n    const matchesSearch = schedule.subjectName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         schedule.examGroupName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         schedule.className.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesExamGroup = filterExamGroup === 'all' || schedule.examGroupId === filterExamGroup;\n    const matchesStatus = filterStatus === 'all' || schedule.status === filterStatus;\n    \n    return matchesSearch && matchesExamGroup && matchesStatus;\n  }) || [];\n\n  const getStatistics = () => {\n    const schedules = schedulesData?.data || [];\n    const today = new Date().toISOString().split('T')[0];\n    \n    return {\n      total: schedules.length,\n      today: schedules.filter(s => s.examDate === today).length,\n      upcoming: schedules.filter(s => s.examDate > today && s.status === 'scheduled').length,\n      completed: schedules.filter(s => s.status === 'completed').length\n    };\n  };\n\n  const stats = getStatistics();\n\n  if (isLoading) return <LoadingSkeleton />;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Exam Schedule</h1>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setShowBulkDialog(true)}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Bulk Create\n          </button>\n          <button\n            onClick={handleExportSchedule}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n          <button\n            onClick={handleAddSchedule}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Add Schedule\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Calendar className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.total}</p>\n              <p className=\"text-sm text-gray-600\">Total Schedules</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.today}</p>\n              <p className=\"text-sm text-gray-600\">Today's Exams</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <AlertTriangle className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.upcoming}</p>\n              <p className=\"text-sm text-gray-600\">Upcoming</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-gray-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.completed}</p>\n              <p className=\"text-sm text-gray-600\">Completed</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters and View Toggle */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n          <div className=\"flex gap-4 flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search schedules...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 pr-4 py-2 border rounded-lg w-64\"\n              />\n            </div>\n            <select\n              value={filterExamGroup}\n              onChange={(e) => setFilterExamGroup(e.target.value)}\n              className=\"border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Exam Groups</option>\n              {examGroupsData?.data?.map(group => (\n                <option key={group.id} value={group.id}>\n                  {group.name}\n                </option>\n              ))}\n            </select>\n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"scheduled\">Scheduled</option>\n              <option value=\"ongoing\">Ongoing</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"cancelled\">Cancelled</option>\n            </select>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setViewMode('calendar')}\n              className={`px-4 py-2 rounded-lg flex items-center gap-2 ${\n                viewMode === 'calendar' \n                  ? 'bg-blue-100 text-blue-700' \n                  : 'border hover:bg-gray-50'\n              }`}\n            >\n              <Calendar className=\"w-4 h-4\" />\n              Calendar\n            </button>\n            <button\n              onClick={() => setViewMode('list')}\n              className={`px-4 py-2 rounded-lg flex items-center gap-2 ${\n                viewMode === 'list' \n                  ? 'bg-blue-100 text-blue-700' \n                  : 'border hover:bg-gray-50'\n              }`}\n            >\n              <Users className=\"w-4 h-4\" />\n              List\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Schedule View */}\n      {viewMode === 'calendar' ? (\n        <ScheduleCalendarView\n          schedules={filteredSchedules}\n          onEditSchedule={handleEditSchedule}\n          onViewDetails={handleViewDetails}\n        />\n      ) : (\n        <ScheduleListView\n          schedules={filteredSchedules}\n          onEditSchedule={handleEditSchedule}\n          onDeleteSchedule={handleDeleteSchedule}\n          onViewDetails={handleViewDetails}\n        />\n      )}\n\n      {/* Schedule Dialog */}\n      <ScheduleDialog\n        schedule={selectedSchedule}\n        open={showScheduleDialog}\n        onClose={() => {\n          setShowScheduleDialog(false);\n          setSelectedSchedule(null);\n        }}\n        onSave={handleSaveSchedule}\n      />\n\n      {/* Bulk Create Dialog */}\n      <BulkScheduleDialog\n        open={showBulkDialog}\n        onClose={() => setShowBulkDialog(false)}\n        onSave={handleBulkCreate}\n      />\n\n      {/* Details Dialog */}\n      <Dialog\n        open={showDetailsDialog}\n        onClose={() => setShowDetailsDialog(false)}\n        title=\"Exam Schedule Details\"\n        size=\"lg\"\n      >\n        {selectedSchedule && (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Exam Group</label>\n                <p className=\"text-sm\">{selectedSchedule.examGroupName}</p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Subject</label>\n                <p className=\"text-sm\">{selectedSchedule.subjectName}</p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Class</label>\n                <p className=\"text-sm\">{selectedSchedule.className} - {selectedSchedule.section}</p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Date & Time</label>\n                <p className=\"text-sm\">\n                  {new Date(selectedSchedule.examDate).toLocaleDateString()} | \n                  {selectedSchedule.startTime} - {selectedSchedule.endTime}\n                </p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Room</label>\n                <p className=\"text-sm\">{selectedSchedule.examRoom || 'Not assigned'}</p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Duration</label>\n                <p className=\"text-sm\">{selectedSchedule.duration} minutes</p>\n              </div>\n            </div>\n            \n            {selectedSchedule.instructions && (\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Instructions</label>\n                <p className=\"text-sm bg-gray-50 p-3 rounded\">{selectedSchedule.instructions}</p>\n              </div>\n            )}\n\n            <div className=\"flex justify-end\">\n              <button\n                onClick={() => setShowDetailsDialog(false)}\n                className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        )}\n      </Dialog>\n    </div>\n  );\n};\n\nexport default ExamSchedule;"
        }
    ]
}