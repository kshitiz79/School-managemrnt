{
    "sourceFile": "src/pages/exams/PrintAdmitCard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755986163566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755988776893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState, useRef } from 'react'\n-import { useState } from 'react'\n import { useQuery } from '@tanstack/react-query'\n import {\n   Printer,\n   Download,\n"
                },
                {
                    "date": 1755991757120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n       fontWeight: field.fontWeight || 'normal',\n       textAlign: field.textAlign || 'left',\n       color: template.theme.textColor,\n       zIndex: field.zIndex || 1,\n-    };\n+    }\n \n     switch (field.type) {\n       case 'photo':\n         return (\n@@ -66,9 +66,9 @@\n               </div>\n             )}\n           </div>\n         )\n-      \n+\n       case 'qr_code':\n         return (\n           <div\n             key={field.id}\n@@ -82,9 +82,9 @@\n               </div>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'signature':\n         return (\n           <div\n             key={field.id}\n@@ -95,9 +95,9 @@\n               <span className=\"text-xs text-gray-600\">{field.label}</span>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'logo':\n         return (\n           <div\n             key={field.id}\n@@ -108,9 +108,9 @@\n               <span className=\"text-xs text-gray-500\">LOGO</span>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'watermark':\n         return (\n           <div\n             key={field.id}\n@@ -126,9 +126,9 @@\n               {watermark || 'ADMIT CARD'}\n             </span>\n           </div>\n         )\n-      \n+\n       default: // text fields\n         const getFieldValue = () => {\n           switch (field.id) {\n             case 'student-name':\n@@ -180,9 +180,9 @@\n         style={{ borderColor: template.theme.borderColor }}\n       />\n     </div>\n   )\n-};\n+}\n \n const StudentSelectionTable = ({\n   students,\n   selectedStudents,\n@@ -193,14 +193,14 @@\n     const newSelection = selectedStudents.includes(studentId)\n       ? selectedStudents.filter(id => id !== studentId)\n       : [...selectedStudents, studentId]\n     onSelectionChange(newSelection)\n-  };\n+  }\n \n   const toggleAll = () => {\n     const allSelected = selectedStudents.length === students.length\n     onSelectionChange(allSelected ? [] : students.map(s => s.id))\n-  };\n+  }\n \n   return (\n     <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n       <div className=\"p-4 border-b bg-gray-50\">\n@@ -270,9 +270,9 @@\n         </table>\n       </div>\n     </div>\n   )\n-};\n+}\n \n const PrintAdmitCard = () => {\n   const [selectedExamSchedule, setSelectedExamSchedule] = useState(null)\n   const [selectedTemplate, setSelectedTemplate] = useState(null)\n@@ -324,16 +324,17 @@\n \n   const handlePrintSelected = async () => {\n     if (!selectedTemplate || selectedStudents.length === 0) {\n       alert('Please select a template and students to print')\n-      return;\n+      return\n     }\n \n     setIsPrinting(true)\n-    \n+\n     try {\n       const studentsToprint = filteredStudents.filter(s =>\n-        selectedStudents.includes(s.id)\n+        selectedStudents.includes(s.id),\n+      )\n \n       // Generate HTML for all selected admit cards\n       const admitCardsHTML = studentsToprint\n         .map(student => {\n@@ -360,11 +361,11 @@\n                 font-weight: ${field.fontWeight || 'normal'};\n                 text-align: ${field.textAlign || 'left'};\n                 color: ${selectedTemplate.theme.textColor};\n               `\n-              \n-              let content = ''\n-              switch (field.id) {\n+\n+                  let content = ''\n+                  switch (field.id) {\n                     case 'student-name':\n                       content = `Name: ${student.name}`\n                       break\n                     case 'roll-number':\n@@ -391,17 +392,17 @@\n                   <div style=\"width: 100%; height: 100%; background: #f3f4f6; display: flex; align-items: center; justify-content: center; font-size: 12px; color: #6b7280;\">\n                     PHOTO\n                   </div>\n                 </div>`\n-              } else if (field.type === 'qr_code') {\n+                  } else if (field.type === 'qr_code') {\n                     return `<div style=\"${style} border: 1px solid #d1d5db; display: flex; align-items: center; justify-content: center;\">\n                   <div style=\"font-size: 10px; color: #6b7280;\">QR CODE</div>\n                 </div>`\n-              } else if (field.type === 'signature') {\n+                  } else if (field.type === 'signature') {\n                     return `<div style=\"${style} border-bottom: 2px solid #9ca3af; display: flex; align-items: end; justify-content: center; padding-bottom: 4px;\">\n                   <span style=\"font-size: 10px; color: #6b7280;\">${field.label}</span>\n                 </div>`\n-              } else {\n+                  } else {\n                     return `<div style=\"${style}\">${content}</div>`\n                   }\n                 })\n                 .join('')\n@@ -473,10 +474,10 @@\n       `\n \n       await printToPDF(\n         fullHTML,\n-        `admit-cards-${selectedExamSchedule.examGroupName}.pdf`\n-\n+        `admit-cards-${selectedExamSchedule.examGroupName}.pdf`,\n+      )\n     } catch (error) {\n       console.error('Print error:', error)\n       alert('Error generating admit cards. Please try again.')\n     } finally {\n@@ -486,15 +487,15 @@\n \n   const handlePreviewStudent = student => {\n     setPreviewStudent(student)\n     setShowPreview(true)\n-  };\n+  }\n \n   const getUniqueClasses = () => {\n     const classes = new Set()\n     filteredStudents.forEach(student => classes.add(student.className))\n     return Array.from(classes)\n-  };\n+  }\n \n   if (loadingSchedules) return <LoadingSkeleton />\n \n   return (\n@@ -601,8 +602,9 @@\n         <div className=\"space-y-4\">\n           <div className=\"bg-white rounded-lg shadow p-6\">\n             <h2 className=\"text-lg font-medium mb-4\">\n               Step 3: Select Students\n+            </h2>\n \n             {/* Filters */}\n             <div className=\"flex gap-4 mb-4\">\n               <div className=\"relative flex-1\">\n@@ -778,7 +780,7 @@\n         )}\n       </Dialog>\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default PrintAdmitCard\n+export default PrintAdmitCard\n"
                },
                {
                    "date": 1755994925719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   RefreshCw,\n } from 'lucide-react'\n import { examApi } from '../../lib/api/exams'\n import { printToPDF } from '../../lib/print'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import Input from '../../components/ui/Input'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n \n const AdmitCardPreview = ({ student, template, examSchedule, watermark }) => {\n@@ -782,5 +782,5 @@\n     </div>\n   )\n }\n \n-export default PrintAdmitCard\n\\ No newline at end of file\n+export default PrintAdmitCard\n"
                }
            ],
            "date": 1755986163566,
            "name": "Commit-0",
            "content": "import React, { useState, useRef } from 'react'\nimport { useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport {\n  Printer,\n  Download,\n  Eye,\n  Filter,\n  Search,\n  CheckSquare,\n  Square,\n  FileText,\n  Users,\n  Settings,\n  QrCode,\n  Image as ImageIcon,\n  RefreshCw,\n} from 'lucide-react'\nimport { examApi } from '../../lib/api/exams'\nimport { printToPDF } from '../../lib/print'\nimport Dialog from '../../components/ui/Dialog'\nimport Input from '../../components/ui/Input'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n\nconst AdmitCardPreview = ({ student, template, examSchedule, watermark }) => {\n  const generateQRData = (student, examSchedule) => {\n    return JSON.stringify({\n      studentId: student.id,\n      rollNumber: student.rollNumber,\n      examId: examSchedule.id,\n      examDate: examSchedule.examDate,\n      timestamp: Date.now(),\n    })\n  }\n\n  const renderField = field => {\n    const style = {\n      position: 'absolute',\n      left: `${field.x}px`,\n      top: `${field.y}px`,\n      width: `${field.width}px`,\n      height: `${field.height}px`,\n      fontSize: `${field.fontSize || 14}px`,\n      fontWeight: field.fontWeight || 'normal',\n      textAlign: field.textAlign || 'left',\n      color: template.theme.textColor,\n      zIndex: field.zIndex || 1,\n    };\n\n    switch (field.type) {\n      case 'photo':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"border-2 border-gray-300\"\n          >\n            {student.photo ? (\n              <img\n                src={student.photo}\n                alt=\"Student\"\n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-full h-full bg-gray-200 flex items-center justify-center\">\n                <ImageIcon className=\"w-8 h-8 text-gray-400\" />\n              </div>\n            )}\n          </div>\n        )\n      \n      case 'qr_code':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"flex items-center justify-center border border-gray-300\"\n          >\n            <div className=\"w-full h-full bg-white flex items-center justify-center\">\n              <QrCode className=\"w-12 h-12 text-gray-700\" />\n              <div className=\"absolute inset-0 opacity-0\">\n                {generateQRData(student, examSchedule)}\n              </div>\n            </div>\n          </div>\n        )\n      \n      case 'signature':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"border-b-2 border-gray-400\"\n          >\n            <div className=\"w-full h-full flex items-end justify-center pb-1\">\n              <span className=\"text-xs text-gray-600\">{field.label}</span>\n            </div>\n          </div>\n        )\n      \n      case 'logo':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"flex items-center justify-center\"\n          >\n            <div className=\"w-full h-full bg-gray-100 border border-gray-300 rounded flex items-center justify-center\">\n              <span className=\"text-xs text-gray-500\">LOGO</span>\n            </div>\n          </div>\n        )\n      \n      case 'watermark':\n        return (\n          <div\n            key={field.id}\n            style={{\n              ...style,\n              opacity: 0.1,\n              transform: 'rotate(-45deg)',\n              pointerEvents: 'none',\n            }}\n            className=\"flex items-center justify-center\"\n          >\n            <span className=\"text-4xl font-bold text-gray-500\">\n              {watermark || 'ADMIT CARD'}\n            </span>\n          </div>\n        )\n      \n      default: // text fields\n        const getFieldValue = () => {\n          switch (field.id) {\n            case 'student-name':\n              return `Name: ${student.name}`\n            case 'roll-number':\n              return `Roll No: ${student.rollNumber}`\n            case 'class-section':\n              return `Class: ${student.className} - ${student.section}`\n            case 'exam-name':\n              return `Exam: ${examSchedule.examGroupName}`\n            case 'school-name':\n              return 'GREENWOOD HIGH SCHOOL'\n            case 'admit-card-title':\n              return 'ADMIT CARD'\n            default:\n              return field.label\n          }\n        }\n\n        return (\n          <div key={field.id} style={style} className=\"flex items-center\">\n            {getFieldValue()}\n          </div>\n        )\n    }\n  }\n\n  return (\n    <div\n      className=\"relative bg-white border shadow-sm mx-auto\"\n      style={{\n        width: '595px',\n        height: '842px',\n        backgroundColor: template.theme.backgroundColor,\n      }}\n    >\n      {/* Header Background */}\n      <div\n        className=\"absolute top-0 left-0 right-0 h-24\"\n        style={{ backgroundColor: template.theme.headerBg }}\n      />\n\n      {/* Render all fields */}\n      {Array.isArray(template.fields) && template.fields.map(renderField)}\n\n      {/* Border */}\n      <div\n        className=\"absolute inset-4 border-2 rounded\"\n        style={{ borderColor: template.theme.borderColor }}\n      />\n    </div>\n  )\n};\n\nconst StudentSelectionTable = ({\n  students,\n  selectedStudents,\n  onSelectionChange,\n  examSchedule,\n}) => {\n  const toggleStudent = studentId => {\n    const newSelection = selectedStudents.includes(studentId)\n      ? selectedStudents.filter(id => id !== studentId)\n      : [...selectedStudents, studentId]\n    onSelectionChange(newSelection)\n  };\n\n  const toggleAll = () => {\n    const allSelected = selectedStudents.length === students.length\n    onSelectionChange(allSelected ? [] : students.map(s => s.id))\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"p-4 border-b bg-gray-50\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"font-medium\">Select Students</h3>\n          <div className=\"flex items-center gap-4\">\n            <span className=\"text-sm text-gray-600\">\n              {selectedStudents.length} of {students.length} selected\n            </span>\n            <button\n              onClick={toggleAll}\n              className=\"flex items-center gap-2 text-sm text-blue-600 hover:text-blue-700\"\n            >\n              {selectedStudents.length === students.length ? (\n                <CheckSquare className=\"w-4 h-4\" />\n              ) : (\n                <Square className=\"w-4 h-4\" />\n              )}\n              Select All\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-h-96 overflow-y-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50 sticky top-0\">\n            <tr>\n              <th className=\"text-left py-3 px-4 w-12\">\n                <input\n                  type=\"checkbox\"\n                  checked={\n                    selectedStudents.length === students.length &&\n                    students.length > 0\n                  }\n                  onChange={toggleAll}\n                  className=\"rounded\"\n                />\n              </th>\n              <th className=\"text-left py-3 px-4\">Roll No</th>\n              <th className=\"text-left py-3 px-4\">Student Name</th>\n              <th className=\"text-left py-3 px-4\">Class</th>\n              <th className=\"text-left py-3 px-4\">Section</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.isArray(students) &&\n              students.map(student => (\n                <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n                  <td className=\"py-3 px-4\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedStudents.includes(student.id)}\n                      onChange={() => toggleStudent(student.id)}\n                      className=\"rounded\"\n                    />\n                  </td>\n                  <td className=\"py-3 px-4 font-medium\">\n                    {student.rollNumber}\n                  </td>\n                  <td className=\"py-3 px-4\">{student.name}</td>\n                  <td className=\"py-3 px-4\">{student.className}</td>\n                  <td className=\"py-3 px-4\">{student.section}</td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n};\n\nconst PrintAdmitCard = () => {\n  const [selectedExamSchedule, setSelectedExamSchedule] = useState(null)\n  const [selectedTemplate, setSelectedTemplate] = useState(null)\n  const [selectedStudents, setSelectedStudents] = useState([])\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filterClass, setFilterClass] = useState('all')\n  const [showPreview, setShowPreview] = useState(false)\n  const [previewStudent, setPreviewStudent] = useState(null)\n  const [watermarkText, setWatermarkText] = useState('ADMIT CARD')\n  const [printSettings, setPrintSettings] = useState({\n    cardsPerPage: 1,\n    includeWatermark: true,\n    printQuality: 'high',\n  })\n  const [isPrinting, setIsPrinting] = useState(false)\n\n  const { data: examSchedulesData, isLoading: loadingSchedules } = useQuery({\n    queryKey: ['exam-schedules', 'for-admit-cards'],\n    queryFn: () => examApi.getExamSchedules(),\n  })\n\n  const { data: studentsData, isLoading: loadingStudents } = useQuery({\n    queryKey: ['students', 'by-schedule', selectedExamSchedule?.id],\n    queryFn: () => examApi.getStudentsBySchedule(selectedExamSchedule.id),\n    enabled: !!selectedExamSchedule,\n  })\n\n  const { data: templatesData } = useQuery({\n    queryKey: ['admit-card-templates'],\n    queryFn: () => {\n      // Load from localStorage for demo\n      const saved = localStorage.getItem('admitCardTemplates')\n      return Promise.resolve({\n        success: true,\n        data: saved ? JSON.parse(saved) : [],\n      })\n    },\n  })\n\n  const filteredStudents =\n    studentsData?.data?.filter(student => {\n      const matchesSearch =\n        student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        student.rollNumber.toLowerCase().includes(searchTerm.toLowerCase())\n      const matchesClass =\n        filterClass === 'all' || student.className === filterClass\n      return matchesSearch && matchesClass\n    }) || []\n\n  const handlePrintSelected = async () => {\n    if (!selectedTemplate || selectedStudents.length === 0) {\n      alert('Please select a template and students to print')\n      return;\n    }\n\n    setIsPrinting(true)\n    \n    try {\n      const studentsToprint = filteredStudents.filter(s =>\n        selectedStudents.includes(s.id)\n\n      // Generate HTML for all selected admit cards\n      const admitCardsHTML = studentsToprint\n        .map(student => {\n          return `\n          <div class=\"admit-card-page\" style=\"\n            width: 595px; \n            height: 842px; \n            position: relative; \n            background: ${selectedTemplate.theme.backgroundColor};\n            page-break-after: always;\n            margin: 0 auto;\n          \">\n            ${\n              Array.isArray(selectedTemplate.fields) &&\n              selectedTemplate.fields\n                .map(field => {\n                  const style = `\n                position: absolute;\n                left: ${field.x}px;\n                top: ${field.y}px;\n                width: ${field.width}px;\n                height: ${field.height}px;\n                font-size: ${field.fontSize || 14}px;\n                font-weight: ${field.fontWeight || 'normal'};\n                text-align: ${field.textAlign || 'left'};\n                color: ${selectedTemplate.theme.textColor};\n              `\n              \n              let content = ''\n              switch (field.id) {\n                    case 'student-name':\n                      content = `Name: ${student.name}`\n                      break\n                    case 'roll-number':\n                      content = `Roll No: ${student.rollNumber}`\n                      break\n                    case 'class-section':\n                      content = `Class: ${student.className} - ${student.section}`\n                      break\n                    case 'exam-name':\n                      content = `Exam: ${selectedExamSchedule.examGroupName}`\n                      break\n                    case 'school-name':\n                      content = 'GREENWOOD HIGH SCHOOL'\n                      break\n                    case 'admit-card-title':\n                      content = 'ADMIT CARD'\n                      break\n                    default:\n                      content = field.label\n                  }\n\n                  if (field.type === 'photo') {\n                    return `<div style=\"${style} border: 2px solid #d1d5db;\">\n                  <div style=\"width: 100%; height: 100%; background: #f3f4f6; display: flex; align-items: center; justify-content: center; font-size: 12px; color: #6b7280;\">\n                    PHOTO\n                  </div>\n                </div>`\n              } else if (field.type === 'qr_code') {\n                    return `<div style=\"${style} border: 1px solid #d1d5db; display: flex; align-items: center; justify-content: center;\">\n                  <div style=\"font-size: 10px; color: #6b7280;\">QR CODE</div>\n                </div>`\n              } else if (field.type === 'signature') {\n                    return `<div style=\"${style} border-bottom: 2px solid #9ca3af; display: flex; align-items: end; justify-content: center; padding-bottom: 4px;\">\n                  <span style=\"font-size: 10px; color: #6b7280;\">${field.label}</span>\n                </div>`\n              } else {\n                    return `<div style=\"${style}\">${content}</div>`\n                  }\n                })\n                .join('')\n            }\n            \n            <!-- Border -->\n            <div style=\"\n              position: absolute;\n              top: 16px;\n              left: 16px;\n              right: 16px;\n              bottom: 16px;\n              border: 2px solid ${selectedTemplate.theme.borderColor};\n              border-radius: 4px;\n            \"></div>\n            \n            <!-- Header Background -->\n            <div style=\"\n              position: absolute;\n              top: 0;\n              left: 0;\n              right: 0;\n              height: 96px;\n              background: ${selectedTemplate.theme.headerBg};\n            \"></div>\n            \n            ${\n              printSettings.includeWatermark\n                ? `\n              <div style=\"\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%) rotate(-45deg);\n                font-size: 48px;\n                font-weight: bold;\n                color: #6b7280;\n                opacity: 0.1;\n                pointer-events: none;\n              \">\n                ${watermarkText}\n              </div>\n            `\n                : ''\n            }\n          </div>\n        `\n        })\n        .join('')\n\n      const fullHTML = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>Admit Cards</title>\n          <style>\n            body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }\n            .admit-card-page:last-child { page-break-after: avoid; }\n            @media print {\n              body { margin: 0; padding: 0; }\n              .admit-card-page { margin: 0; }\n            }\n          </style>\n        </head>\n        <body>\n          ${admitCardsHTML}\n        </body>\n        </html>\n      `\n\n      await printToPDF(\n        fullHTML,\n        `admit-cards-${selectedExamSchedule.examGroupName}.pdf`\n\n    } catch (error) {\n      console.error('Print error:', error)\n      alert('Error generating admit cards. Please try again.')\n    } finally {\n      setIsPrinting(false)\n    }\n  }\n\n  const handlePreviewStudent = student => {\n    setPreviewStudent(student)\n    setShowPreview(true)\n  };\n\n  const getUniqueClasses = () => {\n    const classes = new Set()\n    filteredStudents.forEach(student => classes.add(student.className))\n    return Array.from(classes)\n  };\n\n  if (loadingSchedules) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Print Admit Cards</h1>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={handlePrintSelected}\n            disabled={\n              !selectedTemplate || selectedStudents.length === 0 || isPrinting\n            }\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            {isPrinting ? (\n              <RefreshCw className=\"w-4 h-4 animate-spin\" />\n            ) : (\n              <Printer className=\"w-4 h-4\" />\n            )}\n            {isPrinting\n              ? 'Generating...'\n              : `Print Selected (${selectedStudents.length})`}\n          </button>\n        </div>\n      </div>\n\n      {/* Step 1: Select Exam Schedule */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-lg font-medium mb-4\">\n          Step 1: Select Exam Schedule\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {examSchedulesData?.data?.map(schedule => (\n            <div\n              key={schedule.id}\n              onClick={() => setSelectedExamSchedule(schedule)}\n              className={`p-4 border rounded-lg cursor-pointer hover:shadow-md transition-shadow ${\n                selectedExamSchedule?.id === schedule.id\n                  ? 'border-blue-500 bg-blue-50'\n                  : ''\n              }`}\n            >\n              <h3 className=\"font-medium\">{schedule.subjectName}</h3>\n              <p className=\"text-sm text-gray-600\">{schedule.examGroupName}</p>\n              <p className=\"text-sm text-gray-600\">\n                {schedule.className} - {schedule.section}\n              </p>\n              <p className=\"text-sm text-gray-500 mt-2\">\n                {new Date(schedule.examDate).toLocaleDateString()}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Step 2: Select Template */}\n      {selectedExamSchedule && (\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-lg font-medium mb-4\">Step 2: Select Template</h2>\n          {templatesData?.data?.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                No Templates Found\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                Create a template first using the Design Admit Card feature.\n              </p>\n              <button className=\"text-blue-600 hover:text-blue-700\">\n                Go to Design Admit Card\n              </button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {templatesData?.data?.map(template => (\n                <div\n                  key={template.name}\n                  onClick={() => setSelectedTemplate(template)}\n                  className={`p-4 border rounded-lg cursor-pointer hover:shadow-md transition-shadow ${\n                    selectedTemplate?.name === template.name\n                      ? 'border-blue-500 bg-blue-50'\n                      : ''\n                  }`}\n                >\n                  <h3 className=\"font-medium\">{template.name}</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    Theme: {template.theme.name}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    Fields: {template.fields.length}\n                  </p>\n                  <p className=\"text-sm text-gray-500 mt-2\">\n                    Created: {new Date(template.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Step 3: Select Students */}\n      {selectedExamSchedule && selectedTemplate && (\n        <div className=\"space-y-4\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-medium mb-4\">\n              Step 3: Select Students\n\n            {/* Filters */}\n            <div className=\"flex gap-4 mb-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search students...\"\n                  value={searchTerm}\n                  onChange={e => setSearchTerm(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n                />\n              </div>\n              <select\n                value={filterClass}\n                onChange={e => setFilterClass(e.target.value)}\n                className=\"border rounded-lg px-3 py-2\"\n              >\n                <option value=\"all\">All Classes</option>\n                {getUniqueClasses().map(className => (\n                  <option key={className} value={className}>\n                    {className}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {loadingStudents ? (\n              <LoadingSkeleton />\n            ) : (\n              <StudentSelectionTable\n                students={filteredStudents}\n                selectedStudents={selectedStudents}\n                onSelectionChange={setSelectedStudents}\n                examSchedule={selectedExamSchedule}\n              />\n            )}\n          </div>\n\n          {/* Print Settings */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"font-medium mb-4 flex items-center gap-2\">\n              <Settings className=\"w-4 h-4\" />\n              Print Settings\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  Cards Per Page\n                </label>\n                <select\n                  value={printSettings.cardsPerPage}\n                  onChange={e =>\n                    setPrintSettings(prev => ({\n                      ...prev,\n                      cardsPerPage: parseInt(e.target.value),\n                    }))\n                  }\n                  className=\"w-full border rounded-lg px-3 py-2\"\n                >\n                  <option value={1}>1 Card per Page</option>\n                  <option value={2}>2 Cards per Page</option>\n                  <option value={4}>4 Cards per Page</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  Print Quality\n                </label>\n                <select\n                  value={printSettings.printQuality}\n                  onChange={e =>\n                    setPrintSettings(prev => ({\n                      ...prev,\n                      printQuality: e.target.value,\n                    }))\n                  }\n                  className=\"w-full border rounded-lg px-3 py-2\"\n                >\n                  <option value=\"draft\">Draft</option>\n                  <option value=\"normal\">Normal</option>\n                  <option value=\"high\">High Quality</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  Watermark Text\n                </label>\n                <input\n                  type=\"text\"\n                  value={watermarkText}\n                  onChange={e => setWatermarkText(e.target.value)}\n                  className=\"w-full border rounded-lg px-3 py-2\"\n                  placeholder=\"Enter watermark text\"\n                />\n              </div>\n            </div>\n\n            <div className=\"mt-4\">\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={printSettings.includeWatermark}\n                  onChange={e =>\n                    setPrintSettings(prev => ({\n                      ...prev,\n                      includeWatermark: e.target.checked,\n                    }))\n                  }\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Include watermark</span>\n              </label>\n            </div>\n          </div>\n\n          {/* Preview Section */}\n          {selectedStudents.length > 0 && (\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"font-medium mb-4\">Preview Selected Students</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                {filteredStudents\n                  .filter(s => selectedStudents.includes(s.id))\n                  .slice(0, 12)\n                  .map(student => (\n                    <button\n                      key={student.id}\n                      onClick={() => handlePreviewStudent(student)}\n                      className=\"p-3 border rounded-lg hover:bg-gray-50 text-left\"\n                    >\n                      <div className=\"font-medium text-sm\">{student.name}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {student.rollNumber}\n                      </div>\n                    </button>\n                  ))}\n                {selectedStudents.length > 12 && (\n                  <div className=\"p-3 border rounded-lg bg-gray-50 flex items-center justify-center\">\n                    <span className=\"text-sm text-gray-600\">\n                      +{selectedStudents.length - 12} more\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Preview Dialog */}\n      <Dialog\n        open={showPreview}\n        onClose={() => setShowPreview(false)}\n        title={`Admit Card Preview - ${previewStudent?.name}`}\n        size=\"xl\"\n      >\n        {previewStudent && selectedTemplate && (\n          <div className=\"flex justify-center p-4\">\n            <div\n              style={{ transform: 'scale(0.7)', transformOrigin: 'top center' }}\n            >\n              <AdmitCardPreview\n                student={previewStudent}\n                template={selectedTemplate}\n                examSchedule={selectedExamSchedule}\n                watermark={\n                  printSettings.includeWatermark ? watermarkText : null\n                }\n              />\n            </div>\n          </div>\n        )}\n      </Dialog>\n    </div>\n  )\n};\n\nexport default PrintAdmitCard"
        }
    ]
}