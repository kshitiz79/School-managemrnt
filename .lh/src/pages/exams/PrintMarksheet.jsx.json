{
    "sourceFile": "src/pages/exams/PrintMarksheet.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755986163483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755987434761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState, useRef } from 'react'\n-import { useState } from 'react'\n import { useQuery } from '@tanstack/react-query'\n import {\n   Printer,\n   Download,\n"
                },
                {
                    "date": 1755988587648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -535,8 +535,9 @@\n     \n     try {\n       const studentsToPrint = filteredStudents.filter(s =>\n         selectedStudents.includes(s.id)\n+      )\n \n       // Generate HTML for all selected marksheets\n       const marksheetsHTML = studentsToPrint\n         .map(student => {\n@@ -767,10 +768,10 @@\n                       0\n                     )\n                     const percentage = Math.round(\n                       (totalObtained / totalMax) * 100\n+                    )\n \n-\n                     return `<div style=\"${style} padding: 12px; background: #fef3c7; border: 1px solid #f59e0b; display: flex; align-items: center; justify-content: center;\">\n                   <div style=\"text-align: center;\">\n                     <div style=\"font-size: 24px; font-weight: bold;\">${percentage}%</div>\n                     <div style=\"font-size: 12px; color: #6b7280;\">Percentage</div>\n@@ -987,8 +988,9 @@\n         <div className=\"space-y-4\">\n           <div className=\"bg-white rounded-lg shadow p-6\">\n             <h2 className=\"text-lg font-medium mb-4\">\n               Step 3: Select Students\n+            </h2>\n \n             {/* Filters */}\n             <div className=\"flex gap-4 mb-4\">\n               <div className=\"relative flex-1\">\n"
                },
                {
                    "date": 1755994925718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   Table as TableIcon,\n } from 'lucide-react'\n import { examApi } from '../../lib/api/exams'\n import { printToPDF } from '../../lib/print'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import Input from '../../components/ui/Input'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n \n const MarksheetPreview = ({ student, template, examResults, watermark }) => {\n@@ -33,9 +33,9 @@\n     if (percentage >= 51) return 'C+'\n     if (percentage >= 41) return 'C'\n     if (percentage >= 33) return 'D'\n     return 'E'\n-  };\n+  }\n \n   const calculateTotals = () => {\n     const totalMax = examResults.reduce(\n       (sum, result) => sum + result.maxMarks,\n@@ -56,9 +56,9 @@\n         parseFloat(result.marksObtained || 0) >= result.passMarks\n     )\n \n     return { totalMax, totalObtained, percentage, grade, isPassed }\n-  };\n+  }\n \n   const totals = calculateTotals()\n \n   const renderField = field => {\n@@ -72,9 +72,9 @@\n       fontWeight: field.fontWeight || 'normal',\n       textAlign: field.textAlign || 'left',\n       color: template.theme.textColor,\n       zIndex: field.zIndex || 1,\n-    };\n+    }\n \n     switch (field.type) {\n       case 'student_info':\n         return (\n@@ -98,9 +98,9 @@\n               </div>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'marks_table':\n         return (\n           <div key={field.id} style={style} className=\"border border-gray-300\">\n             <div\n@@ -135,9 +135,9 @@\n                     const isPassed =\n                       result.marksObtained !== 'AB' &&\n                       parseFloat(result.marksObtained || 0) >= result.passMarks\n \n-                  return (\n+                    return (\n                       <tr key={index} className=\"border-b\">\n                         <td className=\"p-2 border-r\">{result.subjectName}</td>\n                         <td className=\"p-2 border-r text-center\">\n                           {result.maxMarks}\n@@ -192,9 +192,9 @@\n               </tbody>\n             </table>\n           </div>\n         )\n-      \n+\n       case 'grade_summary':\n         return (\n           <div\n             key={field.id}\n@@ -212,9 +212,9 @@\n               </div>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'result_status':\n         return (\n           <div\n             key={field.id}\n@@ -238,9 +238,9 @@\n               </div>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'percentage':\n         return (\n           <div\n             key={field.id}\n@@ -254,9 +254,9 @@\n               <div className=\"text-sm text-gray-600\">Percentage</div>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'rank':\n         return (\n           <div\n             key={field.id}\n@@ -268,9 +268,9 @@\n               <div className=\"font-bold\">Rank: {student.rank || 'N/A'}</div>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'signature':\n         return (\n           <div\n             key={field.id}\n@@ -281,9 +281,9 @@\n               <span className=\"text-xs text-gray-600\">{field.label}</span>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'logo':\n         return (\n           <div\n             key={field.id}\n@@ -294,9 +294,9 @@\n               <span className=\"text-xs text-gray-500\">LOGO</span>\n             </div>\n           </div>\n         )\n-      \n+\n       case 'watermark':\n         return (\n           <div\n             key={field.id}\n@@ -312,9 +312,9 @@\n               {watermark || 'MARKSHEET'}\n             </span>\n           </div>\n         )\n-      \n+\n       default: // text fields\n         const getFieldValue = () => {\n           switch (field.id) {\n             case 'school-name':\n@@ -358,9 +358,9 @@\n         style={{ borderColor: template.theme.borderColor }}\n       />\n     </div>\n   )\n-};\n+}\n \n const StudentSelectionTable = ({\n   students,\n   selectedStudents,\n@@ -371,14 +371,14 @@\n     const newSelection = selectedStudents.includes(studentId)\n       ? selectedStudents.filter(id => id !== studentId)\n       : [...selectedStudents, studentId]\n     onSelectionChange(newSelection)\n-  };\n+  }\n \n   const toggleAll = () => {\n     const allSelected = selectedStudents.length === students.length\n     onSelectionChange(allSelected ? [] : students.map(s => s.id))\n-  };\n+  }\n \n   return (\n     <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n       <div className=\"p-4 border-b bg-gray-50\">\n@@ -454,9 +454,9 @@\n         </table>\n       </div>\n     </div>\n   )\n-};\n+}\n \n const PrintMarksheet = () => {\n   const [selectedExamGroup, setSelectedExamGroup] = useState(null)\n   const [selectedTemplate, setSelectedTemplate] = useState(null)\n@@ -512,9 +512,9 @@\n       passMarks: 35,\n       marksObtained:\n         Math.random() < 0.1 ? 'AB' : Math.floor(Math.random() * 40) + 50, // 10% absent, rest 50-90\n     }))\n-  };\n+  }\n \n   const filteredStudents =\n     studentsData?.data?.filter(student => {\n       const matchesSearch =\n@@ -527,13 +527,13 @@\n \n   const handlePrintSelected = async () => {\n     if (!selectedTemplate || selectedStudents.length === 0) {\n       alert('Please select a template and students to print')\n-      return;\n+      return\n     }\n \n     setIsPrinting(true)\n-    \n+\n     try {\n       const studentsToPrint = filteredStudents.filter(s =>\n         selectedStudents.includes(s.id)\n       )\n@@ -542,10 +542,9 @@\n       const marksheetsHTML = studentsToPrint\n         .map(student => {\n           const examResults = generateMockResults(student.id)\n \n-\n-        return `\n+          return `\n           <div class=\"marksheet-page\" style=\"\n             width: 595px; \n             height: 842px; \n             position: relative; \n@@ -567,19 +566,19 @@\n                 font-weight: ${field.fontWeight || 'normal'};\n                 text-align: ${field.textAlign || 'left'};\n                 color: ${selectedTemplate.theme.textColor};\n               `\n-              \n-              if (field.type === 'student_info') {\n+\n+                  if (field.type === 'student_info') {\n                     return `<div style=\"${style} padding: 8px; background: #f9fafb; border: 1px solid #d1d5db;\">\n                   <div style=\"font-size: 14px;\">\n                     <div><strong>Name:</strong> ${student.name}</div>\n                     <div><strong>Roll No:</strong> ${student.rollNumber}</div>\n                     <div><strong>Class:</strong> ${student.className} - ${student.section}</div>\n                     <div><strong>Father:</strong> ${student.fatherName || 'N/A'}</div>\n                   </div>\n                 </div>`\n-              } else if (field.type === 'marks_table') {\n+                  } else if (field.type === 'marks_table') {\n                     const totalMax = examResults.reduce(\n                       (sum, r) => sum + r.maxMarks,\n                       0\n                     )\n@@ -591,10 +590,9 @@\n                       0\n                     )\n                     const percentage = (totalObtained / totalMax) * 100\n \n-\n-                return `<div style=\"${style} border: 1px solid #d1d5db;\">\n+                    return `<div style=\"${style} border: 1px solid #d1d5db;\">\n                   <div style=\"padding: 8px; background: ${selectedTemplate.theme.tableHeaderBg}; border-bottom: 1px solid #d1d5db; font-weight: bold;\">\n                     Subject-wise Marks\n                   </div>\n                   <table style=\"width: 100%; font-size: 12px; border-collapse: collapse;\">\n@@ -637,9 +635,9 @@\n                             const isPassed =\n                               result.marksObtained !== 'AB' &&\n                               result.marksObtained >= result.passMarks\n \n-                        return `<tr style=\"border-bottom: 1px solid #e5e7eb;\">\n+                            return `<tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                           <td style=\"padding: 4px; border-right: 1px solid #d1d5db;\">${result.subjectName}</td>\n                           <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center;\">${result.maxMarks}</td>\n                           <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center;\">${result.marksObtained}</td>\n                           <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center; font-weight: bold;\">${grade}</td>\n@@ -654,9 +652,11 @@\n                               ${result.marksObtained === 'AB' ? 'Absent' : isPassed ? 'Pass' : 'Fail'}\n                             </span>\n                           </td>\n                         </tr>`\n-                      }).join('')}\n+                          })\n+                          .join('')\n+                      }\n                       <tr style=\"border-top: 2px solid #374151; font-weight: bold;\">\n                         <td style=\"padding: 4px; border-right: 1px solid #d1d5db;\">TOTAL</td>\n                         <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center;\">${totalMax}</td>\n                         <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center;\">${totalObtained}</td>\n@@ -689,9 +689,9 @@\n                       </tr>\n                     </tbody>\n                   </table>\n                 </div>`\n-              } else if (field.type === 'grade_summary') {\n+                  } else if (field.type === 'grade_summary') {\n                     const totalMax = examResults.reduce(\n                       (sum, r) => sum + r.maxMarks,\n                       0\n                     )\n@@ -729,9 +729,9 @@\n                     <div>Percentage: ${percentage}%</div>\n                     <div>Overall Grade: <strong>${grade}</strong></div>\n                   </div>\n                 </div>`\n-              } else if (field.type === 'result_status') {\n+                  } else if (field.type === 'result_status') {\n                     const totalMax = examResults.reduce(\n                       (sum, r) => sum + r.maxMarks,\n                       0\n                     )\n@@ -744,9 +744,9 @@\n                     )\n                     const percentage = (totalObtained / totalMax) * 100\n                     const isPassed = percentage >= 33\n \n-                return `<div style=\"${style} padding: 12px; border: 1px solid ${isPassed ? '#10b981' : '#ef4444'}; background: ${isPassed ? '#d1fae5' : '#fee2e2'}; display: flex; align-items: center; justify-content: center;\">\n+                    return `<div style=\"${style} padding: 12px; border: 1px solid ${isPassed ? '#10b981' : '#ef4444'}; background: ${isPassed ? '#d1fae5' : '#fee2e2'}; display: flex; align-items: center; justify-content: center;\">\n                   <div style=\"text-align: center;\">\n                     <div style=\"font-size: 18px; font-weight: bold; color: ${isPassed ? '#065f46' : '#991b1b'};\">\n                       ${isPassed ? 'PASS' : 'FAIL'}\n                     </div>\n@@ -754,9 +754,9 @@\n                       ${isPassed ? 'Promoted' : 'Not Promoted'}\n                     </div>\n                   </div>\n                 </div>`\n-              } else if (field.type === 'percentage') {\n+                  } else if (field.type === 'percentage') {\n                     const totalMax = examResults.reduce(\n                       (sum, r) => sum + r.maxMarks,\n                       0\n                     )\n@@ -776,20 +776,20 @@\n                     <div style=\"font-size: 24px; font-weight: bold;\">${percentage}%</div>\n                     <div style=\"font-size: 12px; color: #6b7280;\">Percentage</div>\n                   </div>\n                 </div>`\n-              } else if (field.type === 'signature') {\n+                  } else if (field.type === 'signature') {\n                     return `<div style=\"${style} border-bottom: 2px solid #9ca3af; display: flex; align-items: end; justify-content: center; padding-bottom: 4px;\">\n                   <span style=\"font-size: 10px; color: #6b7280;\">${field.label}</span>\n                 </div>`\n-              } else {\n+                  } else {\n                     let content = field.label\n                     if (field.id === 'school-name')\n                       content = 'GREENWOOD HIGH SCHOOL'\n                     if (field.id === 'marksheet-title') content = 'MARK SHEET'\n \n-                return `<div style=\"${style}\">${content}</div>`\n-              }\n+                    return `<div style=\"${style}\">${content}</div>`\n+                  }\n                 })\n                 .join('')\n             }\n             \n@@ -858,9 +858,8 @@\n         </html>\n       `\n \n       await printToPDF(fullHTML, `marksheets-${selectedExamGroup.name}.pdf`)\n-      \n     } catch (error) {\n       console.error('Print error:', error)\n       alert('Error generating marksheets. Please try again.')\n     } finally {\n@@ -870,15 +869,15 @@\n \n   const handlePreviewStudent = student => {\n     setPreviewStudent(student)\n     setShowPreview(true)\n-  };\n+  }\n \n   const getUniqueClasses = () => {\n     const classes = new Set()\n     filteredStudents.forEach(student => classes.add(student.className))\n     return Array.from(classes)\n-  };\n+  }\n \n   if (loadingGroups) return <LoadingSkeleton />\n \n   return (\n@@ -1179,7 +1178,7 @@\n         )}\n       </Dialog>\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default PrintMarksheet\n+export default PrintMarksheet\n"
                }
            ],
            "date": 1755986163483,
            "name": "Commit-0",
            "content": "import React, { useState, useRef } from 'react'\nimport { useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport {\n  Printer,\n  Download,\n  Eye,\n  Filter,\n  Search,\n  CheckSquare,\n  Square,\n  FileText,\n  Users,\n  Settings,\n  BarChart3,\n  Award,\n  Percent,\n  Hash,\n  RefreshCw,\n  Table as TableIcon,\n} from 'lucide-react'\nimport { examApi } from '../../lib/api/exams'\nimport { printToPDF } from '../../lib/print'\nimport Dialog from '../../components/ui/Dialog'\nimport Input from '../../components/ui/Input'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n\nconst MarksheetPreview = ({ student, template, examResults, watermark }) => {\n  const calculateGrade = percentage => {\n    if (percentage >= 91) return 'A+'\n    if (percentage >= 81) return 'A'\n    if (percentage >= 71) return 'B+'\n    if (percentage >= 61) return 'B'\n    if (percentage >= 51) return 'C+'\n    if (percentage >= 41) return 'C'\n    if (percentage >= 33) return 'D'\n    return 'E'\n  };\n\n  const calculateTotals = () => {\n    const totalMax = examResults.reduce(\n      (sum, result) => sum + result.maxMarks,\n      0\n    )\n    const totalObtained = examResults.reduce(\n      (sum, result) =>\n        result.marksObtained === 'AB'\n          ? sum\n          : sum + parseFloat(result.marksObtained || 0),\n      0\n    )\n    const percentage = totalMax > 0 ? (totalObtained / totalMax) * 100 : 0\n    const grade = calculateGrade(percentage)\n    const isPassed = examResults.every(\n      result =>\n        result.marksObtained !== 'AB' &&\n        parseFloat(result.marksObtained || 0) >= result.passMarks\n    )\n\n    return { totalMax, totalObtained, percentage, grade, isPassed }\n  };\n\n  const totals = calculateTotals()\n\n  const renderField = field => {\n    const style = {\n      position: 'absolute',\n      left: `${field.x}px`,\n      top: `${field.y}px`,\n      width: `${field.width}px`,\n      height: `${field.height}px`,\n      fontSize: `${field.fontSize || 14}px`,\n      fontWeight: field.fontWeight || 'normal',\n      textAlign: field.textAlign || 'left',\n      color: template.theme.textColor,\n      zIndex: field.zIndex || 1,\n    };\n\n    switch (field.type) {\n      case 'student_info':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"p-2 bg-gray-50 border border-gray-300\"\n          >\n            <div className=\"text-sm space-y-1\">\n              <div>\n                <strong>Name:</strong> {student.name}\n              </div>\n              <div>\n                <strong>Roll No:</strong> {student.rollNumber}\n              </div>\n              <div>\n                <strong>Class:</strong> {student.className} - {student.section}\n              </div>\n              <div>\n                <strong>Father:</strong> {student.fatherName || 'N/A'}\n              </div>\n            </div>\n          </div>\n        )\n      \n      case 'marks_table':\n        return (\n          <div key={field.id} style={style} className=\"border border-gray-300\">\n            <div\n              className=\"p-2 text-sm font-medium border-b\"\n              style={{ backgroundColor: template.theme.tableHeaderBg }}\n            >\n              Subject-wise Marks\n            </div>\n            <table className=\"w-full text-sm\">\n              <thead style={{ backgroundColor: template.theme.tableHeaderBg }}>\n                <tr>\n                  <th className=\"text-left p-2 border-r\">Subject</th>\n                  <th className=\"text-center p-2 border-r\">Max Marks</th>\n                  <th className=\"text-center p-2 border-r\">Obtained</th>\n                  <th className=\"text-center p-2 border-r\">Grade</th>\n                  <th className=\"text-center p-2\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Array.isArray(examResults) &&\n                  examResults.map((result, index) => {\n                    const percentage =\n                      result.marksObtained !== 'AB'\n                        ? (parseFloat(result.marksObtained || 0) /\n                            result.maxMarks) *\n                          100\n                        : 0\n                    const grade =\n                      result.marksObtained === 'AB'\n                        ? 'AB'\n                        : calculateGrade(percentage)\n                    const isPassed =\n                      result.marksObtained !== 'AB' &&\n                      parseFloat(result.marksObtained || 0) >= result.passMarks\n\n                  return (\n                      <tr key={index} className=\"border-b\">\n                        <td className=\"p-2 border-r\">{result.subjectName}</td>\n                        <td className=\"p-2 border-r text-center\">\n                          {result.maxMarks}\n                        </td>\n                        <td className=\"p-2 border-r text-center\">\n                          {result.marksObtained}\n                        </td>\n                        <td className=\"p-2 border-r text-center font-medium\">\n                          {grade}\n                        </td>\n                        <td className=\"p-2 text-center\">\n                          <span\n                            className={`px-2 py-1 rounded text-xs ${\n                              result.marksObtained === 'AB'\n                                ? 'bg-gray-100 text-gray-700'\n                                : isPassed\n                                  ? 'bg-green-100 text-green-700'\n                                  : 'bg-red-100 text-red-700'\n                            }`}\n                          >\n                            {result.marksObtained === 'AB'\n                              ? 'Absent'\n                              : isPassed\n                                ? 'Pass'\n                                : 'Fail'}\n                          </span>\n                        </td>\n                      </tr>\n                    )\n                  })}\n                <tr className=\"border-t-2 font-bold\">\n                  <td className=\"p-2 border-r\">TOTAL</td>\n                  <td className=\"p-2 border-r text-center\">\n                    {totals.totalMax}\n                  </td>\n                  <td className=\"p-2 border-r text-center\">\n                    {totals.totalObtained}\n                  </td>\n                  <td className=\"p-2 border-r text-center\">{totals.grade}</td>\n                  <td className=\"p-2 text-center\">\n                    <span\n                      className={`px-2 py-1 rounded text-xs ${\n                        totals.isPassed\n                          ? 'bg-green-100 text-green-700'\n                          : 'bg-red-100 text-red-700'\n                      }`}\n                    >\n                      {totals.isPassed ? 'Pass' : 'Fail'}\n                    </span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )\n      \n      case 'grade_summary':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"p-3 bg-blue-50 border border-blue-300\"\n          >\n            <div className=\"text-sm font-medium mb-2\">Grade Summary</div>\n            <div className=\"text-sm space-y-1\">\n              <div>\n                Total: {totals.totalObtained}/{totals.totalMax}\n              </div>\n              <div>Percentage: {Math.round(totals.percentage)}%</div>\n              <div>\n                Overall Grade: <strong>{totals.grade}</strong>\n              </div>\n            </div>\n          </div>\n        )\n      \n      case 'result_status':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className={`p-3 border flex items-center justify-center ${\n              totals.isPassed\n                ? 'bg-green-50 border-green-300'\n                : 'bg-red-50 border-red-300'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div\n                className={`text-lg font-bold ${\n                  totals.isPassed ? 'text-green-700' : 'text-red-700'\n                }`}\n              >\n                {totals.isPassed ? 'PASS' : 'FAIL'}\n              </div>\n              <div className=\"text-sm text-gray-600\">\n                {totals.isPassed ? 'Promoted' : 'Not Promoted'}\n              </div>\n            </div>\n          </div>\n        )\n      \n      case 'percentage':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"p-3 bg-yellow-50 border border-yellow-300 flex items-center justify-center\"\n          >\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">\n                {Math.round(totals.percentage)}%\n              </div>\n              <div className=\"text-sm text-gray-600\">Percentage</div>\n            </div>\n          </div>\n        )\n      \n      case 'rank':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"p-3 bg-purple-50 border border-purple-300 flex items-center justify-center\"\n          >\n            <div className=\"text-center\">\n              <Award className=\"w-6 h-6 mx-auto mb-1\" />\n              <div className=\"font-bold\">Rank: {student.rank || 'N/A'}</div>\n            </div>\n          </div>\n        )\n      \n      case 'signature':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"border-b-2 border-gray-400\"\n          >\n            <div className=\"w-full h-full flex items-end justify-center pb-1\">\n              <span className=\"text-xs text-gray-600\">{field.label}</span>\n            </div>\n          </div>\n        )\n      \n      case 'logo':\n        return (\n          <div\n            key={field.id}\n            style={style}\n            className=\"flex items-center justify-center\"\n          >\n            <div className=\"w-full h-full bg-gray-100 border border-gray-300 rounded flex items-center justify-center\">\n              <span className=\"text-xs text-gray-500\">LOGO</span>\n            </div>\n          </div>\n        )\n      \n      case 'watermark':\n        return (\n          <div\n            key={field.id}\n            style={{\n              ...style,\n              opacity: 0.1,\n              transform: 'rotate(-45deg)',\n              pointerEvents: 'none',\n            }}\n            className=\"flex items-center justify-center\"\n          >\n            <span className=\"text-4xl font-bold text-gray-500\">\n              {watermark || 'MARKSHEET'}\n            </span>\n          </div>\n        )\n      \n      default: // text fields\n        const getFieldValue = () => {\n          switch (field.id) {\n            case 'school-name':\n              return 'GREENWOOD HIGH SCHOOL'\n            case 'marksheet-title':\n              return 'MARK SHEET'\n            default:\n              return field.label\n          }\n        }\n\n        return (\n          <div key={field.id} style={style} className=\"flex items-center\">\n            {getFieldValue()}\n          </div>\n        )\n    }\n  }\n\n  return (\n    <div\n      className=\"relative bg-white border shadow-sm mx-auto\"\n      style={{\n        width: '595px',\n        height: '842px',\n        backgroundColor: template.theme.backgroundColor,\n      }}\n    >\n      {/* Header Background */}\n      <div\n        className=\"absolute top-0 left-0 right-0 h-24\"\n        style={{ backgroundColor: template.theme.headerBg }}\n      />\n\n      {/* Render all fields */}\n      {Array.isArray(template.fields) && template.fields.map(renderField)}\n\n      {/* Border */}\n      <div\n        className=\"absolute inset-4 border-2 rounded\"\n        style={{ borderColor: template.theme.borderColor }}\n      />\n    </div>\n  )\n};\n\nconst StudentSelectionTable = ({\n  students,\n  selectedStudents,\n  onSelectionChange,\n  examSchedule,\n}) => {\n  const toggleStudent = studentId => {\n    const newSelection = selectedStudents.includes(studentId)\n      ? selectedStudents.filter(id => id !== studentId)\n      : [...selectedStudents, studentId]\n    onSelectionChange(newSelection)\n  };\n\n  const toggleAll = () => {\n    const allSelected = selectedStudents.length === students.length\n    onSelectionChange(allSelected ? [] : students.map(s => s.id))\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"p-4 border-b bg-gray-50\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"font-medium\">Select Students</h3>\n          <div className=\"flex items-center gap-4\">\n            <span className=\"text-sm text-gray-600\">\n              {selectedStudents.length} of {students.length} selected\n            </span>\n            <button\n              onClick={toggleAll}\n              className=\"flex items-center gap-2 text-sm text-blue-600 hover:text-blue-700\"\n            >\n              {selectedStudents.length === students.length ? (\n                <CheckSquare className=\"w-4 h-4\" />\n              ) : (\n                <Square className=\"w-4 h-4\" />\n              )}\n              Select All\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-h-96 overflow-y-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50 sticky top-0\">\n            <tr>\n              <th className=\"text-left py-3 px-4 w-12\">\n                <input\n                  type=\"checkbox\"\n                  checked={\n                    selectedStudents.length === students.length &&\n                    students.length > 0\n                  }\n                  onChange={toggleAll}\n                  className=\"rounded\"\n                />\n              </th>\n              <th className=\"text-left py-3 px-4\">Roll No</th>\n              <th className=\"text-left py-3 px-4\">Student Name</th>\n              <th className=\"text-left py-3 px-4\">Class</th>\n              <th className=\"text-left py-3 px-4\">Results Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.isArray(students) &&\n              students.map(student => (\n                <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n                  <td className=\"py-3 px-4\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedStudents.includes(student.id)}\n                      onChange={() => toggleStudent(student.id)}\n                      className=\"rounded\"\n                    />\n                  </td>\n                  <td className=\"py-3 px-4 font-medium\">\n                    {student.rollNumber}\n                  </td>\n                  <td className=\"py-3 px-4\">{student.name}</td>\n                  <td className=\"py-3 px-4\">\n                    {student.className} - {student.section}\n                  </td>\n                  <td className=\"py-3 px-4\">\n                    <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-xs\">\n                      Results Available\n                    </span>\n                  </td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n};\n\nconst PrintMarksheet = () => {\n  const [selectedExamGroup, setSelectedExamGroup] = useState(null)\n  const [selectedTemplate, setSelectedTemplate] = useState(null)\n  const [selectedStudents, setSelectedStudents] = useState([])\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filterClass, setFilterClass] = useState('all')\n  const [showPreview, setShowPreview] = useState(false)\n  const [previewStudent, setPreviewStudent] = useState(null)\n  const [watermarkText, setWatermarkText] = useState('MARKSHEET')\n  const [printSettings, setPrintSettings] = useState({\n    sheetsPerPage: 1,\n    includeWatermark: true,\n    printQuality: 'high',\n    includeGrades: true,\n  })\n  const [isPrinting, setIsPrinting] = useState(false)\n\n  const { data: examGroupsData, isLoading: loadingGroups } = useQuery({\n    queryKey: ['exam-groups', 'completed'],\n    queryFn: () => examApi.getExamGroups(),\n  })\n\n  const { data: studentsData, isLoading: loadingStudents } = useQuery({\n    queryKey: ['students', 'with-results', selectedExamGroup?.id],\n    queryFn: () => examApi.getStudentsBySchedule(selectedExamGroup?.id),\n    enabled: !!selectedExamGroup,\n  })\n\n  const { data: templatesData } = useQuery({\n    queryKey: ['marksheet-templates'],\n    queryFn: () => {\n      // Load from localStorage for demo\n      const saved = localStorage.getItem('marksheetTemplates')\n      return Promise.resolve({\n        success: true,\n        data: saved ? JSON.parse(saved) : [],\n      })\n    },\n  })\n\n  // Mock exam results data\n  const generateMockResults = studentId => {\n    const subjects = [\n      'Mathematics',\n      'English',\n      'Science',\n      'Social Studies',\n      'Hindi',\n    ]\n    return subjects.map(subject => ({\n      subjectName: subject,\n      maxMarks: 100,\n      passMarks: 35,\n      marksObtained:\n        Math.random() < 0.1 ? 'AB' : Math.floor(Math.random() * 40) + 50, // 10% absent, rest 50-90\n    }))\n  };\n\n  const filteredStudents =\n    studentsData?.data?.filter(student => {\n      const matchesSearch =\n        student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        student.rollNumber.toLowerCase().includes(searchTerm.toLowerCase())\n      const matchesClass =\n        filterClass === 'all' || student.className === filterClass\n      return matchesSearch && matchesClass\n    }) || []\n\n  const handlePrintSelected = async () => {\n    if (!selectedTemplate || selectedStudents.length === 0) {\n      alert('Please select a template and students to print')\n      return;\n    }\n\n    setIsPrinting(true)\n    \n    try {\n      const studentsToPrint = filteredStudents.filter(s =>\n        selectedStudents.includes(s.id)\n\n      // Generate HTML for all selected marksheets\n      const marksheetsHTML = studentsToPrint\n        .map(student => {\n          const examResults = generateMockResults(student.id)\n\n\n        return `\n          <div class=\"marksheet-page\" style=\"\n            width: 595px; \n            height: 842px; \n            position: relative; \n            background: ${selectedTemplate.theme.backgroundColor};\n            page-break-after: always;\n            margin: 0 auto;\n          \">\n            ${\n              Array.isArray(selectedTemplate.fields) &&\n              selectedTemplate.fields\n                .map(field => {\n                  const style = `\n                position: absolute;\n                left: ${field.x}px;\n                top: ${field.y}px;\n                width: ${field.width}px;\n                height: ${field.height}px;\n                font-size: ${field.fontSize || 14}px;\n                font-weight: ${field.fontWeight || 'normal'};\n                text-align: ${field.textAlign || 'left'};\n                color: ${selectedTemplate.theme.textColor};\n              `\n              \n              if (field.type === 'student_info') {\n                    return `<div style=\"${style} padding: 8px; background: #f9fafb; border: 1px solid #d1d5db;\">\n                  <div style=\"font-size: 14px;\">\n                    <div><strong>Name:</strong> ${student.name}</div>\n                    <div><strong>Roll No:</strong> ${student.rollNumber}</div>\n                    <div><strong>Class:</strong> ${student.className} - ${student.section}</div>\n                    <div><strong>Father:</strong> ${student.fatherName || 'N/A'}</div>\n                  </div>\n                </div>`\n              } else if (field.type === 'marks_table') {\n                    const totalMax = examResults.reduce(\n                      (sum, r) => sum + r.maxMarks,\n                      0\n                    )\n                    const totalObtained = examResults.reduce(\n                      (sum, r) =>\n                        r.marksObtained === 'AB'\n                          ? sum\n                          : sum + parseFloat(r.marksObtained),\n                      0\n                    )\n                    const percentage = (totalObtained / totalMax) * 100\n\n\n                return `<div style=\"${style} border: 1px solid #d1d5db;\">\n                  <div style=\"padding: 8px; background: ${selectedTemplate.theme.tableHeaderBg}; border-bottom: 1px solid #d1d5db; font-weight: bold;\">\n                    Subject-wise Marks\n                  </div>\n                  <table style=\"width: 100%; font-size: 12px; border-collapse: collapse;\">\n                    <thead style=\"background: ${selectedTemplate.theme.tableHeaderBg};\">\n                      <tr>\n                        <th style=\"text-align: left; padding: 4px; border-right: 1px solid #d1d5db;\">Subject</th>\n                        <th style=\"text-align: center; padding: 4px; border-right: 1px solid #d1d5db;\">Max</th>\n                        <th style=\"text-align: center; padding: 4px; border-right: 1px solid #d1d5db;\">Obtained</th>\n                        <th style=\"text-align: center; padding: 4px; border-right: 1px solid #d1d5db;\">Grade</th>\n                        <th style=\"text-align: center; padding: 4px;\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      ${\n                        Array.isArray(examResults) &&\n                        examResults\n                          .map(result => {\n                            const perc =\n                              result.marksObtained !== 'AB'\n                                ? (result.marksObtained / result.maxMarks) * 100\n                                : 0\n                            const grade =\n                              result.marksObtained === 'AB'\n                                ? 'AB'\n                                : perc >= 91\n                                  ? 'A+'\n                                  : perc >= 81\n                                    ? 'A'\n                                    : perc >= 71\n                                      ? 'B+'\n                                      : perc >= 61\n                                        ? 'B'\n                                        : perc >= 51\n                                          ? 'C+'\n                                          : perc >= 41\n                                            ? 'C'\n                                            : perc >= 33\n                                              ? 'D'\n                                              : 'E'\n                            const isPassed =\n                              result.marksObtained !== 'AB' &&\n                              result.marksObtained >= result.passMarks\n\n                        return `<tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                          <td style=\"padding: 4px; border-right: 1px solid #d1d5db;\">${result.subjectName}</td>\n                          <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center;\">${result.maxMarks}</td>\n                          <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center;\">${result.marksObtained}</td>\n                          <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center; font-weight: bold;\">${grade}</td>\n                          <td style=\"padding: 4px; text-align: center;\">\n                            <span style=\"padding: 2px 6px; border-radius: 4px; font-size: 10px; ${\n                              result.marksObtained === 'AB'\n                                ? 'background: #f3f4f6; color: #374151;'\n                                : isPassed\n                                  ? 'background: #dcfce7; color: #166534;'\n                                  : 'background: #fecaca; color: #991b1b;'\n                            }\">\n                              ${result.marksObtained === 'AB' ? 'Absent' : isPassed ? 'Pass' : 'Fail'}\n                            </span>\n                          </td>\n                        </tr>`\n                      }).join('')}\n                      <tr style=\"border-top: 2px solid #374151; font-weight: bold;\">\n                        <td style=\"padding: 4px; border-right: 1px solid #d1d5db;\">TOTAL</td>\n                        <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center;\">${totalMax}</td>\n                        <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center;\">${totalObtained}</td>\n                        <td style=\"padding: 4px; border-right: 1px solid #d1d5db; text-align: center;\">${\n                          percentage >= 91\n                            ? 'A+'\n                            : percentage >= 81\n                              ? 'A'\n                              : percentage >= 71\n                                ? 'B+'\n                                : percentage >= 61\n                                  ? 'B'\n                                  : percentage >= 51\n                                    ? 'C+'\n                                    : percentage >= 41\n                                      ? 'C'\n                                      : percentage >= 33\n                                        ? 'D'\n                                        : 'E'\n                        }</td>\n                        <td style=\"padding: 4px; text-align: center;\">\n                          <span style=\"padding: 2px 6px; border-radius: 4px; font-size: 10px; ${\n                            percentage >= 33\n                              ? 'background: #dcfce7; color: #166534;'\n                              : 'background: #fecaca; color: #991b1b;'\n                          }\">\n                            ${percentage >= 33 ? 'Pass' : 'Fail'}\n                          </span>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>`\n              } else if (field.type === 'grade_summary') {\n                    const totalMax = examResults.reduce(\n                      (sum, r) => sum + r.maxMarks,\n                      0\n                    )\n                    const totalObtained = examResults.reduce(\n                      (sum, r) =>\n                        r.marksObtained === 'AB'\n                          ? sum\n                          : sum + parseFloat(r.marksObtained),\n                      0\n                    )\n                    const percentage = Math.round(\n                      (totalObtained / totalMax) * 100\n                    )\n                    const grade =\n                      percentage >= 91\n                        ? 'A+'\n                        : percentage >= 81\n                          ? 'A'\n                          : percentage >= 71\n                            ? 'B+'\n                            : percentage >= 61\n                              ? 'B'\n                              : percentage >= 51\n                                ? 'C+'\n                                : percentage >= 41\n                                  ? 'C'\n                                  : percentage >= 33\n                                    ? 'D'\n                                    : 'E'\n\n                    return `<div style=\"${style} padding: 12px; background: #dbeafe; border: 1px solid #3b82f6;\">\n                  <div style=\"font-weight: bold; margin-bottom: 8px;\">Grade Summary</div>\n                  <div style=\"font-size: 14px;\">\n                    <div>Total: ${totalObtained}/${totalMax}</div>\n                    <div>Percentage: ${percentage}%</div>\n                    <div>Overall Grade: <strong>${grade}</strong></div>\n                  </div>\n                </div>`\n              } else if (field.type === 'result_status') {\n                    const totalMax = examResults.reduce(\n                      (sum, r) => sum + r.maxMarks,\n                      0\n                    )\n                    const totalObtained = examResults.reduce(\n                      (sum, r) =>\n                        r.marksObtained === 'AB'\n                          ? sum\n                          : sum + parseFloat(r.marksObtained),\n                      0\n                    )\n                    const percentage = (totalObtained / totalMax) * 100\n                    const isPassed = percentage >= 33\n\n                return `<div style=\"${style} padding: 12px; border: 1px solid ${isPassed ? '#10b981' : '#ef4444'}; background: ${isPassed ? '#d1fae5' : '#fee2e2'}; display: flex; align-items: center; justify-content: center;\">\n                  <div style=\"text-align: center;\">\n                    <div style=\"font-size: 18px; font-weight: bold; color: ${isPassed ? '#065f46' : '#991b1b'};\">\n                      ${isPassed ? 'PASS' : 'FAIL'}\n                    </div>\n                    <div style=\"font-size: 12px; color: #6b7280;\">\n                      ${isPassed ? 'Promoted' : 'Not Promoted'}\n                    </div>\n                  </div>\n                </div>`\n              } else if (field.type === 'percentage') {\n                    const totalMax = examResults.reduce(\n                      (sum, r) => sum + r.maxMarks,\n                      0\n                    )\n                    const totalObtained = examResults.reduce(\n                      (sum, r) =>\n                        r.marksObtained === 'AB'\n                          ? sum\n                          : sum + parseFloat(r.marksObtained),\n                      0\n                    )\n                    const percentage = Math.round(\n                      (totalObtained / totalMax) * 100\n\n\n                    return `<div style=\"${style} padding: 12px; background: #fef3c7; border: 1px solid #f59e0b; display: flex; align-items: center; justify-content: center;\">\n                  <div style=\"text-align: center;\">\n                    <div style=\"font-size: 24px; font-weight: bold;\">${percentage}%</div>\n                    <div style=\"font-size: 12px; color: #6b7280;\">Percentage</div>\n                  </div>\n                </div>`\n              } else if (field.type === 'signature') {\n                    return `<div style=\"${style} border-bottom: 2px solid #9ca3af; display: flex; align-items: end; justify-content: center; padding-bottom: 4px;\">\n                  <span style=\"font-size: 10px; color: #6b7280;\">${field.label}</span>\n                </div>`\n              } else {\n                    let content = field.label\n                    if (field.id === 'school-name')\n                      content = 'GREENWOOD HIGH SCHOOL'\n                    if (field.id === 'marksheet-title') content = 'MARK SHEET'\n\n                return `<div style=\"${style}\">${content}</div>`\n              }\n                })\n                .join('')\n            }\n            \n            <!-- Border -->\n            <div style=\"\n              position: absolute;\n              top: 16px;\n              left: 16px;\n              right: 16px;\n              bottom: 16px;\n              border: 2px solid ${selectedTemplate.theme.borderColor};\n              border-radius: 4px;\n            \"></div>\n            \n            <!-- Header Background -->\n            <div style=\"\n              position: absolute;\n              top: 0;\n              left: 0;\n              right: 0;\n              height: 96px;\n              background: ${selectedTemplate.theme.headerBg};\n            \"></div>\n            \n            ${\n              printSettings.includeWatermark\n                ? `\n              <div style=\"\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%) rotate(-45deg);\n                font-size: 48px;\n                font-weight: bold;\n                color: #6b7280;\n                opacity: 0.1;\n                pointer-events: none;\n              \">\n                ${watermarkText}\n              </div>\n            `\n                : ''\n            }\n          </div>\n        `\n        })\n        .join('')\n\n      const fullHTML = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>Marksheets</title>\n          <style>\n            body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }\n            .marksheet-page:last-child { page-break-after: avoid; }\n            @media print {\n              body { margin: 0; padding: 0; }\n              .marksheet-page { margin: 0; }\n            }\n          </style>\n        </head>\n        <body>\n          ${marksheetsHTML}\n        </body>\n        </html>\n      `\n\n      await printToPDF(fullHTML, `marksheets-${selectedExamGroup.name}.pdf`)\n      \n    } catch (error) {\n      console.error('Print error:', error)\n      alert('Error generating marksheets. Please try again.')\n    } finally {\n      setIsPrinting(false)\n    }\n  }\n\n  const handlePreviewStudent = student => {\n    setPreviewStudent(student)\n    setShowPreview(true)\n  };\n\n  const getUniqueClasses = () => {\n    const classes = new Set()\n    filteredStudents.forEach(student => classes.add(student.className))\n    return Array.from(classes)\n  };\n\n  if (loadingGroups) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Print Marksheets</h1>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={handlePrintSelected}\n            disabled={\n              !selectedTemplate || selectedStudents.length === 0 || isPrinting\n            }\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            {isPrinting ? (\n              <RefreshCw className=\"w-4 h-4 animate-spin\" />\n            ) : (\n              <Printer className=\"w-4 h-4\" />\n            )}\n            {isPrinting\n              ? 'Generating...'\n              : `Print Selected (${selectedStudents.length})`}\n          </button>\n        </div>\n      </div>\n\n      {/* Step 1: Select Exam Group */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-lg font-medium mb-4\">Step 1: Select Exam Group</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {examGroupsData?.data\n            ?.filter(group => group.status === 'completed')\n            .map(group => (\n              <div\n                key={group.id}\n                onClick={() => setSelectedExamGroup(group)}\n                className={`p-4 border rounded-lg cursor-pointer hover:shadow-md transition-shadow ${\n                  selectedExamGroup?.id === group.id\n                    ? 'border-blue-500 bg-blue-50'\n                    : ''\n                }`}\n              >\n                <h3 className=\"font-medium\">{group.name}</h3>\n                <p className=\"text-sm text-gray-600\">{group.description}</p>\n                <p className=\"text-sm text-gray-600\">\n                  Classes: {group.classNames?.join(', ')}\n                </p>\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  Status: {group.status}\n                </p>\n              </div>\n            ))}\n        </div>\n      </div>\n\n      {/* Step 2: Select Template */}\n      {selectedExamGroup && (\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-lg font-medium mb-4\">\n            Step 2: Select Marksheet Template\n          </h2>\n          {templatesData?.data?.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                No Templates Found\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                Create a marksheet template first using the Design Marksheet\n                feature.\n              </p>\n              <button className=\"text-blue-600 hover:text-blue-700\">\n                Go to Design Marksheet\n              </button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {templatesData?.data?.map(template => (\n                <div\n                  key={template.name}\n                  onClick={() => setSelectedTemplate(template)}\n                  className={`p-4 border rounded-lg cursor-pointer hover:shadow-md transition-shadow ${\n                    selectedTemplate?.name === template.name\n                      ? 'border-blue-500 bg-blue-50'\n                      : ''\n                  }`}\n                >\n                  <h3 className=\"font-medium\">{template.name}</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    Theme: {template.theme.name}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    Fields: {template.fields.length}\n                  </p>\n                  <p className=\"text-sm text-gray-500 mt-2\">\n                    Created: {new Date(template.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Step 3: Select Students */}\n      {selectedExamGroup && selectedTemplate && (\n        <div className=\"space-y-4\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-medium mb-4\">\n              Step 3: Select Students\n\n            {/* Filters */}\n            <div className=\"flex gap-4 mb-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search students...\"\n                  value={searchTerm}\n                  onChange={e => setSearchTerm(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 border rounded-lg w-full\"\n                />\n              </div>\n              <select\n                value={filterClass}\n                onChange={e => setFilterClass(e.target.value)}\n                className=\"border rounded-lg px-3 py-2\"\n              >\n                <option value=\"all\">All Classes</option>\n                {getUniqueClasses().map(className => (\n                  <option key={className} value={className}>\n                    {className}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {loadingStudents ? (\n              <LoadingSkeleton />\n            ) : (\n              <StudentSelectionTable\n                students={filteredStudents}\n                selectedStudents={selectedStudents}\n                onSelectionChange={setSelectedStudents}\n                examSchedule={selectedExamGroup}\n              />\n            )}\n          </div>\n\n          {/* Print Settings */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"font-medium mb-4 flex items-center gap-2\">\n              <Settings className=\"w-4 h-4\" />\n              Print Settings\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  Sheets Per Page\n                </label>\n                <select\n                  value={printSettings.sheetsPerPage}\n                  onChange={e =>\n                    setPrintSettings(prev => ({\n                      ...prev,\n                      sheetsPerPage: parseInt(e.target.value),\n                    }))\n                  }\n                  className=\"w-full border rounded-lg px-3 py-2\"\n                >\n                  <option value={1}>1 Sheet per Page</option>\n                  <option value={2}>2 Sheets per Page</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  Print Quality\n                </label>\n                <select\n                  value={printSettings.printQuality}\n                  onChange={e =>\n                    setPrintSettings(prev => ({\n                      ...prev,\n                      printQuality: e.target.value,\n                    }))\n                  }\n                  className=\"w-full border rounded-lg px-3 py-2\"\n                >\n                  <option value=\"draft\">Draft</option>\n                  <option value=\"normal\">Normal</option>\n                  <option value=\"high\">High Quality</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">\n                  Watermark Text\n                </label>\n                <input\n                  type=\"text\"\n                  value={watermarkText}\n                  onChange={e => setWatermarkText(e.target.value)}\n                  className=\"w-full border rounded-lg px-3 py-2\"\n                  placeholder=\"Enter watermark text\"\n                />\n              </div>\n            </div>\n\n            <div className=\"mt-4 space-y-2\">\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={printSettings.includeWatermark}\n                  onChange={e =>\n                    setPrintSettings(prev => ({\n                      ...prev,\n                      includeWatermark: e.target.checked,\n                    }))\n                  }\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Include watermark</span>\n              </label>\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={printSettings.includeGrades}\n                  onChange={e =>\n                    setPrintSettings(prev => ({\n                      ...prev,\n                      includeGrades: e.target.checked,\n                    }))\n                  }\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Include grade columns</span>\n              </label>\n            </div>\n          </div>\n\n          {/* Preview Section */}\n          {selectedStudents.length > 0 && (\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"font-medium mb-4\">Preview Selected Students</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                {filteredStudents\n                  .filter(s => selectedStudents.includes(s.id))\n                  .slice(0, 12)\n                  .map(student => (\n                    <button\n                      key={student.id}\n                      onClick={() => handlePreviewStudent(student)}\n                      className=\"p-3 border rounded-lg hover:bg-gray-50 text-left\"\n                    >\n                      <div className=\"font-medium text-sm\">{student.name}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {student.rollNumber}\n                      </div>\n                    </button>\n                  ))}\n                {selectedStudents.length > 12 && (\n                  <div className=\"p-3 border rounded-lg bg-gray-50 flex items-center justify-center\">\n                    <span className=\"text-sm text-gray-600\">\n                      +{selectedStudents.length - 12} more\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Preview Dialog */}\n      <Dialog\n        open={showPreview}\n        onClose={() => setShowPreview(false)}\n        title={`Marksheet Preview - ${previewStudent?.name}`}\n        size=\"xl\"\n      >\n        {previewStudent && selectedTemplate && (\n          <div className=\"flex justify-center p-4\">\n            <div\n              style={{ transform: 'scale(0.7)', transformOrigin: 'top center' }}\n            >\n              <MarksheetPreview\n                student={previewStudent}\n                template={selectedTemplate}\n                examResults={generateMockResults(previewStudent.id)}\n                watermark={\n                  printSettings.includeWatermark ? watermarkText : null\n                }\n              />\n            </div>\n          </div>\n        )}\n      </Dialog>\n    </div>\n  )\n};\n\nexport default PrintMarksheet"
        }
    ]
}