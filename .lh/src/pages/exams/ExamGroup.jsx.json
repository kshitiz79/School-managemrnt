{
    "sourceFile": "src/pages/exams/ExamGroup.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755985893077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755991756193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import React, { useState } from 'react';\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n-import { \n+import React, { useState } from 'react'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n   BookOpen,\n   Plus,\n   Edit,\n   Trash2,\n@@ -13,35 +13,51 @@\n   FileText,\n   Settings,\n   CheckCircle,\n   XCircle,\n-  AlertTriangle\n-} from 'lucide-react';\n-import Input from '../../components/ui/Input';\n-import Dialog from '../../components/ui/Dialog';\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n-import { examApi } from '../../lib/api/exams';\n+  AlertTriangle,\n+} from 'lucide-react'\n+import Input from '../../components/ui/Input'\n+import Dialog from '../../components/ui/Dialog'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import { examApi } from '../../lib/api/exams'\n \n-const ExamGroupCard = ({ examGroup, onEdit, onDelete, onDuplicate, onViewDetails }) => {\n-  const getStatusColor = (status) => {\n+const ExamGroupCard = ({\n+  examGroup,\n+  onEdit,\n+  onDelete,\n+  onDuplicate,\n+  onViewDetails,\n+}) => {\n+  const getStatusColor = status => {\n     switch (status) {\n-      case 'active': return 'text-green-600 bg-green-100';\n-      case 'scheduled': return 'text-blue-600 bg-blue-100';\n-      case 'completed': return 'text-gray-600 bg-gray-100';\n-      case 'draft': return 'text-yellow-600 bg-yellow-100';\n-      default: return 'text-gray-600 bg-gray-100';\n+      case 'active':\n+        return 'text-green-600 bg-green-100'\n+      case 'scheduled':\n+        return 'text-blue-600 bg-blue-100'\n+      case 'completed':\n+        return 'text-gray-600 bg-gray-100'\n+      case 'draft':\n+        return 'text-yellow-600 bg-yellow-100'\n+      default:\n+        return 'text-gray-600 bg-gray-100'\n     }\n-  };\n+  }\n \n-  const getTypeIcon = (type) => {\n+  const getTypeIcon = type => {\n     switch (type) {\n-      case 'unit_test': return '📝';\n-      case 'mid_term': return '📊';\n-      case 'final_exam': return '🎓';\n-      case 'practical': return '🔬';\n-      default: return '📚';\n+      case 'unit_test':\n+        return '📝'\n+      case 'mid_term':\n+        return '📊'\n+      case 'final_exam':\n+        return '🎓'\n+      case 'practical':\n+        return '🔬'\n+      default:\n+        return '📚'\n     }\n-  };\n+  }\n \n   return (\n     <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n       <div className=\"flex justify-between items-start mb-4\">\n@@ -52,31 +68,40 @@\n             <p className=\"text-sm text-gray-600\">{examGroup.description}</p>\n           </div>\n         </div>\n         <div className=\"flex items-center gap-2\">\n-          <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(examGroup.status)}`}>\n-            {examGroup.status.charAt(0).toUpperCase() + examGroup.status.slice(1)}\n+          <span\n+            className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(examGroup.status)}`}\n+          >\n+            {examGroup.status.charAt(0).toUpperCase() +\n+              examGroup.status.slice(1)}\n           </span>\n         </div>\n       </div>\n \n       <div className=\"space-y-3 mb-4\">\n         <div className=\"grid grid-cols-2 gap-4 text-sm\">\n           <div>\n             <span className=\"text-gray-500\">Type:</span>\n-            <div className=\"font-medium capitalize\">{examGroup.type.replace('_', ' ')}</div>\n+            <div className=\"font-medium capitalize\">\n+              {examGroup.type.replace('_', ' ')}\n+            </div>\n           </div>\n           <div>\n             <span className=\"text-gray-500\">Term:</span>\n             <div className=\"font-medium\">{examGroup.termName}</div>\n           </div>\n           <div>\n             <span className=\"text-gray-500\">Classes:</span>\n-            <div className=\"font-medium\">{examGroup.classes?.length || 0} classes</div>\n+            <div className=\"font-medium\">\n+              {examGroup.classes?.length || 0} classes\n+            </div>\n           </div>\n           <div>\n             <span className=\"text-gray-500\">Subjects:</span>\n-            <div className=\"font-medium\">{examGroup.subjects?.length || 0} subjects</div>\n+            <div className=\"font-medium\">\n+              {examGroup.subjects?.length || 0} subjects\n+            </div>\n           </div>\n         </div>\n \n         <div className=\"border-t pt-3\">\n@@ -105,9 +130,9 @@\n           <div className=\"border-t pt-3\">\n             <div className=\"text-sm text-gray-600 mb-2\">Schedule:</div>\n             <div className=\"text-xs\">\n               <span className=\"font-medium\">\n-                {new Date(examGroup.examDates.startDate).toLocaleDateString()} - \n+                {new Date(examGroup.examDates.startDate).toLocaleDateString()} -\n                 {new Date(examGroup.examDates.endDate).toLocaleDateString()}\n               </span>\n             </div>\n           </div>\n@@ -149,10 +174,10 @@\n           </button>\n         </div>\n       </div>\n     </div>\n-  );\n-};\n+  )\n+}\n \n const ExamGroupDialog = ({ examGroup, open, onClose, onSave }) => {\n   const [formData, setFormData] = useState({\n     name: examGroup?.name || '',\n@@ -168,75 +193,75 @@\n     subjects: examGroup?.subjects || [],\n     gradingCriteria: examGroup?.gradingCriteria || {\n       enableGrading: true,\n       gradingType: 'percentage',\n-      customGrades: []\n+      customGrades: [],\n     },\n     examSettings: examGroup?.examSettings || {\n       allowAbsent: true,\n       allowPartialMarks: true,\n       roundOffMarks: false,\n       showRank: true,\n-      publishResults: false\n-    }\n-  });\n+      publishResults: false,\n+    },\n+  })\n \n   const { data: termsData } = useQuery({\n     queryKey: ['terms', 'active'],\n-    queryFn: () => examApi.getActiveTerms()\n-  });\n+    queryFn: () => examApi.getActiveTerms(),\n+  })\n \n   const { data: classesData } = useQuery({\n     queryKey: ['classes', 'all'],\n-    queryFn: () => examApi.getClasses()\n-  });\n+    queryFn: () => examApi.getClasses(),\n+  })\n \n   const { data: subjectsData } = useQuery({\n     queryKey: ['subjects', 'all'],\n-    queryFn: () => examApi.getSubjects()\n-  });\n+    queryFn: () => examApi.getSubjects(),\n+  })\n \n   const handleSave = () => {\n-    onSave(examGroup?.id, formData);\n-    onClose();\n-  };\n+    onSave(examGroup?.id, formData)\n+    onClose()\n+  }\n \n-  const toggleClass = (classId) => {\n+  const toggleClass = classId => {\n     setFormData(prev => ({\n       ...prev,\n       classes: prev.classes.includes(classId)\n         ? prev.classes.filter(id => id !== classId)\n-        : [...prev.classes, classId]\n-    }));\n-  };\n+        : [...prev.classes, classId],\n+    }))\n+  }\n \n-  const toggleSubject = (subjectId) => {\n+  const toggleSubject = subjectId => {\n     setFormData(prev => ({\n       ...prev,\n       subjects: prev.subjects.includes(subjectId)\n         ? prev.subjects.filter(id => id !== subjectId)\n-        : [...prev.subjects, subjectId]\n-    }));\n-  };\n+        : [...prev.subjects, subjectId],\n+    }))\n+  }\n \n   const updateExamSettings = (key, value) => {\n     setFormData(prev => ({\n       ...prev,\n-      examSettings: { ...prev.examSettings, [key]: value }\n-    }));\n-  };\n+      examSettings: { ...prev.examSettings, [key]: value },\n+    }))\n+  }\n \n   const updateGradingCriteria = (key, value) => {\n     setFormData(prev => ({\n       ...prev,\n-      gradingCriteria: { ...prev.gradingCriteria, [key]: value }\n-    }));\n-  };\n+      gradingCriteria: { ...prev.gradingCriteria, [key]: value },\n+    }))\n+  }\n \n   return (\n-    <Dialog \n-      open={open} \n-      onClose={onClose} \n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n       title={examGroup ? 'Edit Exam Group' : 'Create Exam Group'}\n       size=\"xl\"\n     >\n       <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n@@ -244,16 +269,22 @@\n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n           <Input\n             label=\"Exam Group Name *\"\n             value={formData.name}\n-            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, name: e.target.value }))\n+            }\n             placeholder=\"e.g., Unit Test 1\"\n           />\n           <div>\n-            <label className=\"block text-sm font-medium mb-1\">Exam Type *</label>\n+            <label className=\"block text-sm font-medium mb-1\">\n+              Exam Type *\n+            </label>\n             <select\n               value={formData.type}\n-              onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, type: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"unit_test\">Unit Test</option>\n               <option value=\"mid_term\">Mid Term</option>\n@@ -266,9 +297,11 @@\n           <div>\n             <label className=\"block text-sm font-medium mb-1\">Term *</label>\n             <select\n               value={formData.termId}\n-              onChange={(e) => setFormData(prev => ({ ...prev, termId: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, termId: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"\">Select Term</option>\n               {termsData?.data?.map(term => (\n@@ -281,9 +314,11 @@\n           <div>\n             <label className=\"block text-sm font-medium mb-1\">Status</label>\n             <select\n               value={formData.status}\n-              onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, status: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"draft\">Draft</option>\n               <option value=\"scheduled\">Scheduled</option>\n@@ -296,9 +331,11 @@\n         <div>\n           <label className=\"block text-sm font-medium mb-1\">Description</label>\n           <textarea\n             value={formData.description}\n-            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, description: e.target.value }))\n+            }\n             rows={3}\n             className=\"w-full border rounded-lg px-3 py-2\"\n             placeholder=\"Exam group description...\"\n           />\n@@ -311,69 +348,93 @@\n             <Input\n               label=\"Max Marks *\"\n               type=\"number\"\n               value={formData.maxMarks}\n-              onChange={(e) => setFormData(prev => ({ ...prev, maxMarks: parseInt(e.target.value) || 0 }))}\n+              onChange={e =>\n+                setFormData(prev => ({\n+                  ...prev,\n+                  maxMarks: parseInt(e.target.value) || 0,\n+                }))\n+              }\n               min=\"1\"\n             />\n             <Input\n               label=\"Pass Marks *\"\n               type=\"number\"\n               value={formData.passMarks}\n-              onChange={(e) => setFormData(prev => ({ ...prev, passMarks: parseInt(e.target.value) || 0 }))}\n+              onChange={e =>\n+                setFormData(prev => ({\n+                  ...prev,\n+                  passMarks: parseInt(e.target.value) || 0,\n+                }))\n+              }\n               min=\"1\"\n             />\n             <Input\n               label=\"Duration (minutes)\"\n               type=\"number\"\n               value={formData.duration}\n-              onChange={(e) => setFormData(prev => ({ ...prev, duration: parseInt(e.target.value) || 0 }))}\n+              onChange={e =>\n+                setFormData(prev => ({\n+                  ...prev,\n+                  duration: parseInt(e.target.value) || 0,\n+                }))\n+              }\n               min=\"1\"\n             />\n             <Input\n               label=\"Weightage (%)\"\n               type=\"number\"\n               value={formData.weightage}\n-              onChange={(e) => setFormData(prev => ({ ...prev, weightage: parseInt(e.target.value) || 0 }))}\n+              onChange={e =>\n+                setFormData(prev => ({\n+                  ...prev,\n+                  weightage: parseInt(e.target.value) || 0,\n+                }))\n+              }\n               min=\"0\"\n               max=\"100\"\n             />\n           </div>\n         </div>\n \n         {/* Classes Selection */}\n         <div>\n-          <label className=\"block text-sm font-medium mb-2\">Applicable Classes *</label>\n+          <label className=\"block text-sm font-medium mb-2\">\n+            Applicable Classes *\n+          </label>\n           <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n-            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n-              <label key={cls.id} className=\"flex items-center gap-2\">\n-                <input\n-                  type=\"checkbox\"\n-                  checked={formData.classes.includes(cls.id)}\n-                  onChange={() => toggleClass(cls.id)}\n-                  className=\"rounded\"\n-                />\n-                <span className=\"text-sm\">{cls.name}</span>\n-              </label>\n-            ))}\n+            {Array.isArray(classesData?.data) &&\n+              classesData.data.map(cls => (\n+                <label key={cls.id} className=\"flex items-center gap-2\">\n+                  <input\n+                    type=\"checkbox\"\n+                    checked={formData.classes.includes(cls.id)}\n+                    onChange={() => toggleClass(cls.id)}\n+                    className=\"rounded\"\n+                  />\n+                  <span className=\"text-sm\">{cls.name}</span>\n+                </label>\n+              ))}\n           </div>\n         </div>\n \n         {/* Subjects Selection */}\n         <div>\n           <label className=\"block text-sm font-medium mb-2\">Subjects *</label>\n           <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n-            {Array.isArray(subjectsData?.data) && subjectsData.data.map(subject => (\n-              <label key={subject.id} className=\"flex items-center gap-2\">\n-                <input\n-                  type=\"checkbox\"\n-                  checked={formData.subjects.includes(subject.id)}\n-                  onChange={() => toggleSubject(subject.id)}\n-                  className=\"rounded\"\n-                />\n-                <span className=\"text-sm\">{subject.name}</span>\n-              </label>\n-            ))}\n+            {Array.isArray(subjectsData?.data) &&\n+              subjectsData.data.map(subject => (\n+                <label key={subject.id} className=\"flex items-center gap-2\">\n+                  <input\n+                    type=\"checkbox\"\n+                    checked={formData.subjects.includes(subject.id)}\n+                    onChange={() => toggleSubject(subject.id)}\n+                    className=\"rounded\"\n+                  />\n+                  <span className=\"text-sm\">{subject.name}</span>\n+                </label>\n+              ))}\n           </div>\n         </div>\n \n         {/* Exam Settings */}\n@@ -384,18 +445,22 @@\n               <label className=\"flex items-center gap-2\">\n                 <input\n                   type=\"checkbox\"\n                   checked={formData.examSettings.allowAbsent}\n-                  onChange={(e) => updateExamSettings('allowAbsent', e.target.checked)}\n+                  onChange={e =>\n+                    updateExamSettings('allowAbsent', e.target.checked)\n+                  }\n                   className=\"rounded\"\n                 />\n                 <span className=\"text-sm\">Allow absent marking</span>\n               </label>\n               <label className=\"flex items-center gap-2\">\n                 <input\n                   type=\"checkbox\"\n                   checked={formData.examSettings.allowPartialMarks}\n-                  onChange={(e) => updateExamSettings('allowPartialMarks', e.target.checked)}\n+                  onChange={e =>\n+                    updateExamSettings('allowPartialMarks', e.target.checked)\n+                  }\n                   className=\"rounded\"\n                 />\n                 <span className=\"text-sm\">Allow partial marks</span>\n               </label>\n@@ -404,18 +469,22 @@\n               <label className=\"flex items-center gap-2\">\n                 <input\n                   type=\"checkbox\"\n                   checked={formData.examSettings.roundOffMarks}\n-                  onChange={(e) => updateExamSettings('roundOffMarks', e.target.checked)}\n+                  onChange={e =>\n+                    updateExamSettings('roundOffMarks', e.target.checked)\n+                  }\n                   className=\"rounded\"\n                 />\n                 <span className=\"text-sm\">Round off marks</span>\n               </label>\n               <label className=\"flex items-center gap-2\">\n                 <input\n                   type=\"checkbox\"\n                   checked={formData.examSettings.showRank}\n-                  onChange={(e) => updateExamSettings('showRank', e.target.checked)}\n+                  onChange={e =>\n+                    updateExamSettings('showRank', e.target.checked)\n+                  }\n                   className=\"rounded\"\n                 />\n                 <span className=\"text-sm\">Show student rank</span>\n               </label>\n@@ -430,20 +499,26 @@\n             <label className=\"flex items-center gap-2\">\n               <input\n                 type=\"checkbox\"\n                 checked={formData.gradingCriteria.enableGrading}\n-                onChange={(e) => updateGradingCriteria('enableGrading', e.target.checked)}\n+                onChange={e =>\n+                  updateGradingCriteria('enableGrading', e.target.checked)\n+                }\n                 className=\"rounded\"\n               />\n               <span className=\"text-sm font-medium\">Enable grading system</span>\n             </label>\n-            \n+\n             {formData.gradingCriteria.enableGrading && (\n               <div>\n-                <label className=\"block text-sm font-medium mb-1\">Grading Type</label>\n+                <label className=\"block text-sm font-medium mb-1\">\n+                  Grading Type\n+                </label>\n                 <select\n                   value={formData.gradingCriteria.gradingType}\n-                  onChange={(e) => updateGradingCriteria('gradingType', e.target.value)}\n+                  onChange={e =>\n+                    updateGradingCriteria('gradingType', e.target.value)\n+                  }\n                   className=\"w-full border rounded-lg px-3 py-2 max-w-xs\"\n                 >\n                   <option value=\"percentage\">Percentage Based</option>\n                   <option value=\"points\">Points Based</option>\n@@ -463,71 +538,103 @@\n             Cancel\n           </button>\n           <button\n             onClick={handleSave}\n-            disabled={!formData.name.trim() || formData.classes.length === 0 || formData.subjects.length === 0}\n+            disabled={\n+              !formData.name.trim() ||\n+              formData.classes.length === 0 ||\n+              formData.subjects.length === 0\n+            }\n             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n           >\n             <CheckCircle className=\"w-4 h-4\" />\n             {examGroup ? 'Update' : 'Create'} Exam Group\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n-};const ExamG\n-roupDetailsDialog = ({ examGroup, open, onClose }) => {\n-  if (!examGroup) return null;\n+  )\n+}\n \n+const ExamGroupDetailsDialog = ({ examGroup, open, onClose }) => {\n+  if (!examGroup) return null\n+\n   return (\n-    <Dialog open={open} onClose={onClose} title={`${examGroup.name} - Details`} size=\"xl\">\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      title={`${examGroup.name} - Details`}\n+      size=\"xl\"\n+    >\n       <div className=\"space-y-6\">\n         {/* Basic Info */}\n         <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n           <div>\n-            <label className=\"block text-sm font-medium text-gray-700\">Exam Type</label>\n-            <p className=\"text-sm capitalize\">{examGroup.type.replace('_', ' ')}</p>\n+            <label className=\"block text-sm font-medium text-gray-700\">\n+              Exam Type\n+            </label>\n+            <p className=\"text-sm capitalize\">\n+              {examGroup.type.replace('_', ' ')}\n+            </p>\n           </div>\n           <div>\n-            <label className=\"block text-sm font-medium text-gray-700\">Term</label>\n+            <label className=\"block text-sm font-medium text-gray-700\">\n+              Term\n+            </label>\n             <p className=\"text-sm\">{examGroup.termName}</p>\n           </div>\n           <div>\n-            <label className=\"block text-sm font-medium text-gray-700\">Status</label>\n+            <label className=\"block text-sm font-medium text-gray-700\">\n+              Status\n+            </label>\n             <p className=\"text-sm capitalize\">{examGroup.status}</p>\n           </div>\n           <div>\n-            <label className=\"block text-sm font-medium text-gray-700\">Created</label>\n-            <p className=\"text-sm\">{new Date(examGroup.createdAt).toLocaleDateString()}</p>\n+            <label className=\"block text-sm font-medium text-gray-700\">\n+              Created\n+            </label>\n+            <p className=\"text-sm\">\n+              {new Date(examGroup.createdAt).toLocaleDateString()}\n+            </p>\n           </div>\n         </div>\n \n         {/* Description */}\n         {examGroup.description && (\n           <div>\n             <h3 className=\"font-medium mb-2\">Description</h3>\n-            <p className=\"text-sm bg-gray-50 p-3 rounded\">{examGroup.description}</p>\n+            <p className=\"text-sm bg-gray-50 p-3 rounded\">\n+              {examGroup.description}\n+            </p>\n           </div>\n         )}\n \n         {/* Exam Configuration */}\n         <div>\n           <h3 className=\"font-medium mb-3\">Exam Configuration</h3>\n           <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n             <div className=\"text-center p-3 bg-blue-50 rounded\">\n-              <div className=\"text-2xl font-bold text-blue-600\">{examGroup.maxMarks}</div>\n+              <div className=\"text-2xl font-bold text-blue-600\">\n+                {examGroup.maxMarks}\n+              </div>\n               <div className=\"text-sm text-gray-600\">Max Marks</div>\n             </div>\n             <div className=\"text-center p-3 bg-green-50 rounded\">\n-              <div className=\"text-2xl font-bold text-green-600\">{examGroup.passMarks}</div>\n+              <div className=\"text-2xl font-bold text-green-600\">\n+                {examGroup.passMarks}\n+              </div>\n               <div className=\"text-sm text-gray-600\">Pass Marks</div>\n             </div>\n             <div className=\"text-center p-3 bg-yellow-50 rounded\">\n-              <div className=\"text-2xl font-bold text-yellow-600\">{examGroup.duration}</div>\n+              <div className=\"text-2xl font-bold text-yellow-600\">\n+                {examGroup.duration}\n+              </div>\n               <div className=\"text-sm text-gray-600\">Duration (min)</div>\n             </div>\n             <div className=\"text-center p-3 bg-purple-50 rounded\">\n-              <div className=\"text-2xl font-bold text-purple-600\">{examGroup.weightage}%</div>\n+              <div className=\"text-2xl font-bold text-purple-600\">\n+                {examGroup.weightage}%\n+              </div>\n               <div className=\"text-sm text-gray-600\">Weightage</div>\n             </div>\n           </div>\n         </div>\n@@ -537,9 +644,12 @@\n           <div>\n             <h3 className=\"font-medium mb-2\">Applicable Classes</h3>\n             <div className=\"flex flex-wrap gap-2\">\n               {examGroup.classNames?.map((className, index) => (\n-                <span key={index} className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm\">\n+                <span\n+                  key={index}\n+                  className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm\"\n+                >\n                   {className}\n                 </span>\n               ))}\n             </div>\n@@ -547,9 +657,12 @@\n           <div>\n             <h3 className=\"font-medium mb-2\">Subjects</h3>\n             <div className=\"flex flex-wrap gap-2\">\n               {examGroup.subjectNames?.map((subjectName, index) => (\n-                <span key={index} className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-sm\">\n+                <span\n+                  key={index}\n+                  className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-sm\"\n+                >\n                   {subjectName}\n                 </span>\n               ))}\n             </div>\n@@ -561,35 +674,39 @@\n           <h3 className=\"font-medium mb-3\">Exam Settings</h3>\n           <div className=\"grid grid-cols-2 gap-4\">\n             <div className=\"space-y-2\">\n               <div className=\"flex items-center gap-2\">\n-                {examGroup.examSettings?.allowAbsent ? \n-                  <CheckCircle className=\"w-4 h-4 text-green-600\" /> : \n+                {examGroup.examSettings?.allowAbsent ? (\n+                  <CheckCircle className=\"w-4 h-4 text-green-600\" />\n+                ) : (\n                   <XCircle className=\"w-4 h-4 text-red-600\" />\n-                }\n+                )}\n                 <span className=\"text-sm\">Allow absent marking</span>\n               </div>\n               <div className=\"flex items-center gap-2\">\n-                {examGroup.examSettings?.allowPartialMarks ? \n-                  <CheckCircle className=\"w-4 h-4 text-green-600\" /> : \n+                {examGroup.examSettings?.allowPartialMarks ? (\n+                  <CheckCircle className=\"w-4 h-4 text-green-600\" />\n+                ) : (\n                   <XCircle className=\"w-4 h-4 text-red-600\" />\n-                }\n+                )}\n                 <span className=\"text-sm\">Allow partial marks</span>\n               </div>\n             </div>\n             <div className=\"space-y-2\">\n               <div className=\"flex items-center gap-2\">\n-                {examGroup.examSettings?.roundOffMarks ? \n-                  <CheckCircle className=\"w-4 h-4 text-green-600\" /> : \n+                {examGroup.examSettings?.roundOffMarks ? (\n+                  <CheckCircle className=\"w-4 h-4 text-green-600\" />\n+                ) : (\n                   <XCircle className=\"w-4 h-4 text-red-600\" />\n-                }\n+                )}\n                 <span className=\"text-sm\">Round off marks</span>\n               </div>\n               <div className=\"flex items-center gap-2\">\n-                {examGroup.examSettings?.showRank ? \n-                  <CheckCircle className=\"w-4 h-4 text-green-600\" /> : \n+                {examGroup.examSettings?.showRank ? (\n+                  <CheckCircle className=\"w-4 h-4 text-green-600\" />\n+                ) : (\n                   <XCircle className=\"w-4 h-4 text-red-600\" />\n-                }\n+                )}\n                 <span className=\"text-sm\">Show student rank</span>\n               </div>\n             </div>\n           </div>\n@@ -605,96 +722,99 @@\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n-};\n+  )\n+}\n \n const ExamGroup = () => {\n-  const [selectedExamGroup, setSelectedExamGroup] = useState(null);\n-  const [showExamGroupDialog, setShowExamGroupDialog] = useState(false);\n-  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n-  const [filterStatus, setFilterStatus] = useState('all');\n-  const [filterType, setFilterType] = useState('all');\n+  const [selectedExamGroup, setSelectedExamGroup] = useState(null)\n+  const [showExamGroupDialog, setShowExamGroupDialog] = useState(false)\n+  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n+  const [filterStatus, setFilterStatus] = useState('all')\n+  const [filterType, setFilterType] = useState('all')\n \n-  const queryClient = useQueryClient();\n+  const queryClient = useQueryClient()\n \n   const { data: examGroupsData, isLoading } = useQuery({\n     queryKey: ['exam-groups', 'all'],\n-    queryFn: () => examApi.getExamGroups()\n-  });\n+    queryFn: () => examApi.getExamGroups(),\n+  })\n \n   const saveExamGroupMutation = useMutation({\n-    mutationFn: ({ id, data }) => id ? examApi.updateExamGroup(id, data) : examApi.createExamGroup(data),\n+    mutationFn: ({ id, data }) =>\n+      id ? examApi.updateExamGroup(id, data) : examApi.createExamGroup(data),\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['exam-groups']);\n-      setShowExamGroupDialog(false);\n-      setSelectedExamGroup(null);\n-    }\n-  });\n+      queryClient.invalidateQueries(['exam-groups'])\n+      setShowExamGroupDialog(false)\n+      setSelectedExamGroup(null)\n+    },\n+  })\n \n   const deleteExamGroupMutation = useMutation({\n     mutationFn: examApi.deleteExamGroup,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['exam-groups']);\n-    }\n-  });\n+      queryClient.invalidateQueries(['exam-groups'])\n+    },\n+  })\n \n   const duplicateExamGroupMutation = useMutation({\n     mutationFn: examApi.duplicateExamGroup,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['exam-groups']);\n-    }\n-  });\n+      queryClient.invalidateQueries(['exam-groups'])\n+    },\n+  })\n \n-  const handleEditExamGroup = (examGroup) => {\n-    setSelectedExamGroup(examGroup);\n-    setShowExamGroupDialog(true);\n-  };\n+  const handleEditExamGroup = examGroup => {\n+    setSelectedExamGroup(examGroup)\n+    setShowExamGroupDialog(true)\n+  }\n \n-  const handleDeleteExamGroup = (examGroup) => {\n+  const handleDeleteExamGroup = examGroup => {\n     if (confirm(`Are you sure you want to delete \"${examGroup.name}\"?`)) {\n-      deleteExamGroupMutation.mutate(examGroup.id);\n+      deleteExamGroupMutation.mutate(examGroup.id)\n     }\n-  };\n+  }\n \n-  const handleDuplicateExamGroup = (examGroup) => {\n-    duplicateExamGroupMutation.mutate(examGroup.id);\n-  };\n+  const handleDuplicateExamGroup = examGroup => {\n+    duplicateExamGroupMutation.mutate(examGroup.id)\n+  }\n \n-  const handleViewDetails = (examGroup) => {\n-    setSelectedExamGroup(examGroup);\n-    setShowDetailsDialog(true);\n-  };\n+  const handleViewDetails = examGroup => {\n+    setSelectedExamGroup(examGroup)\n+    setShowDetailsDialog(true)\n+  }\n \n   const handleSaveExamGroup = (id, data) => {\n-    saveExamGroupMutation.mutate({ id, data });\n-  };\n+    saveExamGroupMutation.mutate({ id, data })\n+  }\n \n   const handleAddExamGroup = () => {\n-    setSelectedExamGroup(null);\n-    setShowExamGroupDialog(true);\n-  };\n+    setSelectedExamGroup(null)\n+    setShowExamGroupDialog(true)\n+  }\n \n-  const filteredExamGroups = examGroupsData?.data?.filter(examGroup => {\n-    const matchesStatus = filterStatus === 'all' || examGroup.status === filterStatus;\n-    const matchesType = filterType === 'all' || examGroup.type === filterType;\n-    return matchesStatus && matchesType;\n-  }) || [];\n+  const filteredExamGroups =\n+    examGroupsData?.data?.filter(examGroup => {\n+      const matchesStatus =\n+        filterStatus === 'all' || examGroup.status === filterStatus\n+      const matchesType = filterType === 'all' || examGroup.type === filterType\n+      return matchesStatus && matchesType\n+    }) || []\n \n   const getStatistics = () => {\n-    const examGroups = examGroupsData?.data || [];\n+    const examGroups = examGroupsData?.data || []\n     return {\n       total: examGroups.length,\n       active: examGroups.filter(eg => eg.status === 'active').length,\n       scheduled: examGroups.filter(eg => eg.status === 'scheduled').length,\n-      completed: examGroups.filter(eg => eg.status === 'completed').length\n-    };\n-  };\n+      completed: examGroups.filter(eg => eg.status === 'completed').length,\n+    }\n+  }\n \n-  const stats = getStatistics();\n+  const stats = getStatistics()\n \n-  if (isLoading) return <LoadingSkeleton />;\n+  if (isLoading) return <LoadingSkeleton />\n \n   return (\n     <div className=\"space-y-6\">\n       <div className=\"flex justify-between items-center\">\n@@ -751,12 +871,14 @@\n       {/* Filters */}\n       <div className=\"bg-white rounded-lg shadow p-4\">\n         <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n           <div>\n-            <label className=\"block text-sm font-medium mb-1\">Filter by Status</label>\n+            <label className=\"block text-sm font-medium mb-1\">\n+              Filter by Status\n+            </label>\n             <select\n               value={filterStatus}\n-              onChange={(e) => setFilterStatus(e.target.value)}\n+              onChange={e => setFilterStatus(e.target.value)}\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"all\">All Status</option>\n               <option value=\"draft\">Draft</option>\n@@ -765,12 +887,14 @@\n               <option value=\"completed\">Completed</option>\n             </select>\n           </div>\n           <div>\n-            <label className=\"block text-sm font-medium mb-1\">Filter by Type</label>\n+            <label className=\"block text-sm font-medium mb-1\">\n+              Filter by Type\n+            </label>\n             <select\n               value={filterType}\n-              onChange={(e) => setFilterType(e.target.value)}\n+              onChange={e => setFilterType(e.target.value)}\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"all\">All Types</option>\n               <option value=\"unit_test\">Unit Test</option>\n@@ -780,9 +904,10 @@\n             </select>\n           </div>\n           <div className=\"flex items-end\">\n             <div className=\"text-sm text-gray-500\">\n-              Showing {filteredExamGroups.length} of {examGroupsData?.data?.length || 0} exam groups\n+              Showing {filteredExamGroups.length} of{' '}\n+              {examGroupsData?.data?.length || 0} exam groups\n             </div>\n           </div>\n         </div>\n       </div>\n@@ -791,14 +916,15 @@\n       <div className=\"space-y-4\">\n         {filteredExamGroups.length === 0 ? (\n           <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n             <BookOpen className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n-            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Exam Groups Found</h3>\n+            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n+              No Exam Groups Found\n+            </h3>\n             <p className=\"text-gray-500 mb-4\">\n-              {examGroupsData?.data?.length === 0 \n+              {examGroupsData?.data?.length === 0\n                 ? 'Create your first exam group to get started.'\n-                : 'No exam groups match your current filters.'\n-              }\n+                : 'No exam groups match your current filters.'}\n             </p>\n             {examGroupsData?.data?.length === 0 && (\n               <button\n                 onClick={handleAddExamGroup}\n@@ -809,18 +935,19 @@\n             )}\n           </div>\n         ) : (\n           <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n-            {Array.isArray(filteredExamGroups) && filteredExamGroups.map(examGroup => (\n-              <ExamGroupCard\n-                key={examGroup.id}\n-                examGroup={examGroup}\n-                onEdit={handleEditExamGroup}\n-                onDelete={handleDeleteExamGroup}\n-                onDuplicate={handleDuplicateExamGroup}\n-                onViewDetails={handleViewDetails}\n-              />\n-            ))}\n+            {Array.isArray(filteredExamGroups) &&\n+              filteredExamGroups.map(examGroup => (\n+                <ExamGroupCard\n+                  key={examGroup.id}\n+                  examGroup={examGroup}\n+                  onEdit={handleEditExamGroup}\n+                  onDelete={handleDeleteExamGroup}\n+                  onDuplicate={handleDuplicateExamGroup}\n+                  onViewDetails={handleViewDetails}\n+                />\n+              ))}\n           </div>\n         )}\n       </div>\n \n@@ -828,10 +955,10 @@\n       <ExamGroupDialog\n         examGroup={selectedExamGroup}\n         open={showExamGroupDialog}\n         onClose={() => {\n-          setShowExamGroupDialog(false);\n-          setSelectedExamGroup(null);\n+          setShowExamGroupDialog(false)\n+          setSelectedExamGroup(null)\n         }}\n         onSave={handleSaveExamGroup}\n       />\n \n@@ -841,8 +968,8 @@\n         open={showDetailsDialog}\n         onClose={() => setShowDetailsDialog(false)}\n       />\n     </div>\n-  );\n-};\n+  )\n+}\n\\ No newline at end of file\n \n-export default ExamGroup;\n+export default ExamGroup\n"
                },
                {
                    "date": 1755994925617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   XCircle,\n   AlertTriangle,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { examApi } from '../../lib/api/exams'\n \n const ExamGroupCard = ({\n@@ -971,5 +971,5 @@\n     </div>\n   )\n }\n \n-export default ExamGroup\n\\ No newline at end of file\n+export default ExamGroup\n"
                }
            ],
            "date": 1755985893077,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  BookOpen,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Copy,\n  Calendar,\n  Clock,\n  Users,\n  FileText,\n  Settings,\n  CheckCircle,\n  XCircle,\n  AlertTriangle\n} from 'lucide-react';\nimport Input from '../../components/ui/Input';\nimport Dialog from '../../components/ui/Dialog';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport { examApi } from '../../lib/api/exams';\n\nconst ExamGroupCard = ({ examGroup, onEdit, onDelete, onDuplicate, onViewDetails }) => {\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'scheduled': return 'text-blue-600 bg-blue-100';\n      case 'completed': return 'text-gray-600 bg-gray-100';\n      case 'draft': return 'text-yellow-600 bg-yellow-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getTypeIcon = (type) => {\n    switch (type) {\n      case 'unit_test': return '📝';\n      case 'mid_term': return '📊';\n      case 'final_exam': return '🎓';\n      case 'practical': return '🔬';\n      default: return '📚';\n    }\n  };\n\n  return (\n    <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"text-2xl\">{getTypeIcon(examGroup.type)}</div>\n          <div>\n            <h3 className=\"text-lg font-semibold\">{examGroup.name}</h3>\n            <p className=\"text-sm text-gray-600\">{examGroup.description}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(examGroup.status)}`}>\n            {examGroup.status.charAt(0).toUpperCase() + examGroup.status.slice(1)}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"space-y-3 mb-4\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-500\">Type:</span>\n            <div className=\"font-medium capitalize\">{examGroup.type.replace('_', ' ')}</div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Term:</span>\n            <div className=\"font-medium\">{examGroup.termName}</div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Classes:</span>\n            <div className=\"font-medium\">{examGroup.classes?.length || 0} classes</div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Subjects:</span>\n            <div className=\"font-medium\">{examGroup.subjects?.length || 0} subjects</div>\n          </div>\n        </div>\n\n        <div className=\"border-t pt-3\">\n          <div className=\"text-sm text-gray-600 mb-2\">Exam Details:</div>\n          <div className=\"grid grid-cols-2 gap-2 text-xs\">\n            <div className=\"flex justify-between\">\n              <span>Max Marks:</span>\n              <span className=\"font-medium\">{examGroup.maxMarks}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Pass Marks:</span>\n              <span className=\"font-medium\">{examGroup.passMarks}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Duration:</span>\n              <span className=\"font-medium\">{examGroup.duration} min</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Weightage:</span>\n              <span className=\"font-medium\">{examGroup.weightage}%</span>\n            </div>\n          </div>\n        </div>\n\n        {examGroup.examDates && (\n          <div className=\"border-t pt-3\">\n            <div className=\"text-sm text-gray-600 mb-2\">Schedule:</div>\n            <div className=\"text-xs\">\n              <span className=\"font-medium\">\n                {new Date(examGroup.examDates.startDate).toLocaleDateString()} - \n                {new Date(examGroup.examDates.endDate).toLocaleDateString()}\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"text-xs text-gray-500\">\n          Created: {new Date(examGroup.createdAt).toLocaleDateString()}\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onViewDetails(examGroup)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"View Details\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDuplicate(examGroup)}\n            className=\"p-1 text-gray-400 hover:text-green-600\"\n            title=\"Duplicate\"\n          >\n            <Copy className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onEdit(examGroup)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"Edit\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDelete(examGroup)}\n            className=\"p-1 text-gray-400 hover:text-red-600\"\n            title=\"Delete\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ExamGroupDialog = ({ examGroup, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    name: examGroup?.name || '',\n    description: examGroup?.description || '',\n    type: examGroup?.type || 'unit_test',\n    termId: examGroup?.termId || '',\n    maxMarks: examGroup?.maxMarks || 100,\n    passMarks: examGroup?.passMarks || 35,\n    duration: examGroup?.duration || 180,\n    weightage: examGroup?.weightage || 10,\n    status: examGroup?.status || 'draft',\n    classes: examGroup?.classes || [],\n    subjects: examGroup?.subjects || [],\n    gradingCriteria: examGroup?.gradingCriteria || {\n      enableGrading: true,\n      gradingType: 'percentage',\n      customGrades: []\n    },\n    examSettings: examGroup?.examSettings || {\n      allowAbsent: true,\n      allowPartialMarks: true,\n      roundOffMarks: false,\n      showRank: true,\n      publishResults: false\n    }\n  });\n\n  const { data: termsData } = useQuery({\n    queryKey: ['terms', 'active'],\n    queryFn: () => examApi.getActiveTerms()\n  });\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => examApi.getClasses()\n  });\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'all'],\n    queryFn: () => examApi.getSubjects()\n  });\n\n  const handleSave = () => {\n    onSave(examGroup?.id, formData);\n    onClose();\n  };\n\n  const toggleClass = (classId) => {\n    setFormData(prev => ({\n      ...prev,\n      classes: prev.classes.includes(classId)\n        ? prev.classes.filter(id => id !== classId)\n        : [...prev.classes, classId]\n    }));\n  };\n\n  const toggleSubject = (subjectId) => {\n    setFormData(prev => ({\n      ...prev,\n      subjects: prev.subjects.includes(subjectId)\n        ? prev.subjects.filter(id => id !== subjectId)\n        : [...prev.subjects, subjectId]\n    }));\n  };\n\n  const updateExamSettings = (key, value) => {\n    setFormData(prev => ({\n      ...prev,\n      examSettings: { ...prev.examSettings, [key]: value }\n    }));\n  };\n\n  const updateGradingCriteria = (key, value) => {\n    setFormData(prev => ({\n      ...prev,\n      gradingCriteria: { ...prev.gradingCriteria, [key]: value }\n    }));\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      title={examGroup ? 'Edit Exam Group' : 'Create Exam Group'}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Exam Group Name *\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"e.g., Unit Test 1\"\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Exam Type *</label>\n            <select\n              value={formData.type}\n              onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"unit_test\">Unit Test</option>\n              <option value=\"mid_term\">Mid Term</option>\n              <option value=\"final_exam\">Final Exam</option>\n              <option value=\"practical\">Practical</option>\n              <option value=\"project\">Project</option>\n              <option value=\"assignment\">Assignment</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Term *</label>\n            <select\n              value={formData.termId}\n              onChange={(e) => setFormData(prev => ({ ...prev, termId: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">Select Term</option>\n              {termsData?.data?.map(term => (\n                <option key={term.id} value={term.id}>\n                  {term.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Status</label>\n            <select\n              value={formData.status}\n              onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"draft\">Draft</option>\n              <option value=\"scheduled\">Scheduled</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Description</label>\n          <textarea\n            value={formData.description}\n            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Exam group description...\"\n          />\n        </div>\n\n        {/* Exam Configuration */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Exam Configuration</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Input\n              label=\"Max Marks *\"\n              type=\"number\"\n              value={formData.maxMarks}\n              onChange={(e) => setFormData(prev => ({ ...prev, maxMarks: parseInt(e.target.value) || 0 }))}\n              min=\"1\"\n            />\n            <Input\n              label=\"Pass Marks *\"\n              type=\"number\"\n              value={formData.passMarks}\n              onChange={(e) => setFormData(prev => ({ ...prev, passMarks: parseInt(e.target.value) || 0 }))}\n              min=\"1\"\n            />\n            <Input\n              label=\"Duration (minutes)\"\n              type=\"number\"\n              value={formData.duration}\n              onChange={(e) => setFormData(prev => ({ ...prev, duration: parseInt(e.target.value) || 0 }))}\n              min=\"1\"\n            />\n            <Input\n              label=\"Weightage (%)\"\n              type=\"number\"\n              value={formData.weightage}\n              onChange={(e) => setFormData(prev => ({ ...prev, weightage: parseInt(e.target.value) || 0 }))}\n              min=\"0\"\n              max=\"100\"\n            />\n          </div>\n        </div>\n\n        {/* Classes Selection */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Applicable Classes *</label>\n          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n              <label key={cls.id} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.classes.includes(cls.id)}\n                  onChange={() => toggleClass(cls.id)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">{cls.name}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Subjects Selection */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Subjects *</label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(subjectsData?.data) && subjectsData.data.map(subject => (\n              <label key={subject.id} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.subjects.includes(subject.id)}\n                  onChange={() => toggleSubject(subject.id)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">{subject.name}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Exam Settings */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Exam Settings</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-3\">\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.examSettings.allowAbsent}\n                  onChange={(e) => updateExamSettings('allowAbsent', e.target.checked)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Allow absent marking</span>\n              </label>\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.examSettings.allowPartialMarks}\n                  onChange={(e) => updateExamSettings('allowPartialMarks', e.target.checked)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Allow partial marks</span>\n              </label>\n            </div>\n            <div className=\"space-y-3\">\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.examSettings.roundOffMarks}\n                  onChange={(e) => updateExamSettings('roundOffMarks', e.target.checked)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Round off marks</span>\n              </label>\n              <label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.examSettings.showRank}\n                  onChange={(e) => updateExamSettings('showRank', e.target.checked)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">Show student rank</span>\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Grading Criteria */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Grading Criteria</h3>\n          <div className=\"space-y-4\">\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.gradingCriteria.enableGrading}\n                onChange={(e) => updateGradingCriteria('enableGrading', e.target.checked)}\n                className=\"rounded\"\n              />\n              <span className=\"text-sm font-medium\">Enable grading system</span>\n            </label>\n            \n            {formData.gradingCriteria.enableGrading && (\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Grading Type</label>\n                <select\n                  value={formData.gradingCriteria.gradingType}\n                  onChange={(e) => updateGradingCriteria('gradingType', e.target.value)}\n                  className=\"w-full border rounded-lg px-3 py-2 max-w-xs\"\n                >\n                  <option value=\"percentage\">Percentage Based</option>\n                  <option value=\"points\">Points Based</option>\n                  <option value=\"custom\">Custom Grades</option>\n                </select>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!formData.name.trim() || formData.classes.length === 0 || formData.subjects.length === 0}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <CheckCircle className=\"w-4 h-4\" />\n            {examGroup ? 'Update' : 'Create'} Exam Group\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};const ExamG\nroupDetailsDialog = ({ examGroup, open, onClose }) => {\n  if (!examGroup) return null;\n\n  return (\n    <Dialog open={open} onClose={onClose} title={`${examGroup.name} - Details`} size=\"xl\">\n      <div className=\"space-y-6\">\n        {/* Basic Info */}\n        <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Exam Type</label>\n            <p className=\"text-sm capitalize\">{examGroup.type.replace('_', ' ')}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Term</label>\n            <p className=\"text-sm\">{examGroup.termName}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Status</label>\n            <p className=\"text-sm capitalize\">{examGroup.status}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Created</label>\n            <p className=\"text-sm\">{new Date(examGroup.createdAt).toLocaleDateString()}</p>\n          </div>\n        </div>\n\n        {/* Description */}\n        {examGroup.description && (\n          <div>\n            <h3 className=\"font-medium mb-2\">Description</h3>\n            <p className=\"text-sm bg-gray-50 p-3 rounded\">{examGroup.description}</p>\n          </div>\n        )}\n\n        {/* Exam Configuration */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Exam Configuration</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-3 bg-blue-50 rounded\">\n              <div className=\"text-2xl font-bold text-blue-600\">{examGroup.maxMarks}</div>\n              <div className=\"text-sm text-gray-600\">Max Marks</div>\n            </div>\n            <div className=\"text-center p-3 bg-green-50 rounded\">\n              <div className=\"text-2xl font-bold text-green-600\">{examGroup.passMarks}</div>\n              <div className=\"text-sm text-gray-600\">Pass Marks</div>\n            </div>\n            <div className=\"text-center p-3 bg-yellow-50 rounded\">\n              <div className=\"text-2xl font-bold text-yellow-600\">{examGroup.duration}</div>\n              <div className=\"text-sm text-gray-600\">Duration (min)</div>\n            </div>\n            <div className=\"text-center p-3 bg-purple-50 rounded\">\n              <div className=\"text-2xl font-bold text-purple-600\">{examGroup.weightage}%</div>\n              <div className=\"text-sm text-gray-600\">Weightage</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Classes and Subjects */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h3 className=\"font-medium mb-2\">Applicable Classes</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {examGroup.classNames?.map((className, index) => (\n                <span key={index} className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm\">\n                  {className}\n                </span>\n              ))}\n            </div>\n          </div>\n          <div>\n            <h3 className=\"font-medium mb-2\">Subjects</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {examGroup.subjectNames?.map((subjectName, index) => (\n                <span key={index} className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-sm\">\n                  {subjectName}\n                </span>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Exam Settings */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Exam Settings</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                {examGroup.examSettings?.allowAbsent ? \n                  <CheckCircle className=\"w-4 h-4 text-green-600\" /> : \n                  <XCircle className=\"w-4 h-4 text-red-600\" />\n                }\n                <span className=\"text-sm\">Allow absent marking</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {examGroup.examSettings?.allowPartialMarks ? \n                  <CheckCircle className=\"w-4 h-4 text-green-600\" /> : \n                  <XCircle className=\"w-4 h-4 text-red-600\" />\n                }\n                <span className=\"text-sm\">Allow partial marks</span>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                {examGroup.examSettings?.roundOffMarks ? \n                  <CheckCircle className=\"w-4 h-4 text-green-600\" /> : \n                  <XCircle className=\"w-4 h-4 text-red-600\" />\n                }\n                <span className=\"text-sm\">Round off marks</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {examGroup.examSettings?.showRank ? \n                  <CheckCircle className=\"w-4 h-4 text-green-600\" /> : \n                  <XCircle className=\"w-4 h-4 text-red-600\" />\n                }\n                <span className=\"text-sm\">Show student rank</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst ExamGroup = () => {\n  const [selectedExamGroup, setSelectedExamGroup] = useState(null);\n  const [showExamGroupDialog, setShowExamGroupDialog] = useState(false);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterType, setFilterType] = useState('all');\n\n  const queryClient = useQueryClient();\n\n  const { data: examGroupsData, isLoading } = useQuery({\n    queryKey: ['exam-groups', 'all'],\n    queryFn: () => examApi.getExamGroups()\n  });\n\n  const saveExamGroupMutation = useMutation({\n    mutationFn: ({ id, data }) => id ? examApi.updateExamGroup(id, data) : examApi.createExamGroup(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['exam-groups']);\n      setShowExamGroupDialog(false);\n      setSelectedExamGroup(null);\n    }\n  });\n\n  const deleteExamGroupMutation = useMutation({\n    mutationFn: examApi.deleteExamGroup,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['exam-groups']);\n    }\n  });\n\n  const duplicateExamGroupMutation = useMutation({\n    mutationFn: examApi.duplicateExamGroup,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['exam-groups']);\n    }\n  });\n\n  const handleEditExamGroup = (examGroup) => {\n    setSelectedExamGroup(examGroup);\n    setShowExamGroupDialog(true);\n  };\n\n  const handleDeleteExamGroup = (examGroup) => {\n    if (confirm(`Are you sure you want to delete \"${examGroup.name}\"?`)) {\n      deleteExamGroupMutation.mutate(examGroup.id);\n    }\n  };\n\n  const handleDuplicateExamGroup = (examGroup) => {\n    duplicateExamGroupMutation.mutate(examGroup.id);\n  };\n\n  const handleViewDetails = (examGroup) => {\n    setSelectedExamGroup(examGroup);\n    setShowDetailsDialog(true);\n  };\n\n  const handleSaveExamGroup = (id, data) => {\n    saveExamGroupMutation.mutate({ id, data });\n  };\n\n  const handleAddExamGroup = () => {\n    setSelectedExamGroup(null);\n    setShowExamGroupDialog(true);\n  };\n\n  const filteredExamGroups = examGroupsData?.data?.filter(examGroup => {\n    const matchesStatus = filterStatus === 'all' || examGroup.status === filterStatus;\n    const matchesType = filterType === 'all' || examGroup.type === filterType;\n    return matchesStatus && matchesType;\n  }) || [];\n\n  const getStatistics = () => {\n    const examGroups = examGroupsData?.data || [];\n    return {\n      total: examGroups.length,\n      active: examGroups.filter(eg => eg.status === 'active').length,\n      scheduled: examGroups.filter(eg => eg.status === 'scheduled').length,\n      completed: examGroups.filter(eg => eg.status === 'completed').length\n    };\n  };\n\n  const stats = getStatistics();\n\n  if (isLoading) return <LoadingSkeleton />;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Exam Groups</h1>\n        <button\n          onClick={handleAddExamGroup}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Create Exam Group\n        </button>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <BookOpen className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.total}</p>\n              <p className=\"text-sm text-gray-600\">Total Groups</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.active}</p>\n              <p className=\"text-sm text-gray-600\">Active</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.scheduled}</p>\n              <p className=\"text-sm text-gray-600\">Scheduled</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <FileText className=\"w-8 h-8 text-gray-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.completed}</p>\n              <p className=\"text-sm text-gray-600\">Completed</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Filter by Status</label>\n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"draft\">Draft</option>\n              <option value=\"scheduled\">Scheduled</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Filter by Type</label>\n            <select\n              value={filterType}\n              onChange={(e) => setFilterType(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Types</option>\n              <option value=\"unit_test\">Unit Test</option>\n              <option value=\"mid_term\">Mid Term</option>\n              <option value=\"final_exam\">Final Exam</option>\n              <option value=\"practical\">Practical</option>\n            </select>\n          </div>\n          <div className=\"flex items-end\">\n            <div className=\"text-sm text-gray-500\">\n              Showing {filteredExamGroups.length} of {examGroupsData?.data?.length || 0} exam groups\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Exam Groups List */}\n      <div className=\"space-y-4\">\n        {filteredExamGroups.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n            <BookOpen className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Exam Groups Found</h3>\n            <p className=\"text-gray-500 mb-4\">\n              {examGroupsData?.data?.length === 0 \n                ? 'Create your first exam group to get started.'\n                : 'No exam groups match your current filters.'\n              }\n            </p>\n            {examGroupsData?.data?.length === 0 && (\n              <button\n                onClick={handleAddExamGroup}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n              >\n                Create Exam Group\n              </button>\n            )}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {Array.isArray(filteredExamGroups) && filteredExamGroups.map(examGroup => (\n              <ExamGroupCard\n                key={examGroup.id}\n                examGroup={examGroup}\n                onEdit={handleEditExamGroup}\n                onDelete={handleDeleteExamGroup}\n                onDuplicate={handleDuplicateExamGroup}\n                onViewDetails={handleViewDetails}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Exam Group Dialog */}\n      <ExamGroupDialog\n        examGroup={selectedExamGroup}\n        open={showExamGroupDialog}\n        onClose={() => {\n          setShowExamGroupDialog(false);\n          setSelectedExamGroup(null);\n        }}\n        onSave={handleSaveExamGroup}\n      />\n\n      {/* Details Dialog */}\n      <ExamGroupDetailsDialog\n        examGroup={selectedExamGroup}\n        open={showDetailsDialog}\n        onClose={() => setShowDetailsDialog(false)}\n      />\n    </div>\n  );\n};\n\nexport default ExamGroup;"
        }
    ]
}