{
    "sourceFile": "src/pages/exams/DesignAdmitCard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925597,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useCallback } from 'react'\nimport {\n  Layout,\n  Type,\n  Image,\n  QrCode,\n  FileSignature,\n  Palette,\n  Save,\n  Eye,\n  Download,\n  Copy,\n  Trash2,\n  Move,\n  RotateCcw,\n  Settings,\n  Grid,\n  Layers,\n} from 'lucide-react'\nimport { DndProvider, useDrag, useDrop } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport Input from '../../components/ui/Input'\n\nconst FIELD_TYPES = {\n  PHOTO: 'photo',\n  TEXT: 'text',\n  QR_CODE: 'qr_code',\n  SIGNATURE: 'signature',\n  LOGO: 'logo',\n  WATERMARK: 'watermark',\n}\n\nconst THEME_PRESETS = {\n  classic: {\n    name: 'Classic Blue',\n    primaryColor: '#1e40af',\n    secondaryColor: '#3b82f6',\n    backgroundColor: '#ffffff',\n    textColor: '#1f2937',\n    borderColor: '#d1d5db',\n    headerBg: '#1e40af',\n    headerText: '#ffffff',\n  },\n  modern: {\n    name: 'Modern Green',\n    primaryColor: '#059669',\n    secondaryColor: '#10b981',\n    backgroundColor: '#ffffff',\n    textColor: '#111827',\n    borderColor: '#d1d5db',\n    headerBg: '#059669',\n    headerText: '#ffffff',\n  },\n  elegant: {\n    name: 'Elegant Purple',\n    primaryColor: '#7c3aed',\n    secondaryColor: '#8b5cf6',\n    backgroundColor: '#fefefe',\n    textColor: '#374151',\n    borderColor: '#e5e7eb',\n    headerBg: '#7c3aed',\n    headerText: '#ffffff',\n  },\n  minimal: {\n    name: 'Minimal Gray',\n    primaryColor: '#374151',\n    secondaryColor: '#6b7280',\n    backgroundColor: '#ffffff',\n    textColor: '#111827',\n    borderColor: '#d1d5db',\n    headerBg: '#374151',\n    headerText: '#ffffff',\n  },\n}\n\nconst DEFAULT_FIELDS = [\n  {\n    id: 'school-logo',\n    type: FIELD_TYPES.LOGO,\n    label: 'School Logo',\n    x: 50,\n    y: 20,\n    width: 80,\n    height: 80,\n    required: true,\n  },\n  {\n    id: 'school-name',\n    type: FIELD_TYPES.TEXT,\n    label: 'School Name',\n    x: 150,\n    y: 30,\n    width: 300,\n    height: 40,\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    required: true,\n  },\n  {\n    id: 'admit-card-title',\n    type: FIELD_TYPES.TEXT,\n    label: 'ADMIT CARD',\n    x: 150,\n    y: 70,\n    width: 300,\n    height: 30,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    required: true,\n  },\n  {\n    id: 'student-photo',\n    type: FIELD_TYPES.PHOTO,\n    label: 'Student Photo',\n    x: 450,\n    y: 120,\n    width: 100,\n    height: 120,\n    required: true,\n  },\n  {\n    id: 'student-name',\n    type: FIELD_TYPES.TEXT,\n    label: 'Student Name',\n    x: 50,\n    y: 120,\n    width: 200,\n    height: 25,\n    fontSize: 14,\n    fontWeight: 'normal',\n    required: true,\n  },\n  {\n    id: 'roll-number',\n    type: FIELD_TYPES.TEXT,\n    label: 'Roll Number',\n    x: 50,\n    y: 150,\n    width: 200,\n    height: 25,\n    fontSize: 14,\n    fontWeight: 'normal',\n    required: true,\n  },\n  {\n    id: 'class-section',\n    type: FIELD_TYPES.TEXT,\n    label: 'Class & Section',\n    x: 50,\n    y: 180,\n    width: 200,\n    height: 25,\n    fontSize: 14,\n    fontWeight: 'normal',\n    required: true,\n  },\n  {\n    id: 'exam-name',\n    type: FIELD_TYPES.TEXT,\n    label: 'Examination',\n    x: 50,\n    y: 210,\n    width: 200,\n    height: 25,\n    fontSize: 14,\n    fontWeight: 'normal',\n    required: true,\n  },\n  {\n    id: 'qr-code',\n    type: FIELD_TYPES.QR_CODE,\n    label: 'QR Code',\n    x: 450,\n    y: 250,\n    width: 80,\n    height: 80,\n    required: false,\n  },\n  {\n    id: 'principal-signature',\n    type: FIELD_TYPES.SIGNATURE,\n    label: 'Principal Signature',\n    x: 400,\n    y: 350,\n    width: 120,\n    height: 60,\n    required: true,\n  },\n]\n\nconst DraggableField = ({ field, onSelect, isSelected, onUpdate, theme }) => {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'field',\n    item: { id: field.id, type: field.type },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  })\n\n  const getFieldContent = () => {\n    switch (field.type) {\n      case FIELD_TYPES.PHOTO:\n        return (\n          <div className=\"w-full h-full bg-gray-200 border-2 border-dashed border-gray-400 flex items-center justify-center\">\n            <Image className=\"w-6 h-6 text-gray-500\" />\n          </div>\n        )\n      case FIELD_TYPES.LOGO:\n        return (\n          <div className=\"w-full h-full bg-gray-100 border border-gray-300 flex items-center justify-center rounded\">\n            <Layout className=\"w-6 h-6 text-gray-500\" />\n          </div>\n        )\n      case FIELD_TYPES.QR_CODE:\n        return (\n          <div className=\"w-full h-full bg-white border border-gray-300 flex items-center justify-center\">\n            <QrCode className=\"w-8 h-8 text-gray-700\" />\n          </div>\n        )\n      case FIELD_TYPES.SIGNATURE:\n        return (\n          <div className=\"w-full h-full bg-gray-50 border-b-2 border-gray-400 flex items-center justify-center\">\n            <FileSignature className=\"w-6 h-6 text-gray-500\" />\n          </div>\n        )\n      case FIELD_TYPES.WATERMARK:\n        return (\n          <div className=\"w-full h-full bg-gray-100 opacity-20 flex items-center justify-center\">\n            <span className=\"text-gray-500 text-xs\">WATERMARK</span>\n          </div>\n        )\n      default:\n        return (\n          <div\n            className=\"w-full h-full flex items-center px-2\"\n            style={{\n              fontSize: `${field.fontSize || 14}px`,\n              fontWeight: field.fontWeight || 'normal',\n              textAlign: field.textAlign || 'left',\n              color: theme.textColor,\n            }}\n          >\n            {field.label}\n          </div>\n        )\n    }\n  }\n\n  return (\n    <div\n      ref={drag}\n      onClick={() => onSelect(field)}\n      className={`absolute cursor-move border-2 ${\n        isSelected\n          ? 'border-blue-500 bg-blue-50'\n          : 'border-transparent hover:border-gray-300'\n      } ${isDragging ? 'opacity-50' : ''}`}\n      style={{\n        left: field.x,\n        top: field.y,\n        width: field.width,\n        height: field.height,\n        zIndex: field.zIndex || 1,\n      }}\n    >\n      {getFieldContent()}\n      {isSelected && (\n        <div className=\"absolute -top-6 left-0 bg-blue-500 text-white text-xs px-2 py-1 rounded\">\n          {field.label}\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst DesignCanvas = ({\n  fields,\n  onFieldUpdate,\n  selectedField,\n  onFieldSelect,\n  theme,\n  showGrid,\n}) => {\n  const [, drop] = useDrop({\n    accept: 'field',\n    drop: (item, monitor) => {\n      const delta = monitor.getDifferenceFromInitialOffset()\n      const field = fields.find(f => f.id === item.id)\n      if (field && delta) {\n        onFieldUpdate(field.id, {\n          x: Math.max(0, field.x + delta.x),\n          y: Math.max(0, field.y + delta.y),\n        })\n      }\n    },\n  })\n\n  return (\n    <div\n      ref={drop}\n      className=\"relative bg-white border-2 border-gray-300 mx-auto\"\n      style={{\n        width: '595px',\n        height: '842px', // A4 size in pixels at 72 DPI\n        backgroundColor: theme.backgroundColor,\n        backgroundImage: showGrid\n          ? 'linear-gradient(rgba(0,0,0,.1) 1px, transparent 1px), linear-gradient(90deg, rgba(0,0,0,.1) 1px, transparent 1px)'\n          : 'none',\n        backgroundSize: showGrid ? '20px 20px' : 'auto',\n      }}\n    >\n      {Array.isArray(fields) &&\n        fields.map(field => (\n          <DraggableField\n            key={field.id}\n            field={field}\n            onSelect={onFieldSelect}\n            isSelected={selectedField?.id === field.id}\n            onUpdate={onFieldUpdate}\n            theme={theme}\n          />\n        ))}\n    </div>\n  )\n}\n\nconst FieldToolbox = ({ onAddField }) => {\n  const fieldTypes = [\n    { type: FIELD_TYPES.TEXT, icon: Type, label: 'Text Field' },\n    { type: FIELD_TYPES.PHOTO, icon: Image, label: 'Photo' },\n    { type: FIELD_TYPES.QR_CODE, icon: QrCode, label: 'QR Code' },\n    { type: FIELD_TYPES.SIGNATURE, icon: FileSignature, label: 'Signature' },\n    { type: FIELD_TYPES.LOGO, icon: Layout, label: 'Logo' },\n  ]\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4\">\n      <h3 className=\"font-medium mb-3\">Field Toolbox</h3>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {Array.isArray(fieldTypes) &&\n          fieldTypes.map(fieldType => {\n            const Icon = fieldType.icon\n            return (\n              <button\n                key={fieldType.type}\n                onClick={() => onAddField(fieldType.type)}\n                className=\"flex items-center gap-2 p-3 border rounded-lg hover:bg-gray-50 text-sm\"\n              >\n                <Icon className=\"w-4 h-4\" />\n                {fieldType.label}\n              </button>\n            )\n          })}\n      </div>\n    </div>\n  )\n}\n\nconst PropertyPanel = ({ field, onUpdate, onDelete, theme }) => {\n  if (!field) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <h3 className=\"font-medium mb-3\">Properties</h3>\n        <p className=\"text-gray-500 text-sm\">\n          Select a field to edit properties\n        </p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4\">\n      <div className=\"flex justify-between items-center mb-3\">\n        <h3 className=\"font-medium\">Properties</h3>\n        <button\n          onClick={() => onDelete(field.id)}\n          className=\"text-red-600 hover:text-red-700\"\n        >\n          <Trash2 className=\"w-4 h-4\" />\n        </button>\n      </div>\n\n      <div className=\"space-y-4\">\n        <Input\n          label=\"Label\"\n          value={field.label}\n          onChange={e => onUpdate(field.id, { label: e.target.value })}\n        />\n\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Input\n            label=\"X Position\"\n            type=\"number\"\n            value={field.x}\n            onChange={e =>\n              onUpdate(field.id, { x: parseInt(e.target.value) || 0 })\n            }\n          />\n          <Input\n            label=\"Y Position\"\n            type=\"number\"\n            value={field.y}\n            onChange={e =>\n              onUpdate(field.id, { y: parseInt(e.target.value) || 0 })\n            }\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Input\n            label=\"Width\"\n            type=\"number\"\n            value={field.width}\n            onChange={e =>\n              onUpdate(field.id, { width: parseInt(e.target.value) || 0 })\n            }\n          />\n          <Input\n            label=\"Height\"\n            type=\"number\"\n            value={field.height}\n            onChange={e =>\n              onUpdate(field.id, { height: parseInt(e.target.value) || 0 })\n            }\n          />\n        </div>\n\n        {field.type === FIELD_TYPES.TEXT && (\n          <>\n            <Input\n              label=\"Font Size\"\n              type=\"number\"\n              value={field.fontSize || 14}\n              onChange={e =>\n                onUpdate(field.id, { fontSize: parseInt(e.target.value) || 14 })\n              }\n            />\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Font Weight\n              </label>\n              <select\n                value={field.fontWeight || 'normal'}\n                onChange={e =>\n                  onUpdate(field.id, { fontWeight: e.target.value })\n                }\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"normal\">Normal</option>\n                <option value=\"bold\">Bold</option>\n                <option value=\"lighter\">Light</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Text Align\n              </label>\n              <select\n                value={field.textAlign || 'left'}\n                onChange={e =>\n                  onUpdate(field.id, { textAlign: e.target.value })\n                }\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"left\">Left</option>\n                <option value=\"center\">Center</option>\n                <option value=\"right\">Right</option>\n              </select>\n            </div>\n          </>\n        )}\n\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"checkbox\"\n            checked={field.required || false}\n            onChange={e => onUpdate(field.id, { required: e.target.checked })}\n            className=\"rounded\"\n          />\n          <label className=\"text-sm\">Required Field</label>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst ThemeSelector = ({ currentTheme, onThemeChange }) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4\">\n      <h3 className=\"font-medium mb-3\">Theme Presets</h3>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {Array.isArray(Object.entries(THEME_PRESETS)) &&\n          Object.entries(THEME_PRESETS).map(([key, theme]) => (\n            <button\n              key={key}\n              onClick={() => onThemeChange(theme)}\n              className={`p-3 border rounded-lg text-left hover:shadow-md transition-shadow ${\n                currentTheme.name === theme.name\n                  ? 'border-blue-500 bg-blue-50'\n                  : ''\n              }`}\n            >\n              <div className=\"flex items-center gap-2 mb-2\">\n                <div\n                  className=\"w-4 h-4 rounded\"\n                  style={{ backgroundColor: theme.primaryColor }}\n                />\n                <span className=\"text-sm font-medium\">{theme.name}</span>\n              </div>\n              <div className=\"flex gap-1\">\n                <div\n                  className=\"w-3 h-3 rounded\"\n                  style={{ backgroundColor: theme.primaryColor }}\n                />\n                <div\n                  className=\"w-3 h-3 rounded\"\n                  style={{ backgroundColor: theme.secondaryColor }}\n                />\n                <div\n                  className=\"w-3 h-3 rounded border\"\n                  style={{ backgroundColor: theme.backgroundColor }}\n                />\n              </div>\n            </button>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nconst DesignAdmitCard = () => {\n  const [fields, setFields] = useState(DEFAULT_FIELDS)\n  const [selectedField, setSelectedField] = useState(null)\n  const [currentTheme, setCurrentTheme] = useState(THEME_PRESETS.classic)\n  const [showGrid, setShowGrid] = useState(true)\n  const [templateName, setTemplateName] = useState('Default Admit Card')\n  const [showPreview, setShowPreview] = useState(false)\n  const [showSaveDialog, setShowSaveDialog] = useState(false)\n\n  const handleFieldUpdate = useCallback((fieldId, updates) => {\n    setFields(prev =>\n      prev.map(field =>\n        field.id === fieldId ? { ...field, ...updates } : field\n      ),\n    )\n  }, [])\n\n  const handleAddField = type => {\n    const newField = {\n      id: `field-${Date.now()}`,\n      type,\n      label: `New ${type}`,\n      x: 100,\n      y: 100,\n      width: type === FIELD_TYPES.PHOTO ? 100 : 200,\n      height: type === FIELD_TYPES.PHOTO ? 120 : 25,\n      fontSize: 14,\n      fontWeight: 'normal',\n      textAlign: 'left',\n      required: false,\n    }\n    setFields(prev => [...prev, newField])\n  }\n\n  const handleDeleteField = fieldId => {\n    setFields(prev => prev.filter(field => field.id !== fieldId))\n    setSelectedField(null)\n  }\n\n  const handleSaveTemplate = () => {\n    const template = {\n      name: templateName,\n      fields,\n      theme: currentTheme,\n      createdAt: new Date().toISOString(),\n    }\n\n    // Save to localStorage for demo\n    const savedTemplates = JSON.parse(\n      localStorage.getItem('admitCardTemplates') || '[]',\n    )\n    savedTemplates.push(template)\n    localStorage.setItem('admitCardTemplates', JSON.stringify(savedTemplates))\n\n    setShowSaveDialog(false)\n    alert('Template saved successfully!')\n  }\n\n  const handlePreview = () => {\n    setShowPreview(true)\n  }\n\n  const handleReset = () => {\n    if (confirm('Are you sure you want to reset to default template?')) {\n      setFields(DEFAULT_FIELDS)\n      setSelectedField(null)\n      setCurrentTheme(THEME_PRESETS.classic)\n    }\n  }\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold\">Design Admit Card</h1>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setShowGrid(!showGrid)}\n              className={`px-4 py-2 border rounded-lg flex items-center gap-2 ${\n                showGrid\n                  ? 'bg-blue-50 border-blue-500 text-blue-700'\n                  : 'hover:bg-gray-50'\n              }`}\n            >\n              <Grid className=\"w-4 h-4\" />\n              Grid\n            </button>\n            <button\n              onClick={handleReset}\n              className=\"px-4 py-2 border rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n            >\n              <RotateCcw className=\"w-4 h-4\" />\n              Reset\n            </button>\n            <button\n              onClick={handlePreview}\n              className=\"px-4 py-2 border rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n            >\n              <Eye className=\"w-4 h-4\" />\n              Preview\n            </button>\n            <button\n              onClick={() => setShowSaveDialog(true)}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n            >\n              <Save className=\"w-4 h-4\" />\n              Save Template\n            </button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-12 gap-6\">\n          {/* Left Sidebar - Tools */}\n          <div className=\"col-span-3 space-y-4\">\n            <FieldToolbox onAddField={handleAddField} />\n            <ThemeSelector\n              currentTheme={currentTheme}\n              onThemeChange={setCurrentTheme}\n            />\n            <PropertyPanel\n              field={selectedField}\n              onUpdate={handleFieldUpdate}\n              onDelete={handleDeleteField}\n              theme={currentTheme}\n            />\n          </div>\n\n          {/* Center - Design Canvas */}\n          <div className=\"col-span-6\">\n            <div className=\"bg-gray-100 p-6 rounded-lg\">\n              <div className=\"mb-4 text-center\">\n                <h3 className=\"font-medium text-gray-700\">\n                  Admit Card Design Canvas\n                </h3>\n                <p className=\"text-sm text-gray-500\">\n                  Drag fields to reposition them\n                </p>\n              </div>\n              <DesignCanvas\n                fields={fields}\n                onFieldUpdate={handleFieldUpdate}\n                selectedField={selectedField}\n                onFieldSelect={setSelectedField}\n                theme={currentTheme}\n                showGrid={showGrid}\n              />\n            </div>\n          </div>\n\n          {/* Right Sidebar - Layers & Settings */}\n          <div className=\"col-span-3 space-y-4\">\n            <div className=\"bg-white rounded-lg shadow p-4\">\n              <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n                <Layers className=\"w-4 h-4\" />\n                Layers\n              </h3>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {Array.isArray(fields) &&\n                  fields.map((field, index) => (\n                    <div\n                      key={field.id}\n                      onClick={() => setSelectedField(field)}\n                      className={`p-2 border rounded cursor-pointer text-sm ${\n                        selectedField?.id === field.id\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <span>{field.label}</span>\n                        {field.required && (\n                          <span className=\"text-red-500 text-xs\">*</span>\n                        )}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {field.type} • {field.x},{field.y}\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow p-4\">\n              <h3 className=\"font-medium mb-3\">Template Info</h3>\n              <Input\n                label=\"Template Name\"\n                value={templateName}\n                onChange={e => setTemplateName(e.target.value)}\n              />\n              <div className=\"mt-3 text-sm text-gray-600\">\n                <div>Fields: {fields.length}</div>\n                <div>Theme: {currentTheme.name}</div>\n                <div>Size: A4 (595×842px)</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Save Template Dialog */}\n        <Dialog\n          open={showSaveDialog}\n          onClose={() => setShowSaveDialog(false)}\n          title=\"Save Template\"\n        >\n          <div className=\"space-y-4\">\n            <Input\n              label=\"Template Name\"\n              value={templateName}\n              onChange={e => setTemplateName(e.target.value)}\n              placeholder=\"Enter template name...\"\n            />\n            <div className=\"bg-gray-50 p-3 rounded\">\n              <h4 className=\"font-medium mb-2\">Template Summary</h4>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <div>Fields: {fields.length}</div>\n                <div>Theme: {currentTheme.name}</div>\n                <div>\n                  Required Fields: {fields.filter(f => f.required).length}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <button\n                onClick={() => setShowSaveDialog(false)}\n                className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSaveTemplate}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n              >\n                Save Template\n              </button>\n            </div>\n          </div>\n        </Dialog>\n      </div>\n    </DndProvider>\n  )\n}\n\nexport default DesignAdmitCard\n"
        }
    ]
}