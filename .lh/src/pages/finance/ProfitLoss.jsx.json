{
    "sourceFile": "src/pages/finance/ProfitLoss.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756040244766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756040244766,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport { financeApi } from '../../lib/api/finance'\nimport Button from '../../components/Button'\nimport { exportToCSV, exportToPDF } from '../../lib/export'\nimport { Bar, Pie } from 'react-chartjs-2'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from 'chart.js'\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n)\n\nconst ProfitLoss = () => {\n  const [dateRange, setDateRange] = useState({\n    startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1)\n      .toISOString()\n      .split('T')[0],\n    endDate: new Date().toISOString().split('T')[0],\n  })\n\n  const { data: plData, isLoading } = useQuery({\n    queryKey: ['profitLoss', dateRange],\n    queryFn: () => financeApi.getProfitLossData(dateRange),\n  })\n\n  const handleDateChange = e => {\n    const { name, value } = e.target\n    setDateRange(prev => ({ ...prev, [name]: value }))\n  }\n\n  const handleExportCSV = () => {\n    if (!plData) return\n\n    const exportData = [\n      { Category: 'Total Income', Amount: plData.totalIncome || 0 },\n      { Category: 'Total Expenses', Amount: plData.totalExpenses || 0 },\n      { Category: 'Net Profit/Loss', Amount: plData.netProfitLoss || 0 },\n      ...(plData.incomeByHead || []).map(item => ({\n        Category: `Income - ${item.name}`,\n        Amount: item.amount || 0,\n      })),\n      ...(plData.expensesByHead || []).map(item => ({\n        Category: `Expense - ${item.name}`,\n        Amount: item.amount || 0,\n      })),\n    ]\n    exportToCSV(exportData, 'profit-loss-report')\n  }\n\n  const handleExportPDF = () => {\n    if (!plData) return\n\n    const columns = ['Category', 'Amount']\n    const data = [\n      ['Total Income', `$${(plData.totalIncome || 0).toFixed(2)}`],\n      ['Total Expenses', `$${(plData.totalExpenses || 0).toFixed(2)}`],\n      ['Net Profit/Loss', `$${(plData.netProfitLoss || 0).toFixed(2)}`],\n      ['', ''],\n      ['INCOME BREAKDOWN', ''],\n      ...(plData.incomeByHead || []).map(item => [\n        item.name,\n        `$${(item.amount || 0).toFixed(2)}`,\n      ]),\n      ['', ''],\n      ['EXPENSE BREAKDOWN', ''],\n      ...(plData.expensesByHead || []).map(item => [\n        item.name,\n        `$${(item.amount || 0).toFixed(2)}`,\n      ]),\n    ]\n    exportToPDF(columns, data, 'Profit & Loss Report')\n  }\n\n  // Chart configurations\n  const incomeChartData = {\n    labels: plData?.incomeByHead\n      ? plData.incomeByHead.map(item => item.name)\n      : [],\n    datasets: [\n      {\n        label: 'Income',\n        data: plData?.incomeByHead\n          ? plData.incomeByHead.map(item => item.amount)\n          : [],\n        backgroundColor: [\n          '#10B981',\n          '#059669',\n          '#047857',\n          '#065F46',\n          '#064E3B',\n          '#6EE7B7',\n          '#34D399',\n          '#10B981',\n          '#059669',\n          '#047857',\n        ],\n      },\n    ],\n  }\n\n  const expenseChartData = {\n    labels: plData?.expensesByHead\n      ? plData.expensesByHead.map(item => item.name)\n      : [],\n    datasets: [\n      {\n        label: 'Expenses',\n        data: plData?.expensesByHead\n          ? plData.expensesByHead.map(item => item.amount)\n          : [],\n        backgroundColor: [\n          '#EF4444',\n          '#DC2626',\n          '#B91C1C',\n          '#991B1B',\n          '#7F1D1D',\n          '#FCA5A5',\n          '#F87171',\n          '#EF4444',\n          '#DC2626',\n          '#B91C1C',\n        ],\n      },\n    ],\n  }\n\n  const comparisonChartData = {\n    labels: ['Income', 'Expenses'],\n    datasets: [\n      {\n        label: 'Amount',\n        data: [plData?.totalIncome || 0, plData?.totalExpenses || 0],\n        backgroundColor: ['#10B981', '#EF4444'],\n      },\n    ],\n  }\n\n  const chartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Financial Overview',\n      },\n    },\n  }\n\n  if (isLoading) {\n    return <div className=\"p-6 text-center\">Loading...</div>\n  }\n\n  if (!plData) {\n    return <div className=\"p-6 text-center text-red-600\">Error loading data. Please try again.</div>\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 className=\"text-2xl font-bold mb-6\">Profit & Loss Statement</h2>\n\n        {/* Date Range Filter */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Start Date</label>\n            <input\n              type=\"date\"\n              name=\"startDate\"\n              value={dateRange.startDate}\n              onChange={handleDateChange}\n              className=\"w-full p-2 border rounded-md\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">End Date</label>\n            <input\n              type=\"date\"\n              name=\"endDate\"\n              value={dateRange.endDate}\n              onChange={handleDateChange}\n              className=\"w-full p-2 border rounded-md\"\n            />\n          </div>\n          <div className=\"flex items-end gap-2\">\n            <Button\n              onClick={handleExportCSV}\n              className=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700\"\n            >\n              Export CSV\n            </Button>\n            <Button\n              onClick={handleExportPDF}\n              className=\"bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700\"\n            >\n              Export PDF\n            </Button>\n          </div>\n        </div>\n\n        {plData && (\n          <>\n            {/* Summary Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <div className=\"bg-green-50 p-6 rounded-lg border-l-4 border-green-500\">\n                <h3 className=\"text-lg font-semibold text-green-800\">\n                  Total Income\n                </h3>\n                <p className=\"text-3xl font-bold text-green-600\">\n                  ${(plData.totalIncome || 0).toFixed(2)}\n                </p>\n              </div>\n              <div className=\"bg-red-50 p-6 rounded-lg border-l-4 border-red-500\">\n                <h3 className=\"text-lg font-semibold text-red-800\">\n                  Total Expenses\n                </h3>\n                <p className=\"text-3xl font-bold text-red-600\">\n                  ${(plData.totalExpenses || 0).toFixed(2)}\n                </p>\n              </div>\n              <div\n                className={`p-6 rounded-lg border-l-4 ${(plData.netProfitLoss || 0) >= 0 ? 'bg-blue-50 border-blue-500' : 'bg-orange-50 border-orange-500'}`}\n              >\n                <h3\n                  className={`text-lg font-semibold ${(plData.netProfitLoss || 0) >= 0 ? 'text-blue-800' : 'text-orange-800'}`}\n                >\n                  Net {(plData.netProfitLoss || 0) >= 0 ? 'Profit' : 'Loss'}\n                </h3>\n                <p\n                  className={`text-3xl font-bold ${(plData.netProfitLoss || 0) >= 0 ? 'text-blue-600' : 'text-orange-600'}`}\n                >\n                  ${Math.abs(plData.netProfitLoss || 0).toFixed(2)}\n                </p>\n              </div>\n            </div>\n\n            {/* Charts */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg font-semibold mb-4\">\n                  Income vs Expenses\n                </h3>\n                <Bar data={comparisonChartData} options={chartOptions} />\n              </div>\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg font-semibold mb-4\">Income by Head</h3>\n                <Pie data={incomeChartData} options={chartOptions} />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg font-semibold mb-4\">Expense by Head</h3>\n                <Pie data={expenseChartData} options={chartOptions} />\n              </div>\n            </div>\n\n            {/* Detailed Breakdown */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Income Breakdown */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 text-green-800\">\n                  Income Breakdown\n                </h3>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse border border-gray-300\">\n                    <thead>\n                      <tr className=\"bg-green-50\">\n                        <th className=\"border border-gray-300 px-4 py-2 text-left\">\n                          Head\n                        </th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-right\">\n                          Amount\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {(plData.incomeByHead || []).map((item, index) => (\n                        <tr key={index} className=\"hover:bg-gray-50\">\n                          <td className=\"border border-gray-300 px-4 py-2\">\n                            {item.name}\n                          </td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-right text-green-600 font-semibold\">\n                            ${(item.amount || 0).toFixed(2)}\n                          </td>\n                        </tr>\n                      ))}\n                      <tr className=\"bg-green-100 font-bold\">\n                        <td className=\"border border-gray-300 px-4 py-2\">\n                          Total Income\n                        </td>\n                        <td className=\"border border-gray-300 px-4 py-2 text-right text-green-700\">\n                          ${(plData.totalIncome || 0).toFixed(2)}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n\n              {/* Expense Breakdown */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 text-red-800\">\n                  Expense Breakdown\n                </h3>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse border border-gray-300\">\n                    <thead>\n                      <tr className=\"bg-red-50\">\n                        <th className=\"border border-gray-300 px-4 py-2 text-left\">\n                          Head\n                        </th>\n                        <th className=\"border border-gray-300 px-4 py-2 text-right\">\n                          Amount\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {(plData.expensesByHead || []).map((item, index) => (\n                        <tr key={index} className=\"hover:bg-gray-50\">\n                          <td className=\"border border-gray-300 px-4 py-2\">\n                            {item.name}\n                          </td>\n                          <td className=\"border border-gray-300 px-4 py-2 text-right text-red-600 font-semibold\">\n                            ${(item.amount || 0).toFixed(2)}\n                          </td>\n                        </tr>\n                      ))}\n                      <tr className=\"bg-red-100 font-bold\">\n                        <td className=\"border border-gray-300 px-4 py-2\">\n                          Total Expenses\n                        </td>\n                        <td className=\"border border-gray-300 px-4 py-2 text-right text-red-700\">\n                          ${(plData.totalExpenses || 0).toFixed(2)}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default ProfitLoss\n"
        }
    ]
}