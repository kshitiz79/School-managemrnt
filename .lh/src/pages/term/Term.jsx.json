{
    "sourceFile": "src/pages/term/Term.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925599,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Calendar,\n  BookOpen,\n  Settings,\n  Users,\n  FileText,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Copy,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Award,\n  Target,\n  BarChart3,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { termApi } from '../../lib/api/term'\n\nconst TermCard = ({ term, onEdit, onDelete, onActivate, onViewDetails }) => {\n  const getStatusColor = status => {\n    switch (status) {\n      case 'active':\n        return 'text-green-600 bg-green-100 border-green-200'\n      case 'upcoming':\n        return 'text-blue-600 bg-blue-100 border-blue-200'\n      case 'completed':\n        return 'text-gray-600 bg-gray-100 border-gray-200'\n      case 'draft':\n        return 'text-yellow-600 bg-yellow-100 border-yellow-200'\n      default:\n        return 'text-gray-600 bg-gray-100 border-gray-200'\n    }\n  }\n\n  const getTermTypeIcon = type => {\n    switch (type) {\n      case 'term1':\n        return '1Ô∏è‚É£'\n      case 'term2':\n        return '2Ô∏è‚É£'\n      case 'annual':\n        return 'üìÖ'\n      case 'half_yearly':\n        return 'üìä'\n      default:\n        return 'üìö'\n    }\n  }\n\n  return (\n    <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"text-2xl\">{getTermTypeIcon(term.type)}</div>\n          <div>\n            <h3 className=\"text-lg font-semibold\">{term.name}</h3>\n            <p className=\"text-sm text-gray-600\">{term.academicYear}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span\n            className={`px-3 py-1 rounded-full text-sm font-medium border ${getStatusColor(term.status)}`}\n          >\n            {term.status.charAt(0).toUpperCase() + term.status.slice(1)}\n          </span>\n          {term.isDefault && (\n            <span className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs font-medium\">\n              Default\n            </span>\n          )}\n        </div>\n      </div>\n\n      <div className=\"space-y-3 mb-4\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-500\">Start Date:</span>\n            <div className=\"font-medium\">\n              {new Date(term.startDate).toLocaleDateString()}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">End Date:</span>\n            <div className=\"font-medium\">\n              {new Date(term.endDate).toLocaleDateString()}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Classes:</span>\n            <div className=\"font-medium\">\n              {term.applicableClasses?.length || 0} classes\n            </div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Subjects:</span>\n            <div className=\"font-medium\">\n              {term.subjects?.length || 0} subjects\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t pt-3\">\n          <div className=\"text-sm text-gray-600 mb-2\">Exam Schedule:</div>\n          <div className=\"grid grid-cols-2 gap-2 text-xs\">\n            <div className=\"flex justify-between\">\n              <span>Unit Tests:</span>\n              <span className=\"font-medium\">\n                {term.examSchedule?.unitTests || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Term Exams:</span>\n              <span className=\"font-medium\">\n                {term.examSchedule?.termExams || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Practicals:</span>\n              <span className=\"font-medium\">\n                {term.examSchedule?.practicals || 0}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Projects:</span>\n              <span className=\"font-medium\">\n                {term.examSchedule?.projects || 0}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {term.gradingPattern && (\n          <div className=\"border-t pt-3\">\n            <div className=\"text-sm text-gray-600 mb-2\">Grading Pattern:</div>\n            <div className=\"text-xs\">\n              <span className=\"font-medium\">{term.gradingPattern.name}</span>\n              <span className=\"text-gray-500 ml-2\">\n                ({term.gradingPattern.scale})\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"text-xs text-gray-500\">\n          Created: {new Date(term.createdAt).toLocaleDateString()}\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onViewDetails(term)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"View Details\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onEdit(term)}\n            className=\"p-1 text-gray-400 hover:text-green-600\"\n            title=\"Edit\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          {term.status !== 'active' && (\n            <button\n              onClick={() => onActivate(term)}\n              className=\"p-1 text-gray-400 hover:text-blue-600\"\n              title=\"Activate\"\n            >\n              <CheckCircle className=\"w-4 h-4\" />\n            </button>\n          )}\n          <button\n            onClick={() => onDelete(term)}\n            className=\"p-1 text-gray-400 hover:text-red-600\"\n            title=\"Delete\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst TermDialog = ({ term, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    name: term?.name || '',\n    type: term?.type || 'term1',\n    academicYear: term?.academicYear || '2024-25',\n    startDate: term?.startDate || '',\n    endDate: term?.endDate || '',\n    description: term?.description || '',\n    status: term?.status || 'draft',\n    isDefault: term?.isDefault || false,\n    applicableClasses: term?.applicableClasses || [],\n    subjects: term?.subjects || [],\n    examSchedule: term?.examSchedule || {\n      unitTests: 2,\n      termExams: 1,\n      practicals: 1,\n      projects: 1,\n    },\n    gradingPatternId: term?.gradingPatternId || '',\n    weightages: term?.weightages || {\n      unitTest: 10,\n      termExam: 80,\n      practical: 5,\n      project: 5,\n    },\n  })\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => termApi.getClasses(),\n  })\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'all'],\n    queryFn: () => termApi.getSubjects(),\n  })\n\n  const { data: gradingPatternsData } = useQuery({\n    queryKey: ['grading-patterns', 'all'],\n    queryFn: () => termApi.getGradingPatterns(),\n  })\n\n  const handleSave = () => {\n    onSave(term?.id, formData)\n    onClose()\n  }\n\n  const toggleClass = classId => {\n    setFormData(prev => ({\n      ...prev,\n      applicableClasses: prev.applicableClasses.includes(classId)\n        ? prev.applicableClasses.filter(id => id !== classId)\n        : [...prev.applicableClasses, classId],\n    }))\n  }\n\n  const toggleSubject = subjectId => {\n    setFormData(prev => ({\n      ...prev,\n      subjects: prev.subjects.includes(subjectId)\n        ? prev.subjects.filter(id => id !== subjectId)\n        : [...prev.subjects, subjectId],\n    }))\n  }\n\n  const updateWeightage = (key, value) => {\n    setFormData(prev => ({\n      ...prev,\n      weightages: {\n        ...prev.weightages,\n        [key]: parseInt(value) || 0,\n      },\n    }))\n  }\n\n  const updateExamSchedule = (key, value) => {\n    setFormData(prev => ({\n      ...prev,\n      examSchedule: {\n        ...prev.examSchedule,\n        [key]: parseInt(value) || 0,\n      },\n    }))\n  }\n\n  const totalWeightage = Object.values(formData.weightages).reduce(\n    (sum, val) => sum + val,\n    0,\n  )\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title={term ? 'Edit Term' : 'Create New Term'}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Term Name *\"\n            value={formData.name}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, name: e.target.value }))\n            }\n            placeholder=\"e.g., Term 1 Examination\"\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Term Type *\n            </label>\n            <select\n              value={formData.type}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, type: e.target.value }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"term1\">Term 1</option>\n              <option value=\"term2\">Term 2</option>\n              <option value=\"half_yearly\">Half Yearly</option>\n              <option value=\"annual\">Annual</option>\n            </select>\n          </div>\n          <Input\n            label=\"Academic Year *\"\n            value={formData.academicYear}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, academicYear: e.target.value }))\n            }\n            placeholder=\"2024-25\"\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Status</label>\n            <select\n              value={formData.status}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, status: e.target.value }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"draft\">Draft</option>\n              <option value=\"upcoming\">Upcoming</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n          <Input\n            label=\"Start Date *\"\n            type=\"date\"\n            value={formData.startDate}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, startDate: e.target.value }))\n            }\n          />\n          <Input\n            label=\"End Date *\"\n            type=\"date\"\n            value={formData.endDate}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, endDate: e.target.value }))\n            }\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Description</label>\n          <textarea\n            value={formData.description}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, description: e.target.value }))\n            }\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Term description and objectives...\"\n          />\n        </div>\n\n        {/* Applicable Classes */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">\n            Applicable Classes\n          </label>\n          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(classesData?.data) &&\n              classesData.data.map(cls => (\n                <label key={cls.id} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.applicableClasses.includes(cls.id)}\n                    onChange={() => toggleClass(cls.id)}\n                    className=\"rounded\"\n                  />\n                  <span className=\"text-sm\">{cls.name}</span>\n                </label>\n              ))}\n          </div>\n        </div>\n\n        {/* Subjects */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Subjects</label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(subjectsData?.data) &&\n              subjectsData.data.map(subject => (\n                <label key={subject.id} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.subjects.includes(subject.id)}\n                    onChange={() => toggleSubject(subject.id)}\n                    className=\"rounded\"\n                  />\n                  <span className=\"text-sm\">{subject.name}</span>\n                </label>\n              ))}\n          </div>\n        </div>\n\n        {/* Exam Schedule */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Exam Schedule</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <Input\n              label=\"Unit Tests\"\n              type=\"number\"\n              value={formData.examSchedule.unitTests}\n              onChange={e => updateExamSchedule('unitTests', e.target.value)}\n              min=\"0\"\n              size=\"sm\"\n            />\n            <Input\n              label=\"Term Exams\"\n              type=\"number\"\n              value={formData.examSchedule.termExams}\n              onChange={e => updateExamSchedule('termExams', e.target.value)}\n              min=\"0\"\n              size=\"sm\"\n            />\n            <Input\n              label=\"Practicals\"\n              type=\"number\"\n              value={formData.examSchedule.practicals}\n              onChange={e => updateExamSchedule('practicals', e.target.value)}\n              min=\"0\"\n              size=\"sm\"\n            />\n            <Input\n              label=\"Projects\"\n              type=\"number\"\n              value={formData.examSchedule.projects}\n              onChange={e => updateExamSchedule('projects', e.target.value)}\n              min=\"0\"\n              size=\"sm\"\n            />\n          </div>\n        </div>\n\n        {/* Grading Pattern */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">\n            Grading Pattern\n          </label>\n          <select\n            value={formData.gradingPatternId}\n            onChange={e =>\n              setFormData(prev => ({\n                ...prev,\n                gradingPatternId: e.target.value,\n              }))\n            }\n            className=\"w-full border rounded-lg px-3 py-2\"\n          >\n            <option value=\"\">Select Grading Pattern</option>\n            {gradingPatternsData?.data?.map(pattern => (\n              <option key={pattern.id} value={pattern.id}>\n                {pattern.name} ({pattern.scale})\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Weightages */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Assessment Weightages</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <Input\n              label=\"Unit Test (%)\"\n              type=\"number\"\n              value={formData.weightages.unitTest}\n              onChange={e => updateWeightage('unitTest', e.target.value)}\n              min=\"0\"\n              max=\"100\"\n              size=\"sm\"\n            />\n            <Input\n              label=\"Term Exam (%)\"\n              type=\"number\"\n              value={formData.weightages.termExam}\n              onChange={e => updateWeightage('termExam', e.target.value)}\n              min=\"0\"\n              max=\"100\"\n              size=\"sm\"\n            />\n            <Input\n              label=\"Practical (%)\"\n              type=\"number\"\n              value={formData.weightages.practical}\n              onChange={e => updateWeightage('practical', e.target.value)}\n              min=\"0\"\n              max=\"100\"\n              size=\"sm\"\n            />\n            <Input\n              label=\"Project (%)\"\n              type=\"number\"\n              value={formData.weightages.project}\n              onChange={e => updateWeightage('project', e.target.value)}\n              min=\"0\"\n              max=\"100\"\n              size=\"sm\"\n            />\n          </div>\n          <div className=\"mt-2 text-sm\">\n            <span\n              className={`font-medium ${totalWeightage === 100 ? 'text-green-600' : 'text-red-600'}`}\n            >\n              Total: {totalWeightage}%\n            </span>\n            {totalWeightage !== 100 && (\n              <span className=\"text-red-600 ml-2\">(Must equal 100%)</span>\n            )}\n          </div>\n        </div>\n\n        {/* Options */}\n        <div className=\"flex items-center gap-4\">\n          <label className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              checked={formData.isDefault}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, isDefault: e.target.checked }))\n              }\n              className=\"rounded\"\n            />\n            <span className=\"text-sm font-medium\">Set as default term</span>\n          </label>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!formData.name.trim() || totalWeightage !== 100}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <CheckCircle className=\"w-4 h-4\" />\n            {term ? 'Update Term' : 'Create Term'}\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst TermDetailsDialog = ({ term, open, onClose }) => {\n  if (!term) return null\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title={`${term.name} - Details`}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6\">\n        {/* Basic Info */}\n        <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Term Type\n            </label>\n            <p className=\"text-sm capitalize\">{term.type.replace('_', ' ')}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Academic Year\n            </label>\n            <p className=\"text-sm\">{term.academicYear}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Duration\n            </label>\n            <p className=\"text-sm\">\n              {new Date(term.startDate).toLocaleDateString()} -{' '}\n              {new Date(term.endDate).toLocaleDateString()}\n            </p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Status\n            </label>\n            <p className=\"text-sm capitalize\">{term.status}</p>\n          </div>\n        </div>\n\n        {/* Description */}\n        {term.description && (\n          <div>\n            <h3 className=\"font-medium mb-2\">Description</h3>\n            <p className=\"text-sm bg-gray-50 p-3 rounded\">{term.description}</p>\n          </div>\n        )}\n\n        {/* Classes and Subjects */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h3 className=\"font-medium mb-2\">Applicable Classes</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {term.applicableClasses?.map(classId => (\n                <span\n                  key={classId}\n                  className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm\"\n                >\n                  Class {classId}\n                </span>\n              ))}\n            </div>\n          </div>\n          <div>\n            <h3 className=\"font-medium mb-2\">Subjects</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {term.subjects?.map(subjectId => (\n                <span\n                  key={subjectId}\n                  className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-sm\"\n                >\n                  {subjectId}\n                </span>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Exam Schedule */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Exam Schedule</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center p-3 bg-blue-50 rounded\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {term.examSchedule?.unitTests || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Unit Tests</div>\n            </div>\n            <div className=\"text-center p-3 bg-green-50 rounded\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {term.examSchedule?.termExams || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Term Exams</div>\n            </div>\n            <div className=\"text-center p-3 bg-yellow-50 rounded\">\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {term.examSchedule?.practicals || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Practicals</div>\n            </div>\n            <div className=\"text-center p-3 bg-purple-50 rounded\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {term.examSchedule?.projects || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Projects</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Weightages */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Assessment Weightages</h3>\n          <div className=\"space-y-2\">\n            {Array.isArray(Object.entries(term.weightages || {})) &&\n              Object.entries(term.weightages || {}).map(([key, value]) => (\n                <div key={key} className=\"flex justify-between items-center\">\n                  <span className=\"text-sm capitalize\">\n                    {key.replace(/([A-Z])/g, ' $1')}\n                  </span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                      <div\n                        className=\"bg-blue-600 h-2 rounded-full\"\n                        style={{ width: `${value}%` }}\n                      />\n                    </div>\n                    <span className=\"text-sm font-medium w-8\">{value}%</span>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst Term = () => {\n  const [selectedTerm, setSelectedTerm] = useState(null)\n  const [showTermDialog, setShowTermDialog] = useState(false)\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n  const [filterStatus, setFilterStatus] = useState('all')\n  const [filterType, setFilterType] = useState('all')\n\n  const queryClient = useQueryClient()\n\n  const { data: termsData, isLoading } = useQuery({\n    queryKey: ['terms', 'all'],\n    queryFn: () => termApi.getTerms(),\n  })\n\n  const saveTermMutation = useMutation({\n    mutationFn: ({ id, data }) =>\n      id ? termApi.updateTerm(id, data) : termApi.createTerm(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['terms'])\n      setShowTermDialog(false)\n      setSelectedTerm(null)\n    },\n  })\n\n  const deleteTermMutation = useMutation({\n    mutationFn: termApi.deleteTerm,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['terms'])\n    },\n  })\n\n  const activateTermMutation = useMutation({\n    mutationFn: termApi.activateTerm,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['terms'])\n    },\n  })\n\n  const handleEditTerm = term => {\n    setSelectedTerm(term)\n    setShowTermDialog(true)\n  }\n\n  const handleDeleteTerm = term => {\n    if (confirm(`Are you sure you want to delete \"${term.name}\"?`)) {\n      deleteTermMutation.mutate(term.id)\n    }\n  }\n\n  const handleActivateTerm = term => {\n    if (\n      confirm(\n        `Are you sure you want to activate \"${term.name}\"? This will deactivate other active terms.`,\n      )\n    ) {\n      activateTermMutation.mutate(term.id)\n    }\n  }\n\n  const handleSaveTerm = (id, data) => {\n    saveTermMutation.mutate({ id, data })\n  }\n\n  const handleAddTerm = () => {\n    setSelectedTerm(null)\n    setShowTermDialog(true)\n  }\n\n  const handleViewDetails = term => {\n    setSelectedTerm(term)\n    setShowDetailsDialog(true)\n  }\n\n  const filteredTerms =\n    termsData?.data?.filter(term => {\n      const matchesStatus =\n        filterStatus === 'all' || term.status === filterStatus\n      const matchesType = filterType === 'all' || term.type === filterType\n      return matchesStatus && matchesType\n    }) || []\n\n  const getStatistics = () => {\n    const terms = termsData?.data || []\n    return {\n      total: terms.length,\n      active: terms.filter(t => t.status === 'active').length,\n      upcoming: terms.filter(t => t.status === 'upcoming').length,\n      completed: terms.filter(t => t.status === 'completed').length,\n    }\n  }\n\n  const stats = getStatistics()\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Academic Terms</h1>\n        <button\n          onClick={handleAddTerm}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Create Term\n        </button>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <BookOpen className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.total}</p>\n              <p className=\"text-sm text-gray-600\">Total Terms</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.active}</p>\n              <p className=\"text-sm text-gray-600\">Active</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.upcoming}</p>\n              <p className=\"text-sm text-gray-600\">Upcoming</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Award className=\"w-8 h-8 text-gray-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.completed}</p>\n              <p className=\"text-sm text-gray-600\">Completed</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Filter by Status\n            </label>\n            <select\n              value={filterStatus}\n              onChange={e => setFilterStatus(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"draft\">Draft</option>\n              <option value=\"upcoming\">Upcoming</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Filter by Type\n            </label>\n            <select\n              value={filterType}\n              onChange={e => setFilterType(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Types</option>\n              <option value=\"term1\">Term 1</option>\n              <option value=\"term2\">Term 2</option>\n              <option value=\"half_yearly\">Half Yearly</option>\n              <option value=\"annual\">Annual</option>\n            </select>\n          </div>\n          <div className=\"flex items-end\">\n            <div className=\"text-sm text-gray-500\">\n              Showing {filteredTerms.length} of {termsData?.data?.length || 0}{' '}\n              terms\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Terms List */}\n      <div className=\"space-y-4\">\n        {filteredTerms.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n            <BookOpen className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              No Terms Found\n            </h3>\n            <p className=\"text-gray-500 mb-4\">\n              {termsData?.data?.length === 0\n                ? 'Create your first academic term to get started.'\n                : 'No terms match your current filters.'}\n            </p>\n            {termsData?.data?.length === 0 && (\n              <button\n                onClick={handleAddTerm}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n              >\n                Create Term\n              </button>\n            )}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {Array.isArray(filteredTerms) &&\n              filteredTerms.map(term => (\n                <TermCard\n                  key={term.id}\n                  term={term}\n                  onEdit={handleEditTerm}\n                  onDelete={handleDeleteTerm}\n                  onActivate={handleActivateTerm}\n                  onViewDetails={handleViewDetails}\n                />\n              ))}\n          </div>\n        )}\n      </div>\n\n      {/* Term Dialog */}\n      <TermDialog\n        term={selectedTerm}\n        open={showTermDialog}\n        onClose={() => {\n          setShowTermDialog(false)\n          setSelectedTerm(null)\n        }}\n        onSave={handleSaveTerm}\n      />\n\n      {/* Details Dialog */}\n      <TermDetailsDialog\n        term={selectedTerm}\n        open={showDetailsDialog}\n        onClose={() => setShowDetailsDialog(false)}\n      />\n    </div>\n  )\n}\n\nexport default Term\n"
        }
    ]
}