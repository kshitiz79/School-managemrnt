{
    "sourceFile": "src/pages/term/ObservationParameter.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925599,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Target,\n  Plus,\n  Edit,\n  Trash2,\n  Save,\n  X,\n  BookOpen,\n  Users,\n  Star,\n  Award,\n  CheckCircle,\n  Settings,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { observationApi } from '../../lib/api/observation'\n\nconst ParameterCard = ({ parameter, onEdit, onDelete }) => {\n  const getCategoryColor = category => {\n    switch (category) {\n      case 'academic':\n        return 'text-blue-600 bg-blue-100 border-blue-200'\n      case 'social':\n        return 'text-green-600 bg-green-100 border-green-200'\n      case 'emotional':\n        return 'text-purple-600 bg-purple-100 border-purple-200'\n      case 'physical':\n        return 'text-orange-600 bg-orange-100 border-orange-200'\n      case 'creative':\n        return 'text-pink-600 bg-pink-100 border-pink-200'\n      default:\n        return 'text-gray-600 bg-gray-100 border-gray-200'\n    }\n  }\n\n  const getSubjectIcon = subject => {\n    switch (subject) {\n      case 'mathematics':\n        return '🔢'\n      case 'english':\n        return '📚'\n      case 'science':\n        return '🔬'\n      case 'social':\n        return '🌍'\n      case 'hindi':\n        return '🇮🇳'\n      case 'art':\n        return '🎨'\n      case 'pe':\n        return '⚽'\n      default:\n        return '📖'\n    }\n  }\n\n  return (\n    <div className=\"bg-white border rounded-lg p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-3\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"text-2xl\">{getSubjectIcon(parameter.subjectId)}</div>\n          <div>\n            <h3 className=\"font-medium\">{parameter.name}</h3>\n            <p className=\"text-sm text-gray-600\">{parameter.description}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span\n            className={`px-2 py-1 rounded-full text-xs font-medium border ${getCategoryColor(parameter.category)}`}\n          >\n            {parameter.category.toUpperCase()}\n          </span>\n          <button\n            onClick={() => onEdit(parameter)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDelete(parameter)}\n            className=\"p-1 text-gray-400 hover:text-red-600\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-500\">Subject:</span>\n          <span className=\"font-medium\">{parameter.subjectName}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-500\">Classes:</span>\n          <span className=\"text-xs text-gray-600\">\n            {parameter.applicableClasses?.join(', ') || 'All'}\n          </span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-500\">Weight:</span>\n          <span className=\"font-medium\">{parameter.weight}%</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-500\">Status:</span>\n          <span\n            className={`text-xs px-2 py-1 rounded ${\n              parameter.isActive\n                ? 'bg-green-100 text-green-800'\n                : 'bg-gray-100 text-gray-800'\n            }`}\n          >\n            {parameter.isActive ? 'Active' : 'Inactive'}\n          </span>\n        </div>\n      </div>\n\n      {parameter.rubric && parameter.rubric.length > 0 && (\n        <div className=\"mt-3 pt-3 border-t\">\n          <div className=\"text-xs text-gray-500 mb-1\">Grading Rubric:</div>\n          <div className=\"flex gap-1\">\n            {parameter.rubric.slice(0, 4).map((grade, index) => (\n              <div\n                key={index}\n                className=\"w-6 h-6 rounded text-xs flex items-center justify-center font-medium bg-gray-100 text-gray-700\"\n                title={`${grade.grade}: ${grade.description}`}\n              >\n                {grade.grade}\n              </div>\n            ))}\n            {parameter.rubric.length > 4 && (\n              <div className=\"w-6 h-6 rounded text-xs flex items-center justify-center bg-gray-100 text-gray-600\">\n                +{parameter.rubric.length - 4}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst ParameterDialog = ({ parameter, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    name: parameter?.name || '',\n    description: parameter?.description || '',\n    category: parameter?.category || 'academic',\n    subjectId: parameter?.subjectId || '',\n    weight: parameter?.weight || 10,\n    isActive: parameter?.isActive ?? true,\n    applicableClasses: parameter?.applicableClasses || [],\n    rubric: parameter?.rubric || [\n      { grade: 'A+', description: 'Outstanding', minScore: 90 },\n      { grade: 'A', description: 'Excellent', minScore: 80 },\n      { grade: 'B+', description: 'Very Good', minScore: 70 },\n      { grade: 'B', description: 'Good', minScore: 60 },\n      { grade: 'C+', description: 'Satisfactory', minScore: 50 },\n      { grade: 'C', description: 'Acceptable', minScore: 40 },\n      { grade: 'D', description: 'Needs Improvement', minScore: 30 },\n      { grade: 'E', description: 'Unsatisfactory', minScore: 0 },\n    ],\n  })\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'all'],\n    queryFn: () => observationApi.getSubjects(),\n  })\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => observationApi.getClasses(),\n  })\n\n  const handleSave = () => {\n    onSave(parameter?.id, formData)\n    onClose()\n  }\n\n  const updateRubric = (index, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      rubric: prev.rubric.map((item, i) =>\n        i === index ? { ...item, [field]: value } : item\n      ),\n    }))\n  }\n\n  const toggleClass = classId => {\n    setFormData(prev => ({\n      ...prev,\n      applicableClasses: prev.applicableClasses.includes(classId)\n        ? prev.applicableClasses.filter(id => id !== classId)\n        : [...prev.applicableClasses, classId],\n    }))\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title={parameter ? 'Edit Parameter' : 'Add Parameter'}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Parameter Name *\"\n            value={formData.name}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, name: e.target.value }))\n            }\n            placeholder=\"e.g., Reading Comprehension\"\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Category *</label>\n            <select\n              value={formData.category}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, category: e.target.value }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"academic\">Academic</option>\n              <option value=\"social\">Social & Emotional</option>\n              <option value=\"emotional\">Emotional Development</option>\n              <option value=\"physical\">Physical Development</option>\n              <option value=\"creative\">Creative Expression</option>\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Description</label>\n          <textarea\n            value={formData.description}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, description: e.target.value }))\n            }\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Describe what this parameter measures...\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Subject *</label>\n            <select\n              value={formData.subjectId}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, subjectId: e.target.value }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">Select Subject</option>\n              {Array.isArray(subjectsData?.data) &&\n                subjectsData.data.map(subject => (\n                  <option key={subject.id} value={subject.id}>\n                    {subject.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n          <Input\n            label=\"Weight (%)\"\n            type=\"number\"\n            value={formData.weight}\n            onChange={e =>\n              setFormData(prev => ({\n                ...prev,\n                weight: parseInt(e.target.value) || 0,\n              }))\n            }\n            placeholder=\"10\"\n            min=\"1\"\n            max=\"100\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">\n            Applicable Classes\n          </label>\n          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2\">\n            {Array.isArray(classesData?.data) &&\n              classesData.data.map(cls => (\n                <label key={cls.id} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.applicableClasses.includes(cls.id)}\n                    onChange={() => toggleClass(cls.id)}\n                    className=\"rounded\"\n                  />\n                  <span className=\"text-sm\">{cls.name}</span>\n                </label>\n              ))}\n          </div>\n          {formData.applicableClasses.length === 0 && (\n            <p className=\"text-xs text-gray-500 mt-1\">\n              No classes selected (applies to all)\n            </p>\n          )}\n        </div>\n\n        <div>\n          <h3 className=\"font-medium mb-4\">Grading Rubric</h3>\n          <div className=\"space-y-3\">\n            {Array.isArray(formData.rubric) &&\n              formData.rubric.map((item, index) => (\n                <div\n                  key={index}\n                  className=\"grid grid-cols-4 gap-3 items-center p-3 border rounded-lg\"\n                >\n                  <Input\n                    label=\"Grade\"\n                    value={item.grade}\n                    onChange={e => updateRubric(index, 'grade', e.target.value)}\n                    size=\"sm\"\n                  />\n                  <Input\n                    label=\"Description\"\n                    value={item.description}\n                    onChange={e =>\n                      updateRubric(index, 'description', e.target.value)\n                    }\n                    size=\"sm\"\n                  />\n                  <Input\n                    label=\"Min Score\"\n                    type=\"number\"\n                    value={item.minScore}\n                    onChange={e =>\n                      updateRubric(\n                        index,\n                        'minScore',\n                        parseInt(e.target.value) || 0,\n                      )\n                    }\n                    size=\"sm\"\n                    min=\"0\"\n                    max=\"100\"\n                  />\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <input\n                        type=\"checkbox\"\n                        checked={formData.isActive}\n                        onChange={e =>\n                          setFormData(prev => ({\n                            ...prev,\n                            isActive: e.target.checked,\n                          }))\n                        }\n                        className=\"rounded\"\n                      />\n                      <span className=\"text-sm\">Active</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!formData.name.trim() || !formData.subjectId}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            Save Parameter\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst ObservationParameter = () => {\n  const [activeTab, setActiveTab] = useState('all')\n  const [selectedParameter, setSelectedParameter] = useState(null)\n  const [showParameterDialog, setShowParameterDialog] = useState(false)\n  const [searchTerm, setSearchTerm] = useState('')\n\n  const queryClient = useQueryClient()\n\n  const { data: parametersData, isLoading } = useQuery({\n    queryKey: ['observation', 'parameters'],\n    queryFn: () => observationApi.getParameters(),\n  })\n\n  const saveParameterMutation = useMutation({\n    mutationFn: ({ id, data }) =>\n      id\n        ? observationApi.updateParameter(id, data)\n        : observationApi.createParameter(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['observation', 'parameters'])\n      setShowParameterDialog(false)\n      setSelectedParameter(null)\n    },\n  })\n\n  const deleteParameterMutation = useMutation({\n    mutationFn: observationApi.deleteParameter,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['observation', 'parameters'])\n    },\n  })\n\n  const handleEditParameter = parameter => {\n    setSelectedParameter(parameter)\n    setShowParameterDialog(true)\n  }\n\n  const handleDeleteParameter = parameter => {\n    if (confirm(`Are you sure you want to delete \"${parameter.name}\"?`)) {\n      deleteParameterMutation.mutate(parameter.id)\n    }\n  }\n\n  const handleSaveParameter = (id, data) => {\n    saveParameterMutation.mutate({ id, data })\n  }\n\n  const handleAddParameter = () => {\n    setSelectedParameter(null)\n    setShowParameterDialog(true)\n  }\n\n  const filteredParameters =\n    parametersData?.data?.filter(param => {\n      const matchesSearch =\n        param.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        param.description.toLowerCase().includes(searchTerm.toLowerCase())\n      const matchesTab = activeTab === 'all' || param.category === activeTab\n\n      return matchesSearch && matchesTab\n    }) || []\n\n  const getTabCounts = () => {\n    const parameters = parametersData?.data || []\n    return {\n      all: parameters.length,\n      academic: parameters.filter(p => p.category === 'academic').length,\n      social: parameters.filter(p => p.category === 'social').length,\n      emotional: parameters.filter(p => p.category === 'emotional').length,\n      physical: parameters.filter(p => p.category === 'physical').length,\n      creative: parameters.filter(p => p.category === 'creative').length,\n    }\n  }\n\n  const tabCounts = getTabCounts()\n\n  const tabs = [\n    { id: 'all', label: 'All Parameters', icon: Target, count: tabCounts.all },\n    {\n      id: 'academic',\n      label: 'Academic',\n      icon: BookOpen,\n      count: tabCounts.academic,\n    },\n    { id: 'social', label: 'Social', icon: Users, count: tabCounts.social },\n    {\n      id: 'emotional',\n      label: 'Emotional',\n      icon: Star,\n      count: tabCounts.emotional,\n    },\n    {\n      id: 'physical',\n      label: 'Physical',\n      icon: Award,\n      count: tabCounts.physical,\n    },\n    {\n      id: 'creative',\n      label: 'Creative',\n      icon: CheckCircle,\n      count: tabCounts.creative,\n    },\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Observation Parameters</h1>\n        <button\n          onClick={handleAddParameter}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Parameter\n        </button>\n      </div>\n\n      {/* Search */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <div className=\"relative max-w-md\">\n          <input\n            type=\"text\"\n            placeholder=\"Search parameters...\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            className=\"w-full pl-4 pr-4 py-2 border rounded-lg\"\n          />\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"border-b\">\n          <nav className=\"flex overflow-x-auto\">\n            {Array.isArray(tabs) &&\n              tabs.map(tab => {\n                const Icon = tab.icon\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`flex items-center gap-2 px-6 py-4 font-medium whitespace-nowrap ${\n                      activeTab === tab.id\n                        ? 'border-b-2 border-blue-500 text-blue-600'\n                        : 'text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {tab.label}\n                    <span className=\"bg-gray-100 text-gray-600 px-2 py-1 rounded-full text-xs\">\n                      {tab.count}\n                    </span>\n                  </button>\n                )\n              })}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {filteredParameters.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Target className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? 'No Parameters Found' : 'No Parameters'}\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                {searchTerm\n                  ? 'No parameters match your search criteria.'\n                  : 'Create your first observation parameter to get started.'}\n              </p>\n              {!searchTerm && (\n                <button\n                  onClick={handleAddParameter}\n                  className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n                >\n                  Add Parameter\n                </button>\n              )}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {Array.isArray(filteredParameters) &&\n                filteredParameters.map(parameter => (\n                  <ParameterCard\n                    key={parameter.id}\n                    parameter={parameter}\n                    onEdit={handleEditParameter}\n                    onDelete={handleDeleteParameter}\n                  />\n                ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Parameter Dialog */}\n      <ParameterDialog\n        parameter={selectedParameter}\n        open={showParameterDialog}\n        onClose={() => {\n          setShowParameterDialog(false)\n          setSelectedParameter(null)\n        }}\n        onSave={handleSaveParameter}\n      />\n    </div>\n  )\n}\n\nexport default ObservationParameter\n"
        }
    ]
}