{
    "sourceFile": "src/pages/term/Reports.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755990676746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755991029762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState } from 'react'\n-import React, { useState } from 'react'\n import { useQuery } from '@tanstack/react-query'\n import {\n   BarChart3,\n   PieChart,\n"
                },
                {
                    "date": 1755994925743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   Printer,\n   Mail,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { termReportsApi } from '../../lib/api/termReports'\n \n const ReportCard = ({ report, onGenerate, onView, onDownload }) => {\n"
                }
            ],
            "date": 1755990676746,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport React, { useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport {\n  BarChart3,\n  PieChart,\n  TrendingUp,\n  FileText,\n  Download,\n  Filter,\n  Calendar,\n  Users,\n  BookOpen,\n  Award,\n  Target,\n  Eye,\n  Settings,\n  Printer,\n  Mail,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport Dialog from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { termReportsApi } from '../../lib/api/termReports'\n\nconst ReportCard = ({ report, onGenerate, onView, onDownload }) => {\n  const getReportIcon = type => {\n    switch (type) {\n      case 'academic_performance':\n        return BookOpen\n      case 'attendance_summary':\n        return Users\n      case 'grade_distribution':\n        return BarChart3\n      case 'subject_analysis':\n        return Target\n      case 'student_progress':\n        return TrendingUp\n      case 'class_comparison':\n        return Award\n      default:\n        return FileText\n    }\n  }\n\n  const Icon = getReportIcon(report.type)\n\n  return (\n    <div className=\"bg-white border rounded-lg p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex items-start gap-4\">\n        <div className=\"p-3 bg-blue-100 rounded-lg\">\n          <Icon className=\"w-6 h-6 text-blue-600\" />\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"font-semibold text-lg mb-2\">{report.name}</h3>\n          <p className=\"text-gray-600 text-sm mb-4\">{report.description}</p>\n\n          <div className=\"space-y-2 mb-4\">\n            <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n              <span>Format: {report.formats.join(', ').toUpperCase()}</span>\n              <span>â€¢</span>\n              <span>Frequency: {report.frequency}</span>\n            </div>\n            {report.lastGenerated && (\n              <div className=\"text-sm text-gray-500\">\n                Last generated:{' '}\n                {new Date(report.lastGenerated).toLocaleDateString()}\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => onGenerate(report)}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm flex items-center gap-2\"\n            >\n              <FileText className=\"w-4 h-4\" />\n              Generate\n            </button>\n            {report.lastGenerated && (\n              <>\n                <button\n                  onClick={() => onView(report)}\n                  className=\"px-4 py-2 border rounded-lg hover:bg-gray-50 text-sm flex items-center gap-2\"\n                >\n                  <Eye className=\"w-4 h-4\" />\n                  View\n                </button>\n                <button\n                  onClick={() => onDownload(report)}\n                  className=\"px-4 py-2 border rounded-lg hover:bg-gray-50 text-sm flex items-center gap-2\"\n                >\n                  <Download className=\"w-4 h-4\" />\n                  Download\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst ReportGenerationDialog = ({ report, open, onClose, onGenerate }) => {\n  const [formData, setFormData] = useState({\n    termId: '',\n    classIds: [],\n    subjectIds: [],\n    format: 'pdf',\n    includeGraphs: true,\n    includeComparisons: true,\n    groupBy: 'class',\n    dateRange: {\n      startDate: '',\n      endDate: '',\n    },\n  })\n\n  const { data: termsData } = useQuery({\n    queryKey: ['terms', 'active'],\n    queryFn: () => termReportsApi.getActiveTerms(),\n    enabled: open,\n  })\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => termReportsApi.getClasses(),\n    enabled: open,\n  })\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'all'],\n    queryFn: () => termReportsApi.getSubjects(),\n    enabled: open,\n  })\n\n  const handleGenerate = () => {\n    onGenerate(report.id, formData)\n    onClose()\n  }\n\n  const toggleClass = classId => {\n    setFormData(prev => ({\n      ...prev,\n      classIds: prev.classIds.includes(classId)\n        ? prev.classIds.filter(id => id !== classId)\n        : [...prev.classIds, classId],\n    }))\n  }\n\n  const toggleSubject = subjectId => {\n    setFormData(prev => ({\n      ...prev,\n      subjectIds: prev.subjectIds.includes(subjectId)\n        ? prev.subjectIds.filter(id => id !== subjectId)\n        : [...prev.subjectIds, subjectId],\n    }))\n  }\n\n  if (!report) return null\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title={`Generate ${report.name}`}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6\">\n        {/* Basic Settings */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Term *</label>\n            <select\n              value={formData.termId}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, termId: e.target.value }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">Select Term</option>\n              {termsData?.data?.map(term => (\n                <option key={term.id} value={term.id}>\n                  {term.name} ({term.academicYear})\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Format</label>\n            <select\n              value={formData.format}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, format: e.target.value }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              {Array.isArray(report.formats) &&\n                report.formats.map(format => (\n                  <option key={format} value={format}>\n                    {format.toUpperCase()}\n                  </option>\n                ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Date Range */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Date Range (Optional)</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Input\n              label=\"Start Date\"\n              type=\"date\"\n              value={formData.dateRange.startDate}\n              onChange={e =>\n                setFormData(prev => ({\n                  ...prev,\n                  dateRange: { ...prev.dateRange, startDate: e.target.value },\n                }))\n              }\n            />\n            <Input\n              label=\"End Date\"\n              type=\"date\"\n              value={formData.dateRange.endDate}\n              onChange={e =>\n                setFormData(prev => ({\n                  ...prev,\n                  dateRange: { ...prev.dateRange, endDate: e.target.value },\n                }))\n              }\n            />\n          </div>\n        </div>\n\n        {/* Classes Selection */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">\n            Classes (Leave empty for all)\n          </label>\n          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(classesData?.data) &&\n              classesData.data.map(cls => (\n                <label key={cls.id} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.classIds.includes(cls.id)}\n                    onChange={() => toggleClass(cls.id)}\n                    className=\"rounded\"\n                  />\n                  <span className=\"text-sm\">{cls.name}</span>\n                </label>\n              ))}\n          </div>\n        </div>\n\n        {/* Subjects Selection */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">\n            Subjects (Leave empty for all)\n          </label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(subjectsData?.data) &&\n              subjectsData.data.map(subject => (\n                <label key={subject.id} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.subjectIds.includes(subject.id)}\n                    onChange={() => toggleSubject(subject.id)}\n                    className=\"rounded\"\n                  />\n                  <span className=\"text-sm\">{subject.name}</span>\n                </label>\n              ))}\n          </div>\n        </div>\n\n        {/* Report Options */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Report Options</h3>\n          <div className=\"space-y-3\">\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.includeGraphs}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    includeGraphs: e.target.checked,\n                  }))\n                }\n                className=\"rounded\"\n              />\n              <span className=\"text-sm\">Include graphs and charts</span>\n            </label>\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.includeComparisons}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    includeComparisons: e.target.checked,\n                  }))\n                }\n                className=\"rounded\"\n              />\n              <span className=\"text-sm\">Include comparative analysis</span>\n            </label>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Group By</label>\n              <select\n                value={formData.groupBy}\n                onChange={e =>\n                  setFormData(prev => ({ ...prev, groupBy: e.target.value }))\n                }\n                className=\"w-full border rounded-lg px-3 py-2 max-w-xs\"\n              >\n                <option value=\"class\">Class</option>\n                <option value=\"subject\">Subject</option>\n                <option value=\"student\">Student</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleGenerate}\n            disabled={!formData.termId}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <FileText className=\"w-4 h-4\" />\n            Generate Report\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst QuickStatsCard = ({ title, value, change, icon: Icon, color }) => {\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm text-gray-600\">{title}</p>\n          <p className=\"text-2xl font-bold mt-1\">{value}</p>\n          {change && (\n            <div\n              className={`flex items-center gap-1 mt-2 text-sm ${\n                change > 0 ? 'text-green-600' : 'text-red-600'\n              }`}\n            >\n              <TrendingUp className=\"w-4 h-4\" />\n              <span>{Math.abs(change)}% from last term</span>\n            </div>\n          )}\n        </div>\n        <Icon className={`w-8 h-8 ${color}`} />\n      </div>\n    </div>\n  )\n}\n\nconst RecentReportsTable = ({ reports, onView, onDownload }) => {\n  if (!reports || reports.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <FileText className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n        <p>No recent reports available</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"border-b\">\n            <th className=\"text-left py-3 px-4\">Report Name</th>\n            <th className=\"text-left py-3 px-4\">Type</th>\n            <th className=\"text-left py-3 px-4\">Generated</th>\n            <th className=\"text-left py-3 px-4\">Format</th>\n            <th className=\"text-left py-3 px-4\">Status</th>\n            <th className=\"text-center py-3 px-4\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.isArray(reports) &&\n            reports.map((report, index) => (\n              <tr key={index} className=\"border-b hover:bg-gray-50\">\n                <td className=\"py-3 px-4 font-medium\">{report.name}</td>\n                <td className=\"py-3 px-4 capitalize\">\n                  {report.type.replace('_', ' ')}\n                </td>\n                <td className=\"py-3 px-4\">\n                  {new Date(report.generatedAt).toLocaleDateString()}\n                </td>\n                <td className=\"py-3 px-4 uppercase\">{report.format}</td>\n                <td className=\"py-3 px-4\">\n                  <span\n                    className={`px-2 py-1 rounded-full text-xs font-medium ${\n                      report.status === 'completed'\n                        ? 'bg-green-100 text-green-800'\n                        : report.status === 'processing'\n                          ? 'bg-yellow-100 text-yellow-800'\n                          : 'bg-red-100 text-red-800'\n                    }`}\n                  >\n                    {report.status}\n                  </span>\n                </td>\n                <td className=\"py-3 px-4 text-center\">\n                  <div className=\"flex justify-center gap-2\">\n                    <button\n                      onClick={() => onView(report)}\n                      className=\"p-1 text-gray-400 hover:text-blue-600\"\n                      title=\"View\"\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </button>\n                    <button\n                      onClick={() => onDownload(report)}\n                      className=\"p-1 text-gray-400 hover:text-green-600\"\n                      title=\"Download\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nconst Reports = () => {\n  const [selectedReport, setSelectedReport] = useState(null)\n  const [showGenerationDialog, setShowGenerationDialog] = useState(false)\n  const [filterCategory, setFilterCategory] = useState('all')\n\n  const { data: reportsData, isLoading } = useQuery({\n    queryKey: ['term-reports', 'available'],\n    queryFn: () => termReportsApi.getAvailableReports(),\n  })\n\n  const { data: quickStatsData } = useQuery({\n    queryKey: ['term-reports', 'quick-stats'],\n    queryFn: () => termReportsApi.getQuickStats(),\n  })\n\n  const { data: recentReportsData } = useQuery({\n    queryKey: ['term-reports', 'recent'],\n    queryFn: () => termReportsApi.getRecentReports(),\n  })\n\n  const handleGenerateReport = report => {\n    setSelectedReport(report)\n    setShowGenerationDialog(true)\n  }\n\n  const handleViewReport = report => {\n    // Open report in new tab or modal\n    window.open(`/reports/${report.id}`, '_blank')\n  }\n\n  const handleDownloadReport = report => {\n    // Trigger download\n    const link = document.createElement('a')\n    link.href = report.downloadUrl\n    link.download = report.filename\n    link.click()\n  }\n\n  const handleConfirmGeneration = (reportId, options) => {\n    // API call to generate report\n    console.log('Generating report:', reportId, options)\n  }\n\n  const filteredReports =\n    reportsData?.data?.filter(report => {\n      if (filterCategory === 'all') return true\n      return report.category === filterCategory\n    }) || []\n\n  const reportCategories = [\n    { id: 'all', label: 'All Reports' },\n    { id: 'academic', label: 'Academic Performance' },\n    { id: 'attendance', label: 'Attendance' },\n    { id: 'behavioral', label: 'Behavioral' },\n    { id: 'administrative', label: 'Administrative' },\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Term Reports</h1>\n        <div className=\"flex gap-2\">\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Settings className=\"w-4 h-4\" />\n            Report Settings\n          </button>\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Calendar className=\"w-4 h-4\" />\n            Schedule Reports\n          </button>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <QuickStatsCard\n          title=\"Average Performance\"\n          value={quickStatsData?.data?.averagePerformance || '85.2%'}\n          change={2.3}\n          icon={TrendingUp}\n          color=\"text-green-600\"\n        />\n        <QuickStatsCard\n          title=\"Attendance Rate\"\n          value={quickStatsData?.data?.attendanceRate || '92.8%'}\n          change={-1.2}\n          icon={Users}\n          color=\"text-blue-600\"\n        />\n        <QuickStatsCard\n          title=\"Pass Rate\"\n          value={quickStatsData?.data?.passRate || '94.5%'}\n          change={3.1}\n          icon={Award}\n          color=\"text-purple-600\"\n        />\n        <QuickStatsCard\n          title=\"Reports Generated\"\n          value={quickStatsData?.data?.reportsGenerated || '156'}\n          change={12.5}\n          icon={FileText}\n          color=\"text-orange-600\"\n        />\n      </div>\n\n      {/* Report Categories Filter */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <div className=\"flex flex-wrap gap-2\">\n          {Array.isArray(reportCategories) &&\n            reportCategories.map(category => (\n              <button\n                key={category.id}\n                onClick={() => setFilterCategory(category.id)}\n                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                  filterCategory === category.id\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                {category.label}\n              </button>\n            ))}\n        </div>\n      </div>\n\n      {/* Available Reports */}\n      <div>\n        <h2 className=\"text-lg font-semibold mb-4\">Available Reports</h2>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {Array.isArray(filteredReports) &&\n            filteredReports.map(report => (\n              <ReportCard\n                key={report.id}\n                report={report}\n                onGenerate={handleGenerateReport}\n                onView={handleViewReport}\n                onDownload={handleDownloadReport}\n              />\n            ))}\n        </div>\n      </div>\n\n      {/* Recent Reports */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6 border-b\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-lg font-semibold\">Recent Reports</h2>\n            <button className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\">\n              View All\n            </button>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          <RecentReportsTable\n            reports={recentReportsData?.data}\n            onView={handleViewReport}\n            onDownload={handleDownloadReport}\n          />\n        </div>\n      </div>\n\n      {/* Report Generation Dialog */}\n      <ReportGenerationDialog\n        report={selectedReport}\n        open={showGenerationDialog}\n        onClose={() => setShowGenerationDialog(false)}\n        onGenerate={handleConfirmGeneration}\n      />\n    </div>\n  )\n}\n\nexport default Reports\n"
        }
    ]
}