{
    "sourceFile": "src/pages/term/DisableReason.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925599,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  UserX,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Search,\n  Filter,\n  Calendar,\n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  FileText,\n  User,\n  School,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { disableReasonApi } from '../../lib/api/disableReason'\n\nconst DisableReasonCard = ({ reason, onEdit, onDelete, onViewDetails }) => {\n  const getStatusColor = status => {\n    switch (status) {\n      case 'active':\n        return 'text-green-600 bg-green-100'\n      case 'resolved':\n        return 'text-blue-600 bg-blue-100'\n      case 'expired':\n        return 'text-gray-600 bg-gray-100'\n      default:\n        return 'text-yellow-600 bg-yellow-100'\n    }\n  }\n\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case 'low':\n        return 'text-green-600 bg-green-100 border-green-200'\n      case 'medium':\n        return 'text-yellow-600 bg-yellow-100 border-yellow-200'\n      case 'high':\n        return 'text-red-600 bg-red-100 border-red-200'\n      default:\n        return 'text-gray-600 bg-gray-100 border-gray-200'\n    }\n  }\n\n  const isExpired = reason.endDate && new Date(reason.endDate) < new Date()\n  const daysRemaining = reason.endDate\n    ? Math.ceil((new Date(reason.endDate) - new Date()) / (1000 * 60 * 60 * 24))\n    : null\n\n  return (\n    <div className=\"bg-white border rounded-lg p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-3\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center\">\n            <User className=\"w-5 h-5 text-gray-600\" />\n          </div>\n          <div>\n            <h3 className=\"font-medium\">{reason.studentName}</h3>\n            <p className=\"text-sm text-gray-500\">\n              {reason.className} - {reason.section} | Roll: {reason.rollNumber}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span\n            className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(reason.severity)}`}\n          >\n            {reason.severity.toUpperCase()}\n          </span>\n          <span\n            className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(reason.status)}`}\n          >\n            {reason.status.toUpperCase()}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"space-y-2 mb-4\">\n        <div>\n          <span className=\"text-sm font-medium text-gray-700\">Reason:</span>\n          <p className=\"text-sm text-gray-600 mt-1\">{reason.reason}</p>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-500\">Category:</span>\n            <div className=\"font-medium capitalize\">{reason.category}</div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Disabled By:</span>\n            <div className=\"font-medium\">{reason.disabledBy}</div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Start Date:</span>\n            <div className=\"font-medium\">\n              {new Date(reason.startDate).toLocaleDateString()}\n            </div>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">End Date:</span>\n            <div className=\"font-medium\">\n              {reason.endDate\n                ? new Date(reason.endDate).toLocaleDateString()\n                : 'Indefinite'}\n            </div>\n          </div>\n        </div>\n\n        {reason.endDate && (\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Clock className=\"w-4 h-4 text-gray-400\" />\n            <span\n              className={`${isExpired ? 'text-red-600' : daysRemaining <= 7 ? 'text-yellow-600' : 'text-green-600'}`}\n            >\n              {isExpired ? 'Expired' : `${daysRemaining} days remaining`}\n            </span>\n          </div>\n        )}\n\n        {reason.affectedAreas && reason.affectedAreas.length > 0 && (\n          <div>\n            <span className=\"text-sm text-gray-500\">Affected Areas:</span>\n            <div className=\"flex flex-wrap gap-1 mt-1\">\n              {Array.isArray(reason.affectedAreas) &&\n                reason.affectedAreas.map((area, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs\"\n                  >\n                    {area}\n                  </span>\n                ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"text-xs text-gray-500\">\n          Created: {new Date(reason.createdAt).toLocaleDateString()}\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onViewDetails(reason)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"View Details\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onEdit(reason)}\n            className=\"p-1 text-gray-400 hover:text-green-600\"\n            title=\"Edit\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDelete(reason)}\n            className=\"p-1 text-gray-400 hover:text-red-600\"\n            title=\"Delete\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst DisableReasonDialog = ({ reason, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    studentId: reason?.studentId || '',\n    category: reason?.category || 'academic',\n    severity: reason?.severity || 'medium',\n    reason: reason?.reason || '',\n    startDate: reason?.startDate || new Date().toISOString().split('T')[0],\n    endDate: reason?.endDate || '',\n    isIndefinite: reason?.isIndefinite || false,\n    affectedAreas: reason?.affectedAreas || [],\n    additionalNotes: reason?.additionalNotes || '',\n    requiresApproval: reason?.requiresApproval || false,\n    notifyParents: reason?.notifyParents || true,\n  })\n\n  const [selectedStudent, setSelectedStudent] = useState(null)\n  const [searchTerm, setSearchTerm] = useState('')\n\n  const { data: studentsData } = useQuery({\n    queryKey: ['students', 'search', searchTerm],\n    queryFn: () => disableReasonApi.searchStudents(searchTerm),\n    enabled: searchTerm.length > 2,\n  })\n\n  const handleSave = () => {\n    const data = {\n      ...formData,\n      studentId: selectedStudent?.id,\n      endDate: formData.isIndefinite ? null : formData.endDate,\n    }\n    onSave(reason?.id, data)\n    onClose()\n  }\n\n  const toggleAffectedArea = area => {\n    setFormData(prev => ({\n      ...prev,\n      affectedAreas: prev.affectedAreas.includes(area)\n        ? prev.affectedAreas.filter(a => a !== area)\n        : [...prev.affectedAreas, area],\n    }))\n  }\n\n  const affectedAreaOptions = [\n    'Exams',\n    'Assignments',\n    'Attendance',\n    'Library',\n    'Sports',\n    'Events',\n    'Certificates',\n    'Reports',\n    'Online Portal',\n    'Fee Payment',\n  ]\n\n  React.useEffect(() => {\n    if (reason?.studentId) {\n      // In real app, fetch student details\n      setSelectedStudent({\n        id: reason.studentId,\n        name: reason.studentName,\n        className: reason.className,\n        section: reason.section,\n        rollNumber: reason.rollNumber,\n      })\n    }\n  }, [reason])\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title={reason ? 'Edit Disable Reason' : 'Add Disable Reason'}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6\">\n        {/* Student Selection */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Student *</label>\n          {selectedStudent ? (\n            <div className=\"flex items-center justify-between p-3 border rounded-lg bg-blue-50\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n                  <User className=\"w-4 h-4 text-gray-600\" />\n                </div>\n                <div>\n                  <div className=\"font-medium\">{selectedStudent.name}</div>\n                  <div className=\"text-sm text-gray-500\">\n                    {selectedStudent.className} - {selectedStudent.section} |\n                    Roll: {selectedStudent.rollNumber}\n                  </div>\n                </div>\n              </div>\n              <button\n                onClick={() => setSelectedStudent(null)}\n                className=\"p-1 text-gray-400 hover:text-gray-600\"\n              >\n                <XCircle className=\"w-4 h-4\" />\n              </button>\n            </div>\n          ) : (\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search student by name or roll number...\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border rounded-lg\"\n              />\n\n              {searchTerm.length > 2 && studentsData?.data && (\n                <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n                  {Array.isArray(studentsData.data) &&\n                    studentsData.data.map(student => (\n                      <button\n                        key={student.id}\n                        onClick={() => {\n                          setSelectedStudent(student)\n                          setSearchTerm('')\n                        }}\n                        className=\"w-full p-3 text-left hover:bg-gray-50 flex items-center gap-3\"\n                      >\n                        <div className=\"w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center\">\n                          <User className=\"w-3 h-3 text-gray-600\" />\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-sm\">\n                            {student.name}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {student.className} - {student.section} | Roll:{' '}\n                            {student.rollNumber}\n                          </div>\n                        </div>\n                      </button>\n                    ))}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Category *</label>\n            <select\n              value={formData.category}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, category: e.target.value }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"academic\">Academic</option>\n              <option value=\"disciplinary\">Disciplinary</option>\n              <option value=\"medical\">Medical</option>\n              <option value=\"financial\">Financial</option>\n              <option value=\"administrative\">Administrative</option>\n              <option value=\"technical\">Technical</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Severity *</label>\n            <select\n              value={formData.severity}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, severity: e.target.value }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"low\">Low</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"high\">High</option>\n            </select>\n          </div>\n          <div className=\"flex items-center gap-4 mt-6\">\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.requiresApproval}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    requiresApproval: e.target.checked,\n                  }))\n                }\n                className=\"rounded\"\n              />\n              <span className=\"text-sm\">Requires Approval</span>\n            </label>\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.notifyParents}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    notifyParents: e.target.checked,\n                  }))\n                }\n                className=\"rounded\"\n              />\n              <span className=\"text-sm\">Notify Parents</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Reason */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Reason *</label>\n          <textarea\n            value={formData.reason}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, reason: e.target.value }))\n            }\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Provide detailed reason for disabling the student...\"\n          />\n        </div>\n\n        {/* Duration */}\n        <div>\n          <h3 className=\"font-medium mb-3\">Duration</h3>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Input\n                label=\"Start Date *\"\n                type=\"date\"\n                value={formData.startDate}\n                onChange={e =>\n                  setFormData(prev => ({ ...prev, startDate: e.target.value }))\n                }\n              />\n              <Input\n                label=\"End Date\"\n                type=\"date\"\n                value={formData.endDate}\n                onChange={e =>\n                  setFormData(prev => ({ ...prev, endDate: e.target.value }))\n                }\n                disabled={formData.isIndefinite}\n              />\n            </div>\n            <label className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                checked={formData.isIndefinite}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    isIndefinite: e.target.checked,\n                    endDate: e.target.checked ? '' : prev.endDate,\n                  }))\n                }\n                className=\"rounded\"\n              />\n              <span className=\"text-sm font-medium\">Indefinite duration</span>\n            </label>\n          </div>\n        </div>\n\n        {/* Affected Areas */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">\n            Affected Areas\n          </label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n            {Array.isArray(affectedAreaOptions) &&\n              affectedAreaOptions.map(area => (\n                <label key={area} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.affectedAreas.includes(area)}\n                    onChange={() => toggleAffectedArea(area)}\n                    className=\"rounded\"\n                  />\n                  <span className=\"text-sm\">{area}</span>\n                </label>\n              ))}\n          </div>\n        </div>\n\n        {/* Additional Notes */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">\n            Additional Notes\n          </label>\n          <textarea\n            value={formData.additionalNotes}\n            onChange={e =>\n              setFormData(prev => ({\n                ...prev,\n                additionalNotes: e.target.value,\n              }))\n            }\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Any additional information or special instructions...\"\n          />\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!selectedStudent || !formData.reason.trim()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <CheckCircle className=\"w-4 h-4\" />\n            {reason ? 'Update' : 'Create'} Disable Reason\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst DisableReasonDetailsDialog = ({ reason, open, onClose }) => {\n  if (!reason) return null\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title=\"Disable Reason Details\"\n      size=\"lg\"\n    >\n      <div className=\"space-y-6\">\n        {/* Student Info */}\n        <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg\">\n          <div className=\"w-12 h-12 rounded-full bg-gray-200 flex items-center justify-center\">\n            <User className=\"w-6 h-6 text-gray-600\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold\">{reason.studentName}</h3>\n            <p className=\"text-sm text-gray-600\">\n              {reason.className} - {reason.section} | Roll: {reason.rollNumber}\n            </p>\n          </div>\n        </div>\n\n        {/* Basic Details */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Category\n            </label>\n            <p className=\"text-sm capitalize\">{reason.category}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Severity\n            </label>\n            <p className=\"text-sm capitalize\">{reason.severity}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Status\n            </label>\n            <p className=\"text-sm capitalize\">{reason.status}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Disabled By\n            </label>\n            <p className=\"text-sm\">{reason.disabledBy}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Start Date\n            </label>\n            <p className=\"text-sm\">\n              {new Date(reason.startDate).toLocaleDateString()}\n            </p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              End Date\n            </label>\n            <p className=\"text-sm\">\n              {reason.endDate\n                ? new Date(reason.endDate).toLocaleDateString()\n                : 'Indefinite'}\n            </p>\n          </div>\n        </div>\n\n        {/* Reason */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Reason\n          </label>\n          <p className=\"text-sm bg-gray-50 p-3 rounded\">{reason.reason}</p>\n        </div>\n\n        {/* Affected Areas */}\n        {reason.affectedAreas && reason.affectedAreas.length > 0 && (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Affected Areas\n            </label>\n            <div className=\"flex flex-wrap gap-2\">\n              {Array.isArray(reason.affectedAreas) &&\n                reason.affectedAreas.map((area, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm\"\n                  >\n                    {area}\n                  </span>\n                ))}\n            </div>\n          </div>\n        )}\n\n        {/* Additional Notes */}\n        {reason.additionalNotes && (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Additional Notes\n            </label>\n            <p className=\"text-sm bg-gray-50 p-3 rounded\">\n              {reason.additionalNotes}\n            </p>\n          </div>\n        )}\n\n        {/* Timeline */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Timeline\n          </label>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n              <span>\n                Created on {new Date(reason.createdAt).toLocaleDateString()}\n              </span>\n            </div>\n            {reason.updatedAt && reason.updatedAt !== reason.createdAt && (\n              <div className=\"flex items-center gap-2 text-sm\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                <span>\n                  Last updated on{' '}\n                  {new Date(reason.updatedAt).toLocaleDateString()}\n                </span>\n              </div>\n            )}\n            {reason.endDate && new Date(reason.endDate) < new Date() && (\n              <div className=\"flex items-center gap-2 text-sm\">\n                <div className=\"w-2 h-2 bg-red-500 rounded-full\" />\n                <span>\n                  Expired on {new Date(reason.endDate).toLocaleDateString()}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst DisableReason = () => {\n  const [selectedReason, setSelectedReason] = useState(null)\n  const [showReasonDialog, setShowReasonDialog] = useState(false)\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [categoryFilter, setCategoryFilter] = useState('all')\n  const [statusFilter, setStatusFilter] = useState('all')\n  const [severityFilter, setSeverityFilter] = useState('all')\n\n  const queryClient = useQueryClient()\n\n  const { data: reasonsData, isLoading } = useQuery({\n    queryKey: [\n      'disable-reasons',\n      searchTerm,\n      categoryFilter,\n      statusFilter,\n      severityFilter,\n    ],\n    queryFn: () =>\n      disableReasonApi.getDisableReasons({\n        search: searchTerm,\n        category: categoryFilter,\n        status: statusFilter,\n        severity: severityFilter,\n      }),\n  })\n\n  const saveReasonMutation = useMutation({\n    mutationFn: ({ id, data }) =>\n      id\n        ? disableReasonApi.updateDisableReason(id, data)\n        : disableReasonApi.createDisableReason(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['disable-reasons'])\n      setShowReasonDialog(false)\n      setSelectedReason(null)\n    },\n  })\n\n  const deleteReasonMutation = useMutation({\n    mutationFn: disableReasonApi.deleteDisableReason,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['disable-reasons'])\n    },\n  })\n\n  const handleEditReason = reason => {\n    setSelectedReason(reason)\n    setShowReasonDialog(true)\n  }\n\n  const handleDeleteReason = reason => {\n    if (\n      confirm(\n        `Are you sure you want to delete the disable reason for \"${reason.studentName}\"?`,\n      )\n    ) {\n      deleteReasonMutation.mutate(reason.id)\n    }\n  }\n\n  const handleViewDetails = reason => {\n    setSelectedReason(reason)\n    setShowDetailsDialog(true)\n  }\n\n  const handleSaveReason = (id, data) => {\n    saveReasonMutation.mutate({ id, data })\n  }\n\n  const handleAddReason = () => {\n    setSelectedReason(null)\n    setShowReasonDialog(true)\n  }\n\n  const filteredReasons = reasonsData?.data || []\n\n  const getStatistics = () => {\n    const reasons = reasonsData?.data || []\n    const now = new Date()\n\n    return {\n      total: reasons.length,\n      active: reasons.filter(r => r.status === 'active').length,\n      expired: reasons.filter(r => r.endDate && new Date(r.endDate) < now)\n        .length,\n      indefinite: reasons.filter(r => !r.endDate).length,\n      expiringSoon: reasons.filter(r => {\n        if (!r.endDate) return false\n        const daysUntilExpiry = Math.ceil(\n          (new Date(r.endDate) - now) / (1000 * 60 * 60 * 24),\n        )\n        return daysUntilExpiry > 0 && daysUntilExpiry <= 7\n      }).length,\n    }\n  }\n\n  const stats = getStatistics()\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Student Disable Reasons</h1>\n        <button\n          onClick={handleAddReason}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Disable Reason\n        </button>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <UserX className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.total}</p>\n              <p className=\"text-sm text-gray-600\">Total Disabled</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <XCircle className=\"w-8 h-8 text-red-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.active}</p>\n              <p className=\"text-sm text-gray-600\">Currently Active</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-gray-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.expired}</p>\n              <p className=\"text-sm text-gray-600\">Expired</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <AlertTriangle className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.expiringSoon}</p>\n              <p className=\"text-sm text-gray-600\">Expiring Soon</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Calendar className=\"w-8 h-8 text-purple-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.indefinite}</p>\n              <p className=\"text-sm text-gray-600\">Indefinite</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search students...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border rounded-lg\"\n            />\n          </div>\n          <select\n            value={categoryFilter}\n            onChange={e => setCategoryFilter(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Categories</option>\n            <option value=\"academic\">Academic</option>\n            <option value=\"disciplinary\">Disciplinary</option>\n            <option value=\"medical\">Medical</option>\n            <option value=\"financial\">Financial</option>\n            <option value=\"administrative\">Administrative</option>\n            <option value=\"technical\">Technical</option>\n          </select>\n          <select\n            value={statusFilter}\n            onChange={e => setStatusFilter(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Status</option>\n            <option value=\"active\">Active</option>\n            <option value=\"resolved\">Resolved</option>\n            <option value=\"expired\">Expired</option>\n          </select>\n          <select\n            value={severityFilter}\n            onChange={e => setSeverityFilter(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Severity</option>\n            <option value=\"low\">Low</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"high\">High</option>\n          </select>\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Filter className=\"w-4 h-4\" />\n            More Filters\n          </button>\n        </div>\n      </div>\n\n      {/* Disable Reasons List */}\n      <div className=\"space-y-4\">\n        {filteredReasons.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n            <UserX className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              No Disable Reasons Found\n            </h3>\n            <p className=\"text-gray-500 mb-4\">\n              {reasonsData?.data?.length === 0\n                ? 'No students have been disabled yet.'\n                : 'No disable reasons match your current filters.'}\n            </p>\n            {reasonsData?.data?.length === 0 && (\n              <button\n                onClick={handleAddReason}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n              >\n                Add Disable Reason\n              </button>\n            )}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {Array.isArray(filteredReasons) &&\n              filteredReasons.map(reason => (\n                <DisableReasonCard\n                  key={reason.id}\n                  reason={reason}\n                  onEdit={handleEditReason}\n                  onDelete={handleDeleteReason}\n                  onViewDetails={handleViewDetails}\n                />\n              ))}\n          </div>\n        )}\n      </div>\n\n      {/* Disable Reason Dialog */}\n      <DisableReasonDialog\n        reason={selectedReason}\n        open={showReasonDialog}\n        onClose={() => {\n          setShowReasonDialog(false)\n          setSelectedReason(null)\n        }}\n        onSave={handleSaveReason}\n      />\n\n      {/* Details Dialog */}\n      <DisableReasonDetailsDialog\n        reason={selectedReason}\n        open={showDetailsDialog}\n        onClose={() => setShowDetailsDialog(false)}\n      />\n    </div>\n  )\n}\n\nexport default DisableReason\n"
        }
    ]
}