{
    "sourceFile": "src/pages/term/AssignObservation.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755985893081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755989259849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n-import React, { useState } from 'react';\n-import { useForm, Controller } from 'react-hook-form';\n-import { zodResolver } from '@hookform/resolvers/zod';\n-import { z } from 'zod';\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n-import { \n+import React, { useState } from 'react'\n+import { useForm, Controller } from 'react-hook-form'\n+import { zodResolver } from '@hookform/resolvers/zod'\n+import { z } from 'zod'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n   Eye,\n   User,\n   Calendar,\n   BookOpen,\n@@ -14,40 +14,42 @@\n   Star,\n   Target,\n   Plus,\n   CheckCircle,\n-  Award\n-} from 'lucide-react';\n-import Input from '../../components/ui/Input';\n-import Dialog from '../../components/ui/Dialog';\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n-import { observationApi } from '../../lib/api/observation';\n+  Award,\n+} from 'lucide-react'\n+import Input from '../../components/ui/Input'\n+import Dialog from '../../components/ui/Dialog'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import { observationApi } from '../../lib/api/observation'\n \n // Validation Schema\n const observationSchema = z.object({\n   studentId: z.string().min(1, 'Student is required'),\n   subjectId: z.string().min(1, 'Subject is required'),\n   term: z.enum(['term1', 'term2', 'annual'], {\n-    required_error: 'Term is required'\n+    required_error: 'Term is required',\n   }),\n   observationDate: z.string().min(1, 'Observation date is required'),\n   overallComments: z.string().optional(),\n-  recommendations: z.array(z.string()).optional()\n-});\n+  recommendations: z.array(z.string()).optional(),\n+})\n \n const StudentSelector = ({ onSelect, selectedStudent }) => {\n-  const [searchTerm, setSearchTerm] = useState('');\n-  const [showSearch, setShowSearch] = useState(false);\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [showSearch, setShowSearch] = useState(false)\n \n   const { data: studentsData } = useQuery({\n     queryKey: ['students', 'search', searchTerm],\n     queryFn: () => observationApi.searchStudents(searchTerm),\n-    enabled: searchTerm.length > 2\n-  });\n+    enabled: searchTerm.length > 2,\n+  })\n \n   return (\n     <div className=\"space-y-2\">\n-      <label className=\"block text-sm font-medium text-gray-700\">Student *</label>\n+      <label className=\"block text-sm font-medium text-gray-700\">\n+        Student *\n+      </label>\n       {selectedStudent ? (\n         <div className=\"flex items-center justify-between p-3 border rounded-lg bg-blue-50\">\n           <div className=\"flex items-center gap-3\">\n             <div className=\"w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center\">\n@@ -55,9 +57,10 @@\n             </div>\n             <div>\n               <div className=\"font-medium\">{selectedStudent.name}</div>\n               <div className=\"text-sm text-gray-500\">\n-                {selectedStudent.className} - {selectedStudent.section} | Roll: {selectedStudent.rollNumber}\n+                {selectedStudent.className} - {selectedStudent.section} | Roll:{' '}\n+                {selectedStudent.rollNumber}\n               </div>\n             </div>\n           </div>\n           <button\n@@ -74,24 +77,24 @@\n             <input\n               type=\"text\"\n               placeholder=\"Search student by name, roll number...\"\n               value={searchTerm}\n-              onChange={(e) => setSearchTerm(e.target.value)}\n+              onChange={e => setSearchTerm(e.target.value)}\n               onFocus={() => setShowSearch(true)}\n               className=\"w-full pl-10 pr-4 py-2 border rounded-lg\"\n             />\n           </div>\n-          \n+\n           {showSearch && searchTerm.length > 2 && (\n             <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n               {studentsData?.data?.length > 0 ? (\n                 studentsData.data.map(student => (\n                   <button\n                     key={student.id}\n                     onClick={() => {\n-                      onSelect(student);\n-                      setShowSearch(false);\n-                      setSearchTerm('');\n+                      onSelect(student)\n+                      setShowSearch(false)\n+                      setSearchTerm('')\n                     }}\n                     className=\"w-full p-3 text-left hover:bg-gray-50 flex items-center gap-3\"\n                   >\n                     <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n@@ -99,163 +102,220 @@\n                     </div>\n                     <div>\n                       <div className=\"font-medium\">{student.name}</div>\n                       <div className=\"text-sm text-gray-500\">\n-                        {student.className} - {student.section} | Roll: {student.rollNumber}\n+                        {student.className} - {student.section} | Roll:{' '}\n+                        {student.rollNumber}\n                       </div>\n                     </div>\n                   </button>\n                 ))\n               ) : (\n-                <div className=\"p-3 text-gray-500 text-center\">No students found</div>\n+                <div className=\"p-3 text-gray-500 text-center\">\n+                  No students found\n+                </div>\n               )}\n             </div>\n           )}\n         </div>\n       )}\n     </div>\n-  );\n+  )\n };\n \n-const ParameterAssessment = ({ parameters, assessments, onAssessmentChange }) => {\n-  const getGradeColor = (grade) => {\n+const ParameterAssessment = ({\n+  parameters,\n+  assessments,\n+  onAssessmentChange,\n+}) => {\n+  const getGradeColor = grade => {\n     switch (grade) {\n-      case 'A+': case 'A': return 'text-green-600 bg-green-100 border-green-300';\n-      case 'B+': case 'B': return 'text-blue-600 bg-blue-100 border-blue-300';\n-      case 'C+': case 'C': return 'text-yellow-600 bg-yellow-100 border-yellow-300';\n-      case 'D': case 'E': return 'text-red-600 bg-red-100 border-red-300';\n-      default: return 'text-gray-600 bg-gray-100 border-gray-300';\n+      case 'A+':\n+      case 'A':\n+        return 'text-green-600 bg-green-100 border-green-300'\n+      case 'B+':\n+      case 'B':\n+        return 'text-blue-600 bg-blue-100 border-blue-300'\n+      case 'C+':\n+      case 'C':\n+        return 'text-yellow-600 bg-yellow-100 border-yellow-300'\n+      case 'D':\n+      case 'E':\n+        return 'text-red-600 bg-red-100 border-red-300'\n+      default:\n+        return 'text-gray-600 bg-gray-100 border-gray-300'\n     }\n-  };\n+  }\n \n-  const getCategoryIcon = (category) => {\n+  const getCategoryIcon = category => {\n     switch (category) {\n-      case 'academic': return BookOpen;\n-      case 'social': return User;\n-      case 'emotional': return Star;\n-      case 'physical': return Award;\n-      case 'creative': return Target;\n-      default: return CheckCircle;\n+      case 'academic':\n+        return BookOpen\n+      case 'social':\n+        return User\n+      case 'emotional':\n+        return Star\n+      case 'physical':\n+        return Award\n+      case 'creative':\n+        return Target\n+      default:\n+        return CheckCircle\n     }\n-  };\n+  }\n \n   const handleGradeChange = (parameterId, grade) => {\n-    onAssessmentChange(parameterId, { grade, remarks: assessments[parameterId]?.remarks || '' });\n-  };\n+    onAssessmentChange(parameterId, {\n+      grade,\n+      remarks: assessments[parameterId]?.remarks || '',\n+    })\n+  }\n \n   const handleRemarksChange = (parameterId, remarks) => {\n-    onAssessmentChange(parameterId, { grade: assessments[parameterId]?.grade || '', remarks });\n-  };\n+    onAssessmentChange(parameterId, {\n+      grade: assessments[parameterId]?.grade || '',\n+      remarks,\n+    })\n+  }\n \n   if (!parameters || parameters.length === 0) {\n     return (\n       <div className=\"text-center py-8 text-gray-500\">\n         <Target className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n         <p>No parameters available for assessment</p>\n       </div>\n-    );\n+    )\n   }\n \n   // Group parameters by category\n-  const groupedParameters = Array.isArray(parameters) ? parameters.reduce((acc, param) => {\n-    if (!acc[param.category]) {\n-      acc[param.category] = [];\n-    }\n-    acc[param.category].push(param);\n-    return acc;\n-  }, {}) : {};\n+  const groupedParameters = Array.isArray(parameters)\n+    ? parameters.reduce((acc, param) => {\n+        if (!acc[param.category]) {\n+          acc[param.category] = []\n+        }\n+        acc[param.category].push(param)\n+        return acc\n+      }, {})\n+    : {}\n \n   return (\n     <div className=\"space-y-6\">\n-      {Array.isArray(Object.entries(groupedParameters)) && Object.entries(groupedParameters).map(([category, categoryParams]) => {\n-        const Icon = getCategoryIcon(category);\n-        return (\n-          <div key={category} className=\"space-y-4\">\n-            <div className=\"flex items-center gap-2 pb-2 border-b\">\n-              <Icon className=\"w-5 h-5 text-blue-600\" />\n-              <h3 className=\"font-medium capitalize\">{category} Parameters</h3>\n-              <span className=\"text-sm text-gray-500\">({categoryParams.length})</span>\n-            </div>\n-            \n-            <div className=\"space-y-4\">\n-              {Array.isArray(categoryParams) && categoryParams.map(parameter => (\n-                <div key={parameter.id} className=\"border rounded-lg p-4\">\n-                  <div className=\"flex justify-between items-start mb-3\">\n-                    <div>\n-                      <h4 className=\"font-medium\">{parameter.name}</h4>\n-                      <p className=\"text-sm text-gray-600\">{parameter.description}</p>\n-                      <div className=\"text-xs text-gray-500 mt-1\">\n-                        Weight: {parameter.weight}%\n+      {Array.isArray(Object.entries(groupedParameters)) &&\n+        Object.entries(groupedParameters).map(([category, categoryParams]) => {\n+          const Icon = getCategoryIcon(category)\n+          return (\n+            <div key={category} className=\"space-y-4\">\n+              <div className=\"flex items-center gap-2 pb-2 border-b\">\n+                <Icon className=\"w-5 h-5 text-blue-600\" />\n+                <h3 className=\"font-medium capitalize\">\n+                  {category} Parameters\n+                </h3>\n+                <span className=\"text-sm text-gray-500\">\n+                  ({categoryParams.length})\n+                </span>\n+\n+\n+              <div className=\"space-y-4\">\n+                {Array.isArray(categoryParams) &&\n+                  categoryParams.map(parameter => (\n+                    <div key={parameter.id} className=\"border rounded-lg p-4\">\n+                      <div className=\"flex justify-between items-start mb-3\">\n+                        <div>\n+                          <h4 className=\"font-medium\">{parameter.name}</h4>\n+                          <p className=\"text-sm text-gray-600\">\n+                            {parameter.description}\n+                          </p>\n+                          <div className=\"text-xs text-gray-500 mt-1\">\n+                            Weight: {parameter.weight}%\n+                          </div>\n+                        </div>\n                       </div>\n-                    </div>\n-                  </div>\n-                  \n+\n                   <div className=\"space-y-3\">\n-                    <div>\n-                      <label className=\"block text-sm font-medium mb-2\">Grade *</label>\n-                      <div className=\"grid grid-cols-4 md:grid-cols-8 gap-2\">\n-                        {parameter.rubric?.map(rubricItem => (\n-                          <button\n-                            key={rubricItem.grade}\n-                            type=\"button\"\n-                            onClick={() => handleGradeChange(parameter.id, rubricItem.grade)}\n-                            className={`p-2 border rounded text-sm font-medium transition-colors ${\n-                              assessments[parameter.id]?.grade === rubricItem.grade\n-                                ? getGradeColor(rubricItem.grade)\n-                                : 'border-gray-300 hover:bg-gray-50'\n-                            }`}\n-                            title={rubricItem.description}\n-                          >\n-                            {rubricItem.grade}\n-                          </button>\n-                        ))}\n+                        <div>\n+                          <label className=\"block text-sm font-medium mb-2\">\n+                            Grade *\n+                          </label>\n+                          <div className=\"grid grid-cols-4 md:grid-cols-8 gap-2\">\n+                            {parameter.rubric?.map(rubricItem => (\n+                              <button\n+                                key={rubricItem.grade}\n+                                type=\"button\"\n+                                onClick={() =>\n+                                  handleGradeChange(\n+                                    parameter.id,\n+                                    rubricItem.grade\n+                                  )\n+                                }\n+                                className={`p-2 border rounded text-sm font-medium transition-colors ${\n+                                  assessments[parameter.id]?.grade ===\n+                                  rubricItem.grade\n+                                    ? getGradeColor(rubricItem.grade)\n+                                    : 'border-gray-300 hover:bg-gray-50'\n+                                }`}\n+                                title={rubricItem.description}\n+                              >\n+                                {rubricItem.grade}\n+                              </button>\n+                            ))}\n+                          </div>\n+                          {assessments[parameter.id]?.grade && (\n+                            <div className=\"mt-1 text-xs text-gray-600\">\n+                              {\n+                                parameter.rubric?.find(\n+                                  r =>\n+                                    r.grade === assessments[parameter.id]?.grade\n+                                )?.description\n+                              }\n+                            </div>\n+                          )}\n+\n+\n+                        <div>\n+                          <label className=\"block text-sm font-medium mb-1\">\n+                            Remarks (Optional)\n+                          </label>\n+                          <textarea\n+                            value={assessments[parameter.id]?.remarks || ''}\n+                            onChange={e =>\n+                              handleRemarksChange(parameter.id, e.target.value)\n+                            }\n+                            rows={2}\n+                            className=\"w-full border rounded px-3 py-2 text-sm\"\n+                            placeholder=\"Add specific observations or comments...\"\n+                          />\n+                        </div>\n                       </div>\n-                      {assessments[parameter.id]?.grade && (\n-                        <div className=\"mt-1 text-xs text-gray-600\">\n-                          {parameter.rubric?.find(r => r.grade === assessments[parameter.id]?.grade)?.description}\n-                        </div>\n-                      )}\n                     </div>\n-                    \n-                    <div>\n-                      <label className=\"block text-sm font-medium mb-1\">Remarks (Optional)</label>\n-                      <textarea\n-                        value={assessments[parameter.id]?.remarks || ''}\n-                        onChange={(e) => handleRemarksChange(parameter.id, e.target.value)}\n-                        rows={2}\n-                        className=\"w-full border rounded px-3 py-2 text-sm\"\n-                        placeholder=\"Add specific observations or comments...\"\n-                      />\n-                    </div>\n-                  </div>\n-                </div>\n-              ))}\n+                  ))}\n+              </div>\n             </div>\n-          </div>\n-        );\n-      })}\n+          )\n+        })}\n     </div>\n-  );\n+  )\n };\n \n const RecommendationInput = ({ recommendations, onRecommendationsChange }) => {\n   const addRecommendation = () => {\n-    onRecommendationsChange([...recommendations, '']);\n+    onRecommendationsChange([...recommendations, ''])\n   };\n \n   const updateRecommendation = (index, value) => {\n-    const updated = recommendations.map((rec, i) => i === index ? value : rec);\n-    onRecommendationsChange(updated);\n+    const updated = recommendations.map((rec, i) => (i === index ? value : rec))\n+    onRecommendationsChange(updated)\n   };\n \n-  const removeRecommendation = (index) => {\n-    onRecommendationsChange(recommendations.filter((_, i) => i !== index));\n+  const removeRecommendation = index => {\n+    onRecommendationsChange(recommendations.filter((_, i) => i !== index))\n   };\n \n   return (\n     <div className=\"space-y-3\">\n       <div className=\"flex justify-between items-center\">\n-        <label className=\"block text-sm font-medium text-gray-700\">Recommendations</label>\n+        <label className=\"block text-sm font-medium text-gray-700\">\n+          Recommendations\n+        </label>\n         <button\n           type=\"button\"\n           onClick={addRecommendation}\n           className=\"text-blue-600 hover:text-blue-800 flex items-center gap-1 text-sm\"\n@@ -263,147 +323,156 @@\n           <Plus className=\"w-4 h-4\" />\n           Add Recommendation\n         </button>\n       </div>\n-      \n+\n       {recommendations.length === 0 ? (\n         <p className=\"text-gray-500 text-sm\">No recommendations added</p>\n       ) : (\n         <div className=\"space-y-2\">\n-          {Array.isArray(recommendations) && recommendations.map((recommendation, index) => (\n-            <div key={index} className=\"flex gap-2\">\n-              <input\n-                type=\"text\"\n-                value={recommendation}\n-                onChange={(e) => updateRecommendation(index, e.target.value)}\n-                placeholder=\"Enter recommendation...\"\n-                className=\"flex-1 border rounded px-3 py-2 text-sm\"\n-              />\n-              <button\n-                type=\"button\"\n-                onClick={() => removeRecommendation(index)}\n-                className=\"p-2 text-red-500 hover:text-red-700\"\n-              >\n-                <X className=\"w-4 h-4\" />\n-              </button>\n-            </div>\n-          ))}\n+          {Array.isArray(recommendations) &&\n+            recommendations.map((recommendation, index) => (\n+              <div key={index} className=\"flex gap-2\">\n+                <input\n+                  type=\"text\"\n+                  value={recommendation}\n+                  onChange={e => updateRecommendation(index, e.target.value)}\n+                  placeholder=\"Enter recommendation...\"\n+                  className=\"flex-1 border rounded px-3 py-2 text-sm\"\n+                />\n+                <button\n+                  type=\"button\"\n+                  onClick={() => removeRecommendation(index)}\n+                  className=\"p-2 text-red-500 hover:text-red-700\"\n+                >\n+                  <X className=\"w-4 h-4\" />\n+                </button>\n+              </div>\n+            ))}\n         </div>\n       )}\n     </div>\n-  );\n+  )\n };\n \n const AssignObservation = () => {\n-  const [selectedStudent, setSelectedStudent] = useState(null);\n-  const [selectedSubject, setSelectedSubject] = useState('');\n-  const [assessments, setAssessments] = useState({});\n-  const [recommendations, setRecommendations] = useState([]);\n+  const [selectedStudent, setSelectedStudent] = useState(null)\n+  const [selectedSubject, setSelectedSubject] = useState('')\n+  const [assessments, setAssessments] = useState({})\n+  const [recommendations, setRecommendations] = useState([])\n \n-  const queryClient = useQueryClient();\n+  const queryClient = useQueryClient()\n \n   const {\n     control,\n     handleSubmit,\n     watch,\n     reset,\n-    formState: { errors }\n+    formState: { errors },\n   } = useForm({\n     resolver: zodResolver(observationSchema),\n     defaultValues: {\n       observationDate: new Date().toISOString().split('T')[0],\n-      term: 'term1'\n+      term: 'term1',\n     }\n-  });\n+  })\n \n-  const watchedSubject = watch('subjectId');\n+  const watchedSubject = watch('subjectId')\n \n   const { data: subjectsData } = useQuery({\n     queryKey: ['subjects', 'all'],\n-    queryFn: () => observationApi.getSubjects()\n-  });\n+    queryFn: () => observationApi.getSubjects(),\n+  })\n \n   const { data: parametersData } = useQuery({\n     queryKey: ['observation', 'parameters', 'by-subject', watchedSubject],\n     queryFn: () => observationApi.getParametersBySubject(watchedSubject),\n-    enabled: !!watchedSubject\n-  });\n+    enabled: !!watchedSubject,\n+  })\n \n   const createObservationMutation = useMutation({\n     mutationFn: observationApi.createObservation,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['observations']);\n-      reset();\n-      setSelectedStudent(null);\n-      setAssessments({});\n-      setRecommendations([]);\n+      queryClient.invalidateQueries(['observations'])\n+      reset()\n+      setSelectedStudent(null)\n+      setAssessments({})\n+      setRecommendations([])\n     }\n-  });\n+  })\n \n   const handleAssessmentChange = (parameterId, assessment) => {\n     setAssessments(prev => ({\n       ...prev,\n-      [parameterId]: assessment\n-    }));\n+      [parameterId]: assessment,\n+    }))\n   };\n \n-  const onSubmit = (data) => {\n+  const onSubmit = data => {\n     // Validate that all parameters have grades\n-    const requiredParameters = parametersData?.data || [];\n+    const requiredParameters = parametersData?.data || []\n     const missingAssessments = requiredParameters.filter(\n-      param => !assessments[param.id]?.grade\n+      param => !assessments[param.id]?.grade,\n     );\n \n     if (missingAssessments.length > 0) {\n-      alert(`Please provide grades for all parameters: ${Array.isArray(missingAssessments) && missingAssessments.map(p => p.name).join(', ')}`);\n-      return;\n+      alert(\n+        `Please provide grades for all parameters: ${missingAssessments.map(p => p.name).join(', ')}`\n+      )\n+      return\n     }\n \n     const observationData = {\n       ...data,\n       studentId: selectedStudent?.id,\n-      parameters: Object.entries(assessments).map(([parameterId, assessment]) => ({\n-        parameterId,\n-        grade: assessment.grade,\n-        remarks: assessment.remarks\n-      })),\n+      parameters: Object.entries(assessments).map(\n+        ([parameterId, assessment]) => ({\n+          parameterId,\n+          grade: assessment.grade,\n+          remarks: assessment.remarks,\n+        })\n+      ),\n       recommendations: recommendations.filter(rec => rec.trim()),\n       observedBy: 'current-user', // In real app, get from auth\n-      observedAt: new Date().toISOString()\n+      observedAt: new Date().toISOString(),\n     };\n \n-    createObservationMutation.mutate(observationData);\n+    createObservationMutation.mutate(observationData)\n   };\n \n   const getCompletionStats = () => {\n-    const totalParameters = parametersData?.data?.length || 0;\n+    const totalParameters = parametersData?.data?.length || 0\n     const completedParameters = Object.keys(assessments).filter(\n-      id => assessments[id]?.grade\n-    ).length;\n+      id => assessments[id]?.grade,\n+    ).length\n     \n     return {\n       total: totalParameters,\n       completed: completedParameters,\n-      percentage: totalParameters > 0 ? Math.round((completedParameters / totalParameters) * 100) : 0\n-    };\n+      percentage:\n+        totalParameters > 0\n+          ? Math.round((completedParameters / totalParameters) * 100)\n+          : 0,\n+    }\n   };\n \n-  const stats = getCompletionStats();\n+  const stats = getCompletionStats()\n \n   return (\n     <div className=\"space-y-6\">\n       <div className=\"flex justify-between items-center\">\n         <h1 className=\"text-2xl font-bold\">Assign Observation</h1>\n         <div className=\"text-sm text-gray-500\">\n-          Progress: {stats.completed}/{stats.total} parameters ({stats.percentage}%)\n+          Progress: {stats.completed}/{stats.total} parameters (\n+          {stats.percentage}%)\n         </div>\n       </div>\n \n       <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n         {/* Basic Information */}\n         <div className=\"bg-white rounded-lg shadow p-6\">\n           <h2 className=\"text-lg font-medium mb-4\">Basic Information</h2>\n-          \n+\n           <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n             <div className=\"space-y-4\">\n               <StudentSelector\n                 onSelect={setSelectedStudent}\n@@ -417,24 +486,29 @@\n                 name=\"subjectId\"\n                 control={control}\n                 render={({ field }) => (\n                   <div>\n-                    <label className=\"block text-sm font-medium mb-1\">Subject *</label>\n+                    <label className=\"block text-sm font-medium mb-1\">\n+                      Subject *\n+                    </label>\n                     <select\n                       {...field}\n                       className={`w-full border rounded-lg px-3 py-2 ${\n                         errors.subjectId ? 'border-red-500' : ''\n                       }`}\n                     >\n                       <option value=\"\">Select Subject</option>\n-                      {Array.isArray(subjectsData?.data) && subjectsData.data.map(subject => (\n-                        <option key={subject.id} value={subject.id}>\n-                          {subject.name}\n-                        </option>\n-                      ))}\n+                      {Array.isArray(subjectsData?.data) &&\n+                        subjectsData.data.map(subject => (\n+                          <option key={subject.id} value={subject.id}>\n+                            {subject.name}\n+                          </option>\n+                        ))}\n                     </select>\n                     {errors.subjectId && (\n-                      <p className=\"text-red-500 text-sm mt-1\">{errors.subjectId.message}</p>\n+                      <p className=\"text-red-500 text-sm mt-1\">\n+                        {errors.subjectId.message}\n+                      </p>\n                     )}\n                   </div>\n                 )}\n               />\n@@ -445,9 +519,11 @@\n                 name=\"term\"\n                 control={control}\n                 render={({ field }) => (\n                   <div>\n-                    <label className=\"block text-sm font-medium mb-1\">Term *</label>\n+                    <label className=\"block text-sm font-medium mb-1\">\n+                      Term *\n+                    </label>\n                     <select\n                       {...field}\n                       className=\"w-full border rounded-lg px-3 py-2\"\n                     >\n@@ -486,12 +562,14 @@\n                     className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                     style={{ width: `${stats.percentage}%` }}\n                   />\n                 </div>\n-                <span className=\"text-sm text-gray-600\">{stats.percentage}%</span>\n+                <span className=\"text-sm text-gray-600\">\n+                  {stats.percentage}%\n+                </span>\n               </div>\n             </div>\n-            \n+\n             <ParameterAssessment\n               parameters={parametersData?.data}\n               assessments={assessments}\n               onAssessmentChange={handleAssessmentChange}\n@@ -501,16 +579,18 @@\n \n         {/* Overall Comments and Recommendations */}\n         <div className=\"bg-white rounded-lg shadow p-6\">\n           <h2 className=\"text-lg font-medium mb-4\">Overall Assessment</h2>\n-          \n+\n           <div className=\"space-y-4\">\n             <Controller\n               name=\"overallComments\"\n               control={control}\n               render={({ field }) => (\n                 <div>\n-                  <label className=\"block text-sm font-medium mb-1\">Overall Comments</label>\n+                  <label className=\"block text-sm font-medium mb-1\">\n+                    Overall Comments\n+                  </label>\n                   <textarea\n                     {...field}\n                     rows={4}\n                     className=\"w-full border rounded-lg px-3 py-2\"\n@@ -531,28 +611,34 @@\n         <div className=\"flex justify-end gap-4\">\n           <button\n             type=\"button\"\n             onClick={() => {\n-              reset();\n-              setSelectedStudent(null);\n-              setAssessments({});\n-              setRecommendations([]);\n+              reset()\n+              setSelectedStudent(null)\n+              setAssessments({})\n+              setRecommendations([])\n             }}\n             className=\"px-6 py-2 border rounded-lg hover:bg-gray-50\"\n           >\n             Reset\n           </button>\n           <button\n             type=\"submit\"\n-            disabled={createObservationMutation.isPending || !selectedStudent || stats.percentage < 100}\n+            disabled={\n+              createObservationMutation.isPending ||\n+              !selectedStudent ||\n+              stats.percentage < 100\n+            }\n             className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n           >\n             <Save className=\"w-4 h-4\" />\n\\ No newline at end of file\n-            {createObservationMutation.isPending ? 'Saving...' : 'Save Observation'}\n+            {createObservationMutation.isPending\n+              ? 'Saving...'\n+              : 'Save Observation'}\n           </button>\n         </div>\n       </form>\n     </div>\n-  );\n+  )\n };\n \n-export default AssignObservation;\n+export default AssignObservation\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755990825031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,10 +211,9 @@\n                 </h3>\n                 <span className=\"text-sm text-gray-500\">\n                   ({categoryParams.length})\n                 </span>\n-\n-\n+              </div>\n               <div className=\"space-y-4\">\n                 {Array.isArray(categoryParams) &&\n                   categoryParams.map(parameter => (\n                     <div key={parameter.id} className=\"border rounded-lg p-4\">\n@@ -284,8 +283,9 @@\n                             placeholder=\"Add specific observations or comments...\"\n                           />\n                         </div>\n                       </div>\n+                      </div>\n                     </div>\n                   ))}\n               </div>\n             </div>\n"
                },
                {
                    "date": 1755994925628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   CheckCircle,\n   Award,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { observationApi } from '../../lib/api/observation'\n \n // Validation Schema\n@@ -119,9 +119,9 @@\n         </div>\n       )}\n     </div>\n   )\n-};\n+}\n \n const ParameterAssessment = ({\n   parameters,\n   assessments,\n@@ -228,9 +228,9 @@\n                           </div>\n                         </div>\n                       </div>\n \n-                  <div className=\"space-y-3\">\n+                      <div className=\"space-y-3\">\n                         <div>\n                           <label className=\"block text-sm font-medium mb-2\">\n                             Grade *\n                           </label>\n@@ -241,9 +241,9 @@\n                                 type=\"button\"\n                                 onClick={() =>\n                                   handleGradeChange(\n                                     parameter.id,\n-                                    rubricItem.grade\n+                                    rubricItem.grade,\n                                   )\n                                 }\n                                 className={`p-2 border rounded text-sm font-medium transition-colors ${\n                                   assessments[parameter.id]?.grade ===\n@@ -261,54 +261,56 @@\n                             <div className=\"mt-1 text-xs text-gray-600\">\n                               {\n                                 parameter.rubric?.find(\n                                   r =>\n-                                    r.grade === assessments[parameter.id]?.grade\n+                                    r.grade === assessments[parameter.id]?.grade,\n                                 )?.description\n                               }\n                             </div>\n                           )}\n \n-\n-                        <div>\n-                          <label className=\"block text-sm font-medium mb-1\">\n-                            Remarks (Optional)\n-                          </label>\n-                          <textarea\n-                            value={assessments[parameter.id]?.remarks || ''}\n-                            onChange={e =>\n-                              handleRemarksChange(parameter.id, e.target.value)\n-                            }\n-                            rows={2}\n-                            className=\"w-full border rounded px-3 py-2 text-sm\"\n-                            placeholder=\"Add specific observations or comments...\"\n-                          />\n+                          <div>\n+                            <label className=\"block text-sm font-medium mb-1\">\n+                              Remarks (Optional)\n+                            </label>\n+                            <textarea\n+                              value={assessments[parameter.id]?.remarks || ''}\n+                              onChange={e =>\n+                                handleRemarksChange(\n+                                  parameter.id,\n+                                  e.target.value\n+                                )\n+                              }\n+                              rows={2}\n+                              className=\"w-full border rounded px-3 py-2 text-sm\"\n+                              placeholder=\"Add specific observations or comments...\"\n+                            />\n+                          </div>\n                         </div>\n                       </div>\n-                      </div>\n                     </div>\n                   ))}\n               </div>\n             </div>\n           )\n         })}\n     </div>\n   )\n-};\n+}\n \n const RecommendationInput = ({ recommendations, onRecommendationsChange }) => {\n   const addRecommendation = () => {\n     onRecommendationsChange([...recommendations, ''])\n-  };\n+  }\n \n   const updateRecommendation = (index, value) => {\n     const updated = recommendations.map((rec, i) => (i === index ? value : rec))\n     onRecommendationsChange(updated)\n-  };\n+  }\n \n   const removeRecommendation = index => {\n     onRecommendationsChange(recommendations.filter((_, i) => i !== index))\n-  };\n+  }\n \n   return (\n     <div className=\"space-y-3\">\n       <div className=\"flex justify-between items-center\">\n@@ -351,9 +353,9 @@\n         </div>\n       )}\n     </div>\n   )\n-};\n+}\n \n const AssignObservation = () => {\n   const [selectedStudent, setSelectedStudent] = useState(null)\n   const [selectedSubject, setSelectedSubject] = useState('')\n@@ -372,9 +374,9 @@\n     resolver: zodResolver(observationSchema),\n     defaultValues: {\n       observationDate: new Date().toISOString().split('T')[0],\n       term: 'term1',\n-    }\n+    },\n   })\n \n   const watchedSubject = watch('subjectId')\n \n@@ -396,28 +398,28 @@\n       reset()\n       setSelectedStudent(null)\n       setAssessments({})\n       setRecommendations([])\n-    }\n+    },\n   })\n \n   const handleAssessmentChange = (parameterId, assessment) => {\n     setAssessments(prev => ({\n       ...prev,\n       [parameterId]: assessment,\n     }))\n-  };\n+  }\n \n   const onSubmit = data => {\n     // Validate that all parameters have grades\n     const requiredParameters = parametersData?.data || []\n     const missingAssessments = requiredParameters.filter(\n-      param => !assessments[param.id]?.grade,\n-    );\n+      param => !assessments[param.id]?.grade\n+    )\n \n     if (missingAssessments.length > 0) {\n       alert(\n-        `Please provide grades for all parameters: ${missingAssessments.map(p => p.name).join(', ')}`\n+        `Please provide grades for all parameters: ${missingAssessments.map(p => p.name).join(', ')}`,\n       )\n       return\n     }\n \n@@ -428,33 +430,33 @@\n         ([parameterId, assessment]) => ({\n           parameterId,\n           grade: assessment.grade,\n           remarks: assessment.remarks,\n-        })\n+        }),\n       ),\n       recommendations: recommendations.filter(rec => rec.trim()),\n       observedBy: 'current-user', // In real app, get from auth\n       observedAt: new Date().toISOString(),\n-    };\n+    }\n \n     createObservationMutation.mutate(observationData)\n-  };\n+  }\n \n   const getCompletionStats = () => {\n     const totalParameters = parametersData?.data?.length || 0\n     const completedParameters = Object.keys(assessments).filter(\n-      id => assessments[id]?.grade,\n+      id => assessments[id]?.grade\n     ).length\n-    \n+\n     return {\n       total: totalParameters,\n       completed: completedParameters,\n       percentage:\n         totalParameters > 0\n           ? Math.round((completedParameters / totalParameters) * 100)\n           : 0,\n     }\n-  };\n+  }\n \n   const stats = getCompletionStats()\n \n   return (\n@@ -638,7 +640,7 @@\n         </div>\n       </form>\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default AssignObservation\n+export default AssignObservation\n"
                }
            ],
            "date": 1755985893081,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  Eye,\n  User,\n  Calendar,\n  BookOpen,\n  Save,\n  Search,\n  X,\n  Star,\n  Target,\n  Plus,\n  CheckCircle,\n  Award\n} from 'lucide-react';\nimport Input from '../../components/ui/Input';\nimport Dialog from '../../components/ui/Dialog';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport { observationApi } from '../../lib/api/observation';\n\n// Validation Schema\nconst observationSchema = z.object({\n  studentId: z.string().min(1, 'Student is required'),\n  subjectId: z.string().min(1, 'Subject is required'),\n  term: z.enum(['term1', 'term2', 'annual'], {\n    required_error: 'Term is required'\n  }),\n  observationDate: z.string().min(1, 'Observation date is required'),\n  overallComments: z.string().optional(),\n  recommendations: z.array(z.string()).optional()\n});\n\nconst StudentSelector = ({ onSelect, selectedStudent }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showSearch, setShowSearch] = useState(false);\n\n  const { data: studentsData } = useQuery({\n    queryKey: ['students', 'search', searchTerm],\n    queryFn: () => observationApi.searchStudents(searchTerm),\n    enabled: searchTerm.length > 2\n  });\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-700\">Student *</label>\n      {selectedStudent ? (\n        <div className=\"flex items-center justify-between p-3 border rounded-lg bg-blue-50\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center\">\n              <User className=\"w-5 h-5 text-gray-600\" />\n            </div>\n            <div>\n              <div className=\"font-medium\">{selectedStudent.name}</div>\n              <div className=\"text-sm text-gray-500\">\n                {selectedStudent.className} - {selectedStudent.section} | Roll: {selectedStudent.rollNumber}\n              </div>\n            </div>\n          </div>\n          <button\n            onClick={() => onSelect(null)}\n            className=\"p-1 text-gray-400 hover:text-gray-600\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n      ) : (\n        <div className=\"relative\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search student by name, roll number...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              onFocus={() => setShowSearch(true)}\n              className=\"w-full pl-10 pr-4 py-2 border rounded-lg\"\n            />\n          </div>\n          \n          {showSearch && searchTerm.length > 2 && (\n            <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n              {studentsData?.data?.length > 0 ? (\n                studentsData.data.map(student => (\n                  <button\n                    key={student.id}\n                    onClick={() => {\n                      onSelect(student);\n                      setShowSearch(false);\n                      setSearchTerm('');\n                    }}\n                    className=\"w-full p-3 text-left hover:bg-gray-50 flex items-center gap-3\"\n                  >\n                    <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n                      <User className=\"w-4 h-4 text-gray-600\" />\n                    </div>\n                    <div>\n                      <div className=\"font-medium\">{student.name}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        {student.className} - {student.section} | Roll: {student.rollNumber}\n                      </div>\n                    </div>\n                  </button>\n                ))\n              ) : (\n                <div className=\"p-3 text-gray-500 text-center\">No students found</div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst ParameterAssessment = ({ parameters, assessments, onAssessmentChange }) => {\n  const getGradeColor = (grade) => {\n    switch (grade) {\n      case 'A+': case 'A': return 'text-green-600 bg-green-100 border-green-300';\n      case 'B+': case 'B': return 'text-blue-600 bg-blue-100 border-blue-300';\n      case 'C+': case 'C': return 'text-yellow-600 bg-yellow-100 border-yellow-300';\n      case 'D': case 'E': return 'text-red-600 bg-red-100 border-red-300';\n      default: return 'text-gray-600 bg-gray-100 border-gray-300';\n    }\n  };\n\n  const getCategoryIcon = (category) => {\n    switch (category) {\n      case 'academic': return BookOpen;\n      case 'social': return User;\n      case 'emotional': return Star;\n      case 'physical': return Award;\n      case 'creative': return Target;\n      default: return CheckCircle;\n    }\n  };\n\n  const handleGradeChange = (parameterId, grade) => {\n    onAssessmentChange(parameterId, { grade, remarks: assessments[parameterId]?.remarks || '' });\n  };\n\n  const handleRemarksChange = (parameterId, remarks) => {\n    onAssessmentChange(parameterId, { grade: assessments[parameterId]?.grade || '', remarks });\n  };\n\n  if (!parameters || parameters.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-gray-500\">\n        <Target className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n        <p>No parameters available for assessment</p>\n      </div>\n    );\n  }\n\n  // Group parameters by category\n  const groupedParameters = Array.isArray(parameters) ? parameters.reduce((acc, param) => {\n    if (!acc[param.category]) {\n      acc[param.category] = [];\n    }\n    acc[param.category].push(param);\n    return acc;\n  }, {}) : {};\n\n  return (\n    <div className=\"space-y-6\">\n      {Array.isArray(Object.entries(groupedParameters)) && Object.entries(groupedParameters).map(([category, categoryParams]) => {\n        const Icon = getCategoryIcon(category);\n        return (\n          <div key={category} className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 pb-2 border-b\">\n              <Icon className=\"w-5 h-5 text-blue-600\" />\n              <h3 className=\"font-medium capitalize\">{category} Parameters</h3>\n              <span className=\"text-sm text-gray-500\">({categoryParams.length})</span>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {Array.isArray(categoryParams) && categoryParams.map(parameter => (\n                <div key={parameter.id} className=\"border rounded-lg p-4\">\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div>\n                      <h4 className=\"font-medium\">{parameter.name}</h4>\n                      <p className=\"text-sm text-gray-600\">{parameter.description}</p>\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        Weight: {parameter.weight}%\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Grade *</label>\n                      <div className=\"grid grid-cols-4 md:grid-cols-8 gap-2\">\n                        {parameter.rubric?.map(rubricItem => (\n                          <button\n                            key={rubricItem.grade}\n                            type=\"button\"\n                            onClick={() => handleGradeChange(parameter.id, rubricItem.grade)}\n                            className={`p-2 border rounded text-sm font-medium transition-colors ${\n                              assessments[parameter.id]?.grade === rubricItem.grade\n                                ? getGradeColor(rubricItem.grade)\n                                : 'border-gray-300 hover:bg-gray-50'\n                            }`}\n                            title={rubricItem.description}\n                          >\n                            {rubricItem.grade}\n                          </button>\n                        ))}\n                      </div>\n                      {assessments[parameter.id]?.grade && (\n                        <div className=\"mt-1 text-xs text-gray-600\">\n                          {parameter.rubric?.find(r => r.grade === assessments[parameter.id]?.grade)?.description}\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Remarks (Optional)</label>\n                      <textarea\n                        value={assessments[parameter.id]?.remarks || ''}\n                        onChange={(e) => handleRemarksChange(parameter.id, e.target.value)}\n                        rows={2}\n                        className=\"w-full border rounded px-3 py-2 text-sm\"\n                        placeholder=\"Add specific observations or comments...\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst RecommendationInput = ({ recommendations, onRecommendationsChange }) => {\n  const addRecommendation = () => {\n    onRecommendationsChange([...recommendations, '']);\n  };\n\n  const updateRecommendation = (index, value) => {\n    const updated = recommendations.map((rec, i) => i === index ? value : rec);\n    onRecommendationsChange(updated);\n  };\n\n  const removeRecommendation = (index) => {\n    onRecommendationsChange(recommendations.filter((_, i) => i !== index));\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex justify-between items-center\">\n        <label className=\"block text-sm font-medium text-gray-700\">Recommendations</label>\n        <button\n          type=\"button\"\n          onClick={addRecommendation}\n          className=\"text-blue-600 hover:text-blue-800 flex items-center gap-1 text-sm\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Add Recommendation\n        </button>\n      </div>\n      \n      {recommendations.length === 0 ? (\n        <p className=\"text-gray-500 text-sm\">No recommendations added</p>\n      ) : (\n        <div className=\"space-y-2\">\n          {Array.isArray(recommendations) && recommendations.map((recommendation, index) => (\n            <div key={index} className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={recommendation}\n                onChange={(e) => updateRecommendation(index, e.target.value)}\n                placeholder=\"Enter recommendation...\"\n                className=\"flex-1 border rounded px-3 py-2 text-sm\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => removeRecommendation(index)}\n                className=\"p-2 text-red-500 hover:text-red-700\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst AssignObservation = () => {\n  const [selectedStudent, setSelectedStudent] = useState(null);\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [assessments, setAssessments] = useState({});\n  const [recommendations, setRecommendations] = useState([]);\n\n  const queryClient = useQueryClient();\n\n  const {\n    control,\n    handleSubmit,\n    watch,\n    reset,\n    formState: { errors }\n  } = useForm({\n    resolver: zodResolver(observationSchema),\n    defaultValues: {\n      observationDate: new Date().toISOString().split('T')[0],\n      term: 'term1'\n    }\n  });\n\n  const watchedSubject = watch('subjectId');\n\n  const { data: subjectsData } = useQuery({\n    queryKey: ['subjects', 'all'],\n    queryFn: () => observationApi.getSubjects()\n  });\n\n  const { data: parametersData } = useQuery({\n    queryKey: ['observation', 'parameters', 'by-subject', watchedSubject],\n    queryFn: () => observationApi.getParametersBySubject(watchedSubject),\n    enabled: !!watchedSubject\n  });\n\n  const createObservationMutation = useMutation({\n    mutationFn: observationApi.createObservation,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['observations']);\n      reset();\n      setSelectedStudent(null);\n      setAssessments({});\n      setRecommendations([]);\n    }\n  });\n\n  const handleAssessmentChange = (parameterId, assessment) => {\n    setAssessments(prev => ({\n      ...prev,\n      [parameterId]: assessment\n    }));\n  };\n\n  const onSubmit = (data) => {\n    // Validate that all parameters have grades\n    const requiredParameters = parametersData?.data || [];\n    const missingAssessments = requiredParameters.filter(\n      param => !assessments[param.id]?.grade\n    );\n\n    if (missingAssessments.length > 0) {\n      alert(`Please provide grades for all parameters: ${Array.isArray(missingAssessments) && missingAssessments.map(p => p.name).join(', ')}`);\n      return;\n    }\n\n    const observationData = {\n      ...data,\n      studentId: selectedStudent?.id,\n      parameters: Object.entries(assessments).map(([parameterId, assessment]) => ({\n        parameterId,\n        grade: assessment.grade,\n        remarks: assessment.remarks\n      })),\n      recommendations: recommendations.filter(rec => rec.trim()),\n      observedBy: 'current-user', // In real app, get from auth\n      observedAt: new Date().toISOString()\n    };\n\n    createObservationMutation.mutate(observationData);\n  };\n\n  const getCompletionStats = () => {\n    const totalParameters = parametersData?.data?.length || 0;\n    const completedParameters = Object.keys(assessments).filter(\n      id => assessments[id]?.grade\n    ).length;\n    \n    return {\n      total: totalParameters,\n      completed: completedParameters,\n      percentage: totalParameters > 0 ? Math.round((completedParameters / totalParameters) * 100) : 0\n    };\n  };\n\n  const stats = getCompletionStats();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Assign Observation</h1>\n        <div className=\"text-sm text-gray-500\">\n          Progress: {stats.completed}/{stats.total} parameters ({stats.percentage}%)\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-lg font-medium mb-4\">Basic Information</h2>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <StudentSelector\n                onSelect={setSelectedStudent}\n                selectedStudent={selectedStudent}\n              />\n              {!selectedStudent && (\n                <p className=\"text-red-500 text-sm\">Please select a student</p>\n              )}\n\n              <Controller\n                name=\"subjectId\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Subject *</label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.subjectId ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"\">Select Subject</option>\n                      {Array.isArray(subjectsData?.data) && subjectsData.data.map(subject => (\n                        <option key={subject.id} value={subject.id}>\n                          {subject.name}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.subjectId && (\n                      <p className=\"text-red-500 text-sm mt-1\">{errors.subjectId.message}</p>\n                    )}\n                  </div>\n                )}\n              />\n            </div>\n\n            <div className=\"space-y-4\">\n              <Controller\n                name=\"term\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Term *</label>\n                    <select\n                      {...field}\n                      className=\"w-full border rounded-lg px-3 py-2\"\n                    >\n                      <option value=\"term1\">Term 1</option>\n                      <option value=\"term2\">Term 2</option>\n                      <option value=\"annual\">Annual</option>\n                    </select>\n                  </div>\n                )}\n              />\n\n              <Controller\n                name=\"observationDate\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Observation Date *\"\n                    type=\"date\"\n                    {...field}\n                    error={errors.observationDate?.message}\n                  />\n                )}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Parameter Assessment */}\n        {watchedSubject && (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-lg font-medium\">Parameter Assessment</h2>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                  <div\n                    className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                    style={{ width: `${stats.percentage}%` }}\n                  />\n                </div>\n                <span className=\"text-sm text-gray-600\">{stats.percentage}%</span>\n              </div>\n            </div>\n            \n            <ParameterAssessment\n              parameters={parametersData?.data}\n              assessments={assessments}\n              onAssessmentChange={handleAssessmentChange}\n            />\n          </div>\n        )}\n\n        {/* Overall Comments and Recommendations */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-lg font-medium mb-4\">Overall Assessment</h2>\n          \n          <div className=\"space-y-4\">\n            <Controller\n              name=\"overallComments\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Overall Comments</label>\n                  <textarea\n                    {...field}\n                    rows={4}\n                    className=\"w-full border rounded-lg px-3 py-2\"\n                    placeholder=\"Provide overall observations about the student's performance...\"\n                  />\n                </div>\n              )}\n            />\n\n            <RecommendationInput\n              recommendations={recommendations}\n              onRecommendationsChange={setRecommendations}\n            />\n          </div>\n        </div>\n\n        {/* Submit Actions */}\n        <div className=\"flex justify-end gap-4\">\n          <button\n            type=\"button\"\n            onClick={() => {\n              reset();\n              setSelectedStudent(null);\n              setAssessments({});\n              setRecommendations([]);\n            }}\n            className=\"px-6 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Reset\n          </button>\n          <button\n            type=\"submit\"\n            disabled={createObservationMutation.isPending || !selectedStudent || stats.percentage < 100}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            {createObservationMutation.isPending ? 'Saving...' : 'Save Observation'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AssignObservation;"
        }
    ]
}