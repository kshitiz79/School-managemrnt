{
    "sourceFile": "src/pages/term/Template.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755986163482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755988846035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState } from 'react';\n-import { useState } from 'react'\n import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n import { \n   FileText,\n   Plus,\n"
                },
                {
                    "date": 1755989259886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import React, { useState } from 'react';\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n-import { \n+import React, { useState } from 'react'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n   FileText,\n   Plus,\n   Edit,\n   Trash2,\n@@ -17,35 +17,52 @@\n   Clock,\n   Star,\n   Layout,\n   Code,\n-  Image\n-} from 'lucide-react';\n-import Input from '../../components/ui/Input';\n-import Dialog from '../../components/ui/Dialog';\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n-import { templateApi } from '../../lib/api/template';\n+  Image,\n+} from 'lucide-react'\n+import Input from '../../components/ui/Input'\n+import Dialog from '../../components/ui/Dialog'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import { templateApi } from '../../lib/api/template'\n \n-const TemplateCard = ({ template, onEdit, onDelete, onDuplicate, onPreview, onViewHistory }) => {\n-  const getTypeColor = (type) => {\n+const TemplateCard = ({\n+  template,\n+  onEdit,\n+  onDelete,\n+  onDuplicate,\n+  onPreview,\n+  onViewHistory,\n+}) => {\n+  const getTypeColor = type => {\n     switch (type) {\n-      case 'report_card': return 'text-blue-600 bg-blue-100';\n-      case 'mark_sheet': return 'text-green-600 bg-green-100';\n-      case 'certificate': return 'text-purple-600 bg-purple-100';\n-      case 'transcript': return 'text-orange-600 bg-orange-100';\n-      case 'progress_report': return 'text-pink-600 bg-pink-100';\n-      default: return 'text-gray-600 bg-gray-100';\n+      case 'report_card':\n+        return 'text-blue-600 bg-blue-100'\n+      case 'mark_sheet':\n+        return 'text-green-600 bg-green-100'\n+      case 'certificate':\n+        return 'text-purple-600 bg-purple-100'\n+      case 'transcript':\n+        return 'text-orange-600 bg-orange-100'\n+      case 'progress_report':\n+        return 'text-pink-600 bg-pink-100'\n+      default:\n+        return 'text-gray-600 bg-gray-100'\n     }\n-  };\n+  }\n \n-  const getStatusColor = (status) => {\n+  const getStatusColor = status => {\n     switch (status) {\n-      case 'active': return 'text-green-600 bg-green-100';\n-      case 'draft': return 'text-yellow-600 bg-yellow-100';\n-      case 'archived': return 'text-gray-600 bg-gray-100';\n-      default: return 'text-gray-600 bg-gray-100';\n+      case 'active':\n+        return 'text-green-600 bg-green-100'\n+      case 'draft':\n+        return 'text-yellow-600 bg-yellow-100'\n+      case 'archived':\n+        return 'text-gray-600 bg-gray-100'\n+      default:\n+        return 'text-gray-600 bg-gray-100'\n     }\n-  };\n+  }\n \n   return (\n     <div className=\"bg-white border rounded-lg p-4 hover:shadow-md transition-shadow\">\n       <div className=\"flex justify-between items-start mb-3\">\n@@ -53,16 +70,23 @@\n           <h3 className=\"font-medium\">{template.name}</h3>\n           <p className=\"text-sm text-gray-600 mt-1\">{template.description}</p>\n         </div>\n         <div className=\"flex items-center gap-2\">\n-          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(template.type)}`}>\n+          <span\n+            className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(template.type)}`}\n+          >\n             {template.type.replace('_', ' ').toUpperCase()}\n           </span>\n-          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(template.status)}`}>\n+          <span\n+            className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(template.status)}`}\n+          >\n             {template.status.toUpperCase()}\n           </span>\n           {template.isDefault && (\n-            <Star className=\"w-4 h-4 text-yellow-500\" title=\"Default Template\" />\n+            <Star\n+              className=\"w-4 h-4 text-yellow-500\"\n+              title=\"Default Template\"\n+            />\n           )}\n         </div>\n       </div>\n \n@@ -73,24 +97,32 @@\n             <span className=\"font-medium ml-1\">{template.version}</span>\n           </div>\n           <div>\n             <span className=\"text-gray-500\">Format:</span>\n-            <span className=\"font-medium ml-1\">{template.format?.toUpperCase()}</span>\n+            <span className=\"font-medium ml-1\">\n+              {template.format?.toUpperCase()}\n+            </span>\n           </div>\n           <div>\n             <span className=\"text-gray-500\">Classes:</span>\n-            <span className=\"font-medium ml-1\">{template.applicableClasses?.length || 0}</span>\n+            <span className=\"font-medium ml-1\">\n+              {template.applicableClasses?.length || 0}\n+            </span>\n           </div>\n           <div>\n             <span className=\"text-gray-500\">Fields:</span>\n-            <span className=\"font-medium ml-1\">{template.fields?.length || 0}</span>\n+            <span className=\"font-medium ml-1\">\n+              {template.fields?.length || 0}\n+            </span>\n           </div>\n         </div>\n \n         <div className=\"text-sm\">\n           <span className=\"text-gray-500\">Last Modified:</span>\n           <span className=\"font-medium ml-1\">\n-            {new Date(template.updatedAt || template.createdAt).toLocaleDateString()}\n+            {new Date(\n+              template.updatedAt || template.createdAt,\n+            ).toLocaleDateString()}\n           </span>\n         </div>\n \n         {template.layout && (\n@@ -145,10 +177,10 @@\n           </button>\n         </div>\n       </div>\n     </div>\n-  );\n-};\n+  )\n+}\n \n const TemplateDialog = ({ template, open, onClose, onSave }) => {\n   const [formData, setFormData] = useState({\n     name: template?.name || '',\n@@ -160,88 +192,91 @@\n     applicableClasses: template?.applicableClasses || [],\n     layout: template?.layout || {\n       orientation: 'portrait',\n       pageSize: 'A4',\n-      margins: { top: 20, right: 20, bottom: 20, left: 20 }\n+      margins: { top: 20, right: 20, bottom: 20, left: 20 },\n     },\n     fields: template?.fields || [],\n     styling: template?.styling || {\n       fontFamily: 'Arial',\n       fontSize: 12,\n       primaryColor: '#000000',\n-      secondaryColor: '#666666'\n+      secondaryColor: '#666666',\n     },\n-    content: template?.content || ''\n-  });\n+    content: template?.content || '',\n+  })\n \n   const { data: classesData } = useQuery({\n     queryKey: ['classes', 'all'],\n-    queryFn: () => templateApi.getClasses()\n-  });\n+    queryFn: () => templateApi.getClasses(),\n+  })\n \n   const handleSave = () => {\n-    onSave(template?.id, formData);\n-    onClose();\n-  };\n+    onSave(template?.id, formData)\n+    onClose()\n+  }\n \n-  const toggleClass = (classId) => {\n+  const toggleClass = classId => {\n     setFormData(prev => ({\n       ...prev,\n       applicableClasses: prev.applicableClasses.includes(classId)\n         ? prev.applicableClasses.filter(id => id !== classId)\n-        : [...prev.applicableClasses, classId]\n-    }));\n-  };\n+        : [...prev.applicableClasses, classId],\n+    }))\n+  }\n \n   const addField = () => {\n     setFormData(prev => ({\n       ...prev,\n-      fields: [...prev.fields, {\n-        id: `field-${Date.now()}`,\n-        name: '',\n-        label: '',\n-        type: 'text',\n-        required: false,\n-        position: { x: 0, y: 0 },\n-        size: { width: 100, height: 20 }\n-      }]\n-    }));\n-  };\n+      fields: [\n+        ...prev.fields,\n+        {\n+          id: `field-${Date.now()}`,\n+          name: '',\n+          label: '',\n+          type: 'text',\n+          required: false,\n+          position: { x: 0, y: 0 },\n+          size: { width: 100, height: 20 },\n+        },\n+      ],\n+    }))\n+  }\n \n   const updateField = (index, field, value) => {\n     setFormData(prev => ({\n       ...prev,\n-      fields: prev.fields.map((f, i) => \n+      fields: prev.fields.map((f, i) =>\n         i === index ? { ...f, [field]: value } : f\n-      )\n-    }));\n-  };\n+      ),\n+    }))\n+  }\n \n-  const removeField = (index) => {\n+  const removeField = index => {\n     setFormData(prev => ({\n       ...prev,\n-      fields: prev.fields.filter((_, i) => i !== index)\n-    }));\n-  };\n+      fields: prev.fields.filter((_, i) => i !== index),\n+    }))\n+  }\n \n   const updateLayout = (field, value) => {\n     setFormData(prev => ({\n       ...prev,\n-      layout: { ...prev.layout, [field]: value }\n-    }));\n-  };\n+      layout: { ...prev.layout, [field]: value },\n+    }))\n+  }\n \n   const updateStyling = (field, value) => {\n     setFormData(prev => ({\n       ...prev,\n-      styling: { ...prev.styling, [field]: value }\n-    }));\n-  };\n+      styling: { ...prev.styling, [field]: value },\n+    }))\n+  }\n \n   return (\n-    <Dialog \n-      open={open} \n-      onClose={onClose} \n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n       title={template ? 'Edit Template' : 'Create Template'}\n       size=\"xl\"\n     >\n       <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n@@ -249,16 +284,22 @@\n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n           <Input\n             label=\"Template Name *\"\n             value={formData.name}\n-            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, name: e.target.value }))\n+            }\n             placeholder=\"e.g., CBSE Report Card Template\"\n           />\n           <div>\n-            <label className=\"block text-sm font-medium mb-1\">Template Type *</label>\n+            <label className=\"block text-sm font-medium mb-1\">\n+              Template Type *\n+            </label>\n             <select\n               value={formData.type}\n-              onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, type: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"report_card\">Report Card</option>\n               <option value=\"mark_sheet\">Mark Sheet</option>\n@@ -270,9 +311,11 @@\n           <div>\n             <label className=\"block text-sm font-medium mb-1\">Format</label>\n             <select\n               value={formData.format}\n-              onChange={(e) => setFormData(prev => ({ ...prev, format: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, format: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"pdf\">PDF</option>\n               <option value=\"html\">HTML</option>\n@@ -282,9 +325,11 @@\n           <div>\n             <label className=\"block text-sm font-medium mb-1\">Status</label>\n             <select\n               value={formData.status}\n-              onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, status: e.target.value }))\n+              }\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"draft\">Draft</option>\n               <option value=\"active\">Active</option>\n@@ -296,30 +341,35 @@\n         <div>\n           <label className=\"block text-sm font-medium mb-1\">Description</label>\n           <textarea\n             value={formData.description}\n-            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, description: e.target.value }))\n+            }\n             rows={3}\n             className=\"w-full border rounded-lg px-3 py-2\"\n             placeholder=\"Template description and usage notes...\"\n           />\n         </div>\n \n         {/* Applicable Classes */}\n         <div>\n-          <label className=\"block text-sm font-medium mb-2\">Applicable Classes</label>\n+          <label className=\"block text-sm font-medium mb-2\">\n+            Applicable Classes\n+          </label>\n           <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n-            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n-              <label key={cls.id} className=\"flex items-center gap-2\">\n-                <input\n-                  type=\"checkbox\"\n-                  checked={formData.applicableClasses.includes(cls.id)}\n-                  onChange={() => toggleClass(cls.id)}\n-                  className=\"rounded\"\n-                />\n-                <span className=\"text-sm\">{cls.name}</span>\n-              </label>\n-            ))}\n+            {Array.isArray(classesData?.data) &&\n+              classesData.data.map(cls => (\n+                <label key={cls.id} className=\"flex items-center gap-2\">\n+                  <input\n+                    type=\"checkbox\"\n+                    checked={formData.applicableClasses.includes(cls.id)}\n+                    onChange={() => toggleClass(cls.id)}\n+                    className=\"rounded\"\n+                  />\n+                  <span className=\"text-sm\">{cls.name}</span>\n+                </label>\n+              ))}\n           </div>\n         </div>\n \n         {/* Layout Settings */}\n@@ -329,23 +379,27 @@\n             Layout Settings\n           </h3>\n           <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n             <div>\n-              <label className=\"block text-sm font-medium mb-1\">Orientation</label>\n+              <label className=\"block text-sm font-medium mb-1\">\n+                Orientation\n+              </label>\n               <select\n                 value={formData.layout.orientation}\n-                onChange={(e) => updateLayout('orientation', e.target.value)}\n+                onChange={e => updateLayout('orientation', e.target.value)}\n                 className=\"w-full border rounded-lg px-3 py-2\"\n               >\n                 <option value=\"portrait\">Portrait</option>\n                 <option value=\"landscape\">Landscape</option>\n               </select>\n             </div>\n             <div>\n-              <label className=\"block text-sm font-medium mb-1\">Page Size</label>\n+              <label className=\"block text-sm font-medium mb-1\">\n+                Page Size\n+              </label>\n               <select\n                 value={formData.layout.pageSize}\n-                onChange={(e) => updateLayout('pageSize', e.target.value)}\n+                onChange={e => updateLayout('pageSize', e.target.value)}\n                 className=\"w-full border rounded-lg px-3 py-2\"\n               >\n                 <option value=\"A4\">A4</option>\n                 <option value=\"A3\">A3</option>\n@@ -353,19 +407,23 @@\n                 <option value=\"Legal\">Legal</option>\n               </select>\n             </div>\n             <div>\n-              <label className=\"block text-sm font-medium mb-1\">Margins (px)</label>\n+              <label className=\"block text-sm font-medium mb-1\">\n+                Margins (px)\n+              </label>\n               <input\n                 type=\"number\"\n                 value={formData.layout.margins?.top || 20}\n-                onChange={(e) => updateLayout('margins', {\n-                  ...formData.layout.margins,\n-                  top: parseInt(e.target.value) || 20,\n-                  right: parseInt(e.target.value) || 20,\n-                  bottom: parseInt(e.target.value) || 20,\n-                  left: parseInt(e.target.value) || 20\n-                })}\n+                onChange={e =>\n+                  updateLayout('margins', {\n+                    ...formData.layout.margins,\n+                    top: parseInt(e.target.value) || 20,\n+                    right: parseInt(e.target.value) || 20,\n+                    bottom: parseInt(e.target.value) || 20,\n+                    left: parseInt(e.target.value) || 20,\n+                  })\n+                }\n                 className=\"w-full border rounded-lg px-3 py-2\"\n                 placeholder=\"20\"\n               />\n             </div>\n@@ -379,12 +437,14 @@\n             Styling\n           </h3>\n           <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n             <div>\n-              <label className=\"block text-sm font-medium mb-1\">Font Family</label>\n+              <label className=\"block text-sm font-medium mb-1\">\n+                Font Family\n+              </label>\n               <select\n                 value={formData.styling.fontFamily}\n-                onChange={(e) => updateStyling('fontFamily', e.target.value)}\n+                onChange={e => updateStyling('fontFamily', e.target.value)}\n                 className=\"w-full border rounded-lg px-3 py-2\"\n               >\n                 <option value=\"Arial\">Arial</option>\n                 <option value=\"Times New Roman\">Times New Roman</option>\n@@ -395,28 +455,34 @@\n             <Input\n               label=\"Font Size\"\n               type=\"number\"\n               value={formData.styling.fontSize}\n-              onChange={(e) => updateStyling('fontSize', parseInt(e.target.value) || 12)}\n+              onChange={e =>\n+                updateStyling('fontSize', parseInt(e.target.value) || 12)\n+              }\n               min=\"8\"\n               max=\"24\"\n               size=\"sm\"\n             />\n             <div>\n-              <label className=\"block text-sm font-medium mb-1\">Primary Color</label>\n+              <label className=\"block text-sm font-medium mb-1\">\n+                Primary Color\n+              </label>\n               <input\n                 type=\"color\"\n                 value={formData.styling.primaryColor}\n-                onChange={(e) => updateStyling('primaryColor', e.target.value)}\n+                onChange={e => updateStyling('primaryColor', e.target.value)}\n                 className=\"w-full h-10 border rounded-lg\"\n               />\n             </div>\n             <div>\n-              <label className=\"block text-sm font-medium mb-1\">Secondary Color</label>\n+              <label className=\"block text-sm font-medium mb-1\">\n+                Secondary Color\n+              </label>\n               <input\n                 type=\"color\"\n                 value={formData.styling.secondaryColor}\n-                onChange={(e) => updateStyling('secondaryColor', e.target.value)}\n+                onChange={e => updateStyling('secondaryColor', e.target.value)}\n                 className=\"w-full h-10 border rounded-lg\"\n               />\n             </div>\n           </div>\n@@ -437,81 +503,97 @@\n               <Plus className=\"w-4 h-4\" />\n               Add Field\n             </button>\n           </div>\n-          \n+\n           {formData.fields.length === 0 ? (\n             <p className=\"text-gray-500 text-sm\">No fields added yet</p>\n           ) : (\n             <div className=\"space-y-3 max-h-40 overflow-y-auto\">\n-              {Array.isArray(formData.fields) && formData.fields.map((field, index) => (\n-                <div key={field.id} className=\"border rounded-lg p-3\">\n-                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n-                    <Input\n-                      label=\"Field Name\"\n-                      value={field.name}\n-                      onChange={(e) => updateField(index, 'name', e.target.value)}\n-                      placeholder=\"student_name\"\n-                      size=\"sm\"\n-                    />\n-                    <Input\n-                      label=\"Label\"\n-                      value={field.label}\n-                      onChange={(e) => updateField(index, 'label', e.target.value)}\n-                      placeholder=\"Student Name\"\n-                      size=\"sm\"\n-                    />\n-                    <div>\n-                      <label className=\"block text-sm font-medium mb-1\">Type</label>\n-                      <select\n-                        value={field.type}\n-                        onChange={(e) => updateField(index, 'type', e.target.value)}\n-                        className=\"w-full border rounded px-3 py-1 text-sm\"\n-                      >\n-                        <option value=\"text\">Text</option>\n-                        <option value=\"number\">Number</option>\n-                        <option value=\"date\">Date</option>\n-                        <option value=\"image\">Image</option>\n-                        <option value=\"table\">Table</option>\n-                      </select>\n+              {Array.isArray(formData.fields) &&\n+                formData.fields.map((field, index) => (\n+                  <div key={field.id} className=\"border rounded-lg p-3\">\n+                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n+                      <Input\n+                        label=\"Field Name\"\n+                        value={field.name}\n+                        onChange={e =>\n+                          updateField(index, 'name', e.target.value)\n+                        }\n+                        placeholder=\"student_name\"\n+                        size=\"sm\"\n+                      />\n+                      <Input\n+                        label=\"Label\"\n+                        value={field.label}\n+                        onChange={e =>\n+                          updateField(index, 'label', e.target.value)\n+                        }\n+                        placeholder=\"Student Name\"\n+                        size=\"sm\"\n+                      />\n+                      <div>\n+                        <label className=\"block text-sm font-medium mb-1\">\n+                          Type\n+                        </label>\n+                        <select\n+                          value={field.type}\n+                          onChange={e =>\n+                            updateField(index, 'type', e.target.value)\n+                          }\n+                          className=\"w-full border rounded px-3 py-1 text-sm\"\n+                        >\n+                          <option value=\"text\">Text</option>\n+                          <option value=\"number\">Number</option>\n+                          <option value=\"date\">Date</option>\n+                          <option value=\"image\">Image</option>\n+                          <option value=\"table\">Table</option>\n+                        </select>\n+                      </div>\n+                      <div className=\"flex items-end gap-2\">\n+                        <label className=\"flex items-center gap-1\">\n+                          <input\n+                            type=\"checkbox\"\n+                            checked={field.required}\n+                            onChange={e =>\n+                              updateField(index, 'required', e.target.checked)\n+                            }\n+                            className=\"rounded\"\n+                          />\n+                          <span className=\"text-xs\">Required</span>\n+                        </label>\n+                        <button\n+                          type=\"button\"\n+                          onClick={() => removeField(index)}\n+                          className=\"p-1 text-red-500 hover:text-red-700\"\n+                        >\n+                          <X className=\"w-4 h-4\" />\n+                        </button>\n+                      </div>\n                     </div>\n-                    <div className=\"flex items-end gap-2\">\n-                      <label className=\"flex items-center gap-1\">\n-                        <input\n-                          type=\"checkbox\"\n-                          checked={field.required}\n-                          onChange={(e) => updateField(index, 'required', e.target.checked)}\n-                          className=\"rounded\"\n-                        />\n-                        <span className=\"text-xs\">Required</span>\n-                      </label>\n-                      <button\n-                        type=\"button\"\n-                        onClick={() => removeField(index)}\n-                        className=\"p-1 text-red-500 hover:text-red-700\"\n-                      >\n-                        <X className=\"w-4 h-4\" />\n-                      </button>\n-                    </div>\n                   </div>\n-                </div>\n-              ))}\n+                ))}\n             </div>\n           )}\n         </div>\n \n         {/* Template Content */}\n         <div>\n-          <label className=\"block text-sm font-medium mb-1\">Template Content (HTML/Text)</label>\n+          <label className=\"block text-sm font-medium mb-1\">\n+            Template Content (HTML/Text)\n+          </label>\n           <textarea\n             value={formData.content}\n-            onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n+            onChange={e =>\n+              setFormData(prev => ({ ...prev, content: e.target.value }))\n+            }\n             rows={8}\n             className=\"w-full border rounded-lg px-3 py-2 font-mono text-sm\"\n             placeholder=\"Enter your template content here. Use {{field_name}} for dynamic fields...\"\n           />\n           <div className=\"text-xs text-gray-500 mt-1\">\n-            Use double curly braces for dynamic fields: {{`{student_name}`}}, {{`{class}`}}, {{`{marks}`}}\n+            Use double curly braces for dynamic fields: {'{student_name}'},{' '}\n+            {'{class}'}, {'{marks}'}\n           </div>\n         </div>\n \n         {/* Options */}\n@@ -519,9 +601,11 @@\n           <label className=\"flex items-center gap-2\">\n             <input\n               type=\"checkbox\"\n               checked={formData.isDefault}\n-              onChange={(e) => setFormData(prev => ({ ...prev, isDefault: e.target.checked }))}\n+              onChange={e =>\n+                setFormData(prev => ({ ...prev, isDefault: e.target.checked }))\n+              }\n               className=\"rounded\"\n             />\n             <span className=\"text-sm font-medium\">Set as default template</span>\n           </label>\n@@ -545,13 +629,13 @@\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n-};\n+  )\n+}\n \n const TemplatePreviewDialog = ({ template, open, onClose }) => {\n-  if (!template) return null;\n+  if (!template) return null\n \n   const sampleData = {\n     student_name: 'John Doe',\n     class: 'Class 10',\n@@ -564,25 +648,30 @@\n     total_marks: '450',\n     obtained_marks: '385',\n     percentage: '85.5',\n     grade: 'A',\n-    rank: '5'\n-  };\n+    rank: '5',\n+  }\n \n   const renderPreview = () => {\n-    let content = template.content || '';\n-    \n+    let content = template.content || ''\n+\n     // Replace template variables with sample data\n     Object.entries(sampleData).forEach(([key, value]) => {\n-      const regex = new RegExp(`{{\\\\s*${key}\\\\s*}}`, 'g');\n-      content = content.replace(regex, value);\n-    });\n+      const regex = new RegExp(`{{\\\\s*${key}\\\\s*}}`, 'g')\n+      content = content.replace(regex, value)\n+    })\n \n-    return content;\n-  };\n+    return content\n+  }\n \n   return (\n-    <Dialog open={open} onClose={onClose} title={`Preview: ${template.name}`} size=\"xl\">\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      title={`Preview: ${template.name}`}\n+      size=\"xl\"\n+    >\n       <div className=\"space-y-4\">\n         <div className=\"flex justify-between items-center\">\n           <div className=\"text-sm text-gray-600\">\n             Template Type: {template.type?.replace('_', ' ').toUpperCase()}\n@@ -596,23 +685,23 @@\n         </div>\n \n         <div className=\"border rounded-lg p-6 bg-white min-h-96\">\n           {template.format === 'html' ? (\n-            <div \n+            <div\n               dangerouslySetInnerHTML={{ __html: renderPreview() }}\n               style={{\n                 fontFamily: template.styling?.fontFamily || 'Arial',\n                 fontSize: `${template.styling?.fontSize || 12}px`,\n-                color: template.styling?.primaryColor || '#000000'\n+                color: template.styling?.primaryColor || '#000000',\n               }}\n             />\n           ) : (\n-            <pre \n+            <pre\n               className=\"whitespace-pre-wrap\"\n               style={{\n                 fontFamily: template.styling?.fontFamily || 'Arial',\n                 fontSize: `${template.styling?.fontSize || 12}px`,\n-                color: template.styling?.primaryColor || '#000000'\n+                color: template.styling?.primaryColor || '#000000',\n               }}\n             >\n               {renderPreview()}\n             </pre>\n@@ -628,22 +717,27 @@\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n-};\n+  )\n+}\n \n const VersionHistoryDialog = ({ template, open, onClose }) => {\n   const { data: versionsData } = useQuery({\n     queryKey: ['template-versions', template?.id],\n     queryFn: () => templateApi.getTemplateVersions(template?.id),\n-    enabled: !!template?.id && open\n-  });\n+    enabled: !!template?.id && open,\n+  })\n \n-  if (!template) return null;\n+  if (!template) return null\n \n   return (\n-    <Dialog open={open} onClose={onClose} title={`Version History: ${template.name}`} size=\"lg\">\n+    <Dialog\n+      open={open}\n+      onClose={onClose}\n+      title={`Version History: ${template.name}`}\n+      size=\"lg\"\n+    >\n       <div className=\"space-y-4\">\n         {versionsData?.data?.length === 0 ? (\n           <div className=\"text-center py-8 text-gray-500\">\n             <History className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n@@ -655,41 +749,55 @@\n               <div key={version.id} className=\"border rounded-lg p-4\">\n                 <div className=\"flex justify-between items-start\">\n                   <div>\n                     <div className=\"flex items-center gap-2\">\n-                      <span className=\"font-medium\">Version {version.version}</span>\n+                      <span className=\"font-medium\">\n+                        Version {version.version}\n+                      </span>\n                       {index === 0 && (\n                         <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-xs\">\n                           Current\n                         </span>\n                       )}\n                     </div>\n-                    <p className=\"text-sm text-gray-600 mt-1\">{version.description}</p>\n+                    <p className=\"text-sm text-gray-600 mt-1\">\n+                      {version.description}\n+                    </p>\n                     <div className=\"text-xs text-gray-500 mt-2\">\n-                      Modified by {version.modifiedBy} on {new Date(version.createdAt).toLocaleString()}\n+                      Modified by {version.modifiedBy} on{' '}\n+                      {new Date(version.createdAt).toLocaleString()}\n                     </div>\n                   </div>\n                   <div className=\"flex gap-2\">\n-                    <button className=\"p-1 text-gray-400 hover:text-blue-600\" title=\"Preview\">\n+                    <button\n+                      className=\"p-1 text-gray-400 hover:text-blue-600\"\n+                      title=\"Preview\"\n+                    >\n                       <Eye className=\"w-4 h-4\" />\n                     </button>\n                     {index !== 0 && (\n-                      <button className=\"p-1 text-gray-400 hover:text-green-600\" title=\"Restore\">\n+                      <button\n+                        className=\"p-1 text-gray-400 hover:text-green-600\"\n+                        title=\"Restore\"\n+                      >\n                         <CheckCircle className=\"w-4 h-4\" />\n                       </button>\n                     )}\n                   </div>\n                 </div>\n                 {version.changes && version.changes.length > 0 && (\n                   <div className=\"mt-3 pt-3 border-t\">\n-                    <div className=\"text-xs font-medium text-gray-700 mb-1\">Changes:</div>\n+                    <div className=\"text-xs font-medium text-gray-700 mb-1\">\n+                      Changes:\n+                    </div>\n                     <ul className=\"text-xs text-gray-600 space-y-1\">\n-                      {Array.isArray(version.changes) && version.changes.map((change, idx) => (\n-                        <li key={idx} className=\"flex items-center gap-1\">\n-                          <div className=\"w-1 h-1 bg-gray-400 rounded-full\" />\n-                          {change}\n-                        </li>\n-                      ))}\n+                      {Array.isArray(version.changes) &&\n+                        version.changes.map((change, idx) => (\n+                          <li key={idx} className=\"flex items-center gap-1\">\n+                            <div className=\"w-1 h-1 bg-gray-400 rounded-full\" />\n+                            {change}\n+                          </li>\n+                        ))}\n                     </ul>\n                   </div>\n                 )}\n               </div>\n@@ -706,102 +814,107 @@\n           </button>\n         </div>\n       </div>\n     </Dialog>\n-  );\n-};\n+  )\n+}\n \n const Template = () => {\n-  const [selectedTemplate, setSelectedTemplate] = useState(null);\n-  const [showTemplateDialog, setShowTemplateDialog] = useState(false);\n-  const [showPreviewDialog, setShowPreviewDialog] = useState(false);\n-  const [showHistoryDialog, setShowHistoryDialog] = useState(false);\n-  const [filterType, setFilterType] = useState('all');\n-  const [filterStatus, setFilterStatus] = useState('all');\n+  const [selectedTemplate, setSelectedTemplate] = useState(null)\n+  const [showTemplateDialog, setShowTemplateDialog] = useState(false)\n+  const [showPreviewDialog, setShowPreviewDialog] = useState(false)\n+  const [showHistoryDialog, setShowHistoryDialog] = useState(false)\n+  const [filterType, setFilterType] = useState('all')\n+  const [filterStatus, setFilterStatus] = useState('all')\n \n-  const queryClient = useQueryClient();\n+  const queryClient = useQueryClient()\n \n   const { data: templatesData, isLoading } = useQuery({\n     queryKey: ['templates', 'all'],\n-    queryFn: () => templateApi.getTemplates()\n-  });\n+    queryFn: () => templateApi.getTemplates(),\n+  })\n \n   const saveTemplateMutation = useMutation({\n-    mutationFn: ({ id, data }) => id ? templateApi.updateTemplate(id, data) : templateApi.createTemplate(data),\n+    mutationFn: ({ id, data }) =>\n+      id\n+        ? templateApi.updateTemplate(id, data)\n+        : templateApi.createTemplate(data),\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['templates']);\n-      setShowTemplateDialog(false);\n-      setSelectedTemplate(null);\n-    }\n-  });\n+      queryClient.invalidateQueries(['templates'])\n+      setShowTemplateDialog(false)\n+      setSelectedTemplate(null)\n+    },\n+  })\n \n   const deleteTemplateMutation = useMutation({\n     mutationFn: templateApi.deleteTemplate,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['templates']);\n-    }\n-  });\n+      queryClient.invalidateQueries(['templates'])\n+    },\n+  })\n \n   const duplicateTemplateMutation = useMutation({\n     mutationFn: templateApi.duplicateTemplate,\n     onSuccess: () => {\n-      queryClient.invalidateQueries(['templates']);\n-    }\n-  });\n+      queryClient.invalidateQueries(['templates'])\n+    },\n+  })\n \n-  const handleEditTemplate = (template) => {\n-    setSelectedTemplate(template);\n-    setShowTemplateDialog(true);\n-  };\n+  const handleEditTemplate = template => {\n+    setSelectedTemplate(template)\n+    setShowTemplateDialog(true)\n+  }\n \n-  const handleDeleteTemplate = (template) => {\n+  const handleDeleteTemplate = template => {\n     if (confirm(`Are you sure you want to delete \"${template.name}\"?`)) {\n-      deleteTemplateMutation.mutate(template.id);\n+      deleteTemplateMutation.mutate(template.id)\n     }\n-  };\n+  }\n \n-  const handleDuplicateTemplate = (template) => {\n-    duplicateTemplateMutation.mutate(template.id);\n-  };\n+  const handleDuplicateTemplate = template => {\n+    duplicateTemplateMutation.mutate(template.id)\n+  }\n \n-  const handlePreviewTemplate = (template) => {\n-    setSelectedTemplate(template);\n-    setShowPreviewDialog(true);\n-  };\n+  const handlePreviewTemplate = template => {\n+    setSelectedTemplate(template)\n+    setShowPreviewDialog(true)\n+  }\n \n-  const handleViewHistory = (template) => {\n-    setSelectedTemplate(template);\n-    setShowHistoryDialog(true);\n-  };\n+  const handleViewHistory = template => {\n+    setSelectedTemplate(template)\n+    setShowHistoryDialog(true)\n+  }\n \n   const handleSaveTemplate = (id, data) => {\n-    saveTemplateMutation.mutate({ id, data });\n-  };\n+    saveTemplateMutation.mutate({ id, data })\n+  }\n \n   const handleAddTemplate = () => {\n-    setSelectedTemplate(null);\n-    setShowTemplateDialog(true);\n-  };\n+    setSelectedTemplate(null)\n+    setShowTemplateDialog(true)\n+  }\n \n-  const filteredTemplates = templatesData?.data?.filter(template => {\n-    const matchesType = filterType === 'all' || template.type === filterType;\n-    const matchesStatus = filterStatus === 'all' || template.status === filterStatus;\n-    return matchesType && matchesStatus;\n-  }) || [];\n+  const filteredTemplates =\n+    templatesData?.data?.filter(template => {\n+      const matchesType = filterType === 'all' || template.type === filterType\n+      const matchesStatus =\n+        filterStatus === 'all' || template.status === filterStatus\n+      return matchesType && matchesStatus\n+    }) || []\n \n   const getStatistics = () => {\n-    const templates = templatesData?.data || [];\n+    const templates = templatesData?.data || []\n     return {\n       total: templates.length,\n       active: templates.filter(t => t.status === 'active').length,\n       draft: templates.filter(t => t.status === 'draft').length,\n-      archived: templates.filter(t => t.status === 'archived').length\n-    };\n-  };\n+      archived: templates.filter(t => t.status === 'archived').length,\n+    }\n+  }\n \n-  const stats = getStatistics();\n+  const stats = getStatistics()\n \n-  if (isLoading) return <LoadingSkeleton />;\n+  if (isLoading) return <LoadingSkeleton />\n \n   return (\n     <div className=\"space-y-6\">\n       <div className=\"flex justify-between items-center\">\n@@ -864,12 +977,14 @@\n       {/* Filters */}\n       <div className=\"bg-white rounded-lg shadow p-4\">\n         <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n           <div>\n-            <label className=\"block text-sm font-medium mb-1\">Filter by Type</label>\n+            <label className=\"block text-sm font-medium mb-1\">\n+              Filter by Type\n+            </label>\n             <select\n               value={filterType}\n-              onChange={(e) => setFilterType(e.target.value)}\n+              onChange={e => setFilterType(e.target.value)}\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"all\">All Types</option>\n               <option value=\"report_card\">Report Card</option>\n@@ -879,12 +994,14 @@\n               <option value=\"progress_report\">Progress Report</option>\n             </select>\n           </div>\n           <div>\n-            <label className=\"block text-sm font-medium mb-1\">Filter by Status</label>\n+            <label className=\"block text-sm font-medium mb-1\">\n+              Filter by Status\n+            </label>\n             <select\n               value={filterStatus}\n-              onChange={(e) => setFilterStatus(e.target.value)}\n+              onChange={e => setFilterStatus(e.target.value)}\n               className=\"w-full border rounded-lg px-3 py-2\"\n             >\n               <option value=\"all\">All Status</option>\n               <option value=\"active\">Active</option>\n@@ -893,9 +1010,10 @@\n             </select>\n           </div>\n           <div className=\"flex items-end\">\n             <div className=\"text-sm text-gray-500\">\n-              Showing {filteredTemplates.length} of {templatesData?.data?.length || 0} templates\n+              Showing {filteredTemplates.length} of{' '}\n+              {templatesData?.data?.length || 0} templates\n             </div>\n           </div>\n         </div>\n       </div>\n@@ -904,14 +1022,15 @@\n       <div className=\"space-y-4\">\n         {filteredTemplates.length === 0 ? (\n           <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n             <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n-            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Templates Found</h3>\n+            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n+              No Templates Found\n+            </h3>\n             <p className=\"text-gray-500 mb-4\">\n-              {templatesData?.data?.length === 0 \n+              {templatesData?.data?.length === 0\n                 ? 'Create your first exam template to get started.'\n-                : 'No templates match your current filters.'\n-              }\n+                : 'No templates match your current filters.'}\n             </p>\n             {templatesData?.data?.length === 0 && (\n               <button\n                 onClick={handleAddTemplate}\n@@ -922,19 +1041,20 @@\n             )}\n           </div>\n         ) : (\n           <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n-            {Array.isArray(filteredTemplates) && filteredTemplates.map(template => (\n-              <TemplateCard\n-                key={template.id}\n-                template={template}\n-                onEdit={handleEditTemplate}\n-                onDelete={handleDeleteTemplate}\n-                onDuplicate={handleDuplicateTemplate}\n-                onPreview={handlePreviewTemplate}\n-                onViewHistory={handleViewHistory}\n-              />\n-            ))}\n+            {Array.isArray(filteredTemplates) &&\n+              filteredTemplates.map(template => (\n+                <TemplateCard\n+                  key={template.id}\n+                  template={template}\n+                  onEdit={handleEditTemplate}\n+                  onDelete={handleDeleteTemplate}\n+                  onDuplicate={handleDuplicateTemplate}\n+                  onPreview={handlePreviewTemplate}\n+                  onViewHistory={handleViewHistory}\n+                />\n+              ))}\n           </div>\n         )}\n       </div>\n \n@@ -942,10 +1062,10 @@\n       <TemplateDialog\n         template={selectedTemplate}\n         open={showTemplateDialog}\n         onClose={() => {\n-          setShowTemplateDialog(false);\n-          setSelectedTemplate(null);\n+          setShowTemplateDialog(false)\n+          setSelectedTemplate(null)\n         }}\n         onSave={handleSaveTemplate}\n       />\n \n@@ -962,8 +1082,8 @@\n         open={showHistoryDialog}\n         onClose={() => setShowHistoryDialog(false)}\n       />\n     </div>\n-  );\n-};\n+  )\n+}\n\\ No newline at end of file\n \n-export default Template;\n+export default Template\n"
                },
                {
                    "date": 1755994925692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   Code,\n   Image,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { templateApi } from '../../lib/api/template'\n \n const TemplateCard = ({\n@@ -1085,5 +1085,5 @@\n     </div>\n   )\n }\n \n-export default Template\n\\ No newline at end of file\n+export default Template\n"
                }
            ],
            "date": 1755986163482,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  FileText,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Copy,\n  Download,\n  Upload,\n  History,\n  Settings,\n  Save,\n  X,\n  CheckCircle,\n  Clock,\n  Star,\n  Layout,\n  Code,\n  Image\n} from 'lucide-react';\nimport Input from '../../components/ui/Input';\nimport Dialog from '../../components/ui/Dialog';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport { templateApi } from '../../lib/api/template';\n\nconst TemplateCard = ({ template, onEdit, onDelete, onDuplicate, onPreview, onViewHistory }) => {\n  const getTypeColor = (type) => {\n    switch (type) {\n      case 'report_card': return 'text-blue-600 bg-blue-100';\n      case 'mark_sheet': return 'text-green-600 bg-green-100';\n      case 'certificate': return 'text-purple-600 bg-purple-100';\n      case 'transcript': return 'text-orange-600 bg-orange-100';\n      case 'progress_report': return 'text-pink-600 bg-pink-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-100';\n      case 'draft': return 'text-yellow-600 bg-yellow-100';\n      case 'archived': return 'text-gray-600 bg-gray-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  return (\n    <div className=\"bg-white border rounded-lg p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-3\">\n        <div>\n          <h3 className=\"font-medium\">{template.name}</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">{template.description}</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(template.type)}`}>\n            {template.type.replace('_', ' ').toUpperCase()}\n          </span>\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(template.status)}`}>\n            {template.status.toUpperCase()}\n          </span>\n          {template.isDefault && (\n            <Star className=\"w-4 h-4 text-yellow-500\" title=\"Default Template\" />\n          )}\n        </div>\n      </div>\n\n      <div className=\"space-y-2 mb-4\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-500\">Version:</span>\n            <span className=\"font-medium ml-1\">{template.version}</span>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Format:</span>\n            <span className=\"font-medium ml-1\">{template.format?.toUpperCase()}</span>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Classes:</span>\n            <span className=\"font-medium ml-1\">{template.applicableClasses?.length || 0}</span>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Fields:</span>\n            <span className=\"font-medium ml-1\">{template.fields?.length || 0}</span>\n          </div>\n        </div>\n\n        <div className=\"text-sm\">\n          <span className=\"text-gray-500\">Last Modified:</span>\n          <span className=\"font-medium ml-1\">\n            {new Date(template.updatedAt || template.createdAt).toLocaleDateString()}\n          </span>\n        </div>\n\n        {template.layout && (\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Layout className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"text-gray-600\">\n              {template.layout.orientation} • {template.layout.pageSize}\n            </span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <div className=\"text-xs text-gray-500\">\n          Created by {template.createdBy}\n        </div>\n        <div className=\"flex gap-1\">\n          <button\n            onClick={() => onPreview(template)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"Preview\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onViewHistory(template)}\n            className=\"p-1 text-gray-400 hover:text-purple-600\"\n            title=\"Version History\"\n          >\n            <History className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDuplicate(template)}\n            className=\"p-1 text-gray-400 hover:text-green-600\"\n            title=\"Duplicate\"\n          >\n            <Copy className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onEdit(template)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"Edit\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDelete(template)}\n            className=\"p-1 text-gray-400 hover:text-red-600\"\n            title=\"Delete\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst TemplateDialog = ({ template, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    name: template?.name || '',\n    description: template?.description || '',\n    type: template?.type || 'report_card',\n    format: template?.format || 'pdf',\n    status: template?.status || 'draft',\n    isDefault: template?.isDefault || false,\n    applicableClasses: template?.applicableClasses || [],\n    layout: template?.layout || {\n      orientation: 'portrait',\n      pageSize: 'A4',\n      margins: { top: 20, right: 20, bottom: 20, left: 20 }\n    },\n    fields: template?.fields || [],\n    styling: template?.styling || {\n      fontFamily: 'Arial',\n      fontSize: 12,\n      primaryColor: '#000000',\n      secondaryColor: '#666666'\n    },\n    content: template?.content || ''\n  });\n\n  const { data: classesData } = useQuery({\n    queryKey: ['classes', 'all'],\n    queryFn: () => templateApi.getClasses()\n  });\n\n  const handleSave = () => {\n    onSave(template?.id, formData);\n    onClose();\n  };\n\n  const toggleClass = (classId) => {\n    setFormData(prev => ({\n      ...prev,\n      applicableClasses: prev.applicableClasses.includes(classId)\n        ? prev.applicableClasses.filter(id => id !== classId)\n        : [...prev.applicableClasses, classId]\n    }));\n  };\n\n  const addField = () => {\n    setFormData(prev => ({\n      ...prev,\n      fields: [...prev.fields, {\n        id: `field-${Date.now()}`,\n        name: '',\n        label: '',\n        type: 'text',\n        required: false,\n        position: { x: 0, y: 0 },\n        size: { width: 100, height: 20 }\n      }]\n    }));\n  };\n\n  const updateField = (index, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      fields: prev.fields.map((f, i) => \n        i === index ? { ...f, [field]: value } : f\n      )\n    }));\n  };\n\n  const removeField = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      fields: prev.fields.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateLayout = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      layout: { ...prev.layout, [field]: value }\n    }));\n  };\n\n  const updateStyling = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      styling: { ...prev.styling, [field]: value }\n    }));\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      title={template ? 'Edit Template' : 'Create Template'}\n      size=\"xl\"\n    >\n      <div className=\"space-y-6 max-h-[80vh] overflow-y-auto\">\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Template Name *\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"e.g., CBSE Report Card Template\"\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Template Type *</label>\n            <select\n              value={formData.type}\n              onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"report_card\">Report Card</option>\n              <option value=\"mark_sheet\">Mark Sheet</option>\n              <option value=\"certificate\">Certificate</option>\n              <option value=\"transcript\">Transcript</option>\n              <option value=\"progress_report\">Progress Report</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Format</label>\n            <select\n              value={formData.format}\n              onChange={(e) => setFormData(prev => ({ ...prev, format: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"pdf\">PDF</option>\n              <option value=\"html\">HTML</option>\n              <option value=\"docx\">Word Document</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Status</label>\n            <select\n              value={formData.status}\n              onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value }))}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"draft\">Draft</option>\n              <option value=\"active\">Active</option>\n              <option value=\"archived\">Archived</option>\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Description</label>\n          <textarea\n            value={formData.description}\n            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Template description and usage notes...\"\n          />\n        </div>\n\n        {/* Applicable Classes */}\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Applicable Classes</label>\n          <div className=\"grid grid-cols-3 md:grid-cols-5 gap-2 max-h-32 overflow-y-auto\">\n            {Array.isArray(classesData?.data) && classesData.data.map(cls => (\n              <label key={cls.id} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.applicableClasses.includes(cls.id)}\n                  onChange={() => toggleClass(cls.id)}\n                  className=\"rounded\"\n                />\n                <span className=\"text-sm\">{cls.name}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* Layout Settings */}\n        <div>\n          <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n            <Layout className=\"w-4 h-4\" />\n            Layout Settings\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Orientation</label>\n              <select\n                value={formData.layout.orientation}\n                onChange={(e) => updateLayout('orientation', e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"portrait\">Portrait</option>\n                <option value=\"landscape\">Landscape</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Page Size</label>\n              <select\n                value={formData.layout.pageSize}\n                onChange={(e) => updateLayout('pageSize', e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"A4\">A4</option>\n                <option value=\"A3\">A3</option>\n                <option value=\"Letter\">Letter</option>\n                <option value=\"Legal\">Legal</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Margins (px)</label>\n              <input\n                type=\"number\"\n                value={formData.layout.margins?.top || 20}\n                onChange={(e) => updateLayout('margins', {\n                  ...formData.layout.margins,\n                  top: parseInt(e.target.value) || 20,\n                  right: parseInt(e.target.value) || 20,\n                  bottom: parseInt(e.target.value) || 20,\n                  left: parseInt(e.target.value) || 20\n                })}\n                className=\"w-full border rounded-lg px-3 py-2\"\n                placeholder=\"20\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Styling */}\n        <div>\n          <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n            <Settings className=\"w-4 h-4\" />\n            Styling\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Font Family</label>\n              <select\n                value={formData.styling.fontFamily}\n                onChange={(e) => updateStyling('fontFamily', e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"Arial\">Arial</option>\n                <option value=\"Times New Roman\">Times New Roman</option>\n                <option value=\"Helvetica\">Helvetica</option>\n                <option value=\"Georgia\">Georgia</option>\n              </select>\n            </div>\n            <Input\n              label=\"Font Size\"\n              type=\"number\"\n              value={formData.styling.fontSize}\n              onChange={(e) => updateStyling('fontSize', parseInt(e.target.value) || 12)}\n              min=\"8\"\n              max=\"24\"\n              size=\"sm\"\n            />\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Primary Color</label>\n              <input\n                type=\"color\"\n                value={formData.styling.primaryColor}\n                onChange={(e) => updateStyling('primaryColor', e.target.value)}\n                className=\"w-full h-10 border rounded-lg\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Secondary Color</label>\n              <input\n                type=\"color\"\n                value={formData.styling.secondaryColor}\n                onChange={(e) => updateStyling('secondaryColor', e.target.value)}\n                className=\"w-full h-10 border rounded-lg\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Template Fields */}\n        <div>\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"font-medium flex items-center gap-2\">\n              <Code className=\"w-4 h-4\" />\n              Template Fields\n            </h3>\n            <button\n              type=\"button\"\n              onClick={addField}\n              className=\"text-blue-600 hover:text-blue-800 flex items-center gap-1 text-sm\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Add Field\n            </button>\n          </div>\n          \n          {formData.fields.length === 0 ? (\n            <p className=\"text-gray-500 text-sm\">No fields added yet</p>\n          ) : (\n            <div className=\"space-y-3 max-h-40 overflow-y-auto\">\n              {Array.isArray(formData.fields) && formData.fields.map((field, index) => (\n                <div key={field.id} className=\"border rounded-lg p-3\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n                    <Input\n                      label=\"Field Name\"\n                      value={field.name}\n                      onChange={(e) => updateField(index, 'name', e.target.value)}\n                      placeholder=\"student_name\"\n                      size=\"sm\"\n                    />\n                    <Input\n                      label=\"Label\"\n                      value={field.label}\n                      onChange={(e) => updateField(index, 'label', e.target.value)}\n                      placeholder=\"Student Name\"\n                      size=\"sm\"\n                    />\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Type</label>\n                      <select\n                        value={field.type}\n                        onChange={(e) => updateField(index, 'type', e.target.value)}\n                        className=\"w-full border rounded px-3 py-1 text-sm\"\n                      >\n                        <option value=\"text\">Text</option>\n                        <option value=\"number\">Number</option>\n                        <option value=\"date\">Date</option>\n                        <option value=\"image\">Image</option>\n                        <option value=\"table\">Table</option>\n                      </select>\n                    </div>\n                    <div className=\"flex items-end gap-2\">\n                      <label className=\"flex items-center gap-1\">\n                        <input\n                          type=\"checkbox\"\n                          checked={field.required}\n                          onChange={(e) => updateField(index, 'required', e.target.checked)}\n                          className=\"rounded\"\n                        />\n                        <span className=\"text-xs\">Required</span>\n                      </label>\n                      <button\n                        type=\"button\"\n                        onClick={() => removeField(index)}\n                        className=\"p-1 text-red-500 hover:text-red-700\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Template Content */}\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Template Content (HTML/Text)</label>\n          <textarea\n            value={formData.content}\n            onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n            rows={8}\n            className=\"w-full border rounded-lg px-3 py-2 font-mono text-sm\"\n            placeholder=\"Enter your template content here. Use {{field_name}} for dynamic fields...\"\n          />\n          <div className=\"text-xs text-gray-500 mt-1\">\n            Use double curly braces for dynamic fields: {{`{student_name}`}}, {{`{class}`}}, {{`{marks}`}}\n          </div>\n        </div>\n\n        {/* Options */}\n        <div className=\"flex items-center gap-4\">\n          <label className=\"flex items-center gap-2\">\n            <input\n              type=\"checkbox\"\n              checked={formData.isDefault}\n              onChange={(e) => setFormData(prev => ({ ...prev, isDefault: e.target.checked }))}\n              className=\"rounded\"\n            />\n            <span className=\"text-sm font-medium\">Set as default template</span>\n          </label>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!formData.name.trim()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            {template ? 'Update Template' : 'Create Template'}\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst TemplatePreviewDialog = ({ template, open, onClose }) => {\n  if (!template) return null;\n\n  const sampleData = {\n    student_name: 'John Doe',\n    class: 'Class 10',\n    section: 'A',\n    roll_number: '001',\n    father_name: 'Robert Doe',\n    mother_name: 'Jane Doe',\n    academic_year: '2024-25',\n    term: 'Term 1',\n    total_marks: '450',\n    obtained_marks: '385',\n    percentage: '85.5',\n    grade: 'A',\n    rank: '5'\n  };\n\n  const renderPreview = () => {\n    let content = template.content || '';\n    \n    // Replace template variables with sample data\n    Object.entries(sampleData).forEach(([key, value]) => {\n      const regex = new RegExp(`{{\\\\s*${key}\\\\s*}}`, 'g');\n      content = content.replace(regex, value);\n    });\n\n    return content;\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} title={`Preview: ${template.name}`} size=\"xl\">\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-sm text-gray-600\">\n            Template Type: {template.type?.replace('_', ' ').toUpperCase()}\n          </div>\n          <div className=\"flex gap-2\">\n            <button className=\"px-3 py-1 border rounded text-sm hover:bg-gray-50 flex items-center gap-1\">\n              <Download className=\"w-4 h-4\" />\n              Download PDF\n            </button>\n          </div>\n        </div>\n\n        <div className=\"border rounded-lg p-6 bg-white min-h-96\">\n          {template.format === 'html' ? (\n            <div \n              dangerouslySetInnerHTML={{ __html: renderPreview() }}\n              style={{\n                fontFamily: template.styling?.fontFamily || 'Arial',\n                fontSize: `${template.styling?.fontSize || 12}px`,\n                color: template.styling?.primaryColor || '#000000'\n              }}\n            />\n          ) : (\n            <pre \n              className=\"whitespace-pre-wrap\"\n              style={{\n                fontFamily: template.styling?.fontFamily || 'Arial',\n                fontSize: `${template.styling?.fontSize || 12}px`,\n                color: template.styling?.primaryColor || '#000000'\n              }}\n            >\n              {renderPreview()}\n            </pre>\n          )}\n        </div>\n\n        <div className=\"flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close Preview\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst VersionHistoryDialog = ({ template, open, onClose }) => {\n  const { data: versionsData } = useQuery({\n    queryKey: ['template-versions', template?.id],\n    queryFn: () => templateApi.getTemplateVersions(template?.id),\n    enabled: !!template?.id && open\n  });\n\n  if (!template) return null;\n\n  return (\n    <Dialog open={open} onClose={onClose} title={`Version History: ${template.name}`} size=\"lg\">\n      <div className=\"space-y-4\">\n        {versionsData?.data?.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <History className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\n            <p>No version history available</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {versionsData?.data?.map((version, index) => (\n              <div key={version.id} className=\"border rounded-lg p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">Version {version.version}</span>\n                      {index === 0 && (\n                        <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded text-xs\">\n                          Current\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{version.description}</p>\n                    <div className=\"text-xs text-gray-500 mt-2\">\n                      Modified by {version.modifiedBy} on {new Date(version.createdAt).toLocaleString()}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <button className=\"p-1 text-gray-400 hover:text-blue-600\" title=\"Preview\">\n                      <Eye className=\"w-4 h-4\" />\n                    </button>\n                    {index !== 0 && (\n                      <button className=\"p-1 text-gray-400 hover:text-green-600\" title=\"Restore\">\n                        <CheckCircle className=\"w-4 h-4\" />\n                      </button>\n                    )}\n                  </div>\n                </div>\n                {version.changes && version.changes.length > 0 && (\n                  <div className=\"mt-3 pt-3 border-t\">\n                    <div className=\"text-xs font-medium text-gray-700 mb-1\">Changes:</div>\n                    <ul className=\"text-xs text-gray-600 space-y-1\">\n                      {Array.isArray(version.changes) && version.changes.map((change, idx) => (\n                        <li key={idx} className=\"flex items-center gap-1\">\n                          <div className=\"w-1 h-1 bg-gray-400 rounded-full\" />\n                          {change}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  );\n};\n\nconst Template = () => {\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [showTemplateDialog, setShowTemplateDialog] = useState(false);\n  const [showPreviewDialog, setShowPreviewDialog] = useState(false);\n  const [showHistoryDialog, setShowHistoryDialog] = useState(false);\n  const [filterType, setFilterType] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  const queryClient = useQueryClient();\n\n  const { data: templatesData, isLoading } = useQuery({\n    queryKey: ['templates', 'all'],\n    queryFn: () => templateApi.getTemplates()\n  });\n\n  const saveTemplateMutation = useMutation({\n    mutationFn: ({ id, data }) => id ? templateApi.updateTemplate(id, data) : templateApi.createTemplate(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['templates']);\n      setShowTemplateDialog(false);\n      setSelectedTemplate(null);\n    }\n  });\n\n  const deleteTemplateMutation = useMutation({\n    mutationFn: templateApi.deleteTemplate,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['templates']);\n    }\n  });\n\n  const duplicateTemplateMutation = useMutation({\n    mutationFn: templateApi.duplicateTemplate,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['templates']);\n    }\n  });\n\n  const handleEditTemplate = (template) => {\n    setSelectedTemplate(template);\n    setShowTemplateDialog(true);\n  };\n\n  const handleDeleteTemplate = (template) => {\n    if (confirm(`Are you sure you want to delete \"${template.name}\"?`)) {\n      deleteTemplateMutation.mutate(template.id);\n    }\n  };\n\n  const handleDuplicateTemplate = (template) => {\n    duplicateTemplateMutation.mutate(template.id);\n  };\n\n  const handlePreviewTemplate = (template) => {\n    setSelectedTemplate(template);\n    setShowPreviewDialog(true);\n  };\n\n  const handleViewHistory = (template) => {\n    setSelectedTemplate(template);\n    setShowHistoryDialog(true);\n  };\n\n  const handleSaveTemplate = (id, data) => {\n    saveTemplateMutation.mutate({ id, data });\n  };\n\n  const handleAddTemplate = () => {\n    setSelectedTemplate(null);\n    setShowTemplateDialog(true);\n  };\n\n  const filteredTemplates = templatesData?.data?.filter(template => {\n    const matchesType = filterType === 'all' || template.type === filterType;\n    const matchesStatus = filterStatus === 'all' || template.status === filterStatus;\n    return matchesType && matchesStatus;\n  }) || [];\n\n  const getStatistics = () => {\n    const templates = templatesData?.data || [];\n    return {\n      total: templates.length,\n      active: templates.filter(t => t.status === 'active').length,\n      draft: templates.filter(t => t.status === 'draft').length,\n      archived: templates.filter(t => t.status === 'archived').length\n    };\n  };\n\n  const stats = getStatistics();\n\n  if (isLoading) return <LoadingSkeleton />;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Exam Templates</h1>\n        <div className=\"flex gap-2\">\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Upload className=\"w-4 h-4\" />\n            Import\n          </button>\n          <button\n            onClick={handleAddTemplate}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Create Template\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <FileText className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.total}</p>\n              <p className=\"text-sm text-gray-600\">Total Templates</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.active}</p>\n              <p className=\"text-sm text-gray-600\">Active</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.draft}</p>\n              <p className=\"text-sm text-gray-600\">Draft</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Settings className=\"w-8 h-8 text-gray-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{stats.archived}</p>\n              <p className=\"text-sm text-gray-600\">Archived</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Filter by Type</label>\n            <select\n              value={filterType}\n              onChange={(e) => setFilterType(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Types</option>\n              <option value=\"report_card\">Report Card</option>\n              <option value=\"mark_sheet\">Mark Sheet</option>\n              <option value=\"certificate\">Certificate</option>\n              <option value=\"transcript\">Transcript</option>\n              <option value=\"progress_report\">Progress Report</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Filter by Status</label>\n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"active\">Active</option>\n              <option value=\"draft\">Draft</option>\n              <option value=\"archived\">Archived</option>\n            </select>\n          </div>\n          <div className=\"flex items-end\">\n            <div className=\"text-sm text-gray-500\">\n              Showing {filteredTemplates.length} of {templatesData?.data?.length || 0} templates\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Templates List */}\n      <div className=\"space-y-4\">\n        {filteredTemplates.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n            <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Templates Found</h3>\n            <p className=\"text-gray-500 mb-4\">\n              {templatesData?.data?.length === 0 \n                ? 'Create your first exam template to get started.'\n                : 'No templates match your current filters.'\n              }\n            </p>\n            {templatesData?.data?.length === 0 && (\n              <button\n                onClick={handleAddTemplate}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n              >\n                Create Template\n              </button>\n            )}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {Array.isArray(filteredTemplates) && filteredTemplates.map(template => (\n              <TemplateCard\n                key={template.id}\n                template={template}\n                onEdit={handleEditTemplate}\n                onDelete={handleDeleteTemplate}\n                onDuplicate={handleDuplicateTemplate}\n                onPreview={handlePreviewTemplate}\n                onViewHistory={handleViewHistory}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Template Dialog */}\n      <TemplateDialog\n        template={selectedTemplate}\n        open={showTemplateDialog}\n        onClose={() => {\n          setShowTemplateDialog(false);\n          setSelectedTemplate(null);\n        }}\n        onSave={handleSaveTemplate}\n      />\n\n      {/* Preview Dialog */}\n      <TemplatePreviewDialog\n        template={selectedTemplate}\n        open={showPreviewDialog}\n        onClose={() => setShowPreviewDialog(false)}\n      />\n\n      {/* Version History Dialog */}\n      <VersionHistoryDialog\n        template={selectedTemplate}\n        open={showHistoryDialog}\n        onClose={() => setShowHistoryDialog(false)}\n      />\n    </div>\n  );\n};\n\nexport default Template;"
        }
    ]
}