{
    "sourceFile": "src/pages/teacher/Classes.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755988846032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755988846032,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { Users, BookOpen, Calendar, BarChart3 } from 'lucide-react'\nimport { withRoleGuard } from '../../guards/withRoleGuard.jsx'\nimport { USER_ROLES } from '../../constants/auth'\nimport {\n  useStudentsByClass,\n  useHomeworkByClass,\n  useExamSchedule,\n  useClassAttendance,\n  useDashboardKpis,\n  useCreateHomework,\n  useMarkAttendance, \n} from '../../hooks/useApi'\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardContent,\n  KpiCard,\n  TrendChart,\n  ClassSectionPicker,\n  DateRangePicker,\n  QuickActions,\n  EmptyState,\n  LoadingSkeleton,\n  ErrorState,\n  FormDialog,\n  Input,\n  Button,\n} from '../../components/ui'\n\nconst Classes = () => {\n  const [selectedClass, setSelectedClass] = useState(null)\n  const [dateRange, setDateRange] = useState({ start: null, end: null })\n  const [homeworkDialogOpen, setHomeworkDialogOpen] = useState(false)\n\n  // Fetch teacher dashboard KPIs\n  const {\n    data: kpis,\n    isLoading: kpisLoading,\n    error: kpisError, \n  } = useDashboardKpis('teacher')\n\n  // Fetch students for selected class\n  const {\n    data: students = [],\n    isLoading: studentsLoading,\n    error: studentsError, \n  } = useStudentsByClass(selectedClass?.classId, selectedClass?.sectionName, {\n    enabled: !!selectedClass,\n  })\n\n  // Fetch homework for selected class\n  const {\n    data: homework = [],\n    isLoading: homeworkLoading, \n  } = useHomeworkByClass(\n    selectedClass?.classId,\n    selectedClass?.sectionName,\n    { enabled: !!selectedClass }\n  )\n\n  // Fetch exam schedule for selected class\n  const {\n    data: exams = [],\n    isLoading: examsLoading, \n  } = useExamSchedule(\n    selectedClass?.classId,\n    selectedClass?.sectionName,\n    { enabled: !!selectedClass },\n  )\n\n  // Fetch attendance for selected class (today)\n  const today = new Date().toISOString().split('T')[0]\n  const {\n    data: attendanceData = [],\n    isLoading: attendanceLoading, \n  } = useClassAttendance(\n      selectedClass?.classId,\n      selectedClass?.sectionName,\n      today,\n      { enabled: !!selectedClass },\n  )\n\n  // Mutations\n  const createHomeworkMutation = useCreateHomework()\n  const markAttendanceMutation = useMarkAttendance()\n\n  // Transform KPIs data\n  const kpiData = React.useMemo(() => {\n    if (!kpis) return []\n\n    return [\n      {\n        title: 'Total Students',\n        value: kpis.totalStudents?.toString() || '0',\n        change: '+12%',\n        changeType: 'positive',\n        icon: Users,\n        description: 'from last month',\n      },\n      {\n        title: 'Active Classes',\n        value: kpis.totalClasses?.toString() || '0',\n        change: '+2',\n        changeType: 'positive',\n        icon: BookOpen,\n        description: 'new this semester',\n      },\n      {\n        title: 'Pending Homework',\n        value: kpis.pendingHomework?.toString() || '0',\n        change:\n          homework.length > 0 ? `${homework.length} total` : 'No assignments',\n        changeType: 'neutral',\n        icon: Calendar,\n        description: 'assignments',\n      },\n      {\n        title: 'Upcoming Exams',\n        value: kpis.upcomingExams?.toString() || '0',\n        change:\n          exams.length > 0 ? `${exams.length} scheduled` : 'None scheduled',\n        changeType: 'neutral',\n        icon: BarChart3,\n        description: 'this month',\n      },\n    ]\n  }, [kpis, homework.length, exams.length])\n\n  // Generate attendance chart data\n  const weeklyAttendanceData = React.useMemo(() => {\n    // Mock weekly data - in real app, this would come from API\n    return [\n      { name: 'Mon', value: 95 },\n      { name: 'Tue', value: 88 },\n      { name: 'Wed', value: 92 },\n      { name: 'Thu', value: 85 },\n      { name: 'Fri', value: 90 },\n    ]\n  }, [])\n\n  // Generate grade distribution data\n  const gradeDistribution = React.useMemo(() => {\n    // Mock data - in real app, calculate from actual grades\n    return [\n      { name: 'A', value: 25 },\n      { name: 'B', value: 35 },\n      { name: 'C', value: 20 },\n      { name: 'D', value: 15 },\n      { name: 'F', value: 5 },\n    ]\n  }, [])\n\n  const quickActions = [\n    {\n      id: 'create-assignment',\n      label: 'Create Assignment',\n      icon: BookOpen,\n      variant: 'default',\n      description: 'Add new assignment',\n      onClick: () => setHomeworkDialogOpen(true),\n    },\n    {\n      id: 'take-attendance',\n      label: 'Take Attendance',\n      icon: Users,\n      variant: 'outline',\n      description: 'Mark student attendance',\n      onClick: () => handleTakeAttendance(),\n    },\n    {\n      id: 'grade-submissions',\n      label: 'Grade Submissions',\n      icon: BarChart3,\n      variant: 'outline',\n      description: 'Review and grade work',\n      badge: homework.filter(hw => hw.status === 'submitted').length.toString(),\n    },\n    {\n      id: 'schedule-class',\n      label: 'Schedule Class',\n      icon: Calendar,\n      variant: 'outline',\n      description: 'Plan class sessions',\n    },\n  ]\n\n  const handleClassChange = classData => {\n    setSelectedClass(classData)\n  }\n\n  const handleCreateHomework = async event => {\n    event.preventDefault()\n    const formData = new FormData(event.target)\n\n    try {\n      await createHomeworkMutation.mutateAsync({\n        title: formData.get('title'),\n        description: formData.get('description'),\n        subjectId: 'math', // Default subject\n        classId: selectedClass.classId,\n        section: selectedClass.sectionName,\n        assignedBy: 'staff-2', // Current teacher\n        assignedDate: new Date().toISOString().split('T')[0],\n        dueDate: formData.get('dueDate'),\n        status: 'active',\n        instructions: formData.get('instructions') || '',\n      })\n      setHomeworkDialogOpen(false)\n    } catch (error) {\n      console.error('Failed to create homework:', error)\n    }\n  }\n\n  const handleTakeAttendance = async () => {\n    if (!selectedClass || !students.length) return\n\n    // Mock attendance marking - in real app, this would be a proper form\n    const attendanceRecords = Array.isArray(students)\n      ? students.map(student => ({\n          userId: student.id,\n          type: 'student',\n          date: today,\n          status: Math.random() > 0.1 ? 'present' : 'absent', // 90% attendance rate\n          markedBy: 'staff-2', // Current teacher\n        }))\n      : []\n\n    try {\n      await markAttendanceMutation.mutateAsync(attendanceRecords)\n      alert('Attendance marked successfully!')\n    } catch (error) {\n      console.error('Failed to mark attendance:', error)\n    }\n  }\n\n  // Handle loading states\n  const isLoading =\n    kpisLoading || studentsLoading || homeworkLoading || examsLoading\n  const error = kpisError || studentsError\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <LoadingSkeleton.Dashboard />\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <ErrorState\n          error={error}\n          onRetry={() => window.location.reload()}\n          showRetry={true}\n        />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">My Classes</h1>\n          <p className=\"text-gray-600\">\n            Manage your classes and track student progress\n          </p>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <ClassSectionPicker\n            value={selectedClass?.fullId}\n            onChange={handleClassChange}\n            label=\"Select Class\"\n            placeholder=\"Choose a class to view details...\"\n          />\n        </div>\n        <div className=\"flex-1\">\n          <DateRangePicker\n            value={dateRange}\n            onChange={setDateRange}\n            label=\"Date Range\"\n            placeholder=\"Select date range for analytics...\"\n          />\n        </div>\n      </div>\n\n      {selectedClass ? (\n        <>\n          {/* KPI Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {Array.isArray(kpiData) &&\n              kpiData.map((kpi, index) => <KpiCard key={index} {...kpi} />)}\n          </div>\n\n          {/* Quick Actions */}\n          <QuickActions\n            title={`Quick Actions for ${selectedClass.className} - ${selectedClass.sectionName}`}\n            actions={quickActions}\n            variant=\"card\"\n            layout=\"grid\"\n          />\n\n          {/* Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <TrendChart\n              title=\"Weekly Attendance\"\n              description=\"Student attendance over the past week\"\n              data={weeklyAttendanceData}\n              type=\"bar\"\n              color=\"#3b82f6\"\n              formatTooltip={value => [`${value}%`, 'Attendance']}\n            />\n\n            <TrendChart\n              title=\"Grade Distribution\"\n              description=\"Current grade distribution for the class\"\n              data={gradeDistribution}\n              type=\"pie\"\n              colors={['#10b981', '#3b82f6', '#f59e0b', '#ef4444', '#6b7280']}\n            />\n          </div>\n\n          {/* Class Details */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Class Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Class:</span>\n                    <span className=\"font-medium\">\n                      {selectedClass.className}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Section:</span>\n                    <span className=\"font-medium\">\n                      {selectedClass.sectionName}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total Students:</span>\n                    <span className=\"font-medium\">\n                      {selectedClass.students}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Subject:</span>\n                    <span className=\"font-medium\">Mathematics</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Schedule:</span>\n                    <span className=\"font-medium\">Mon, Wed, Fri - 9:00 AM</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">\n                        Assignment submitted\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        John Smith - 2 hours ago\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">\n                        New announcement posted\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        Quiz scheduled for Friday - 4 hours ago\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">Attendance marked</p>\n                      <p className=\"text-xs text-gray-500\">\n                        28/30 students present - 1 day ago\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </>\n      ) : (\n        <EmptyState\n          title=\"No Class Selected\"\n          description=\"Please select a class from the dropdown above to view class details and analytics.\"\n          variant=\"courses\"\n        />\n      )}\n\n      {/* Homework Creation Dialog */}\n      <FormDialog\n        open={homeworkDialogOpen}\n        onOpenChange={setHomeworkDialogOpen}\n        title=\"Create New Assignment\"\n        description=\"Add a new homework assignment for your class\"\n        onSubmit={handleCreateHomework}\n        submitLabel=\"Create Assignment\"\n        loading={createHomeworkMutation.isPending}\n      >\n        <div className=\"space-y-4\">\n          <Input\n            name=\"title\"\n            label=\"Assignment Title\"\n            placeholder=\"Enter assignment title\"\n            required\n          />\n          <Input\n            name=\"description\"\n            label=\"Description\"\n            placeholder=\"Enter assignment description\"\n            required\n          />\n          <Input name=\"dueDate\" type=\"date\" label=\"Due Date\" required />\n          <Input\n            name=\"instructions\"\n            label=\"Instructions\"\n            placeholder=\"Additional instructions for students\"\n          />\n        </div>\n      </FormDialog>\n    </div>\n  )\n}\n\nexport default withRoleGuard([USER_ROLES.TEACHER])(Classes)\n"
        }
    ]
}