{
    "sourceFile": "src/pages/frontoffice/PostalReceive.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755994275309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755994925740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   Printer,\n   AlertTriangle,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import Table from '../../components/ui/Table'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n"
                },
                {
                    "date": 1755995169611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,949 @@\n+import React, { useState } from 'react'\n+import React, { useState } from 'react'\n+import { useForm, Controller } from 'react-hook-form'\n+import { zodResolver } from '@hookform/resolvers/zod'\n+import { z } from 'zod'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n+  Plus,\n+  Search,\n+  Filter,\n+  MoreHorizontal,\n+  Edit,\n+  Eye,\n+  Package,\n+  Inbox,\n+  CheckCircle,\n+  Clock,\n+  User,\n+  Calendar,\n+  FileText,\n+  Download,\n+  Printer,\n+  AlertTriangle,\n+} from 'lucide-react'\n+import Input from '../../components/ui/Input'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n+import { Table } from '../../components/ui/Table'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import ErrorState from '../../components/ui/ErrorState'\n+import EmptyState from '../../components/ui/EmptyState'\n+import Pagination from '../../components/ui/Pagination'\n+import Dropdown from '../../components/ui/Dropdown'\n+import { postalReceiveApi } from '../../lib/api/postalReceive'\n+import { staffApi } from '../../lib/api/staff'\n+\n+// Validation Schema\n+const receiveSchema = z.object({\n+  senderName: z.string().min(1, 'Sender name is required'),\n+  senderAddress: z.string().optional(),\n+  senderOrganization: z.string().optional(),\n+\n+  itemType: z.enum(\n+    ['letter', 'document', 'parcel', 'certificate', 'report_card', 'other'],\n+    {\n+      required_error: 'Item type is required',\n+    }\n+  ),\n+  itemDescription: z.string().min(1, 'Item description is required'),\n+\n+  serviceType: z.enum(\n+    ['regular', 'registered', 'speed_post', 'courier', 'express'],\n+    {\n+      required_error: 'Service type is required',\n+    }),\n+\n+  receivedDate: z.string().min(1, 'Received date is required'),\n+  receivedTime: z.string().min(1, 'Received time is required'),\n+  receivedBy: z.string().min(1, 'Received by is required'),\n+\n+  addressedTo: z.string().min(1, 'Addressed to is required'),\n+  department: z.string().optional(),\n+\n+  trackingNumber: z.string().optional(),\n+  referenceNumber: z.string().optional(),\n+\n+  priority: z.enum(['low', 'medium', 'high', 'urgent'], {\n+    required_error: 'Priority is required',\n+  }),\n+\n+  deliveryStatus: z\n+    .enum(['pending', 'delivered', 'returned'], {\n+      required_error: 'Delivery status is required',\n+    })\n+    .default('pending'),\n+\n+  deliveredTo: z.string().optional(),\n+  deliveredDate: z.string().optional(),\n+  deliveredTime: z.string().optional(),\n+\n+  notes: z.string().optional(),\n+})\n+\n+const PostalReceive = () => {\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('')\n+  const [serviceFilter, setServiceFilter] = useState('')\n+  const [dateFilter, setDateFilter] = useState('')\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [pageSize] = useState(10)\n+  const [showCreateDialog, setShowCreateDialog] = useState(false)\n+  const [showEditDialog, setShowEditDialog] = useState(false)\n+  const [selectedItem, setSelectedItem] = useState(null)\n+  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n+  const [showDeliveryDialog, setShowDeliveryDialog] = useState(false)\n+\n+  const queryClient = useQueryClient()\n+\n+  const {\n+    control,\n+    handleSubmit,\n+    reset,\n+    watch,\n+    formState: { errors },\n+  } = useForm({\n+    resolver: zodResolver(receiveSchema),\n+    mode: 'onChange',\n+    defaultValues: {\n+      receivedDate: new Date().toISOString().split('T')[0],\n+      receivedTime: new Date().toTimeString().slice(0, 5),\n+      priority: 'medium',\n+      deliveryStatus: 'pending',\n+      serviceType: 'regular',\n+    }\n+  })\n+\n+  const deliveryStatus = watch('deliveryStatus')\n+\n+  const {\n+    data: receiveData,\n+    isLoading,\n+    error,\n+  } = useQuery({\n+    queryKey: [\n+      'postalReceive',\n+      {\n+        page: currentPage,\n+        pageSize,\n+        search: searchTerm,\n+        status: statusFilter,\n+        service: serviceFilter,\n+        date: dateFilter,\n+      },\n+    ],\n+    queryFn: () =>\n+      postalReceiveApi.getAll({\n+        page: currentPage,\n+        pageSize,\n+        search: searchTerm,\n+        status: statusFilter,\n+        service: serviceFilter,\n+        date: dateFilter,\n+      }),\n+  })\n+\n+  const { data: staffData } = useQuery({\n+    queryKey: ['staff', 'all'],\n+    queryFn: () => staffApi.getAll({ all: true }),\n+  })\n+\n+  const createMutation = useMutation({\n+    mutationFn: postalReceiveApi.create,\n+    onSuccess: () => {\n+      queryClient.invalidateQueries(['postalReceive'])\n+      setShowCreateDialog(false)\n+      reset()\n+    }\n+  })\n+\n+  const updateMutation = useMutation({\n+    mutationFn: ({ id, data }) => postalReceiveApi.update(id, data),\n+    onSuccess: () => {\n+      queryClient.invalidateQueries(['postalReceive'])\n+      setShowEditDialog(false)\n+      reset()\n+    }\n+  })\n+\n+  const deliverMutation = useMutation({\n+    mutationFn: ({ id, deliveredTo }) =>\n+      postalReceiveApi.markAsDelivered(id, deliveredTo),\n+    onSuccess: () => {\n+      queryClient.invalidateQueries(['postalReceive'])\n+      setShowDeliveryDialog(false)\n+    }\n+  })\n+\n+  const handleEdit = item => {\n+    setSelectedItem(item)\n+    reset({\n+      senderName: item.senderName,\n+      senderAddress: item.senderAddress || '',\n+      senderOrganization: item.senderOrganization || '',\n+      itemType: item.itemType,\n+      itemDescription: item.itemDescription,\n+      serviceType: item.serviceType,\n+      receivedDate: item.receivedDate?.split('T')[0],\n+      receivedTime: item.receivedTime,\n+      receivedBy: item.receivedBy,\n+      addressedTo: item.addressedTo,\n+      department: item.department || '',\n+      trackingNumber: item.trackingNumber || '',\n+      referenceNumber: item.referenceNumber || '',\n+      priority: item.priority,\n+      deliveryStatus: item.deliveryStatus,\n+      deliveredTo: item.deliveredTo || '',\n+      deliveredDate: item.deliveredDate?.split('T')[0] || '',\n+      deliveredTime: item.deliveredTime || '',\n+      notes: item.notes || '',\n+    })\n+    setShowEditDialog(true)\n+  };\n+\n+  const handleViewDetails = item => {\n+    setSelectedItem(item)\n+    setShowDetailsDialog(true)\n+  };\n+\n+  const handleMarkDelivered = item => {\n+    setSelectedItem(item)\n+    setShowDeliveryDialog(true)\n+  };\n+\n+  const onSubmit = data => {\n+    if (selectedItem) {\n+      updateMutation.mutate({ id: selectedItem.id, data })\n+    } else {\n+      createMutation.mutate(data)\n+    }\n+  }\n+\n+  const getStatusColor = status => {\n+    switch (status) {\n+      case 'pending':\n+        return 'bg-yellow-100 text-yellow-800'\n+      case 'delivered':\n+        return 'bg-green-100 text-green-800'\n+      case 'returned':\n+        return 'bg-red-100 text-red-800'\n+      default:\n+        return 'bg-gray-100 text-gray-800'\n+    }\n+  }\n+\n+  const getServiceIcon = service => {\n+    switch (service) {\n+      case 'regular':\n+        return Package\n+      case 'registered':\n+        return FileText\n+      case 'speed_post':\n+        return Inbox\n+      case 'courier':\n+        return Package\n+      case 'express':\n+        return AlertTriangle\n+      default:\n+        return Package\n+    }\n+  }\n+\n+  const columns = [\n+    {\n+      key: 'receiveId',\n+      header: 'Receive ID',\n+      render: item => (\n+        <div className=\"font-mono text-sm\">\n+          {item.receiveId || `RCV-${item.id}`}\n+        </div>\n+      ),\n+    },\n+    {\n+      key: 'sender',\n+      header: 'Sender',\n+      render: item => (\n+        <div>\n+          <div className=\"font-medium\">{item.senderName}</div>\n+          <div className=\"text-sm text-gray-500\">\n+            {item.senderOrganization || 'Individual'}\n+          </div>\n+        </div>\n+      ),\n+    },\n+    {\n+      key: 'item',\n+      header: 'Item',\n+      render: item => (\n+        <div>\n+          <div className=\"font-medium capitalize\">\n+            {item.itemType?.replace('_', ' ')}\n+          </div>\n+          <div className=\"text-sm text-gray-500\">{item.itemDescription}</div>\n+        </div>\n+      ),\n+    },\n+    {\n+      key: 'service',\n+      header: 'Service',\n+      render: item => {\n+        const Icon = getServiceIcon(item.serviceType)\n+        return (\n+          <div className=\"flex items-center gap-2\">\n+            <Icon className=\"w-4 h-4 text-gray-400\" />\n+            <span className=\"capitalize\">\n+              {item.serviceType?.replace('_', ' ')}\n+            </span>\n+          </div>\n+        )\n+      }\n+    },\n+    {\n+      key: 'addressedTo',\n+      header: 'Addressed To',\n+      render: item => (\n+        <div>\n+          <div className=\"font-medium\">{item.addressedTo}</div>\n+          <div className=\"text-sm text-gray-500\">\n+            {item.department || 'General'}\n+          </div>\n+        </div>\n+      ),\n+    },\n+    {\n+      key: 'receivedDate',\n+      header: 'Received',\n+      render: item => (\n+        <div>\n+          <div>{new Date(item.receivedDate).toLocaleDateString()}</div>\n+          <div className=\"text-sm text-gray-500\">{item.receivedTime}</div>\n+        </div>\n+      ),\n+    },\n+    {\n+      key: 'deliveryStatus',\n+      header: 'Status',\n+      render: item => (\n+        <span\n+          className={`px-2 py-1 rounded-full text-xs ${getStatusColor(item.deliveryStatus)}`}\n+        >\n+          {item.deliveryStatus?.toUpperCase()}\n+        </span>\n+      ),\n+    },\n+    {\n+      key: 'actions',\n+      header: 'Actions',\n+      render: item => (\n+        <Dropdown\n+          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n+          items={[\n+            {\n+              label: 'View Details',\n+              icon: Eye,\n+              onClick: () => handleViewDetails(item),\n+            },\n+            {\n+              label: 'Edit',\n+              icon: Edit,\n+              onClick: () => handleEdit(item),\n+            },\n+            {\n+              label: 'Mark Delivered',\n+              icon: CheckCircle,\n+              onClick: () => handleMarkDelivered(item),\n+              disabled: item.deliveryStatus === 'delivered',\n+            },\n+            {\n+              label: 'Print Receipt',\n+              icon: Printer,\n+              onClick: () => console.log('Print receipt for', item.id),\n+            }\n+          ]}\n+        />\n+      ),\n+    }\n+  ]\n+\n+  if (isLoading) return <LoadingSkeleton />\n+  if (error) return <ErrorState message=\"Failed to load postal receive data\" />\n+\n+  return (\n+    <div className=\"space-y-6\">\n+      <div className=\"flex justify-between items-center\">\n+        <h1 className=\"text-2xl font-bold\">Postal Receive</h1>\n+        <div className=\"flex gap-2\">\n+          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n+            <Download className=\"w-4 h-4\" />\n+            Export\n+          </button>\n+          <button\n+            onClick={() => {\n+              reset()\n+              setSelectedItem(null)\n+              setShowCreateDialog(true)\n+            }}\n+            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n+          >\n+            <Plus className=\"w-4 h-4\" />\n+            Record Receipt\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Statistics Cards */}\n+      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <Inbox className=\"w-8 h-8 text-blue-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">{receiveData?.total || 0}</p>\n+              <p className=\"text-sm text-gray-600\">Total Received</p>\n+            </div>\n+          </div>\n+        </div>\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <Clock className=\"w-8 h-8 text-yellow-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">\n+                {receiveData?.data?.filter(d => d.deliveryStatus === 'pending')\n+                  .length || 0}\n+              </p>\n+              <p className=\"text-sm text-gray-600\">Pending Delivery</p>\n+            </div>\n+          </div>\n+        </div>\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">\n+                {receiveData?.data?.filter(\n+                  d => d.deliveryStatus === 'delivered'\n+                ).length || 0}\n+              </p>\n+              <p className=\"text-sm text-gray-600\">Delivered</p>\n+            </div>\n+          </div>\n+        </div>\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <Package className=\"w-8 h-8 text-purple-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">\n+                {receiveData?.data?.filter(\n+                  d =>\n+                    new Date(d.receivedDate).toDateString() ===\n+                    new Date().toDateString(),\n+                ).length || 0}\n+              </p>\n+              <p className=\"text-sm text-gray-600\">Today's Items</p>\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Filters */}\n+      <div className=\"bg-white rounded-lg shadow p-6\">\n+        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n+          <div className=\"md:col-span-2\">\n+            <Input\n+              placeholder=\"Search postal items...\"\n+              value={searchTerm}\n+              onChange={e => setSearchTerm(e.target.value)}\n+              icon={Search}\n+            />\n+          </div>\n+          <div>\n+            <select\n+              value={statusFilter}\n+              onChange={e => setStatusFilter(e.target.value)}\n+              className=\"w-full border rounded-lg px-3 py-2\"\n+            >\n+              <option value=\"\">All Status</option>\n+              <option value=\"pending\">Pending</option>\n+              <option value=\"delivered\">Delivered</option>\n+              <option value=\"returned\">Returned</option>\n+            </select>\n+          </div>\n+          <div>\n+            <select\n+              value={serviceFilter}\n+              onChange={e => setServiceFilter(e.target.value)}\n+              className=\"w-full border rounded-lg px-3 py-2\"\n+            >\n+              <option value=\"\">All Services</option>\n+              <option value=\"regular\">Regular</option>\n+              <option value=\"registered\">Registered</option>\n+              <option value=\"speed_post\">Speed Post</option>\n+              <option value=\"courier\">Courier</option>\n+              <option value=\"express\">Express</option>\n+            </select>\n+          </div>\n+          <div>\n+            <input\n+              type=\"date\"\n+              value={dateFilter}\n+              onChange={e => setDateFilter(e.target.value)}\n+              className=\"w-full border rounded-lg px-3 py-2\"\n+            />\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Receive Table */}\n+      <div className=\"bg-white rounded-lg shadow\">\n+        {receiveData?.data?.length === 0 ? (\n+          <EmptyState\n+            title=\"No postal items found\"\n+            description=\"No received postal items match your current filters\"\n+            action={{\n+              label: 'Record Receipt',\n+              onClick: () => setShowCreateDialog(true),\n+            }}\n+          />\n+        ) : (\n+          <>\n+            <Table data={receiveData?.data || []} columns={columns} />\n+            <div className=\"p-6 border-t\">\n+              <Pagination\n+                currentPage={currentPage}\n+                totalPages={Math.ceil((receiveData?.total || 0) / pageSize)}\n+                onPageChange={setCurrentPage}\n+              />\n+            </div>\n+          </>\n+        )}\n+      </div>\n+\n+      {/* Create/Edit Dialog */}\n+      <Dialog\n+        open={showCreateDialog || showEditDialog}\n+        onClose={() => {\n+          setShowCreateDialog(false)\n+          setShowEditDialog(false)\n+          reset()\n+          setSelectedItem(null)\n+        }}\n+        title={selectedItem ? 'Edit Postal Item' : 'Record New Postal Receipt'}\n+        size=\"lg\"\n+      >\n+        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n+          {/* Sender Information */}\n+          <div className=\"space-y-4\">\n+            <h3 className=\"text-lg font-medium border-b pb-2\">\n+              Sender Information\n+            </h3>\n+            <Controller\n+              name=\"senderName\"\n+              control={control}\n+              render={({ field }) => (\n+                <Input\n+                  label=\"Sender Name *\"\n+                  {...field}\n+                  error={errors.senderName?.message}\n+                />\n+              )}\n+            />\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+              <Controller\n+                name=\"senderOrganization\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Organization\"\n+                    {...field}\n+                    error={errors.senderOrganization?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"senderAddress\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Address\"\n+                    {...field}\n+                    error={errors.senderAddress?.message}\n+                  />\n+                )}\n+              />\n+            </div>\n+          </div>\n+\n+          {/* Item Information */}\n+          <div className=\"space-y-4\">\n+            <h3 className=\"text-lg font-medium border-b pb-2\">\n+              Item Information\n+            </h3>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+              <Controller\n+                name=\"itemType\"\n+                control={control}\n+                render={({ field }) => (\n+                  <div>\n+                    <label className=\"block text-sm font-medium mb-1\">\n+                      Item Type *\n+                    </label>\n+                    <select\n+                      {...field}\n+                      className={`w-full border rounded-lg px-3 py-2 ${\n+                        errors.itemType ? 'border-red-500' : ''\n+                      }`}\n+                    >\n+                      <option value=\"\">Select Type</option>\n+                      <option value=\"letter\">Letter</option>\n+                      <option value=\"document\">Document</option>\n+                      <option value=\"parcel\">Parcel</option>\n+                      <option value=\"certificate\">Certificate</option>\n+                      <option value=\"report_card\">Report Card</option>\n+                      <option value=\"other\">Other</option>\n+                    </select>\n+                    {errors.itemType && (\n+                      <p className=\"text-red-500 text-sm mt-1\">\n+                        {errors.itemType.message}\n+                      </p>\n+                    )}\n+                  </div>\n+                )}\n+              />\n+              <Controller\n+                name=\"serviceType\"\n+                control={control}\n+                render={({ field }) => (\n+                  <div>\n+                    <label className=\"block text-sm font-medium mb-1\">\n+                      Service Type *\n+                    </label>\n+                    <select\n+                      {...field}\n+                      className={`w-full border rounded-lg px-3 py-2 ${\n+                        errors.serviceType ? 'border-red-500' : ''\n+                      }`}\n+                    >\n+                      <option value=\"regular\">Regular</option>\n+                      <option value=\"registered\">Registered</option>\n+                      <option value=\"speed_post\">Speed Post</option>\n+                      <option value=\"courier\">Courier</option>\n+                      <option value=\"express\">Express</option>\n+                    </select>\n+                    {errors.serviceType && (\n+                      <p className=\"text-red-500 text-sm mt-1\">\n+                        {errors.serviceType.message}\n+                      </p>\n+                    )}\n+                  </div>\n+                )}\n+              />\n+            </div>\n+            <Controller\n+              name=\"itemDescription\"\n+              control={control}\n+              render={({ field }) => (\n+                <Input\n+                  label=\"Item Description *\"\n+                  {...field}\n+                  error={errors.itemDescription?.message}\n+                />\n+              )}\n+            />\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+              <Controller\n+                name=\"trackingNumber\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Tracking Number\"\n+                    {...field}\n+                    error={errors.trackingNumber?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"referenceNumber\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Reference Number\"\n+                    {...field}\n+                    error={errors.referenceNumber?.message}\n+                  />\n+                )}\n+              />\n+            </div>\n+          </div>\n+\n+          {/* Receipt Information */}\n+          <div className=\"space-y-4\">\n+            <h3 className=\"text-lg font-medium border-b pb-2\">\n+              Receipt Information\n+            </h3>\n+            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n+              <Controller\n+                name=\"receivedDate\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Received Date *\"\n+                    type=\"date\"\n+                    {...field}\n+                    error={errors.receivedDate?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"receivedTime\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Received Time *\"\n+                    type=\"time\"\n+                    {...field}\n+                    error={errors.receivedTime?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"priority\"\n+                control={control}\n+                render={({ field }) => (\n+                  <div>\n+                    <label className=\"block text-sm font-medium mb-1\">\n+                      Priority *\n+                    </label>\n+                    <select\n+                      {...field}\n+                      className={`w-full border rounded-lg px-3 py-2 ${\n+                        errors.priority ? 'border-red-500' : ''\n+                      }`}\n+                    >\n+                      <option value=\"low\">Low</option>\n+                      <option value=\"medium\">Medium</option>\n+                      <option value=\"high\">High</option>\n+                      <option value=\"urgent\">Urgent</option>\n+                    </select>\n+                    {errors.priority && (\n+                      <p className=\"text-red-500 text-sm mt-1\">\n+                        {errors.priority.message}\n+                      </p>\n+                    )}\n+                  </div>\n+                )}\n+              />\n+            </div>\n+            <Controller\n+              name=\"receivedBy\"\n+              control={control}\n+              render={({ field }) => (\n+                <div>\n+                  <label className=\"block text-sm font-medium mb-1\">\n+                    Received By *\n+                  </label>\n+                  <select\n+                    {...field}\n+                    className={`w-full border rounded-lg px-3 py-2 ${\n+                      errors.receivedBy ? 'border-red-500' : ''\n+                    }`}\n+                  >\n+                    <option value=\"\">Select Staff</option>\n+                    {staffData?.data?.map(staff => (\n+                      <option key={staff.id} value={staff.name}>\n+                        {staff.name} - {staff.designation}\n+                      </option>\n+                    ))}\n+                  </select>\n+                  {errors.receivedBy && (\n+                    <p className=\"text-red-500 text-sm mt-1\">\n+                      {errors.receivedBy.message}\n+                    </p>\n+                  )}\n+                </div>\n+              )}\n+            />\n+          </div>\n+\n+          {/* Addressee Information */}\n+          <div className=\"space-y-4\">\n+            <h3 className=\"text-lg font-medium border-b pb-2\">\n+              Addressee Information\n+            </h3>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+              <Controller\n+                name=\"addressedTo\"\n+                control={control}\n+                render={({ field }) => (\n+                  <div>\n+                    <label className=\"block text-sm font-medium mb-1\">\n+                      Addressed To *\n+                    </label>\n+                    <select\n+                      {...field}\n+                      className={`w-full border rounded-lg px-3 py-2 ${\n+                        errors.addressedTo ? 'border-red-500' : ''\n+                      }`}\n+                    >\n+                      <option value=\"\">Select Person</option>\n+                      {staffData?.data?.map(staff => (\n+                        <option key={staff.id} value={staff.name}>\n+                          {staff.name} - {staff.designation}\n+                        </option>\n+                      ))}\n+                    </select>\n+                    {errors.addressedTo && (\n+                      <p className=\"text-red-500 text-sm mt-1\">\n+                        {errors.addressedTo.message}\n+                      </p>\n+                    )}\n+                  </div>\n+                )}\n+              />\n+              <Controller\n+                name=\"department\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Department\"\n+                    {...field}\n+                    error={errors.department?.message}\n+                  />\n+                )}\n+              />\n+            </div>\n+          </div>\n+\n+          {/* Delivery Information */}\n+          {deliveryStatus === 'delivered' && (\n+            <div className=\"space-y-4\">\n+              <h3 className=\"text-lg font-medium border-b pb-2\">\n+                Delivery Information\n+              </h3>\n+              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n+                <Controller\n+                  name=\"deliveredTo\"\n+                  control={control}\n+                  render={({ field }) => (\n+                    <Input\n+                      label=\"Delivered To\"\n+                      {...field}\n+                      error={errors.deliveredTo?.message}\n+                    />\n+                  )}\n+                />\n+                <Controller\n+                  name=\"deliveredDate\"\n+                  control={control}\n+                  render={({ field }) => (\n+                    <Input\n+                      label=\"Delivered Date\"\n+                      type=\"date\"\n+                      {...field}\n+                      error={errors.deliveredDate?.message}\n+                    />\n+                  )}\n+                />\n+                <Controller\n+                  name=\"deliveredTime\"\n+                  control={control}\n+                  render={({ field }) => (\n+                    <Input\n+                      label=\"Delivered Time\"\n+                      type=\"time\"\n+                      {...field}\n+                      error={errors.deliveredTime?.message}\n+                    />\n+                  )}\n+                />\n+              </div>\n+            </div>\n+          )}\n+\n+          <Controller\n+            name=\"notes\"\n+            control={control}\n+            render={({ field }) => (\n+              <Input\n+                label=\"Notes\"\n+                multiline\n+                rows={3}\n+                {...field}\n+                error={errors.notes?.message}\n+              />\n+            )}\n+          />\n+\n+          <div className=\"flex gap-2 pt-4\">\n+            <button\n+              type=\"submit\"\n+              disabled={createMutation.isPending || updateMutation.isPending}\n+              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n+            >\n+              {createMutation.isPending || updateMutation.isPending\n+                ? 'Saving...'\n+                : selectedItem\n+                  ? 'Update Item'\n+                  : 'Record Receipt'}\n+            </button>\n+            <button\n+              type=\"button\"\n+              onClick={() => {\n+                setShowCreateDialog(false)\n+                setShowEditDialog(false)\n+                reset()\n+                setSelectedItem(null)\n+              }}\n+              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n+            >\n+              Cancel\n+            </button>\n+          </div>\n+        </form>\n+      </Dialog>\n+\n+      {/* Delivery Dialog */}\n+      <Dialog\n+        open={showDeliveryDialog}\n+        onClose={() => setShowDeliveryDialog(false)}\n+        title=\"Mark as Delivered\"\n+      >\n+        <div className=\"space-y-4\">\n+          <p>Mark this item as delivered to the addressee?</p>\n+          <div>\n+            <label className=\"block text-sm font-medium mb-1\">\n+              Delivered To\n+            </label>\n+            <select className=\"w-full border rounded-lg px-3 py-2\">\n+              <option value=\"\">Select Person</option>\n+              {staffData?.data?.map(staff => (\n+                <option key={staff.id} value={staff.name}>\n+                  {staff.name} - {staff.designation}\n+                </option>\n+              ))}\n+            </select>\n+          </div>\n+          <div className=\"flex gap-2 pt-4\">\n+            <button\n+              onClick={() =>\n+                deliverMutation.mutate({\n+                  id: selectedItem?.id,\n+                  deliveredTo: 'Selected Person',\n+                })\n+              }\n+              disabled={deliverMutation.isPending}\n+              className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\n+            >\n+              {deliverMutation.isPending ? 'Marking...' : 'Mark Delivered'}\n+            </button>\n+            <button\n+              onClick={() => setShowDeliveryDialog(false)}\n+              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n+            >\n+              Cancel\n+            </button>\n+          </div>\n+        </div>\n+      </Dialog>\n+    </div>\n+  )\n+};\n+\n+export default PostalReceive\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756039695820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n-import Dropdown from '../../components/ui/Dropdown'\n+import { Dropdown } from '../../components/ui/Dropdown'\n import { postalReceiveApi } from '../../lib/api/postalReceive'\n import { staffApi } from '../../lib/api/staff'\n \n // Validation Schema\n@@ -945,954 +945,5 @@\n     </div>\n   )\n };\n \n-export default PostalReceive\n-import React, { useState } from 'react'\n-import React, { useState } from 'react'\n-import { useForm, Controller } from 'react-hook-form'\n-import { zodResolver } from '@hookform/resolvers/zod'\n-import { z } from 'zod'\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n-import {\n-  Plus,\n-  Search,\n-  Filter,\n-  MoreHorizontal,\n-  Edit,\n-  Eye,\n-  Package,\n-  Inbox,\n-  CheckCircle,\n-  Clock,\n-  User,\n-  Calendar,\n-  FileText,\n-  Download,\n-  Printer,\n-  AlertTriangle,\n-} from 'lucide-react'\n-import Input from '../../components/ui/Input'\n-import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n-import Table from '../../components/ui/Table'\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n-import ErrorState from '../../components/ui/ErrorState'\n-import EmptyState from '../../components/ui/EmptyState'\n-import Pagination from '../../components/ui/Pagination'\n-import Dropdown from '../../components/ui/Dropdown'\n-import { postalReceiveApi } from '../../lib/api/postalReceive'\n-import { staffApi } from '../../lib/api/staff'\n-\n-// Validation Schema\n-const receiveSchema = z.object({\n-  senderName: z.string().min(1, 'Sender name is required'),\n-  senderAddress: z.string().optional(),\n-  senderOrganization: z.string().optional(),\n-\n-  itemType: z.enum(\n-    ['letter', 'document', 'parcel', 'certificate', 'report_card', 'other'],\n-    {\n-      required_error: 'Item type is required',\n-    }\n-  ),\n-  itemDescription: z.string().min(1, 'Item description is required'),\n-\n-  serviceType: z.enum(\n-    ['regular', 'registered', 'speed_post', 'courier', 'express'],\n-    {\n-      required_error: 'Service type is required',\n-    }),\n-\n-  receivedDate: z.string().min(1, 'Received date is required'),\n-  receivedTime: z.string().min(1, 'Received time is required'),\n-  receivedBy: z.string().min(1, 'Received by is required'),\n-\n-  addressedTo: z.string().min(1, 'Addressed to is required'),\n-  department: z.string().optional(),\n-\n-  trackingNumber: z.string().optional(),\n-  referenceNumber: z.string().optional(),\n-\n-  priority: z.enum(['low', 'medium', 'high', 'urgent'], {\n-    required_error: 'Priority is required',\n-  }),\n-\n-  deliveryStatus: z\n-    .enum(['pending', 'delivered', 'returned'], {\n-      required_error: 'Delivery status is required',\n-    })\n-    .default('pending'),\n-\n-  deliveredTo: z.string().optional(),\n-  deliveredDate: z.string().optional(),\n-  deliveredTime: z.string().optional(),\n-\n-  notes: z.string().optional(),\n-})\n-\n-const PostalReceive = () => {\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('')\n-  const [serviceFilter, setServiceFilter] = useState('')\n-  const [dateFilter, setDateFilter] = useState('')\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [pageSize] = useState(10)\n-  const [showCreateDialog, setShowCreateDialog] = useState(false)\n-  const [showEditDialog, setShowEditDialog] = useState(false)\n-  const [selectedItem, setSelectedItem] = useState(null)\n-  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n-  const [showDeliveryDialog, setShowDeliveryDialog] = useState(false)\n-\n-  const queryClient = useQueryClient()\n-\n-  const {\n-    control,\n-    handleSubmit,\n-    reset,\n-    watch,\n-    formState: { errors },\n-  } = useForm({\n-    resolver: zodResolver(receiveSchema),\n-    mode: 'onChange',\n-    defaultValues: {\n-      receivedDate: new Date().toISOString().split('T')[0],\n-      receivedTime: new Date().toTimeString().slice(0, 5),\n-      priority: 'medium',\n-      deliveryStatus: 'pending',\n-      serviceType: 'regular',\n-    }\n-  })\n-\n-  const deliveryStatus = watch('deliveryStatus')\n-\n-  const {\n-    data: receiveData,\n-    isLoading,\n-    error,\n-  } = useQuery({\n-    queryKey: [\n-      'postalReceive',\n-      {\n-        page: currentPage,\n-        pageSize,\n-        search: searchTerm,\n-        status: statusFilter,\n-        service: serviceFilter,\n-        date: dateFilter,\n-      },\n-    ],\n-    queryFn: () =>\n-      postalReceiveApi.getAll({\n-        page: currentPage,\n-        pageSize,\n-        search: searchTerm,\n-        status: statusFilter,\n-        service: serviceFilter,\n-        date: dateFilter,\n-      }),\n-  })\n-\n-  const { data: staffData } = useQuery({\n-    queryKey: ['staff', 'all'],\n-    queryFn: () => staffApi.getAll({ all: true }),\n-  })\n-\n-  const createMutation = useMutation({\n-    mutationFn: postalReceiveApi.create,\n-    onSuccess: () => {\n-      queryClient.invalidateQueries(['postalReceive'])\n-      setShowCreateDialog(false)\n-      reset()\n-    }\n-  })\n-\n-  const updateMutation = useMutation({\n-    mutationFn: ({ id, data }) => postalReceiveApi.update(id, data),\n-    onSuccess: () => {\n-      queryClient.invalidateQueries(['postalReceive'])\n-      setShowEditDialog(false)\n-      reset()\n-    }\n-  })\n-\n-  const deliverMutation = useMutation({\n-    mutationFn: ({ id, deliveredTo }) =>\n-      postalReceiveApi.markAsDelivered(id, deliveredTo),\n-    onSuccess: () => {\n-      queryClient.invalidateQueries(['postalReceive'])\n-      setShowDeliveryDialog(false)\n-    }\n-  })\n-\n-  const handleEdit = item => {\n-    setSelectedItem(item)\n-    reset({\n-      senderName: item.senderName,\n-      senderAddress: item.senderAddress || '',\n-      senderOrganization: item.senderOrganization || '',\n-      itemType: item.itemType,\n-      itemDescription: item.itemDescription,\n-      serviceType: item.serviceType,\n-      receivedDate: item.receivedDate?.split('T')[0],\n-      receivedTime: item.receivedTime,\n-      receivedBy: item.receivedBy,\n-      addressedTo: item.addressedTo,\n-      department: item.department || '',\n-      trackingNumber: item.trackingNumber || '',\n-      referenceNumber: item.referenceNumber || '',\n-      priority: item.priority,\n-      deliveryStatus: item.deliveryStatus,\n-      deliveredTo: item.deliveredTo || '',\n-      deliveredDate: item.deliveredDate?.split('T')[0] || '',\n-      deliveredTime: item.deliveredTime || '',\n-      notes: item.notes || '',\n-    })\n-    setShowEditDialog(true)\n-  };\n-\n-  const handleViewDetails = item => {\n-    setSelectedItem(item)\n-    setShowDetailsDialog(true)\n-  };\n-\n-  const handleMarkDelivered = item => {\n-    setSelectedItem(item)\n-    setShowDeliveryDialog(true)\n-  };\n-\n-  const onSubmit = data => {\n-    if (selectedItem) {\n-      updateMutation.mutate({ id: selectedItem.id, data })\n-    } else {\n-      createMutation.mutate(data)\n-    }\n-  }\n-\n-  const getStatusColor = status => {\n-    switch (status) {\n-      case 'pending':\n-        return 'bg-yellow-100 text-yellow-800'\n-      case 'delivered':\n-        return 'bg-green-100 text-green-800'\n-      case 'returned':\n-        return 'bg-red-100 text-red-800'\n-      default:\n-        return 'bg-gray-100 text-gray-800'\n-    }\n-  }\n-\n-  const getServiceIcon = service => {\n-    switch (service) {\n-      case 'regular':\n-        return Package\n-      case 'registered':\n-        return FileText\n-      case 'speed_post':\n-        return Inbox\n-      case 'courier':\n-        return Package\n-      case 'express':\n-        return AlertTriangle\n-      default:\n-        return Package\n-    }\n-  }\n-\n-  const columns = [\n-    {\n-      key: 'receiveId',\n-      header: 'Receive ID',\n-      render: item => (\n-        <div className=\"font-mono text-sm\">\n-          {item.receiveId || `RCV-${item.id}`}\n-        </div>\n-      ),\n-    },\n-    {\n-      key: 'sender',\n-      header: 'Sender',\n-      render: item => (\n-        <div>\n-          <div className=\"font-medium\">{item.senderName}</div>\n-          <div className=\"text-sm text-gray-500\">\n-            {item.senderOrganization || 'Individual'}\n-          </div>\n-        </div>\n-      ),\n-    },\n-    {\n-      key: 'item',\n-      header: 'Item',\n-      render: item => (\n-        <div>\n-          <div className=\"font-medium capitalize\">\n-            {item.itemType?.replace('_', ' ')}\n-          </div>\n-          <div className=\"text-sm text-gray-500\">{item.itemDescription}</div>\n-        </div>\n-      ),\n-    },\n-    {\n-      key: 'service',\n-      header: 'Service',\n-      render: item => {\n-        const Icon = getServiceIcon(item.serviceType)\n-        return (\n-          <div className=\"flex items-center gap-2\">\n-            <Icon className=\"w-4 h-4 text-gray-400\" />\n-            <span className=\"capitalize\">\n-              {item.serviceType?.replace('_', ' ')}\n-            </span>\n-          </div>\n-        )\n-      }\n-    },\n-    {\n-      key: 'addressedTo',\n-      header: 'Addressed To',\n-      render: item => (\n-        <div>\n-          <div className=\"font-medium\">{item.addressedTo}</div>\n-          <div className=\"text-sm text-gray-500\">\n-            {item.department || 'General'}\n-          </div>\n-        </div>\n-      ),\n-    },\n-    {\n-      key: 'receivedDate',\n-      header: 'Received',\n-      render: item => (\n-        <div>\n-          <div>{new Date(item.receivedDate).toLocaleDateString()}</div>\n-          <div className=\"text-sm text-gray-500\">{item.receivedTime}</div>\n-        </div>\n-      ),\n-    },\n-    {\n-      key: 'deliveryStatus',\n-      header: 'Status',\n-      render: item => (\n-        <span\n-          className={`px-2 py-1 rounded-full text-xs ${getStatusColor(item.deliveryStatus)}`}\n-        >\n-          {item.deliveryStatus?.toUpperCase()}\n-        </span>\n-      ),\n-    },\n-    {\n-      key: 'actions',\n-      header: 'Actions',\n-      render: item => (\n-        <Dropdown\n-          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n-          items={[\n-            {\n-              label: 'View Details',\n-              icon: Eye,\n-              onClick: () => handleViewDetails(item),\n-            },\n-            {\n-              label: 'Edit',\n-              icon: Edit,\n-              onClick: () => handleEdit(item),\n-            },\n-            {\n-              label: 'Mark Delivered',\n-              icon: CheckCircle,\n-              onClick: () => handleMarkDelivered(item),\n-              disabled: item.deliveryStatus === 'delivered',\n-            },\n-            {\n-              label: 'Print Receipt',\n-              icon: Printer,\n-              onClick: () => console.log('Print receipt for', item.id),\n-            }\n-          ]}\n-        />\n-      ),\n-    }\n-  ]\n-\n-  if (isLoading) return <LoadingSkeleton />\n-  if (error) return <ErrorState message=\"Failed to load postal receive data\" />\n-\n-  return (\n-    <div className=\"space-y-6\">\n-      <div className=\"flex justify-between items-center\">\n-        <h1 className=\"text-2xl font-bold\">Postal Receive</h1>\n-        <div className=\"flex gap-2\">\n-          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n-            <Download className=\"w-4 h-4\" />\n-            Export\n-          </button>\n-          <button\n-            onClick={() => {\n-              reset()\n-              setSelectedItem(null)\n-              setShowCreateDialog(true)\n-            }}\n-            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n-          >\n-            <Plus className=\"w-4 h-4\" />\n-            Record Receipt\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Statistics Cards */}\n-      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <Inbox className=\"w-8 h-8 text-blue-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">{receiveData?.total || 0}</p>\n-              <p className=\"text-sm text-gray-600\">Total Received</p>\n-            </div>\n-          </div>\n-        </div>\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <Clock className=\"w-8 h-8 text-yellow-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">\n-                {receiveData?.data?.filter(d => d.deliveryStatus === 'pending')\n-                  .length || 0}\n-              </p>\n-              <p className=\"text-sm text-gray-600\">Pending Delivery</p>\n-            </div>\n-          </div>\n-        </div>\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">\n-                {receiveData?.data?.filter(\n-                  d => d.deliveryStatus === 'delivered'\n-                ).length || 0}\n-              </p>\n-              <p className=\"text-sm text-gray-600\">Delivered</p>\n-            </div>\n-          </div>\n-        </div>\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <Package className=\"w-8 h-8 text-purple-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">\n-                {receiveData?.data?.filter(\n-                  d =>\n-                    new Date(d.receivedDate).toDateString() ===\n-                    new Date().toDateString(),\n-                ).length || 0}\n-              </p>\n-              <p className=\"text-sm text-gray-600\">Today's Items</p>\n-            </div>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Filters */}\n-      <div className=\"bg-white rounded-lg shadow p-6\">\n-        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n-          <div className=\"md:col-span-2\">\n-            <Input\n-              placeholder=\"Search postal items...\"\n-              value={searchTerm}\n-              onChange={e => setSearchTerm(e.target.value)}\n-              icon={Search}\n-            />\n-          </div>\n-          <div>\n-            <select\n-              value={statusFilter}\n-              onChange={e => setStatusFilter(e.target.value)}\n-              className=\"w-full border rounded-lg px-3 py-2\"\n-            >\n-              <option value=\"\">All Status</option>\n-              <option value=\"pending\">Pending</option>\n-              <option value=\"delivered\">Delivered</option>\n-              <option value=\"returned\">Returned</option>\n-            </select>\n-          </div>\n-          <div>\n-            <select\n-              value={serviceFilter}\n-              onChange={e => setServiceFilter(e.target.value)}\n-              className=\"w-full border rounded-lg px-3 py-2\"\n-            >\n-              <option value=\"\">All Services</option>\n-              <option value=\"regular\">Regular</option>\n-              <option value=\"registered\">Registered</option>\n-              <option value=\"speed_post\">Speed Post</option>\n-              <option value=\"courier\">Courier</option>\n-              <option value=\"express\">Express</option>\n-            </select>\n-          </div>\n-          <div>\n-            <input\n-              type=\"date\"\n-              value={dateFilter}\n-              onChange={e => setDateFilter(e.target.value)}\n-              className=\"w-full border rounded-lg px-3 py-2\"\n-            />\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Receive Table */}\n-      <div className=\"bg-white rounded-lg shadow\">\n-        {receiveData?.data?.length === 0 ? (\n-          <EmptyState\n-            title=\"No postal items found\"\n-            description=\"No received postal items match your current filters\"\n-            action={{\n-              label: 'Record Receipt',\n-              onClick: () => setShowCreateDialog(true),\n-            }}\n-          />\n-        ) : (\n-          <>\n-            <Table data={receiveData?.data || []} columns={columns} />\n-            <div className=\"p-6 border-t\">\n-              <Pagination\n-                currentPage={currentPage}\n-                totalPages={Math.ceil((receiveData?.total || 0) / pageSize)}\n-                onPageChange={setCurrentPage}\n-              />\n-            </div>\n-          </>\n-        )}\n-      </div>\n-\n-      {/* Create/Edit Dialog */}\n-      <Dialog\n-        open={showCreateDialog || showEditDialog}\n-        onClose={() => {\n-          setShowCreateDialog(false)\n-          setShowEditDialog(false)\n-          reset()\n-          setSelectedItem(null)\n-        }}\n-        title={selectedItem ? 'Edit Postal Item' : 'Record New Postal Receipt'}\n-        size=\"lg\"\n-      >\n-        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n-          {/* Sender Information */}\n-          <div className=\"space-y-4\">\n-            <h3 className=\"text-lg font-medium border-b pb-2\">\n-              Sender Information\n-            </h3>\n-            <Controller\n-              name=\"senderName\"\n-              control={control}\n-              render={({ field }) => (\n-                <Input\n-                  label=\"Sender Name *\"\n-                  {...field}\n-                  error={errors.senderName?.message}\n-                />\n-              )}\n-            />\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-              <Controller\n-                name=\"senderOrganization\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Organization\"\n-                    {...field}\n-                    error={errors.senderOrganization?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"senderAddress\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Address\"\n-                    {...field}\n-                    error={errors.senderAddress?.message}\n-                  />\n-                )}\n-              />\n-            </div>\n-          </div>\n-\n-          {/* Item Information */}\n-          <div className=\"space-y-4\">\n-            <h3 className=\"text-lg font-medium border-b pb-2\">\n-              Item Information\n-            </h3>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-              <Controller\n-                name=\"itemType\"\n-                control={control}\n-                render={({ field }) => (\n-                  <div>\n-                    <label className=\"block text-sm font-medium mb-1\">\n-                      Item Type *\n-                    </label>\n-                    <select\n-                      {...field}\n-                      className={`w-full border rounded-lg px-3 py-2 ${\n-                        errors.itemType ? 'border-red-500' : ''\n-                      }`}\n-                    >\n-                      <option value=\"\">Select Type</option>\n-                      <option value=\"letter\">Letter</option>\n-                      <option value=\"document\">Document</option>\n-                      <option value=\"parcel\">Parcel</option>\n-                      <option value=\"certificate\">Certificate</option>\n-                      <option value=\"report_card\">Report Card</option>\n-                      <option value=\"other\">Other</option>\n-                    </select>\n-                    {errors.itemType && (\n-                      <p className=\"text-red-500 text-sm mt-1\">\n-                        {errors.itemType.message}\n-                      </p>\n-                    )}\n-                  </div>\n-                )}\n-              />\n-              <Controller\n-                name=\"serviceType\"\n-                control={control}\n-                render={({ field }) => (\n-                  <div>\n-                    <label className=\"block text-sm font-medium mb-1\">\n-                      Service Type *\n-                    </label>\n-                    <select\n-                      {...field}\n-                      className={`w-full border rounded-lg px-3 py-2 ${\n-                        errors.serviceType ? 'border-red-500' : ''\n-                      }`}\n-                    >\n-                      <option value=\"regular\">Regular</option>\n-                      <option value=\"registered\">Registered</option>\n-                      <option value=\"speed_post\">Speed Post</option>\n-                      <option value=\"courier\">Courier</option>\n-                      <option value=\"express\">Express</option>\n-                    </select>\n-                    {errors.serviceType && (\n-                      <p className=\"text-red-500 text-sm mt-1\">\n-                        {errors.serviceType.message}\n-                      </p>\n-                    )}\n-                  </div>\n-                )}\n-              />\n-            </div>\n-            <Controller\n-              name=\"itemDescription\"\n-              control={control}\n-              render={({ field }) => (\n-                <Input\n-                  label=\"Item Description *\"\n-                  {...field}\n-                  error={errors.itemDescription?.message}\n-                />\n-              )}\n-            />\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-              <Controller\n-                name=\"trackingNumber\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Tracking Number\"\n-                    {...field}\n-                    error={errors.trackingNumber?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"referenceNumber\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Reference Number\"\n-                    {...field}\n-                    error={errors.referenceNumber?.message}\n-                  />\n-                )}\n-              />\n-            </div>\n-          </div>\n-\n-          {/* Receipt Information */}\n-          <div className=\"space-y-4\">\n-            <h3 className=\"text-lg font-medium border-b pb-2\">\n-              Receipt Information\n-            </h3>\n-            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n-              <Controller\n-                name=\"receivedDate\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Received Date *\"\n-                    type=\"date\"\n-                    {...field}\n-                    error={errors.receivedDate?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"receivedTime\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Received Time *\"\n-                    type=\"time\"\n-                    {...field}\n-                    error={errors.receivedTime?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"priority\"\n-                control={control}\n-                render={({ field }) => (\n-                  <div>\n-                    <label className=\"block text-sm font-medium mb-1\">\n-                      Priority *\n-                    </label>\n-                    <select\n-                      {...field}\n-                      className={`w-full border rounded-lg px-3 py-2 ${\n-                        errors.priority ? 'border-red-500' : ''\n-                      }`}\n-                    >\n-                      <option value=\"low\">Low</option>\n-                      <option value=\"medium\">Medium</option>\n-                      <option value=\"high\">High</option>\n-                      <option value=\"urgent\">Urgent</option>\n-                    </select>\n-                    {errors.priority && (\n-                      <p className=\"text-red-500 text-sm mt-1\">\n-                        {errors.priority.message}\n-                      </p>\n-                    )}\n-                  </div>\n-                )}\n-              />\n-            </div>\n-            <Controller\n-              name=\"receivedBy\"\n-              control={control}\n-              render={({ field }) => (\n-                <div>\n-                  <label className=\"block text-sm font-medium mb-1\">\n-                    Received By *\n-                  </label>\n-                  <select\n-                    {...field}\n-                    className={`w-full border rounded-lg px-3 py-2 ${\n-                      errors.receivedBy ? 'border-red-500' : ''\n-                    }`}\n-                  >\n-                    <option value=\"\">Select Staff</option>\n-                    {staffData?.data?.map(staff => (\n-                      <option key={staff.id} value={staff.name}>\n-                        {staff.name} - {staff.designation}\n-                      </option>\n-                    ))}\n-                  </select>\n-                  {errors.receivedBy && (\n-                    <p className=\"text-red-500 text-sm mt-1\">\n-                      {errors.receivedBy.message}\n-                    </p>\n-                  )}\n-                </div>\n-              )}\n-            />\n-          </div>\n-\n-          {/* Addressee Information */}\n-          <div className=\"space-y-4\">\n-            <h3 className=\"text-lg font-medium border-b pb-2\">\n-              Addressee Information\n-            </h3>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-              <Controller\n-                name=\"addressedTo\"\n-                control={control}\n-                render={({ field }) => (\n-                  <div>\n-                    <label className=\"block text-sm font-medium mb-1\">\n-                      Addressed To *\n-                    </label>\n-                    <select\n-                      {...field}\n-                      className={`w-full border rounded-lg px-3 py-2 ${\n-                        errors.addressedTo ? 'border-red-500' : ''\n-                      }`}\n-                    >\n-                      <option value=\"\">Select Person</option>\n-                      {staffData?.data?.map(staff => (\n-                        <option key={staff.id} value={staff.name}>\n-                          {staff.name} - {staff.designation}\n-                        </option>\n-                      ))}\n-                    </select>\n-                    {errors.addressedTo && (\n-                      <p className=\"text-red-500 text-sm mt-1\">\n-                        {errors.addressedTo.message}\n-                      </p>\n-                    )}\n-                  </div>\n-                )}\n-              />\n-              <Controller\n-                name=\"department\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Department\"\n-                    {...field}\n-                    error={errors.department?.message}\n-                  />\n-                )}\n-              />\n-            </div>\n-          </div>\n-\n-          {/* Delivery Information */}\n-          {deliveryStatus === 'delivered' && (\n-            <div className=\"space-y-4\">\n-              <h3 className=\"text-lg font-medium border-b pb-2\">\n-                Delivery Information\n-              </h3>\n-              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n-                <Controller\n-                  name=\"deliveredTo\"\n-                  control={control}\n-                  render={({ field }) => (\n-                    <Input\n-                      label=\"Delivered To\"\n-                      {...field}\n-                      error={errors.deliveredTo?.message}\n-                    />\n-                  )}\n-                />\n-                <Controller\n-                  name=\"deliveredDate\"\n-                  control={control}\n-                  render={({ field }) => (\n-                    <Input\n-                      label=\"Delivered Date\"\n-                      type=\"date\"\n-                      {...field}\n-                      error={errors.deliveredDate?.message}\n-                    />\n-                  )}\n-                />\n-                <Controller\n-                  name=\"deliveredTime\"\n-                  control={control}\n-                  render={({ field }) => (\n-                    <Input\n-                      label=\"Delivered Time\"\n-                      type=\"time\"\n-                      {...field}\n-                      error={errors.deliveredTime?.message}\n-                    />\n-                  )}\n-                />\n-              </div>\n-            </div>\n-          )}\n-\n-          <Controller\n-            name=\"notes\"\n-            control={control}\n-            render={({ field }) => (\n-              <Input\n-                label=\"Notes\"\n-                multiline\n-                rows={3}\n-                {...field}\n-                error={errors.notes?.message}\n-              />\n-            )}\n-          />\n-\n-          <div className=\"flex gap-2 pt-4\">\n-            <button\n-              type=\"submit\"\n-              disabled={createMutation.isPending || updateMutation.isPending}\n-              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n-            >\n-              {createMutation.isPending || updateMutation.isPending\n-                ? 'Saving...'\n-                : selectedItem\n-                  ? 'Update Item'\n-                  : 'Record Receipt'}\n-            </button>\n-            <button\n-              type=\"button\"\n-              onClick={() => {\n-                setShowCreateDialog(false)\n-                setShowEditDialog(false)\n-                reset()\n-                setSelectedItem(null)\n-              }}\n-              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n-            >\n-              Cancel\n-            </button>\n-          </div>\n-        </form>\n-      </Dialog>\n-\n-      {/* Delivery Dialog */}\n-      <Dialog\n-        open={showDeliveryDialog}\n-        onClose={() => setShowDeliveryDialog(false)}\n-        title=\"Mark as Delivered\"\n-      >\n-        <div className=\"space-y-4\">\n-          <p>Mark this item as delivered to the addressee?</p>\n-          <div>\n-            <label className=\"block text-sm font-medium mb-1\">\n-              Delivered To\n-            </label>\n-            <select className=\"w-full border rounded-lg px-3 py-2\">\n-              <option value=\"\">Select Person</option>\n-              {staffData?.data?.map(staff => (\n-                <option key={staff.id} value={staff.name}>\n-                  {staff.name} - {staff.designation}\n-                </option>\n-              ))}\n-            </select>\n-          </div>\n-          <div className=\"flex gap-2 pt-4\">\n-            <button\n-              onClick={() =>\n-                deliverMutation.mutate({\n-                  id: selectedItem?.id,\n-                  deliveredTo: 'Selected Person',\n-                })\n-              }\n-              disabled={deliverMutation.isPending}\n-              className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\n-            >\n-              {deliverMutation.isPending ? 'Marking...' : 'Mark Delivered'}\n-            </button>\n-            <button\n-              onClick={() => setShowDeliveryDialog(false)}\n-              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n-            >\n-              Cancel\n-            </button>\n-          </div>\n-        </div>\n-      </Dialog>\n-    </div>\n-  )\n-};\n-\n export default PostalReceive\n\\ No newline at end of file\n"
                }
            ],
            "date": 1755994275309,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Edit,\n  Eye,\n  Package,\n  Inbox,\n  CheckCircle,\n  Clock,\n  User,\n  Calendar,\n  FileText,\n  Download,\n  Printer,\n  AlertTriangle,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport Dialog from '../../components/ui/Dialog'\nimport Table from '../../components/ui/Table'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport Pagination from '../../components/ui/Pagination'\nimport Dropdown from '../../components/ui/Dropdown'\nimport { postalReceiveApi } from '../../lib/api/postalReceive'\nimport { staffApi } from '../../lib/api/staff'\n\n// Validation Schema\nconst receiveSchema = z.object({\n  senderName: z.string().min(1, 'Sender name is required'),\n  senderAddress: z.string().optional(),\n  senderOrganization: z.string().optional(),\n\n  itemType: z.enum(\n    ['letter', 'document', 'parcel', 'certificate', 'report_card', 'other'],\n    {\n      required_error: 'Item type is required',\n    }\n  ),\n  itemDescription: z.string().min(1, 'Item description is required'),\n\n  serviceType: z.enum(\n    ['regular', 'registered', 'speed_post', 'courier', 'express'],\n    {\n      required_error: 'Service type is required',\n    }),\n\n  receivedDate: z.string().min(1, 'Received date is required'),\n  receivedTime: z.string().min(1, 'Received time is required'),\n  receivedBy: z.string().min(1, 'Received by is required'),\n\n  addressedTo: z.string().min(1, 'Addressed to is required'),\n  department: z.string().optional(),\n\n  trackingNumber: z.string().optional(),\n  referenceNumber: z.string().optional(),\n\n  priority: z.enum(['low', 'medium', 'high', 'urgent'], {\n    required_error: 'Priority is required',\n  }),\n\n  deliveryStatus: z\n    .enum(['pending', 'delivered', 'returned'], {\n      required_error: 'Delivery status is required',\n    })\n    .default('pending'),\n\n  deliveredTo: z.string().optional(),\n  deliveredDate: z.string().optional(),\n  deliveredTime: z.string().optional(),\n\n  notes: z.string().optional(),\n})\n\nconst PostalReceive = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState('')\n  const [serviceFilter, setServiceFilter] = useState('')\n  const [dateFilter, setDateFilter] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [pageSize] = useState(10)\n  const [showCreateDialog, setShowCreateDialog] = useState(false)\n  const [showEditDialog, setShowEditDialog] = useState(false)\n  const [selectedItem, setSelectedItem] = useState(null)\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n  const [showDeliveryDialog, setShowDeliveryDialog] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    watch,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(receiveSchema),\n    mode: 'onChange',\n    defaultValues: {\n      receivedDate: new Date().toISOString().split('T')[0],\n      receivedTime: new Date().toTimeString().slice(0, 5),\n      priority: 'medium',\n      deliveryStatus: 'pending',\n      serviceType: 'regular',\n    }\n  })\n\n  const deliveryStatus = watch('deliveryStatus')\n\n  const {\n    data: receiveData,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\n      'postalReceive',\n      {\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        status: statusFilter,\n        service: serviceFilter,\n        date: dateFilter,\n      },\n    ],\n    queryFn: () =>\n      postalReceiveApi.getAll({\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        status: statusFilter,\n        service: serviceFilter,\n        date: dateFilter,\n      }),\n  })\n\n  const { data: staffData } = useQuery({\n    queryKey: ['staff', 'all'],\n    queryFn: () => staffApi.getAll({ all: true }),\n  })\n\n  const createMutation = useMutation({\n    mutationFn: postalReceiveApi.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['postalReceive'])\n      setShowCreateDialog(false)\n      reset()\n    }\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }) => postalReceiveApi.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['postalReceive'])\n      setShowEditDialog(false)\n      reset()\n    }\n  })\n\n  const deliverMutation = useMutation({\n    mutationFn: ({ id, deliveredTo }) =>\n      postalReceiveApi.markAsDelivered(id, deliveredTo),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['postalReceive'])\n      setShowDeliveryDialog(false)\n    }\n  })\n\n  const handleEdit = item => {\n    setSelectedItem(item)\n    reset({\n      senderName: item.senderName,\n      senderAddress: item.senderAddress || '',\n      senderOrganization: item.senderOrganization || '',\n      itemType: item.itemType,\n      itemDescription: item.itemDescription,\n      serviceType: item.serviceType,\n      receivedDate: item.receivedDate?.split('T')[0],\n      receivedTime: item.receivedTime,\n      receivedBy: item.receivedBy,\n      addressedTo: item.addressedTo,\n      department: item.department || '',\n      trackingNumber: item.trackingNumber || '',\n      referenceNumber: item.referenceNumber || '',\n      priority: item.priority,\n      deliveryStatus: item.deliveryStatus,\n      deliveredTo: item.deliveredTo || '',\n      deliveredDate: item.deliveredDate?.split('T')[0] || '',\n      deliveredTime: item.deliveredTime || '',\n      notes: item.notes || '',\n    })\n    setShowEditDialog(true)\n  };\n\n  const handleViewDetails = item => {\n    setSelectedItem(item)\n    setShowDetailsDialog(true)\n  };\n\n  const handleMarkDelivered = item => {\n    setSelectedItem(item)\n    setShowDeliveryDialog(true)\n  };\n\n  const onSubmit = data => {\n    if (selectedItem) {\n      updateMutation.mutate({ id: selectedItem.id, data })\n    } else {\n      createMutation.mutate(data)\n    }\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'delivered':\n        return 'bg-green-100 text-green-800'\n      case 'returned':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getServiceIcon = service => {\n    switch (service) {\n      case 'regular':\n        return Package\n      case 'registered':\n        return FileText\n      case 'speed_post':\n        return Inbox\n      case 'courier':\n        return Package\n      case 'express':\n        return AlertTriangle\n      default:\n        return Package\n    }\n  }\n\n  const columns = [\n    {\n      key: 'receiveId',\n      header: 'Receive ID',\n      render: item => (\n        <div className=\"font-mono text-sm\">\n          {item.receiveId || `RCV-${item.id}`}\n        </div>\n      ),\n    },\n    {\n      key: 'sender',\n      header: 'Sender',\n      render: item => (\n        <div>\n          <div className=\"font-medium\">{item.senderName}</div>\n          <div className=\"text-sm text-gray-500\">\n            {item.senderOrganization || 'Individual'}\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'item',\n      header: 'Item',\n      render: item => (\n        <div>\n          <div className=\"font-medium capitalize\">\n            {item.itemType?.replace('_', ' ')}\n          </div>\n          <div className=\"text-sm text-gray-500\">{item.itemDescription}</div>\n        </div>\n      ),\n    },\n    {\n      key: 'service',\n      header: 'Service',\n      render: item => {\n        const Icon = getServiceIcon(item.serviceType)\n        return (\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"capitalize\">\n              {item.serviceType?.replace('_', ' ')}\n            </span>\n          </div>\n        )\n      }\n    },\n    {\n      key: 'addressedTo',\n      header: 'Addressed To',\n      render: item => (\n        <div>\n          <div className=\"font-medium\">{item.addressedTo}</div>\n          <div className=\"text-sm text-gray-500\">\n            {item.department || 'General'}\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'receivedDate',\n      header: 'Received',\n      render: item => (\n        <div>\n          <div>{new Date(item.receivedDate).toLocaleDateString()}</div>\n          <div className=\"text-sm text-gray-500\">{item.receivedTime}</div>\n        </div>\n      ),\n    },\n    {\n      key: 'deliveryStatus',\n      header: 'Status',\n      render: item => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${getStatusColor(item.deliveryStatus)}`}\n        >\n          {item.deliveryStatus?.toUpperCase()}\n        </span>\n      ),\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      render: item => (\n        <Dropdown\n          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n          items={[\n            {\n              label: 'View Details',\n              icon: Eye,\n              onClick: () => handleViewDetails(item),\n            },\n            {\n              label: 'Edit',\n              icon: Edit,\n              onClick: () => handleEdit(item),\n            },\n            {\n              label: 'Mark Delivered',\n              icon: CheckCircle,\n              onClick: () => handleMarkDelivered(item),\n              disabled: item.deliveryStatus === 'delivered',\n            },\n            {\n              label: 'Print Receipt',\n              icon: Printer,\n              onClick: () => console.log('Print receipt for', item.id),\n            }\n          ]}\n        />\n      ),\n    }\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n  if (error) return <ErrorState message=\"Failed to load postal receive data\" />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Postal Receive</h1>\n        <div className=\"flex gap-2\">\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n          <button\n            onClick={() => {\n              reset()\n              setSelectedItem(null)\n              setShowCreateDialog(true)\n            }}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Record Receipt\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Inbox className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{receiveData?.total || 0}</p>\n              <p className=\"text-sm text-gray-600\">Total Received</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {receiveData?.data?.filter(d => d.deliveryStatus === 'pending')\n                  .length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Pending Delivery</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {receiveData?.data?.filter(\n                  d => d.deliveryStatus === 'delivered'\n                ).length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Delivered</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Package className=\"w-8 h-8 text-purple-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {receiveData?.data?.filter(\n                  d =>\n                    new Date(d.receivedDate).toDateString() ===\n                    new Date().toDateString(),\n                ).length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Today's Items</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <div className=\"md:col-span-2\">\n            <Input\n              placeholder=\"Search postal items...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              icon={Search}\n            />\n          </div>\n          <div>\n            <select\n              value={statusFilter}\n              onChange={e => setStatusFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">All Status</option>\n              <option value=\"pending\">Pending</option>\n              <option value=\"delivered\">Delivered</option>\n              <option value=\"returned\">Returned</option>\n            </select>\n          </div>\n          <div>\n            <select\n              value={serviceFilter}\n              onChange={e => setServiceFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">All Services</option>\n              <option value=\"regular\">Regular</option>\n              <option value=\"registered\">Registered</option>\n              <option value=\"speed_post\">Speed Post</option>\n              <option value=\"courier\">Courier</option>\n              <option value=\"express\">Express</option>\n            </select>\n          </div>\n          <div>\n            <input\n              type=\"date\"\n              value={dateFilter}\n              onChange={e => setDateFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Receive Table */}\n      <div className=\"bg-white rounded-lg shadow\">\n        {receiveData?.data?.length === 0 ? (\n          <EmptyState\n            title=\"No postal items found\"\n            description=\"No received postal items match your current filters\"\n            action={{\n              label: 'Record Receipt',\n              onClick: () => setShowCreateDialog(true),\n            }}\n          />\n        ) : (\n          <>\n            <Table data={receiveData?.data || []} columns={columns} />\n            <div className=\"p-6 border-t\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={Math.ceil((receiveData?.total || 0) / pageSize)}\n                onPageChange={setCurrentPage}\n              />\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog\n        open={showCreateDialog || showEditDialog}\n        onClose={() => {\n          setShowCreateDialog(false)\n          setShowEditDialog(false)\n          reset()\n          setSelectedItem(null)\n        }}\n        title={selectedItem ? 'Edit Postal Item' : 'Record New Postal Receipt'}\n        size=\"lg\"\n      >\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Sender Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Sender Information\n            </h3>\n            <Controller\n              name=\"senderName\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Sender Name *\"\n                  {...field}\n                  error={errors.senderName?.message}\n                />\n              )}\n            />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"senderOrganization\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Organization\"\n                    {...field}\n                    error={errors.senderOrganization?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"senderAddress\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Address\"\n                    {...field}\n                    error={errors.senderAddress?.message}\n                  />\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Item Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Item Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"itemType\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Item Type *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.itemType ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"\">Select Type</option>\n                      <option value=\"letter\">Letter</option>\n                      <option value=\"document\">Document</option>\n                      <option value=\"parcel\">Parcel</option>\n                      <option value=\"certificate\">Certificate</option>\n                      <option value=\"report_card\">Report Card</option>\n                      <option value=\"other\">Other</option>\n                    </select>\n                    {errors.itemType && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.itemType.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n              <Controller\n                name=\"serviceType\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Service Type *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.serviceType ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"regular\">Regular</option>\n                      <option value=\"registered\">Registered</option>\n                      <option value=\"speed_post\">Speed Post</option>\n                      <option value=\"courier\">Courier</option>\n                      <option value=\"express\">Express</option>\n                    </select>\n                    {errors.serviceType && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.serviceType.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n            </div>\n            <Controller\n              name=\"itemDescription\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Item Description *\"\n                  {...field}\n                  error={errors.itemDescription?.message}\n                />\n              )}\n            />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"trackingNumber\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Tracking Number\"\n                    {...field}\n                    error={errors.trackingNumber?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"referenceNumber\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Reference Number\"\n                    {...field}\n                    error={errors.referenceNumber?.message}\n                  />\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Receipt Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Receipt Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Controller\n                name=\"receivedDate\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Received Date *\"\n                    type=\"date\"\n                    {...field}\n                    error={errors.receivedDate?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"receivedTime\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Received Time *\"\n                    type=\"time\"\n                    {...field}\n                    error={errors.receivedTime?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"priority\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Priority *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.priority ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"low\">Low</option>\n                      <option value=\"medium\">Medium</option>\n                      <option value=\"high\">High</option>\n                      <option value=\"urgent\">Urgent</option>\n                    </select>\n                    {errors.priority && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.priority.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n            </div>\n            <Controller\n              name=\"receivedBy\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Received By *\n                  </label>\n                  <select\n                    {...field}\n                    className={`w-full border rounded-lg px-3 py-2 ${\n                      errors.receivedBy ? 'border-red-500' : ''\n                    }`}\n                  >\n                    <option value=\"\">Select Staff</option>\n                    {staffData?.data?.map(staff => (\n                      <option key={staff.id} value={staff.name}>\n                        {staff.name} - {staff.designation}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.receivedBy && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {errors.receivedBy.message}\n                    </p>\n                  )}\n                </div>\n              )}\n            />\n          </div>\n\n          {/* Addressee Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Addressee Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"addressedTo\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Addressed To *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.addressedTo ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"\">Select Person</option>\n                      {staffData?.data?.map(staff => (\n                        <option key={staff.id} value={staff.name}>\n                          {staff.name} - {staff.designation}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.addressedTo && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.addressedTo.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n              <Controller\n                name=\"department\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Department\"\n                    {...field}\n                    error={errors.department?.message}\n                  />\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Delivery Information */}\n          {deliveryStatus === 'delivered' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium border-b pb-2\">\n                Delivery Information\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Controller\n                  name=\"deliveredTo\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Delivered To\"\n                      {...field}\n                      error={errors.deliveredTo?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"deliveredDate\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Delivered Date\"\n                      type=\"date\"\n                      {...field}\n                      error={errors.deliveredDate?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"deliveredTime\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Delivered Time\"\n                      type=\"time\"\n                      {...field}\n                      error={errors.deliveredTime?.message}\n                    />\n                  )}\n                />\n              </div>\n            </div>\n          )}\n\n          <Controller\n            name=\"notes\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Notes\"\n                multiline\n                rows={3}\n                {...field}\n                error={errors.notes?.message}\n              />\n            )}\n          />\n\n          <div className=\"flex gap-2 pt-4\">\n            <button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {createMutation.isPending || updateMutation.isPending\n                ? 'Saving...'\n                : selectedItem\n                  ? 'Update Item'\n                  : 'Record Receipt'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setShowCreateDialog(false)\n                setShowEditDialog(false)\n                reset()\n                setSelectedItem(null)\n              }}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </Dialog>\n\n      {/* Delivery Dialog */}\n      <Dialog\n        open={showDeliveryDialog}\n        onClose={() => setShowDeliveryDialog(false)}\n        title=\"Mark as Delivered\"\n      >\n        <div className=\"space-y-4\">\n          <p>Mark this item as delivered to the addressee?</p>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Delivered To\n            </label>\n            <select className=\"w-full border rounded-lg px-3 py-2\">\n              <option value=\"\">Select Person</option>\n              {staffData?.data?.map(staff => (\n                <option key={staff.id} value={staff.name}>\n                  {staff.name} - {staff.designation}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"flex gap-2 pt-4\">\n            <button\n              onClick={() =>\n                deliverMutation.mutate({\n                  id: selectedItem?.id,\n                  deliveredTo: 'Selected Person',\n                })\n              }\n              disabled={deliverMutation.isPending}\n              className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\n            >\n              {deliverMutation.isPending ? 'Marking...' : 'Mark Delivered'}\n            </button>\n            <button\n              onClick={() => setShowDeliveryDialog(false)}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </Dialog>\n    </div>\n  )\n};\n\nexport default PostalReceive"
        }
    ]
}