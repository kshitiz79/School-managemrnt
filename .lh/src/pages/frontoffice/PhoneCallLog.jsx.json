{
    "sourceFile": "src/pages/frontoffice/PhoneCallLog.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755994275309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755994925722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   Download,\n   FileText\n } from 'lucide-react';\n import Input from '../../components/ui/Input';\n-import Dialog from '../../components/ui/Dialog';\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog';\n import Table from '../../components/ui/Table';\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n import ErrorState from '../../components/ui/ErrorState';\n import EmptyState from '../../components/ui/EmptyState';\n"
                },
                {
                    "date": 1755995169573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   FileText\n } from 'lucide-react';\n import Input from '../../components/ui/Input';\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog';\n-import Table from '../../components/ui/Table';\n+import { Table } from '../../components/ui/Table';\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n import ErrorState from '../../components/ui/ErrorState';\n import EmptyState from '../../components/ui/EmptyState';\n import Pagination from '../../components/ui/Pagination';\n"
                },
                {
                    "date": 1756039695729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton';\n import ErrorState from '../../components/ui/ErrorState';\n import EmptyState from '../../components/ui/EmptyState';\n import Pagination from '../../components/ui/Pagination';\n-import Dropdown from '../../components/ui/Dropdown';\n+import { Dropdown } from '../../components/ui/Dropdown';\n import { phoneCallLogApi } from '../../lib/api/phoneCallLog';\n import { staffApi } from '../../lib/api/staff';\n \n // Validation Schema\n"
                }
            ],
            "date": 1755994275309,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  Plus, \n  Search, \n  Filter, \n  MoreHorizontal, \n  Edit, \n  Eye, \n  Phone,\n  PhoneCall,\n  PhoneIncoming,\n  PhoneOutgoing,\n  Clock,\n  User,\n  Calendar,\n  MessageSquare,\n  AlertTriangle,\n  CheckCircle,\n  Download,\n  FileText\n} from 'lucide-react';\nimport Input from '../../components/ui/Input';\nimport Dialog from '../../components/ui/Dialog';\nimport Table from '../../components/ui/Table';\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton';\nimport ErrorState from '../../components/ui/ErrorState';\nimport EmptyState from '../../components/ui/EmptyState';\nimport Pagination from '../../components/ui/Pagination';\nimport Dropdown from '../../components/ui/Dropdown';\nimport { phoneCallLogApi } from '../../lib/api/phoneCallLog';\nimport { staffApi } from '../../lib/api/staff';\n\n// Validation Schema\nconst callLogSchema = z.object({\n  callerName: z.string().min(1, 'Caller name is required'),\n  callerPhone: z.string().min(10, 'Valid phone number is required'),\n  callerEmail: z.string().email('Valid email is required').optional().or(z.literal('')),\n  callType: z.enum(['incoming', 'outgoing'], {\n    required_error: 'Call type is required'\n  }),\n  callDate: z.string().min(1, 'Call date is required'),\n  callTime: z.string().min(1, 'Call time is required'),\n  duration: z.string().optional(),\n  purpose: z.string().min(1, 'Purpose is required'),\n  personCalled: z.string().optional(),\n  department: z.string().optional(),\n  callStatus: z.enum(['answered', 'missed', 'busy', 'no_answer'], {\n    required_error: 'Call status is required'\n  }),\n  priority: z.enum(['low', 'medium', 'high', 'urgent'], {\n    required_error: 'Priority is required'\n  }),\n  followUpRequired: z.boolean().default(false),\n  followUpDate: z.string().optional(),\n  notes: z.string().optional(),\n  actionTaken: z.string().optional(),\n  recordedBy: z.string().min(1, 'Recorded by is required')\n});\n\nconst PhoneCallLog = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [callTypeFilter, setCallTypeFilter] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [dateFilter, setDateFilter] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize] = useState(10);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [selectedCall, setSelectedCall] = useState(null);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    watch,\n    formState: { errors }\n  } = useForm({\n    resolver: zodResolver(callLogSchema),\n    mode: 'onChange',\n    defaultValues: {\n      callDate: new Date().toISOString().split('T')[0],\n      callTime: new Date().toTimeString().slice(0, 5),\n      callType: 'incoming',\n      callStatus: 'answered',\n      priority: 'medium',\n      followUpRequired: false\n    }\n  });\n\n  const followUpRequired = watch('followUpRequired');\n\n  const { data: callsData, isLoading, error } = useQuery({\n    queryKey: ['phoneCalls', { \n      page: currentPage, \n      pageSize, \n      search: searchTerm,\n      callType: callTypeFilter,\n      status: statusFilter,\n      date: dateFilter\n    }],\n    queryFn: () => phoneCallLogApi.getAll({ \n      page: currentPage, \n      pageSize, \n      search: searchTerm,\n      callType: callTypeFilter,\n      status: statusFilter,\n      date: dateFilter\n    })\n  });\n\n  const { data: staffData } = useQuery({\n    queryKey: ['staff', 'all'],\n    queryFn: () => staffApi.getAll({ all: true })\n  });\n\n  const createMutation = useMutation({\n    mutationFn: phoneCallLogApi.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['phoneCalls']);\n      setShowCreateDialog(false);\n      reset();\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }) => phoneCallLogApi.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['phoneCalls']);\n      setShowEditDialog(false);\n      reset();\n    }\n  });\n\n  const handleEdit = (call) => {\n    setSelectedCall(call);\n    reset({\n      callerName: call.callerName,\n      callerPhone: call.callerPhone,\n      callerEmail: call.callerEmail || '',\n      callType: call.callType,\n      callDate: call.callDate?.split('T')[0],\n      callTime: call.callTime,\n      duration: call.duration || '',\n      purpose: call.purpose,\n      personCalled: call.personCalled || '',\n      department: call.department || '',\n      callStatus: call.callStatus,\n      priority: call.priority,\n      followUpRequired: call.followUpRequired || false,\n      followUpDate: call.followUpDate?.split('T')[0] || '',\n      notes: call.notes || '',\n      actionTaken: call.actionTaken || '',\n      recordedBy: call.recordedBy\n    });\n    setShowEditDialog(true);\n  };\n\n  const handleViewDetails = (call) => {\n    setSelectedCall(call);\n    setShowDetailsDialog(true);\n  };\n\n  const onSubmit = (data) => {\n    if (selectedCall) {\n      updateMutation.mutate({ id: selectedCall.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const getCallTypeIcon = (type) => {\n    return type === 'incoming' ? PhoneIncoming : PhoneOutgoing;\n  };\n\n  const getCallTypeColor = (type) => {\n    return type === 'incoming' ? 'text-green-600' : 'text-blue-600';\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'answered': return 'bg-green-100 text-green-800';\n      case 'missed': return 'bg-red-100 text-red-800';\n      case 'busy': return 'bg-yellow-100 text-yellow-800';\n      case 'no_answer': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800';\n      case 'high': return 'bg-orange-100 text-orange-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'low': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const columns = [\n    {\n      key: 'callType',\n      header: 'Type',\n      render: (call) => {\n        const Icon = getCallTypeIcon(call.callType);\n        return (\n          <div className=\"flex items-center gap-2\">\n            <Icon className={`w-4 h-4 ${getCallTypeColor(call.callType)}`} />\n            <span className=\"capitalize\">{call.callType}</span>\n          </div>\n        );\n      }\n    },\n    {\n      key: 'callerName',\n      header: 'Caller',\n      render: (call) => (\n        <div>\n          <div className=\"font-medium\">{call.callerName}</div>\n          <div className=\"text-sm text-gray-500\">{call.callerPhone}</div>\n        </div>\n      )\n    },\n    {\n      key: 'purpose',\n      header: 'Purpose'\n    },\n    {\n      key: 'personCalled',\n      header: 'Person Called',\n      render: (call) => call.personCalled || 'Reception'\n    },\n    {\n      key: 'callDateTime',\n      header: 'Date & Time',\n      render: (call) => (\n        <div>\n          <div>{new Date(call.callDate).toLocaleDateString()}</div>\n          <div className=\"text-sm text-gray-500\">{call.callTime}</div>\n        </div>\n      )\n    },\n    {\n      key: 'duration',\n      header: 'Duration',\n      render: (call) => call.duration || 'N/A'\n    },\n    {\n      key: 'callStatus',\n      header: 'Status',\n      render: (call) => (\n        <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(call.callStatus)}`}>\n          {call.callStatus?.replace('_', ' ').toUpperCase()}\n        </span>\n      )\n    },\n    {\n      key: 'priority',\n      header: 'Priority',\n      render: (call) => (\n        <span className={`px-2 py-1 rounded-full text-xs ${getPriorityColor(call.priority)}`}>\n          {call.priority?.toUpperCase()}\n        </span>\n      )\n    },\n    {\n      key: 'followUp',\n      header: 'Follow-up',\n      render: (call) => (\n        call.followUpRequired ? (\n          <div className=\"flex items-center gap-1 text-orange-600\">\n            <AlertTriangle className=\"w-4 h-4\" />\n            <span className=\"text-xs\">\n              {call.followUpDate ? new Date(call.followUpDate).toLocaleDateString() : 'Required'}\n            </span>\n          </div>\n        ) : (\n          <span className=\"text-gray-400 text-xs\">None</span>\n        )\n      )\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      render: (call) => (\n        <Dropdown\n          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n          items={[\n            {\n              label: 'View Details',\n              icon: Eye,\n              onClick: () => handleViewDetails(call)\n            },\n            {\n              label: 'Edit',\n              icon: Edit,\n              onClick: () => handleEdit(call)\n            },\n            {\n              label: 'Call Back',\n              icon: Phone,\n              onClick: () => window.open(`tel:${call.callerPhone}`)\n            }\n          ]}\n        />\n      )\n    }\n  ];\n\n  if (isLoading) return <LoadingSkeleton />;\n  if (error) return <ErrorState message=\"Failed to load phone call logs\" />;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Phone Call Log</h1>\n        <div className=\"flex gap-2\">\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n          <button\n            onClick={() => {\n              reset();\n              setSelectedCall(null);\n              setShowCreateDialog(true);\n            }}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Log Call\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <PhoneCall className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{callsData?.total || 0}</p>\n              <p className=\"text-sm text-gray-600\">Total Calls</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <PhoneIncoming className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {callsData?.data?.filter(c => c.callType === 'incoming').length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Incoming</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <PhoneOutgoing className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {callsData?.data?.filter(c => c.callType === 'outgoing').length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Outgoing</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <AlertTriangle className=\"w-8 h-8 text-orange-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {callsData?.data?.filter(c => c.followUpRequired).length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Follow-ups</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PhoneCallLog;"
        }
    ]
}