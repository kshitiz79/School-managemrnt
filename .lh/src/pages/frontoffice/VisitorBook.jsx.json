{
    "sourceFile": "src/pages/frontoffice/VisitorBook.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755994925598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755995169590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,836 @@\n+import React, { useState } from 'react'\n+import { useForm, Controller } from 'react-hook-form'\n+import { zodResolver } from '@hookform/resolvers/zod'\n+import { z } from 'zod'\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n+import {\n+  Plus,\n+  Search,\n+  Filter,\n+  MoreHorizontal,\n+  Edit,\n+  Eye,\n+  Clock,\n+  User,\n+  Phone,\n+  Building,\n+  Calendar,\n+  CheckCircle,\n+  XCircle,\n+  AlertTriangle,\n+  Printer,\n+  Download,\n+  QrCode,\n+  Camera,\n+  FileText,\n+} from 'lucide-react'\n+import Input from '../../components/ui/Input'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n+import { Table } from '../../components/ui/Table'\n+import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n+import ErrorState from '../../components/ui/ErrorState'\n+import EmptyState from '../../components/ui/EmptyState'\n+import Pagination from '../../components/ui/Pagination'\n+import Dropdown from '../../components/ui/Dropdown'\n+import { visitorBookApi } from '../../lib/api/visitorBook'\n+import { staffApi } from '../../lib/api/staff'\n+\n+// Validation Schema\n+const visitorSchema = z.object({\n+  visitorName: z.string().min(1, 'Visitor name is required'),\n+  visitorMobile: z.string().min(10, 'Valid mobile number is required'),\n+  visitorEmail: z\n+    .string()\n+    .email('Valid email is required')\n+    .optional()\n+    .or(z.literal('')),\n+  organization: z.string().optional(),\n+  purpose: z.string().min(1, 'Purpose of visit is required'),\n+  personToMeet: z.string().min(1, 'Person to meet is required'),\n+  department: z.string().optional(),\n+  visitDate: z.string().min(1, 'Visit date is required'),\n+  checkInTime: z.string().min(1, 'Check-in time is required'),\n+  expectedDuration: z.string().optional(),\n+  vehicleNumber: z.string().optional(),\n+  idProofType: z.enum(\n+    ['aadhar', 'pan', 'driving_license', 'passport', 'voter_id', 'other'],\n+    {\n+      required_error: 'ID proof type is required',\n+    },\n+  ),\n+  idProofNumber: z.string().min(1, 'ID proof number is required'),\n+  numberOfVisitors: z\n+    .number()\n+    .min(1, 'Number of visitors must be at least 1')\n+    .default(1),\n+  notes: z.string().optional(),\n+  status: z\n+    .enum(['checked_in', 'checked_out', 'cancelled'], {\n+      required_error: 'Status is required',\n+    })\n+    .default('checked_in'),\n+})\n+\n+const VisitorSlip = ({ visitor, onClose }) => {\n+  const handlePrint = () => {\n+    window.print()\n+  }\n+\n+  return (\n+    <Dialog open={!!visitor} onClose={onClose} title=\"Visitor Pass\" size=\"md\">\n+      <div className=\"space-y-6\" id=\"visitor-slip\">\n+        {/* Header */}\n+        <div className=\"text-center border-b pb-4\">\n+          <h2 className=\"text-2xl font-bold text-gray-900\">VISITOR PASS</h2>\n+          <p className=\"text-gray-600\">School Management System</p>\n+        </div>\n+\n+        {/* Visitor Photo Placeholder */}\n+        <div className=\"flex justify-center\">\n+          <div className=\"w-24 h-24 bg-gray-200 rounded-lg flex items-center justify-center\">\n+            {visitor?.photo ? (\n+              <img\n+                src={visitor.photo}\n+                alt=\"Visitor\"\n+                className=\"w-full h-full object-cover rounded-lg\"\n+              />\n+            ) : (\n+              <User className=\"w-12 h-12 text-gray-400\" />\n+            )}\n+          </div>\n+        </div>\n+\n+        {/* Visitor Details */}\n+        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n+          <div>\n+            <p className=\"font-medium text-gray-700\">Name:</p>\n+            <p className=\"text-gray-900\">{visitor?.visitorName}</p>\n+          </div>\n+          <div>\n+            <p className=\"font-medium text-gray-700\">Mobile:</p>\n+            <p className=\"text-gray-900\">{visitor?.visitorMobile}</p>\n+          </div>\n+          <div>\n+            <p className=\"font-medium text-gray-700\">Organization:</p>\n+            <p className=\"text-gray-900\">{visitor?.organization || 'N/A'}</p>\n+          </div>\n+          <div>\n+            <p className=\"font-medium text-gray-700\">Purpose:</p>\n+            <p className=\"text-gray-900\">{visitor?.purpose}</p>\n+          </div>\n+          <div>\n+            <p className=\"font-medium text-gray-700\">Person to Meet:</p>\n+            <p className=\"text-gray-900\">{visitor?.personToMeet}</p>\n+          </div>\n+          <div>\n+            <p className=\"font-medium text-gray-700\">Department:</p>\n+            <p className=\"text-gray-900\">{visitor?.department || 'N/A'}</p>\n+          </div>\n+          <div>\n+            <p className=\"font-medium text-gray-700\">Check-in Time:</p>\n+            <p className=\"text-gray-900\">\n+              {new Date(\n+                `${visitor?.visitDate}T${visitor?.checkInTime}`,\n+              ).toLocaleString()}\n+            </p>\n+          </div>\n+          <div>\n+            <p className=\"font-medium text-gray-700\">Pass ID:</p>\n+            <p className=\"text-gray-900 font-mono\">\n+              {visitor?.passId || visitor?.id}\n+            </p>\n+          </div>\n+        </div>\n+\n+        {/* QR Code Placeholder */}\n+        <div className=\"flex justify-center\">\n+          <div className=\"w-20 h-20 bg-gray-200 rounded flex items-center justify-center\">\n+            <QrCode className=\"w-12 h-12 text-gray-400\" />\n+          </div>\n+        </div>\n+\n+        {/* Instructions */}\n+        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n+          <h4 className=\"font-medium text-yellow-800 mb-1\">Instructions:</h4>\n+          <ul className=\"text-xs text-yellow-700 space-y-1\">\n+            <li>• Please wear this pass visibly at all times</li>\n+            <li>• Return this pass when leaving the premises</li>\n+            <li>• Follow all safety and security protocols</li>\n+            <li>• Contact reception for any assistance</li>\n+          </ul>\n+        </div>\n+\n+        {/* Footer */}\n+        <div className=\"text-center text-xs text-gray-500 border-t pt-4\">\n+          <p>This pass is valid only for the date and time mentioned above</p>\n+          <p>Generated on: {new Date().toLocaleString()}</p>\n+        </div>\n+\n+        <div className=\"flex justify-center gap-4 print:hidden\">\n+          <button\n+            onClick={handlePrint}\n+            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n+          >\n+            <Printer className=\"w-4 h-4\" />\n+            Print Pass\n+          </button>\n+          <button\n+            onClick={onClose}\n+            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n+          >\n+            Close\n+          </button>\n+        </div>\n+      </div>\n+    </Dialog>\n+  )\n+}\n+\n+const VisitorBook = () => {\n+  const [searchTerm, setSearchTerm] = useState('')\n+  const [statusFilter, setStatusFilter] = useState('')\n+  const [dateFilter, setDateFilter] = useState('')\n+  const [currentPage, setCurrentPage] = useState(1)\n+  const [pageSize] = useState(10)\n+  const [showCreateDialog, setShowCreateDialog] = useState(false)\n+  const [showEditDialog, setShowEditDialog] = useState(false)\n+  const [selectedVisitor, setSelectedVisitor] = useState(null)\n+  const [showVisitorSlip, setShowVisitorSlip] = useState(false)\n+\n+  const queryClient = useQueryClient()\n+\n+  const {\n+    control,\n+    handleSubmit,\n+    reset,\n+    watch,\n+    formState: { errors },\n+  } = useForm({\n+    resolver: zodResolver(visitorSchema),\n+    mode: 'onChange',\n+    defaultValues: {\n+      visitDate: new Date().toISOString().split('T')[0],\n+      checkInTime: new Date().toTimeString().slice(0, 5),\n+      numberOfVisitors: 1,\n+      status: 'checked_in',\n+    },\n+  })\n+\n+  const {\n+    data: visitorsData,\n+    isLoading,\n+    error,\n+  } = useQuery({\n+    queryKey: [\n+      'visitors',\n+      {\n+        page: currentPage,\n+        pageSize,\n+        search: searchTerm,\n+        status: statusFilter,\n+        date: dateFilter,\n+      },\n+    ],\n+    queryFn: () =>\n+      visitorBookApi.getAll({\n+        page: currentPage,\n+        pageSize,\n+        search: searchTerm,\n+        status: statusFilter,\n+        date: dateFilter,\n+      }),\n+  })\n+\n+  const { data: staffData } = useQuery({\n+    queryKey: ['staff', 'all'],\n+    queryFn: () => staffApi.getAll({ all: true }),\n+  })\n+\n+  const createMutation = useMutation({\n+    mutationFn: visitorBookApi.create,\n+    onSuccess: data => {\n+      queryClient.invalidateQueries(['visitors'])\n+      setShowCreateDialog(false)\n+      reset()\n+      // Show visitor slip\n+      setSelectedVisitor(data.data)\n+      setShowVisitorSlip(true)\n+    },\n+  })\n+\n+  const updateMutation = useMutation({\n+    mutationFn: ({ id, data }) => visitorBookApi.update(id, data),\n+    onSuccess: () => {\n+      queryClient.invalidateQueries(['visitors'])\n+      setShowEditDialog(false)\n+      reset()\n+    },\n+  })\n+\n+  const checkOutMutation = useMutation({\n+    mutationFn: visitorBookApi.checkOut,\n+    onSuccess: () => {\n+      queryClient.invalidateQueries(['visitors'])\n+    },\n+  })\n+\n+  const handleEdit = visitor => {\n+    setSelectedVisitor(visitor)\n+    reset({\n+      visitorName: visitor.visitorName,\n+      visitorMobile: visitor.visitorMobile,\n+      visitorEmail: visitor.visitorEmail || '',\n+      organization: visitor.organization || '',\n+      purpose: visitor.purpose,\n+      personToMeet: visitor.personToMeet,\n+      department: visitor.department || '',\n+      visitDate: visitor.visitDate?.split('T')[0],\n+      checkInTime: visitor.checkInTime,\n+      expectedDuration: visitor.expectedDuration || '',\n+      vehicleNumber: visitor.vehicleNumber || '',\n+      idProofType: visitor.idProofType,\n+      idProofNumber: visitor.idProofNumber,\n+      numberOfVisitors: visitor.numberOfVisitors || 1,\n+      notes: visitor.notes || '',\n+      status: visitor.status,\n+    })\n+    setShowEditDialog(true)\n+  }\n+\n+  const handleCheckOut = visitorId => {\n+    if (window.confirm('Are you sure you want to check out this visitor?')) {\n+      checkOutMutation.mutate(visitorId)\n+    }\n+  }\n+\n+  const handlePrintSlip = visitor => {\n+    setSelectedVisitor(visitor)\n+    setShowVisitorSlip(true)\n+  }\n+\n+  const onSubmit = data => {\n+    if (selectedVisitor) {\n+      updateMutation.mutate({ id: selectedVisitor.id, data })\n+    } else {\n+      createMutation.mutate(data)\n+    }\n+  }\n+\n+  const getStatusColor = status => {\n+    switch (status) {\n+      case 'checked_in':\n+        return 'bg-green-100 text-green-800'\n+      case 'checked_out':\n+        return 'bg-gray-100 text-gray-800'\n+      case 'cancelled':\n+        return 'bg-red-100 text-red-800'\n+      default:\n+        return 'bg-gray-100 text-gray-800'\n+    }\n+  }\n+\n+  const columns = [\n+    {\n+      key: 'visitorName',\n+      header: 'Visitor Name',\n+      sortable: true,\n+    },\n+    {\n+      key: 'visitorMobile',\n+      header: 'Mobile',\n+    },\n+    {\n+      key: 'organization',\n+      header: 'Organization',\n+      render: visitor => visitor.organization || 'Individual',\n+    },\n+    {\n+      key: 'purpose',\n+      header: 'Purpose',\n+    },\n+    {\n+      key: 'personToMeet',\n+      header: 'Person to Meet',\n+    },\n+    {\n+      key: 'checkInTime',\n+      header: 'Check-in Time',\n+      render: visitor => (\n+        <div>\n+          <div>{new Date(visitor.visitDate).toLocaleDateString()}</div>\n+          <div className=\"text-sm text-gray-500\">{visitor.checkInTime}</div>\n+        </div>\n+      ),\n+    },\n+    {\n+      key: 'status',\n+      header: 'Status',\n+      render: visitor => (\n+        <span\n+          className={`px-2 py-1 rounded-full text-xs ${getStatusColor(visitor.status)}`}\n+        >\n+          {visitor.status?.replace('_', ' ').toUpperCase()}\n+        </span>\n+      ),\n+    },\n+    {\n+      key: 'actions',\n+      header: 'Actions',\n+      render: visitor => (\n+        <Dropdown\n+          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n+          items={[\n+            {\n+              label: 'Print Pass',\n+              icon: Printer,\n+              onClick: () => handlePrintSlip(visitor),\n+            },\n+            {\n+              label: 'Edit',\n+              icon: Edit,\n+              onClick: () => handleEdit(visitor),\n+              disabled: visitor.status === 'checked_out',\n+            },\n+            {\n+              label: 'Check Out',\n+              icon: XCircle,\n+              onClick: () => handleCheckOut(visitor.id),\n+              disabled: visitor.status !== 'checked_in',\n+            },\n+          ]}\n+        />\n+      ),\n+    },\n+  ]\n+\n+  if (isLoading) return <LoadingSkeleton />\n+  if (error) return <ErrorState message=\"Failed to load visitor data\" />\n+\n+  return (\n+    <div className=\"space-y-6\">\n+      <div className=\"flex justify-between items-center\">\n+        <h1 className=\"text-2xl font-bold\">Visitor Book</h1>\n+        <div className=\"flex gap-2\">\n+          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n+            <Download className=\"w-4 h-4\" />\n+            Export\n+          </button>\n+          <button\n+            onClick={() => {\n+              reset()\n+              setSelectedVisitor(null)\n+              setShowCreateDialog(true)\n+            }}\n+            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n+          >\n+            <Plus className=\"w-4 h-4\" />\n+            Add Visitor\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Statistics Cards */}\n+      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <User className=\"w-8 h-8 text-blue-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">{visitorsData?.total || 0}</p>\n+              <p className=\"text-sm text-gray-600\">Total Visitors</p>\n+            </div>\n+          </div>\n+        </div>\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">\n+                {visitorsData?.data?.filter(v => v.status === 'checked_in')\n+                  .length || 0}\n+              </p>\n+              <p className=\"text-sm text-gray-600\">Currently In</p>\n+            </div>\n+          </div>\n+        </div>\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <XCircle className=\"w-8 h-8 text-gray-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">\n+                {visitorsData?.data?.filter(v => v.status === 'checked_out')\n+                  .length || 0}\n+              </p>\n+              <p className=\"text-sm text-gray-600\">Checked Out</p>\n+            </div>\n+          </div>\n+        </div>\n+        <div className=\"bg-white p-4 rounded-lg shadow\">\n+          <div className=\"flex items-center gap-3\">\n+            <Clock className=\"w-8 h-8 text-orange-600\" />\n+            <div>\n+              <p className=\"text-2xl font-bold\">\n+                {visitorsData?.data?.filter(\n+                  v =>\n+                    v.status === 'checked_in' &&\n+                    new Date(v.visitDate).toDateString() ===\n+                      new Date().toDateString()\n+                ).length || 0}\n+              </p>\n+              <p className=\"text-sm text-gray-600\">Today's Visitors</p>\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Filters */}\n+      <div className=\"bg-white rounded-lg shadow p-6\">\n+        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n+          <div className=\"md:col-span-2\">\n+            <Input\n+              placeholder=\"Search visitors...\"\n+              value={searchTerm}\n+              onChange={e => setSearchTerm(e.target.value)}\n+              icon={Search}\n+            />\n+          </div>\n+          <div>\n+            <select\n+              value={statusFilter}\n+              onChange={e => setStatusFilter(e.target.value)}\n+              className=\"w-full border rounded-lg px-3 py-2\"\n+            >\n+              <option value=\"\">All Status</option>\n+              <option value=\"checked_in\">Checked In</option>\n+              <option value=\"checked_out\">Checked Out</option>\n+              <option value=\"cancelled\">Cancelled</option>\n+            </select>\n+          </div>\n+          <div>\n+            <input\n+              type=\"date\"\n+              value={dateFilter}\n+              onChange={e => setDateFilter(e.target.value)}\n+              className=\"w-full border rounded-lg px-3 py-2\"\n+            />\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Visitors Table */}\n+      <div className=\"bg-white rounded-lg shadow\">\n+        {visitorsData?.data?.length === 0 ? (\n+          <EmptyState\n+            title=\"No visitors found\"\n+            description=\"No visitors match your current filters\"\n+            action={{\n+              label: 'Add Visitor',\n+              onClick: () => setShowCreateDialog(true),\n+            }}\n+          />\n+        ) : (\n+          <>\n+            <Table data={visitorsData?.data || []} columns={columns} />\n+            <div className=\"p-6 border-t\">\n+              <Pagination\n+                currentPage={currentPage}\n+                totalPages={Math.ceil((visitorsData?.total || 0) / pageSize)}\n+                onPageChange={setCurrentPage}\n+              />\n+            </div>\n+          </>\n+        )}\n+      </div>\n+\n+      {/* Create/Edit Dialog */}\n+      <Dialog\n+        open={showCreateDialog || showEditDialog}\n+        onClose={() => {\n+          setShowCreateDialog(false)\n+          setShowEditDialog(false)\n+          reset()\n+          setSelectedVisitor(null)\n+        }}\n+        title={selectedVisitor ? 'Edit Visitor' : 'Add New Visitor'}\n+        size=\"lg\"\n+      >\n+        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n+          {/* Visitor Information */}\n+          <div className=\"space-y-4\">\n+            <h3 className=\"text-lg font-medium border-b pb-2\">\n+              Visitor Information\n+            </h3>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+              <Controller\n+                name=\"visitorName\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Visitor Name *\"\n+                    {...field}\n+                    error={errors.visitorName?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"visitorMobile\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Mobile Number *\"\n+                    {...field}\n+                    error={errors.visitorMobile?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"visitorEmail\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Email\"\n+                    type=\"email\"\n+                    {...field}\n+                    error={errors.visitorEmail?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"organization\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Organization\"\n+                    {...field}\n+                    error={errors.organization?.message}\n+                  />\n+                )}\n+              />\n+            </div>\n+          </div>\n+\n+          {/* Visit Details */}\n+          <div className=\"space-y-4\">\n+            <h3 className=\"text-lg font-medium border-b pb-2\">Visit Details</h3>\n+            <Controller\n+              name=\"purpose\"\n+              control={control}\n+              render={({ field }) => (\n+                <Input\n+                  label=\"Purpose of Visit *\"\n+                  {...field}\n+                  error={errors.purpose?.message}\n+                />\n+              )}\n+            />\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+              <Controller\n+                name=\"personToMeet\"\n+                control={control}\n+                render={({ field }) => (\n+                  <div>\n+                    <label className=\"block text-sm font-medium mb-1\">\n+                      Person to Meet *\n+                    </label>\n+                    <select\n+                      {...field}\n+                      className={`w-full border rounded-lg px-3 py-2 ${\n+                        errors.personToMeet ? 'border-red-500' : ''\n+                      }`}\n+                    >\n+                      <option value=\"\">Select Person</option>\n+                      {staffData?.data?.map(staff => (\n+                        <option key={staff.id} value={staff.name}>\n+                          {staff.name} - {staff.designation}\n+                        </option>\n+                      ))}\n+                    </select>\n+                    {errors.personToMeet && (\n+                      <p className=\"text-red-500 text-sm mt-1\">\n+                        {errors.personToMeet.message}\n+                      </p>\n+                    )}\n+                  </div>\n+                )}\n+              />\n+              <Controller\n+                name=\"department\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Department\"\n+                    {...field}\n+                    error={errors.department?.message}\n+                  />\n+                )}\n+              />\n+            </div>\n+            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n+              <Controller\n+                name=\"visitDate\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Visit Date *\"\n+                    type=\"date\"\n+                    {...field}\n+                    error={errors.visitDate?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"checkInTime\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Check-in Time *\"\n+                    type=\"time\"\n+                    {...field}\n+                    error={errors.checkInTime?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"expectedDuration\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Expected Duration (hours)\"\n+                    type=\"number\"\n+                    step=\"0.5\"\n+                    {...field}\n+                    error={errors.expectedDuration?.message}\n+                  />\n+                )}\n+              />\n+            </div>\n+          </div>\n+\n+          {/* ID Proof & Additional Info */}\n+          <div className=\"space-y-4\">\n+            <h3 className=\"text-lg font-medium border-b pb-2\">\n+              ID Proof & Additional Information\n+            </h3>\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+              <Controller\n+                name=\"idProofType\"\n+                control={control}\n+                render={({ field }) => (\n+                  <div>\n+                    <label className=\"block text-sm font-medium mb-1\">\n+                      ID Proof Type *\n+                    </label>\n+                    <select\n+                      {...field}\n+                      className={`w-full border rounded-lg px-3 py-2 ${\n+                        errors.idProofType ? 'border-red-500' : ''\n+                      }`}\n+                    >\n+                      <option value=\"\">Select ID Proof</option>\n+                      <option value=\"aadhar\">Aadhar Card</option>\n+                      <option value=\"pan\">PAN Card</option>\n+                      <option value=\"driving_license\">Driving License</option>\n+                      <option value=\"passport\">Passport</option>\n+                      <option value=\"voter_id\">Voter ID</option>\n+                      <option value=\"other\">Other</option>\n+                    </select>\n+                    {errors.idProofType && (\n+                      <p className=\"text-red-500 text-sm mt-1\">\n+                        {errors.idProofType.message}\n+                      </p>\n+                    )}\n+                  </div>\n+                )}\n+              />\n+              <Controller\n+                name=\"idProofNumber\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"ID Proof Number *\"\n+                    {...field}\n+                    error={errors.idProofNumber?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"numberOfVisitors\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Number of Visitors *\"\n+                    type=\"number\"\n+                    min=\"1\"\n+                    {...field}\n+                    onChange={e => field.onChange(Number(e.target.value))}\n+                    error={errors.numberOfVisitors?.message}\n+                  />\n+                )}\n+              />\n+              <Controller\n+                name=\"vehicleNumber\"\n+                control={control}\n+                render={({ field }) => (\n+                  <Input\n+                    label=\"Vehicle Number\"\n+                    {...field}\n+                    error={errors.vehicleNumber?.message}\n+                  />\n+                )}\n+              />\n+            </div>\n+            <Controller\n+              name=\"notes\"\n+              control={control}\n+              render={({ field }) => (\n+                <Input\n+                  label=\"Notes\"\n+                  multiline\n+                  rows={3}\n+                  {...field}\n+                  error={errors.notes?.message}\n+                />\n+              )}\n+            />\n+          </div>\n+\n+          <div className=\"flex gap-2 pt-4\">\n+            <button\n+              type=\"submit\"\n+              disabled={createMutation.isPending || updateMutation.isPending}\n+              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n+            >\n+              {createMutation.isPending || updateMutation.isPending\n+                ? 'Saving...'\n+                : selectedVisitor\n+                  ? 'Update Visitor'\n+                  : 'Add Visitor'}\n+            </button>\n+            <button\n+              type=\"button\"\n+              onClick={() => {\n+                setShowCreateDialog(false)\n+                setShowEditDialog(false)\n+                reset()\n+                setSelectedVisitor(null)\n+              }}\n+              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n+            >\n+              Cancel\n+            </button>\n+          </div>\n+        </form>\n+      </Dialog>\n+\n+      {/* Visitor Slip */}\n+      <VisitorSlip\n+        visitor={showVisitorSlip ? selectedVisitor : null}\n+        onClose={() => {\n+          setShowVisitorSlip(false)\n+          setSelectedVisitor(null)\n+        }}\n+      />\n+    </div>\n+  )\n+}\n+\n+export default VisitorBook\n"
                },
                {
                    "date": 1756039695768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n-import Dropdown from '../../components/ui/Dropdown'\n+import { Dropdown } from '../../components/ui/Dropdown'\n import { visitorBookApi } from '../../lib/api/visitorBook'\n import { staffApi } from '../../lib/api/staff'\n \n // Validation Schema\n@@ -833,840 +833,4 @@\n   )\n }\n \n export default VisitorBook\n-import React, { useState } from 'react'\n-import { useForm, Controller } from 'react-hook-form'\n-import { zodResolver } from '@hookform/resolvers/zod'\n-import { z } from 'zod'\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n-import {\n-  Plus,\n-  Search,\n-  Filter,\n-  MoreHorizontal,\n-  Edit,\n-  Eye,\n-  Clock,\n-  User,\n-  Phone,\n-  Building,\n-  Calendar,\n-  CheckCircle,\n-  XCircle,\n-  AlertTriangle,\n-  Printer,\n-  Download,\n-  QrCode,\n-  Camera,\n-  FileText,\n-} from 'lucide-react'\n-import Input from '../../components/ui/Input'\n-import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n-import Table from '../../components/ui/Table'\n-import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n-import ErrorState from '../../components/ui/ErrorState'\n-import EmptyState from '../../components/ui/EmptyState'\n-import Pagination from '../../components/ui/Pagination'\n-import Dropdown from '../../components/ui/Dropdown'\n-import { visitorBookApi } from '../../lib/api/visitorBook'\n-import { staffApi } from '../../lib/api/staff'\n-\n-// Validation Schema\n-const visitorSchema = z.object({\n-  visitorName: z.string().min(1, 'Visitor name is required'),\n-  visitorMobile: z.string().min(10, 'Valid mobile number is required'),\n-  visitorEmail: z\n-    .string()\n-    .email('Valid email is required')\n-    .optional()\n-    .or(z.literal('')),\n-  organization: z.string().optional(),\n-  purpose: z.string().min(1, 'Purpose of visit is required'),\n-  personToMeet: z.string().min(1, 'Person to meet is required'),\n-  department: z.string().optional(),\n-  visitDate: z.string().min(1, 'Visit date is required'),\n-  checkInTime: z.string().min(1, 'Check-in time is required'),\n-  expectedDuration: z.string().optional(),\n-  vehicleNumber: z.string().optional(),\n-  idProofType: z.enum(\n-    ['aadhar', 'pan', 'driving_license', 'passport', 'voter_id', 'other'],\n-    {\n-      required_error: 'ID proof type is required',\n-    },\n-  ),\n-  idProofNumber: z.string().min(1, 'ID proof number is required'),\n-  numberOfVisitors: z\n-    .number()\n-    .min(1, 'Number of visitors must be at least 1')\n-    .default(1),\n-  notes: z.string().optional(),\n-  status: z\n-    .enum(['checked_in', 'checked_out', 'cancelled'], {\n-      required_error: 'Status is required',\n-    })\n-    .default('checked_in'),\n-})\n-\n-const VisitorSlip = ({ visitor, onClose }) => {\n-  const handlePrint = () => {\n-    window.print()\n-  }\n-\n-  return (\n-    <Dialog open={!!visitor} onClose={onClose} title=\"Visitor Pass\" size=\"md\">\n-      <div className=\"space-y-6\" id=\"visitor-slip\">\n-        {/* Header */}\n-        <div className=\"text-center border-b pb-4\">\n-          <h2 className=\"text-2xl font-bold text-gray-900\">VISITOR PASS</h2>\n-          <p className=\"text-gray-600\">School Management System</p>\n-        </div>\n-\n-        {/* Visitor Photo Placeholder */}\n-        <div className=\"flex justify-center\">\n-          <div className=\"w-24 h-24 bg-gray-200 rounded-lg flex items-center justify-center\">\n-            {visitor?.photo ? (\n-              <img\n-                src={visitor.photo}\n-                alt=\"Visitor\"\n-                className=\"w-full h-full object-cover rounded-lg\"\n-              />\n-            ) : (\n-              <User className=\"w-12 h-12 text-gray-400\" />\n-            )}\n-          </div>\n-        </div>\n-\n-        {/* Visitor Details */}\n-        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n-          <div>\n-            <p className=\"font-medium text-gray-700\">Name:</p>\n-            <p className=\"text-gray-900\">{visitor?.visitorName}</p>\n-          </div>\n-          <div>\n-            <p className=\"font-medium text-gray-700\">Mobile:</p>\n-            <p className=\"text-gray-900\">{visitor?.visitorMobile}</p>\n-          </div>\n-          <div>\n-            <p className=\"font-medium text-gray-700\">Organization:</p>\n-            <p className=\"text-gray-900\">{visitor?.organization || 'N/A'}</p>\n-          </div>\n-          <div>\n-            <p className=\"font-medium text-gray-700\">Purpose:</p>\n-            <p className=\"text-gray-900\">{visitor?.purpose}</p>\n-          </div>\n-          <div>\n-            <p className=\"font-medium text-gray-700\">Person to Meet:</p>\n-            <p className=\"text-gray-900\">{visitor?.personToMeet}</p>\n-          </div>\n-          <div>\n-            <p className=\"font-medium text-gray-700\">Department:</p>\n-            <p className=\"text-gray-900\">{visitor?.department || 'N/A'}</p>\n-          </div>\n-          <div>\n-            <p className=\"font-medium text-gray-700\">Check-in Time:</p>\n-            <p className=\"text-gray-900\">\n-              {new Date(\n-                `${visitor?.visitDate}T${visitor?.checkInTime}`,\n-              ).toLocaleString()}\n-            </p>\n-          </div>\n-          <div>\n-            <p className=\"font-medium text-gray-700\">Pass ID:</p>\n-            <p className=\"text-gray-900 font-mono\">\n-              {visitor?.passId || visitor?.id}\n-            </p>\n-          </div>\n-        </div>\n-\n-        {/* QR Code Placeholder */}\n-        <div className=\"flex justify-center\">\n-          <div className=\"w-20 h-20 bg-gray-200 rounded flex items-center justify-center\">\n-            <QrCode className=\"w-12 h-12 text-gray-400\" />\n-          </div>\n-        </div>\n-\n-        {/* Instructions */}\n-        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n-          <h4 className=\"font-medium text-yellow-800 mb-1\">Instructions:</h4>\n-          <ul className=\"text-xs text-yellow-700 space-y-1\">\n-            <li>• Please wear this pass visibly at all times</li>\n-            <li>• Return this pass when leaving the premises</li>\n-            <li>• Follow all safety and security protocols</li>\n-            <li>• Contact reception for any assistance</li>\n-          </ul>\n-        </div>\n-\n-        {/* Footer */}\n-        <div className=\"text-center text-xs text-gray-500 border-t pt-4\">\n-          <p>This pass is valid only for the date and time mentioned above</p>\n-          <p>Generated on: {new Date().toLocaleString()}</p>\n-        </div>\n-\n-        <div className=\"flex justify-center gap-4 print:hidden\">\n-          <button\n-            onClick={handlePrint}\n-            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n-          >\n-            <Printer className=\"w-4 h-4\" />\n-            Print Pass\n-          </button>\n-          <button\n-            onClick={onClose}\n-            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n-          >\n-            Close\n-          </button>\n-        </div>\n-      </div>\n-    </Dialog>\n-  )\n-}\n-\n-const VisitorBook = () => {\n-  const [searchTerm, setSearchTerm] = useState('')\n-  const [statusFilter, setStatusFilter] = useState('')\n-  const [dateFilter, setDateFilter] = useState('')\n-  const [currentPage, setCurrentPage] = useState(1)\n-  const [pageSize] = useState(10)\n-  const [showCreateDialog, setShowCreateDialog] = useState(false)\n-  const [showEditDialog, setShowEditDialog] = useState(false)\n-  const [selectedVisitor, setSelectedVisitor] = useState(null)\n-  const [showVisitorSlip, setShowVisitorSlip] = useState(false)\n-\n-  const queryClient = useQueryClient()\n-\n-  const {\n-    control,\n-    handleSubmit,\n-    reset,\n-    watch,\n-    formState: { errors },\n-  } = useForm({\n-    resolver: zodResolver(visitorSchema),\n-    mode: 'onChange',\n-    defaultValues: {\n-      visitDate: new Date().toISOString().split('T')[0],\n-      checkInTime: new Date().toTimeString().slice(0, 5),\n-      numberOfVisitors: 1,\n-      status: 'checked_in',\n-    },\n-  })\n-\n-  const {\n-    data: visitorsData,\n-    isLoading,\n-    error,\n-  } = useQuery({\n-    queryKey: [\n-      'visitors',\n-      {\n-        page: currentPage,\n-        pageSize,\n-        search: searchTerm,\n-        status: statusFilter,\n-        date: dateFilter,\n-      },\n-    ],\n-    queryFn: () =>\n-      visitorBookApi.getAll({\n-        page: currentPage,\n-        pageSize,\n-        search: searchTerm,\n-        status: statusFilter,\n-        date: dateFilter,\n-      }),\n-  })\n-\n-  const { data: staffData } = useQuery({\n-    queryKey: ['staff', 'all'],\n-    queryFn: () => staffApi.getAll({ all: true }),\n-  })\n-\n-  const createMutation = useMutation({\n-    mutationFn: visitorBookApi.create,\n-    onSuccess: data => {\n-      queryClient.invalidateQueries(['visitors'])\n-      setShowCreateDialog(false)\n-      reset()\n-      // Show visitor slip\n-      setSelectedVisitor(data.data)\n-      setShowVisitorSlip(true)\n-    },\n-  })\n-\n-  const updateMutation = useMutation({\n-    mutationFn: ({ id, data }) => visitorBookApi.update(id, data),\n-    onSuccess: () => {\n-      queryClient.invalidateQueries(['visitors'])\n-      setShowEditDialog(false)\n-      reset()\n-    },\n-  })\n-\n-  const checkOutMutation = useMutation({\n-    mutationFn: visitorBookApi.checkOut,\n-    onSuccess: () => {\n-      queryClient.invalidateQueries(['visitors'])\n-    },\n-  })\n-\n-  const handleEdit = visitor => {\n-    setSelectedVisitor(visitor)\n-    reset({\n-      visitorName: visitor.visitorName,\n-      visitorMobile: visitor.visitorMobile,\n-      visitorEmail: visitor.visitorEmail || '',\n-      organization: visitor.organization || '',\n-      purpose: visitor.purpose,\n-      personToMeet: visitor.personToMeet,\n-      department: visitor.department || '',\n-      visitDate: visitor.visitDate?.split('T')[0],\n-      checkInTime: visitor.checkInTime,\n-      expectedDuration: visitor.expectedDuration || '',\n-      vehicleNumber: visitor.vehicleNumber || '',\n-      idProofType: visitor.idProofType,\n-      idProofNumber: visitor.idProofNumber,\n-      numberOfVisitors: visitor.numberOfVisitors || 1,\n-      notes: visitor.notes || '',\n-      status: visitor.status,\n-    })\n-    setShowEditDialog(true)\n-  }\n-\n-  const handleCheckOut = visitorId => {\n-    if (window.confirm('Are you sure you want to check out this visitor?')) {\n-      checkOutMutation.mutate(visitorId)\n-    }\n-  }\n-\n-  const handlePrintSlip = visitor => {\n-    setSelectedVisitor(visitor)\n-    setShowVisitorSlip(true)\n-  }\n-\n-  const onSubmit = data => {\n-    if (selectedVisitor) {\n-      updateMutation.mutate({ id: selectedVisitor.id, data })\n-    } else {\n-      createMutation.mutate(data)\n-    }\n-  }\n-\n-  const getStatusColor = status => {\n-    switch (status) {\n-      case 'checked_in':\n-        return 'bg-green-100 text-green-800'\n-      case 'checked_out':\n-        return 'bg-gray-100 text-gray-800'\n-      case 'cancelled':\n-        return 'bg-red-100 text-red-800'\n-      default:\n-        return 'bg-gray-100 text-gray-800'\n-    }\n-  }\n-\n-  const columns = [\n-    {\n-      key: 'visitorName',\n-      header: 'Visitor Name',\n-      sortable: true,\n-    },\n-    {\n-      key: 'visitorMobile',\n-      header: 'Mobile',\n-    },\n-    {\n-      key: 'organization',\n-      header: 'Organization',\n-      render: visitor => visitor.organization || 'Individual',\n-    },\n-    {\n-      key: 'purpose',\n-      header: 'Purpose',\n-    },\n-    {\n-      key: 'personToMeet',\n-      header: 'Person to Meet',\n-    },\n-    {\n-      key: 'checkInTime',\n-      header: 'Check-in Time',\n-      render: visitor => (\n-        <div>\n-          <div>{new Date(visitor.visitDate).toLocaleDateString()}</div>\n-          <div className=\"text-sm text-gray-500\">{visitor.checkInTime}</div>\n-        </div>\n-      ),\n-    },\n-    {\n-      key: 'status',\n-      header: 'Status',\n-      render: visitor => (\n-        <span\n-          className={`px-2 py-1 rounded-full text-xs ${getStatusColor(visitor.status)}`}\n-        >\n-          {visitor.status?.replace('_', ' ').toUpperCase()}\n-        </span>\n-      ),\n-    },\n-    {\n-      key: 'actions',\n-      header: 'Actions',\n-      render: visitor => (\n-        <Dropdown\n-          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n-          items={[\n-            {\n-              label: 'Print Pass',\n-              icon: Printer,\n-              onClick: () => handlePrintSlip(visitor),\n-            },\n-            {\n-              label: 'Edit',\n-              icon: Edit,\n-              onClick: () => handleEdit(visitor),\n-              disabled: visitor.status === 'checked_out',\n-            },\n-            {\n-              label: 'Check Out',\n-              icon: XCircle,\n-              onClick: () => handleCheckOut(visitor.id),\n-              disabled: visitor.status !== 'checked_in',\n-            },\n-          ]}\n-        />\n-      ),\n-    },\n-  ]\n-\n-  if (isLoading) return <LoadingSkeleton />\n-  if (error) return <ErrorState message=\"Failed to load visitor data\" />\n-\n-  return (\n-    <div className=\"space-y-6\">\n-      <div className=\"flex justify-between items-center\">\n-        <h1 className=\"text-2xl font-bold\">Visitor Book</h1>\n-        <div className=\"flex gap-2\">\n-          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n-            <Download className=\"w-4 h-4\" />\n-            Export\n-          </button>\n-          <button\n-            onClick={() => {\n-              reset()\n-              setSelectedVisitor(null)\n-              setShowCreateDialog(true)\n-            }}\n-            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n-          >\n-            <Plus className=\"w-4 h-4\" />\n-            Add Visitor\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Statistics Cards */}\n-      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <User className=\"w-8 h-8 text-blue-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">{visitorsData?.total || 0}</p>\n-              <p className=\"text-sm text-gray-600\">Total Visitors</p>\n-            </div>\n-          </div>\n-        </div>\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">\n-                {visitorsData?.data?.filter(v => v.status === 'checked_in')\n-                  .length || 0}\n-              </p>\n-              <p className=\"text-sm text-gray-600\">Currently In</p>\n-            </div>\n-          </div>\n-        </div>\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <XCircle className=\"w-8 h-8 text-gray-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">\n-                {visitorsData?.data?.filter(v => v.status === 'checked_out')\n-                  .length || 0}\n-              </p>\n-              <p className=\"text-sm text-gray-600\">Checked Out</p>\n-            </div>\n-          </div>\n-        </div>\n-        <div className=\"bg-white p-4 rounded-lg shadow\">\n-          <div className=\"flex items-center gap-3\">\n-            <Clock className=\"w-8 h-8 text-orange-600\" />\n-            <div>\n-              <p className=\"text-2xl font-bold\">\n-                {visitorsData?.data?.filter(\n-                  v =>\n-                    v.status === 'checked_in' &&\n-                    new Date(v.visitDate).toDateString() ===\n-                      new Date().toDateString()\n-                ).length || 0}\n-              </p>\n-              <p className=\"text-sm text-gray-600\">Today's Visitors</p>\n-            </div>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Filters */}\n-      <div className=\"bg-white rounded-lg shadow p-6\">\n-        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n-          <div className=\"md:col-span-2\">\n-            <Input\n-              placeholder=\"Search visitors...\"\n-              value={searchTerm}\n-              onChange={e => setSearchTerm(e.target.value)}\n-              icon={Search}\n-            />\n-          </div>\n-          <div>\n-            <select\n-              value={statusFilter}\n-              onChange={e => setStatusFilter(e.target.value)}\n-              className=\"w-full border rounded-lg px-3 py-2\"\n-            >\n-              <option value=\"\">All Status</option>\n-              <option value=\"checked_in\">Checked In</option>\n-              <option value=\"checked_out\">Checked Out</option>\n-              <option value=\"cancelled\">Cancelled</option>\n-            </select>\n-          </div>\n-          <div>\n-            <input\n-              type=\"date\"\n-              value={dateFilter}\n-              onChange={e => setDateFilter(e.target.value)}\n-              className=\"w-full border rounded-lg px-3 py-2\"\n-            />\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Visitors Table */}\n-      <div className=\"bg-white rounded-lg shadow\">\n-        {visitorsData?.data?.length === 0 ? (\n-          <EmptyState\n-            title=\"No visitors found\"\n-            description=\"No visitors match your current filters\"\n-            action={{\n-              label: 'Add Visitor',\n-              onClick: () => setShowCreateDialog(true),\n-            }}\n-          />\n-        ) : (\n-          <>\n-            <Table data={visitorsData?.data || []} columns={columns} />\n-            <div className=\"p-6 border-t\">\n-              <Pagination\n-                currentPage={currentPage}\n-                totalPages={Math.ceil((visitorsData?.total || 0) / pageSize)}\n-                onPageChange={setCurrentPage}\n-              />\n-            </div>\n-          </>\n-        )}\n-      </div>\n-\n-      {/* Create/Edit Dialog */}\n-      <Dialog\n-        open={showCreateDialog || showEditDialog}\n-        onClose={() => {\n-          setShowCreateDialog(false)\n-          setShowEditDialog(false)\n-          reset()\n-          setSelectedVisitor(null)\n-        }}\n-        title={selectedVisitor ? 'Edit Visitor' : 'Add New Visitor'}\n-        size=\"lg\"\n-      >\n-        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n-          {/* Visitor Information */}\n-          <div className=\"space-y-4\">\n-            <h3 className=\"text-lg font-medium border-b pb-2\">\n-              Visitor Information\n-            </h3>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-              <Controller\n-                name=\"visitorName\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Visitor Name *\"\n-                    {...field}\n-                    error={errors.visitorName?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"visitorMobile\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Mobile Number *\"\n-                    {...field}\n-                    error={errors.visitorMobile?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"visitorEmail\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Email\"\n-                    type=\"email\"\n-                    {...field}\n-                    error={errors.visitorEmail?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"organization\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Organization\"\n-                    {...field}\n-                    error={errors.organization?.message}\n-                  />\n-                )}\n-              />\n-            </div>\n-          </div>\n-\n-          {/* Visit Details */}\n-          <div className=\"space-y-4\">\n-            <h3 className=\"text-lg font-medium border-b pb-2\">Visit Details</h3>\n-            <Controller\n-              name=\"purpose\"\n-              control={control}\n-              render={({ field }) => (\n-                <Input\n-                  label=\"Purpose of Visit *\"\n-                  {...field}\n-                  error={errors.purpose?.message}\n-                />\n-              )}\n-            />\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-              <Controller\n-                name=\"personToMeet\"\n-                control={control}\n-                render={({ field }) => (\n-                  <div>\n-                    <label className=\"block text-sm font-medium mb-1\">\n-                      Person to Meet *\n-                    </label>\n-                    <select\n-                      {...field}\n-                      className={`w-full border rounded-lg px-3 py-2 ${\n-                        errors.personToMeet ? 'border-red-500' : ''\n-                      }`}\n-                    >\n-                      <option value=\"\">Select Person</option>\n-                      {staffData?.data?.map(staff => (\n-                        <option key={staff.id} value={staff.name}>\n-                          {staff.name} - {staff.designation}\n-                        </option>\n-                      ))}\n-                    </select>\n-                    {errors.personToMeet && (\n-                      <p className=\"text-red-500 text-sm mt-1\">\n-                        {errors.personToMeet.message}\n-                      </p>\n-                    )}\n-                  </div>\n-                )}\n-              />\n-              <Controller\n-                name=\"department\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Department\"\n-                    {...field}\n-                    error={errors.department?.message}\n-                  />\n-                )}\n-              />\n-            </div>\n-            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n-              <Controller\n-                name=\"visitDate\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Visit Date *\"\n-                    type=\"date\"\n-                    {...field}\n-                    error={errors.visitDate?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"checkInTime\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Check-in Time *\"\n-                    type=\"time\"\n-                    {...field}\n-                    error={errors.checkInTime?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"expectedDuration\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Expected Duration (hours)\"\n-                    type=\"number\"\n-                    step=\"0.5\"\n-                    {...field}\n-                    error={errors.expectedDuration?.message}\n-                  />\n-                )}\n-              />\n-            </div>\n-          </div>\n-\n-          {/* ID Proof & Additional Info */}\n-          <div className=\"space-y-4\">\n-            <h3 className=\"text-lg font-medium border-b pb-2\">\n-              ID Proof & Additional Information\n-            </h3>\n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-              <Controller\n-                name=\"idProofType\"\n-                control={control}\n-                render={({ field }) => (\n-                  <div>\n-                    <label className=\"block text-sm font-medium mb-1\">\n-                      ID Proof Type *\n-                    </label>\n-                    <select\n-                      {...field}\n-                      className={`w-full border rounded-lg px-3 py-2 ${\n-                        errors.idProofType ? 'border-red-500' : ''\n-                      }`}\n-                    >\n-                      <option value=\"\">Select ID Proof</option>\n-                      <option value=\"aadhar\">Aadhar Card</option>\n-                      <option value=\"pan\">PAN Card</option>\n-                      <option value=\"driving_license\">Driving License</option>\n-                      <option value=\"passport\">Passport</option>\n-                      <option value=\"voter_id\">Voter ID</option>\n-                      <option value=\"other\">Other</option>\n-                    </select>\n-                    {errors.idProofType && (\n-                      <p className=\"text-red-500 text-sm mt-1\">\n-                        {errors.idProofType.message}\n-                      </p>\n-                    )}\n-                  </div>\n-                )}\n-              />\n-              <Controller\n-                name=\"idProofNumber\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"ID Proof Number *\"\n-                    {...field}\n-                    error={errors.idProofNumber?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"numberOfVisitors\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Number of Visitors *\"\n-                    type=\"number\"\n-                    min=\"1\"\n-                    {...field}\n-                    onChange={e => field.onChange(Number(e.target.value))}\n-                    error={errors.numberOfVisitors?.message}\n-                  />\n-                )}\n-              />\n-              <Controller\n-                name=\"vehicleNumber\"\n-                control={control}\n-                render={({ field }) => (\n-                  <Input\n-                    label=\"Vehicle Number\"\n-                    {...field}\n-                    error={errors.vehicleNumber?.message}\n-                  />\n-                )}\n-              />\n-            </div>\n-            <Controller\n-              name=\"notes\"\n-              control={control}\n-              render={({ field }) => (\n-                <Input\n-                  label=\"Notes\"\n-                  multiline\n-                  rows={3}\n-                  {...field}\n-                  error={errors.notes?.message}\n-                />\n-              )}\n-            />\n-          </div>\n-\n-          <div className=\"flex gap-2 pt-4\">\n-            <button\n-              type=\"submit\"\n-              disabled={createMutation.isPending || updateMutation.isPending}\n-              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n-            >\n-              {createMutation.isPending || updateMutation.isPending\n-                ? 'Saving...'\n-                : selectedVisitor\n-                  ? 'Update Visitor'\n-                  : 'Add Visitor'}\n-            </button>\n-            <button\n-              type=\"button\"\n-              onClick={() => {\n-                setShowCreateDialog(false)\n-                setShowEditDialog(false)\n-                reset()\n-                setSelectedVisitor(null)\n-              }}\n-              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n-            >\n-              Cancel\n-            </button>\n-          </div>\n-        </form>\n-      </Dialog>\n-\n-      {/* Visitor Slip */}\n-      <VisitorSlip\n-        visitor={showVisitorSlip ? selectedVisitor : null}\n-        onClose={() => {\n-          setShowVisitorSlip(false)\n-          setSelectedVisitor(null)\n-        }}\n-      />\n-    </div>\n-  )\n-}\n-\n-export default VisitorBook\n"
                }
            ],
            "date": 1755994925598,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Edit,\n  Eye,\n  Clock,\n  User,\n  Phone,\n  Building,\n  Calendar,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Printer,\n  Download,\n  QrCode,\n  Camera,\n  FileText,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport Table from '../../components/ui/Table'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport Pagination from '../../components/ui/Pagination'\nimport Dropdown from '../../components/ui/Dropdown'\nimport { visitorBookApi } from '../../lib/api/visitorBook'\nimport { staffApi } from '../../lib/api/staff'\n\n// Validation Schema\nconst visitorSchema = z.object({\n  visitorName: z.string().min(1, 'Visitor name is required'),\n  visitorMobile: z.string().min(10, 'Valid mobile number is required'),\n  visitorEmail: z\n    .string()\n    .email('Valid email is required')\n    .optional()\n    .or(z.literal('')),\n  organization: z.string().optional(),\n  purpose: z.string().min(1, 'Purpose of visit is required'),\n  personToMeet: z.string().min(1, 'Person to meet is required'),\n  department: z.string().optional(),\n  visitDate: z.string().min(1, 'Visit date is required'),\n  checkInTime: z.string().min(1, 'Check-in time is required'),\n  expectedDuration: z.string().optional(),\n  vehicleNumber: z.string().optional(),\n  idProofType: z.enum(\n    ['aadhar', 'pan', 'driving_license', 'passport', 'voter_id', 'other'],\n    {\n      required_error: 'ID proof type is required',\n    },\n  ),\n  idProofNumber: z.string().min(1, 'ID proof number is required'),\n  numberOfVisitors: z\n    .number()\n    .min(1, 'Number of visitors must be at least 1')\n    .default(1),\n  notes: z.string().optional(),\n  status: z\n    .enum(['checked_in', 'checked_out', 'cancelled'], {\n      required_error: 'Status is required',\n    })\n    .default('checked_in'),\n})\n\nconst VisitorSlip = ({ visitor, onClose }) => {\n  const handlePrint = () => {\n    window.print()\n  }\n\n  return (\n    <Dialog open={!!visitor} onClose={onClose} title=\"Visitor Pass\" size=\"md\">\n      <div className=\"space-y-6\" id=\"visitor-slip\">\n        {/* Header */}\n        <div className=\"text-center border-b pb-4\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">VISITOR PASS</h2>\n          <p className=\"text-gray-600\">School Management System</p>\n        </div>\n\n        {/* Visitor Photo Placeholder */}\n        <div className=\"flex justify-center\">\n          <div className=\"w-24 h-24 bg-gray-200 rounded-lg flex items-center justify-center\">\n            {visitor?.photo ? (\n              <img\n                src={visitor.photo}\n                alt=\"Visitor\"\n                className=\"w-full h-full object-cover rounded-lg\"\n              />\n            ) : (\n              <User className=\"w-12 h-12 text-gray-400\" />\n            )}\n          </div>\n        </div>\n\n        {/* Visitor Details */}\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <p className=\"font-medium text-gray-700\">Name:</p>\n            <p className=\"text-gray-900\">{visitor?.visitorName}</p>\n          </div>\n          <div>\n            <p className=\"font-medium text-gray-700\">Mobile:</p>\n            <p className=\"text-gray-900\">{visitor?.visitorMobile}</p>\n          </div>\n          <div>\n            <p className=\"font-medium text-gray-700\">Organization:</p>\n            <p className=\"text-gray-900\">{visitor?.organization || 'N/A'}</p>\n          </div>\n          <div>\n            <p className=\"font-medium text-gray-700\">Purpose:</p>\n            <p className=\"text-gray-900\">{visitor?.purpose}</p>\n          </div>\n          <div>\n            <p className=\"font-medium text-gray-700\">Person to Meet:</p>\n            <p className=\"text-gray-900\">{visitor?.personToMeet}</p>\n          </div>\n          <div>\n            <p className=\"font-medium text-gray-700\">Department:</p>\n            <p className=\"text-gray-900\">{visitor?.department || 'N/A'}</p>\n          </div>\n          <div>\n            <p className=\"font-medium text-gray-700\">Check-in Time:</p>\n            <p className=\"text-gray-900\">\n              {new Date(\n                `${visitor?.visitDate}T${visitor?.checkInTime}`,\n              ).toLocaleString()}\n            </p>\n          </div>\n          <div>\n            <p className=\"font-medium text-gray-700\">Pass ID:</p>\n            <p className=\"text-gray-900 font-mono\">\n              {visitor?.passId || visitor?.id}\n            </p>\n          </div>\n        </div>\n\n        {/* QR Code Placeholder */}\n        <div className=\"flex justify-center\">\n          <div className=\"w-20 h-20 bg-gray-200 rounded flex items-center justify-center\">\n            <QrCode className=\"w-12 h-12 text-gray-400\" />\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n          <h4 className=\"font-medium text-yellow-800 mb-1\">Instructions:</h4>\n          <ul className=\"text-xs text-yellow-700 space-y-1\">\n            <li>• Please wear this pass visibly at all times</li>\n            <li>• Return this pass when leaving the premises</li>\n            <li>• Follow all safety and security protocols</li>\n            <li>• Contact reception for any assistance</li>\n          </ul>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-xs text-gray-500 border-t pt-4\">\n          <p>This pass is valid only for the date and time mentioned above</p>\n          <p>Generated on: {new Date().toLocaleString()}</p>\n        </div>\n\n        <div className=\"flex justify-center gap-4 print:hidden\">\n          <button\n            onClick={handlePrint}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n          >\n            <Printer className=\"w-4 h-4\" />\n            Print Pass\n          </button>\n          <button\n            onClick={onClose}\n            className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst VisitorBook = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState('')\n  const [dateFilter, setDateFilter] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [pageSize] = useState(10)\n  const [showCreateDialog, setShowCreateDialog] = useState(false)\n  const [showEditDialog, setShowEditDialog] = useState(false)\n  const [selectedVisitor, setSelectedVisitor] = useState(null)\n  const [showVisitorSlip, setShowVisitorSlip] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    watch,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(visitorSchema),\n    mode: 'onChange',\n    defaultValues: {\n      visitDate: new Date().toISOString().split('T')[0],\n      checkInTime: new Date().toTimeString().slice(0, 5),\n      numberOfVisitors: 1,\n      status: 'checked_in',\n    },\n  })\n\n  const {\n    data: visitorsData,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\n      'visitors',\n      {\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        status: statusFilter,\n        date: dateFilter,\n      },\n    ],\n    queryFn: () =>\n      visitorBookApi.getAll({\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        status: statusFilter,\n        date: dateFilter,\n      }),\n  })\n\n  const { data: staffData } = useQuery({\n    queryKey: ['staff', 'all'],\n    queryFn: () => staffApi.getAll({ all: true }),\n  })\n\n  const createMutation = useMutation({\n    mutationFn: visitorBookApi.create,\n    onSuccess: data => {\n      queryClient.invalidateQueries(['visitors'])\n      setShowCreateDialog(false)\n      reset()\n      // Show visitor slip\n      setSelectedVisitor(data.data)\n      setShowVisitorSlip(true)\n    },\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }) => visitorBookApi.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['visitors'])\n      setShowEditDialog(false)\n      reset()\n    },\n  })\n\n  const checkOutMutation = useMutation({\n    mutationFn: visitorBookApi.checkOut,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['visitors'])\n    },\n  })\n\n  const handleEdit = visitor => {\n    setSelectedVisitor(visitor)\n    reset({\n      visitorName: visitor.visitorName,\n      visitorMobile: visitor.visitorMobile,\n      visitorEmail: visitor.visitorEmail || '',\n      organization: visitor.organization || '',\n      purpose: visitor.purpose,\n      personToMeet: visitor.personToMeet,\n      department: visitor.department || '',\n      visitDate: visitor.visitDate?.split('T')[0],\n      checkInTime: visitor.checkInTime,\n      expectedDuration: visitor.expectedDuration || '',\n      vehicleNumber: visitor.vehicleNumber || '',\n      idProofType: visitor.idProofType,\n      idProofNumber: visitor.idProofNumber,\n      numberOfVisitors: visitor.numberOfVisitors || 1,\n      notes: visitor.notes || '',\n      status: visitor.status,\n    })\n    setShowEditDialog(true)\n  }\n\n  const handleCheckOut = visitorId => {\n    if (window.confirm('Are you sure you want to check out this visitor?')) {\n      checkOutMutation.mutate(visitorId)\n    }\n  }\n\n  const handlePrintSlip = visitor => {\n    setSelectedVisitor(visitor)\n    setShowVisitorSlip(true)\n  }\n\n  const onSubmit = data => {\n    if (selectedVisitor) {\n      updateMutation.mutate({ id: selectedVisitor.id, data })\n    } else {\n      createMutation.mutate(data)\n    }\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'checked_in':\n        return 'bg-green-100 text-green-800'\n      case 'checked_out':\n        return 'bg-gray-100 text-gray-800'\n      case 'cancelled':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const columns = [\n    {\n      key: 'visitorName',\n      header: 'Visitor Name',\n      sortable: true,\n    },\n    {\n      key: 'visitorMobile',\n      header: 'Mobile',\n    },\n    {\n      key: 'organization',\n      header: 'Organization',\n      render: visitor => visitor.organization || 'Individual',\n    },\n    {\n      key: 'purpose',\n      header: 'Purpose',\n    },\n    {\n      key: 'personToMeet',\n      header: 'Person to Meet',\n    },\n    {\n      key: 'checkInTime',\n      header: 'Check-in Time',\n      render: visitor => (\n        <div>\n          <div>{new Date(visitor.visitDate).toLocaleDateString()}</div>\n          <div className=\"text-sm text-gray-500\">{visitor.checkInTime}</div>\n        </div>\n      ),\n    },\n    {\n      key: 'status',\n      header: 'Status',\n      render: visitor => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${getStatusColor(visitor.status)}`}\n        >\n          {visitor.status?.replace('_', ' ').toUpperCase()}\n        </span>\n      ),\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      render: visitor => (\n        <Dropdown\n          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n          items={[\n            {\n              label: 'Print Pass',\n              icon: Printer,\n              onClick: () => handlePrintSlip(visitor),\n            },\n            {\n              label: 'Edit',\n              icon: Edit,\n              onClick: () => handleEdit(visitor),\n              disabled: visitor.status === 'checked_out',\n            },\n            {\n              label: 'Check Out',\n              icon: XCircle,\n              onClick: () => handleCheckOut(visitor.id),\n              disabled: visitor.status !== 'checked_in',\n            },\n          ]}\n        />\n      ),\n    },\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n  if (error) return <ErrorState message=\"Failed to load visitor data\" />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Visitor Book</h1>\n        <div className=\"flex gap-2\">\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n          <button\n            onClick={() => {\n              reset()\n              setSelectedVisitor(null)\n              setShowCreateDialog(true)\n            }}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Add Visitor\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <User className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{visitorsData?.total || 0}</p>\n              <p className=\"text-sm text-gray-600\">Total Visitors</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {visitorsData?.data?.filter(v => v.status === 'checked_in')\n                  .length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Currently In</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <XCircle className=\"w-8 h-8 text-gray-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {visitorsData?.data?.filter(v => v.status === 'checked_out')\n                  .length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Checked Out</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-orange-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {visitorsData?.data?.filter(\n                  v =>\n                    v.status === 'checked_in' &&\n                    new Date(v.visitDate).toDateString() ===\n                      new Date().toDateString()\n                ).length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Today's Visitors</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"md:col-span-2\">\n            <Input\n              placeholder=\"Search visitors...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              icon={Search}\n            />\n          </div>\n          <div>\n            <select\n              value={statusFilter}\n              onChange={e => setStatusFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">All Status</option>\n              <option value=\"checked_in\">Checked In</option>\n              <option value=\"checked_out\">Checked Out</option>\n              <option value=\"cancelled\">Cancelled</option>\n            </select>\n          </div>\n          <div>\n            <input\n              type=\"date\"\n              value={dateFilter}\n              onChange={e => setDateFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Visitors Table */}\n      <div className=\"bg-white rounded-lg shadow\">\n        {visitorsData?.data?.length === 0 ? (\n          <EmptyState\n            title=\"No visitors found\"\n            description=\"No visitors match your current filters\"\n            action={{\n              label: 'Add Visitor',\n              onClick: () => setShowCreateDialog(true),\n            }}\n          />\n        ) : (\n          <>\n            <Table data={visitorsData?.data || []} columns={columns} />\n            <div className=\"p-6 border-t\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={Math.ceil((visitorsData?.total || 0) / pageSize)}\n                onPageChange={setCurrentPage}\n              />\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog\n        open={showCreateDialog || showEditDialog}\n        onClose={() => {\n          setShowCreateDialog(false)\n          setShowEditDialog(false)\n          reset()\n          setSelectedVisitor(null)\n        }}\n        title={selectedVisitor ? 'Edit Visitor' : 'Add New Visitor'}\n        size=\"lg\"\n      >\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          {/* Visitor Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Visitor Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"visitorName\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Visitor Name *\"\n                    {...field}\n                    error={errors.visitorName?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"visitorMobile\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Mobile Number *\"\n                    {...field}\n                    error={errors.visitorMobile?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"visitorEmail\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Email\"\n                    type=\"email\"\n                    {...field}\n                    error={errors.visitorEmail?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"organization\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Organization\"\n                    {...field}\n                    error={errors.organization?.message}\n                  />\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Visit Details */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">Visit Details</h3>\n            <Controller\n              name=\"purpose\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Purpose of Visit *\"\n                  {...field}\n                  error={errors.purpose?.message}\n                />\n              )}\n            />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"personToMeet\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Person to Meet *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.personToMeet ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"\">Select Person</option>\n                      {staffData?.data?.map(staff => (\n                        <option key={staff.id} value={staff.name}>\n                          {staff.name} - {staff.designation}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.personToMeet && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.personToMeet.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n              <Controller\n                name=\"department\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Department\"\n                    {...field}\n                    error={errors.department?.message}\n                  />\n                )}\n              />\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Controller\n                name=\"visitDate\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Visit Date *\"\n                    type=\"date\"\n                    {...field}\n                    error={errors.visitDate?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"checkInTime\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Check-in Time *\"\n                    type=\"time\"\n                    {...field}\n                    error={errors.checkInTime?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"expectedDuration\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Expected Duration (hours)\"\n                    type=\"number\"\n                    step=\"0.5\"\n                    {...field}\n                    error={errors.expectedDuration?.message}\n                  />\n                )}\n              />\n            </div>\n          </div>\n\n          {/* ID Proof & Additional Info */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              ID Proof & Additional Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"idProofType\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      ID Proof Type *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.idProofType ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"\">Select ID Proof</option>\n                      <option value=\"aadhar\">Aadhar Card</option>\n                      <option value=\"pan\">PAN Card</option>\n                      <option value=\"driving_license\">Driving License</option>\n                      <option value=\"passport\">Passport</option>\n                      <option value=\"voter_id\">Voter ID</option>\n                      <option value=\"other\">Other</option>\n                    </select>\n                    {errors.idProofType && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.idProofType.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n              <Controller\n                name=\"idProofNumber\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"ID Proof Number *\"\n                    {...field}\n                    error={errors.idProofNumber?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"numberOfVisitors\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Number of Visitors *\"\n                    type=\"number\"\n                    min=\"1\"\n                    {...field}\n                    onChange={e => field.onChange(Number(e.target.value))}\n                    error={errors.numberOfVisitors?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"vehicleNumber\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Vehicle Number\"\n                    {...field}\n                    error={errors.vehicleNumber?.message}\n                  />\n                )}\n              />\n            </div>\n            <Controller\n              name=\"notes\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Notes\"\n                  multiline\n                  rows={3}\n                  {...field}\n                  error={errors.notes?.message}\n                />\n              )}\n            />\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {createMutation.isPending || updateMutation.isPending\n                ? 'Saving...'\n                : selectedVisitor\n                  ? 'Update Visitor'\n                  : 'Add Visitor'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setShowCreateDialog(false)\n                setShowEditDialog(false)\n                reset()\n                setSelectedVisitor(null)\n              }}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </Dialog>\n\n      {/* Visitor Slip */}\n      <VisitorSlip\n        visitor={showVisitorSlip ? selectedVisitor : null}\n        onClose={() => {\n          setShowVisitorSlip(false)\n          setSelectedVisitor(null)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default VisitorBook\n"
        }
    ]
}