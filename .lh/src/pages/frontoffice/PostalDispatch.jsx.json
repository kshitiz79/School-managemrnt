{
    "sourceFile": "src/pages/frontoffice/PostalDispatch.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1755994925598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755995171618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   QrCode,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n-import Table from '../../components/ui/Table'\n+import { Table } from '../../components/ui/Table'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n"
                },
                {
                    "date": 1756039695820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import ErrorState from '../../components/ui/ErrorState'\n import EmptyState from '../../components/ui/EmptyState'\n import Pagination from '../../components/ui/Pagination'\n-import Dropdown from '../../components/ui/Dropdown'\n+import { Dropdown } from '../../components/ui/Dropdown'\n import { postalDispatchApi } from '../../lib/api/postalDispatch'\n \n // Validation Schema\n const dispatchSchema = z.object({\n"
                }
            ],
            "date": 1755994925598,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Plus,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Edit,\n  Eye,\n  Send,\n  Package,\n  Truck,\n  Clock,\n  CheckCircle,\n  AlertTriangle,\n  MapPin,\n  User,\n  Calendar,\n  FileText,\n  Download,\n  Printer,\n  QrCode,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport Table from '../../components/ui/Table'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport ErrorState from '../../components/ui/ErrorState'\nimport EmptyState from '../../components/ui/EmptyState'\nimport Pagination from '../../components/ui/Pagination'\nimport Dropdown from '../../components/ui/Dropdown'\nimport { postalDispatchApi } from '../../lib/api/postalDispatch'\n\n// Validation Schema\nconst dispatchSchema = z.object({\n  recipientName: z.string().min(1, 'Recipient name is required'),\n  recipientAddress: z.string().min(1, 'Recipient address is required'),\n  recipientCity: z.string().min(1, 'City is required'),\n  recipientState: z.string().min(1, 'State is required'),\n  recipientPincode: z.string().min(6, 'Valid pincode is required'),\n  recipientPhone: z.string().min(10, 'Valid phone number is required'),\n  recipientEmail: z\n    .string()\n    .email('Valid email is required')\n    .optional()\n    .or(z.literal('')),\n\n  senderName: z.string().min(1, 'Sender name is required'),\n  senderDepartment: z.string().optional(),\n\n  itemType: z.enum(\n    ['letter', 'document', 'parcel', 'certificate', 'report_card', 'other'],\n    {\n      required_error: 'Item type is required',\n    },\n  ),\n  itemDescription: z.string().min(1, 'Item description is required'),\n  itemWeight: z.string().optional(),\n  itemValue: z.string().optional(),\n\n  serviceType: z.enum(\n    ['regular', 'registered', 'speed_post', 'courier', 'express'],\n    {\n      required_error: 'Service type is required',\n    },\n  ),\n  priority: z.enum(['low', 'medium', 'high', 'urgent'], {\n    required_error: 'Priority is required',\n  }),\n\n  dispatchDate: z.string().min(1, 'Dispatch date is required'),\n  expectedDelivery: z.string().optional(),\n\n  trackingNumber: z.string().optional(),\n  postageAmount: z.string().optional(),\n\n  notes: z.string().optional(),\n  status: z\n    .enum(['prepared', 'dispatched', 'in_transit', 'delivered', 'returned'], {\n      required_error: 'Status is required',\n    })\n    .default('prepared'),\n})\n\nconst PostalDispatch = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState('')\n  const [serviceFilter, setServiceFilter] = useState('')\n  const [dateFilter, setDateFilter] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [pageSize] = useState(10)\n  const [showCreateDialog, setShowCreateDialog] = useState(false)\n  const [showEditDialog, setShowEditDialog] = useState(false)\n  const [selectedDispatch, setSelectedDispatch] = useState(null)\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(dispatchSchema),\n    mode: 'onChange',\n    defaultValues: {\n      dispatchDate: new Date().toISOString().split('T')[0],\n      priority: 'medium',\n      status: 'prepared',\n      serviceType: 'regular',\n    },\n  })\n\n  const {\n    data: dispatchData,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\n      'postalDispatch',\n      {\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        status: statusFilter,\n        service: serviceFilter,\n        date: dateFilter,\n      },\n    ],\n    queryFn: () =>\n      postalDispatchApi.getAll({\n        page: currentPage,\n        pageSize,\n        search: searchTerm,\n        status: statusFilter,\n        service: serviceFilter,\n        date: dateFilter,\n      }),\n  })\n\n  const createMutation = useMutation({\n    mutationFn: postalDispatchApi.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['postalDispatch'])\n      setShowCreateDialog(false)\n      reset()\n    },\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }) => postalDispatchApi.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['postalDispatch'])\n      setShowEditDialog(false)\n      reset()\n    },\n  })\n\n  const handleEdit = dispatch => {\n    setSelectedDispatch(dispatch)\n    reset({\n      recipientName: dispatch.recipientName,\n      recipientAddress: dispatch.recipientAddress,\n      recipientCity: dispatch.recipientCity,\n      recipientState: dispatch.recipientState,\n      recipientPincode: dispatch.recipientPincode,\n      recipientPhone: dispatch.recipientPhone,\n      recipientEmail: dispatch.recipientEmail || '',\n      senderName: dispatch.senderName,\n      senderDepartment: dispatch.senderDepartment || '',\n      itemType: dispatch.itemType,\n      itemDescription: dispatch.itemDescription,\n      itemWeight: dispatch.itemWeight || '',\n      itemValue: dispatch.itemValue || '',\n      serviceType: dispatch.serviceType,\n      priority: dispatch.priority,\n      dispatchDate: dispatch.dispatchDate?.split('T')[0],\n      expectedDelivery: dispatch.expectedDelivery?.split('T')[0] || '',\n      trackingNumber: dispatch.trackingNumber || '',\n      postageAmount: dispatch.postageAmount || '',\n      notes: dispatch.notes || '',\n      status: dispatch.status,\n    })\n    setShowEditDialog(true)\n  }\n\n  const handleViewDetails = dispatch => {\n    setSelectedDispatch(dispatch)\n    setShowDetailsDialog(true)\n  }\n\n  const onSubmit = data => {\n    if (selectedDispatch) {\n      updateMutation.mutate({ id: selectedDispatch.id, data })\n    } else {\n      createMutation.mutate(data)\n    }\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'prepared':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'dispatched':\n        return 'bg-blue-100 text-blue-800'\n      case 'in_transit':\n        return 'bg-purple-100 text-purple-800'\n      case 'delivered':\n        return 'bg-green-100 text-green-800'\n      case 'returned':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getServiceIcon = service => {\n    switch (service) {\n      case 'regular':\n        return Package\n      case 'registered':\n        return FileText\n      case 'speed_post':\n        return Send\n      case 'courier':\n        return Truck\n      case 'express':\n        return AlertTriangle\n      default:\n        return Package\n    }\n  }\n\n  const columns = [\n    {\n      key: 'dispatchId',\n      header: 'Dispatch ID',\n      render: dispatch => (\n        <div className=\"font-mono text-sm\">\n          {dispatch.dispatchId || `DSP-${dispatch.id}`}\n        </div>\n      ),\n    },\n    {\n      key: 'recipient',\n      header: 'Recipient',\n      render: dispatch => (\n        <div>\n          <div className=\"font-medium\">{dispatch.recipientName}</div>\n          <div className=\"text-sm text-gray-500\">{dispatch.recipientCity}</div>\n        </div>\n      ),\n    },\n    {\n      key: 'item',\n      header: 'Item',\n      render: dispatch => (\n        <div>\n          <div className=\"font-medium capitalize\">\n            {dispatch.itemType?.replace('_', ' ')}\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            {dispatch.itemDescription}\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'service',\n      header: 'Service',\n      render: dispatch => {\n        const Icon = getServiceIcon(dispatch.serviceType)\n        return (\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"w-4 h-4 text-gray-400\" />\n            <span className=\"capitalize\">\n              {dispatch.serviceType?.replace('_', ' ')}\n            </span>\n          </div>\n        )\n      },\n    },\n    {\n      key: 'dispatchDate',\n      header: 'Dispatch Date',\n      render: dispatch => new Date(dispatch.dispatchDate).toLocaleDateString(),\n    },\n    {\n      key: 'trackingNumber',\n      header: 'Tracking',\n      render: dispatch => (\n        <div className=\"font-mono text-sm\">\n          {dispatch.trackingNumber || 'N/A'}\n        </div>\n      ),\n    },\n    {\n      key: 'status',\n      header: 'Status',\n      render: dispatch => (\n        <span\n          className={`px-2 py-1 rounded-full text-xs ${getStatusColor(dispatch.status)}`}\n        >\n          {dispatch.status?.replace('_', ' ').toUpperCase()}\n        </span>\n      ),\n    },\n    {\n      key: 'actions',\n      header: 'Actions',\n      render: dispatch => (\n        <Dropdown\n          trigger={<MoreHorizontal className=\"w-4 h-4\" />}\n          items={[\n            {\n              label: 'View Details',\n              icon: Eye,\n              onClick: () => handleViewDetails(dispatch),\n            },\n            {\n              label: 'Edit',\n              icon: Edit,\n              onClick: () => handleEdit(dispatch),\n            },\n            {\n              label: 'Print Label',\n              icon: Printer,\n              onClick: () => console.log('Print label for', dispatch.id),\n            },\n            {\n              label: 'Track',\n              icon: MapPin,\n              onClick: () => console.log('Track dispatch', dispatch.id),\n              disabled: !dispatch.trackingNumber,\n            },\n          ]}\n        />\n      ),\n    },\n  ]\n\n  if (isLoading) return <LoadingSkeleton />\n  if (error) return <ErrorState message=\"Failed to load postal dispatch data\" />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Postal Dispatch</h1>\n        <div className=\"flex gap-2\">\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n          <button\n            onClick={() => {\n              reset()\n              setSelectedDispatch(null)\n              setShowCreateDialog(true)\n            }}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            New Dispatch\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Package className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{dispatchData?.total || 0}</p>\n              <p className=\"text-sm text-gray-600\">Total Dispatches</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Send className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {dispatchData?.data?.filter(d => d.status === 'dispatched')\n                  .length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Dispatched</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Truck className=\"w-8 h-8 text-purple-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {dispatchData?.data?.filter(d => d.status === 'in_transit')\n                  .length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">In Transit</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {dispatchData?.data?.filter(d => d.status === 'delivered')\n                  .length || 0}\n              </p>\n              <p className=\"text-sm text-gray-600\">Delivered</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <div className=\"md:col-span-2\">\n            <Input\n              placeholder=\"Search dispatches...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              icon={Search}\n            />\n          </div>\n          <div>\n            <select\n              value={statusFilter}\n              onChange={e => setStatusFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">All Status</option>\n              <option value=\"prepared\">Prepared</option>\n              <option value=\"dispatched\">Dispatched</option>\n              <option value=\"in_transit\">In Transit</option>\n              <option value=\"delivered\">Delivered</option>\n              <option value=\"returned\">Returned</option>\n            </select>\n          </div>\n          <div>\n            <select\n              value={serviceFilter}\n              onChange={e => setServiceFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"\">All Services</option>\n              <option value=\"regular\">Regular</option>\n              <option value=\"registered\">Registered</option>\n              <option value=\"speed_post\">Speed Post</option>\n              <option value=\"courier\">Courier</option>\n              <option value=\"express\">Express</option>\n            </select>\n          </div>\n          <div>\n            <input\n              type=\"date\"\n              value={dateFilter}\n              onChange={e => setDateFilter(e.target.value)}\n              className=\"w-full border rounded-lg px-3 py-2\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Dispatch Table */}\n      <div className=\"bg-white rounded-lg shadow\">\n        {dispatchData?.data?.length === 0 ? (\n          <EmptyState\n            title=\"No dispatches found\"\n            description=\"No postal dispatches match your current filters\"\n            action={{\n              label: 'New Dispatch',\n              onClick: () => setShowCreateDialog(true),\n            }}\n          />\n        ) : (\n          <>\n            <Table data={dispatchData?.data || []} columns={columns} />\n            <div className=\"p-6 border-t\">\n              <Pagination\n                currentPage={currentPage}\n                totalPages={Math.ceil((dispatchData?.total || 0) / pageSize)}\n                onPageChange={setCurrentPage}\n              />\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog\n        open={showCreateDialog || showEditDialog}\n        onClose={() => {\n          setShowCreateDialog(false)\n          setShowEditDialog(false)\n          reset()\n          setSelectedDispatch(null)\n        }}\n        title={selectedDispatch ? 'Edit Dispatch' : 'New Postal Dispatch'}\n        size=\"xl\"\n      >\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Recipient Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Recipient Information\n            </h3>\n            <Controller\n              name=\"recipientName\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Recipient Name *\"\n                  {...field}\n                  error={errors.recipientName?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"recipientAddress\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Address *\"\n                  multiline\n                  rows={3}\n                  {...field}\n                  error={errors.recipientAddress?.message}\n                />\n              )}\n            />\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Controller\n                name=\"recipientCity\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"City *\"\n                    {...field}\n                    error={errors.recipientCity?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"recipientState\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"State *\"\n                    {...field}\n                    error={errors.recipientState?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"recipientPincode\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Pincode *\"\n                    {...field}\n                    error={errors.recipientPincode?.message}\n                  />\n                )}\n              />\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"recipientPhone\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Phone *\"\n                    {...field}\n                    error={errors.recipientPhone?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"recipientEmail\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Email\"\n                    type=\"email\"\n                    {...field}\n                    error={errors.recipientEmail?.message}\n                  />\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Sender Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Sender Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"senderName\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Sender Name *\"\n                    {...field}\n                    error={errors.senderName?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"senderDepartment\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Department\"\n                    {...field}\n                    error={errors.senderDepartment?.message}\n                  />\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Item Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Item Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Controller\n                name=\"itemType\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Item Type *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.itemType ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"\">Select Type</option>\n                      <option value=\"letter\">Letter</option>\n                      <option value=\"document\">Document</option>\n                      <option value=\"parcel\">Parcel</option>\n                      <option value=\"certificate\">Certificate</option>\n                      <option value=\"report_card\">Report Card</option>\n                      <option value=\"other\">Other</option>\n                    </select>\n                    {errors.itemType && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.itemType.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n              <Controller\n                name=\"serviceType\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Service Type *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.serviceType ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"regular\">Regular</option>\n                      <option value=\"registered\">Registered</option>\n                      <option value=\"speed_post\">Speed Post</option>\n                      <option value=\"courier\">Courier</option>\n                      <option value=\"express\">Express</option>\n                    </select>\n                    {errors.serviceType && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.serviceType.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n            </div>\n            <Controller\n              name=\"itemDescription\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Item Description *\"\n                  {...field}\n                  error={errors.itemDescription?.message}\n                />\n              )}\n            />\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Controller\n                name=\"itemWeight\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Weight (grams)\"\n                    type=\"number\"\n                    {...field}\n                    error={errors.itemWeight?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"itemValue\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Declared Value (₹)\"\n                    type=\"number\"\n                    {...field}\n                    error={errors.itemValue?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"priority\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Priority *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.priority ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"low\">Low</option>\n                      <option value=\"medium\">Medium</option>\n                      <option value=\"high\">High</option>\n                      <option value=\"urgent\">Urgent</option>\n                    </select>\n                    {errors.priority && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.priority.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Dispatch Details */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium border-b pb-2\">\n              Dispatch Details\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Controller\n                name=\"dispatchDate\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Dispatch Date *\"\n                    type=\"date\"\n                    {...field}\n                    error={errors.dispatchDate?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"expectedDelivery\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Expected Delivery\"\n                    type=\"date\"\n                    {...field}\n                    error={errors.expectedDelivery?.message}\n                  />\n                )}\n              />\n              <Controller\n                name=\"postageAmount\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Postage Amount (₹)\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    {...field}\n                    error={errors.postageAmount?.message}\n                  />\n                )}\n              />\n            </div>\n            <Controller\n              name=\"trackingNumber\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Tracking Number\"\n                  {...field}\n                  error={errors.trackingNumber?.message}\n                />\n              )}\n            />\n            <Controller\n              name=\"notes\"\n              control={control}\n              render={({ field }) => (\n                <Input\n                  label=\"Notes\"\n                  multiline\n                  rows={3}\n                  {...field}\n                  error={errors.notes?.message}\n                />\n              )}\n            />\n          </div>\n\n          <div className=\"flex gap-2 pt-4\">\n            <button\n              type=\"submit\"\n              disabled={createMutation.isPending || updateMutation.isPending}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {createMutation.isPending || updateMutation.isPending\n                ? 'Saving...'\n                : selectedDispatch\n                  ? 'Update Dispatch'\n                  : 'Create Dispatch'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => {\n                setShowCreateDialog(false)\n                setShowEditDialog(false)\n                reset()\n                setSelectedDispatch(null)\n              }}\n              className=\"border px-4 py-2 rounded-lg hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default PostalDispatch\n"
        }
    ]
}