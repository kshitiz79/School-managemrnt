{
    "sourceFile": "src/pages/communication/SendMessage.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755985893077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755985893077,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useMutation, useQuery } from '@tanstack/react-query'\nimport { communicationApi } from '../../lib/api/communication'\nimport Button from '../../components/Button'\n\nconst SendMessage = () => {\n  const [activeTab, setActiveTab] = useState('whatsapp')\n  const [formData, setFormData] = useState({\n    recipients: 'all',\n    customRecipients: [],\n    subject: '',\n    message: '',\n    template: '',\n    attachments: [],\n    scheduleDate: '',\n    scheduleTime: '',\n    isScheduled: false,\n  })\n  const [segmentFilters, setSegmentFilters] = useState({\n    role: 'all',\n    class: 'all',\n    feeStatus: 'all',\n    customQuery: '',\n  })\n\n  const { data: templates = [] } = useQuery({\n    queryKey: ['templates', activeTab],\n    queryFn: () => communicationApi.getTemplates(activeTab),\n  })\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['classes'],\n    queryFn: communicationApi.getClasses,\n  })\n\n  const sendMessageMutation = useMutation({\n    mutationFn: communicationApi.sendMessage,\n    onSuccess: response => {\n      alert(`Message sent successfully! Job ID: ${response.jobId}`)\n      resetForm()\n    },\n    onError: error => {\n      alert(`Failed to send message: ${error.message}`)\n    },\n  })\n\n  const previewRecipientsMutation = useMutation({\n    mutationFn: communicationApi.previewRecipients,\n    onSuccess: data => {\n      setFormData(prev => ({ ...prev, customRecipients: data.recipients }))\n    },\n  })\n\n  const resetForm = () => {\n    setFormData({\n      recipients: 'all',\n      customRecipients: [],\n      subject: '',\n      message: '',\n      template: '',\n      attachments: [],\n      scheduleDate: '',\n      scheduleTime: '',\n      isScheduled: false,\n    })\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    const submitData = new FormData()\n\n    submitData.append('type', activeTab)\n    submitData.append('recipients', formData.recipients)\n    submitData.append('subject', formData.subject)\n    submitData.append('message', formData.message)\n    submitData.append('template', formData.template)\n    submitData.append('isScheduled', formData.isScheduled)\n\n    if (formData.isScheduled) {\n      submitData.append('scheduleDate', formData.scheduleDate)\n      submitData.append('scheduleTime', formData.scheduleTime)\n    }\n\n    // Add segment filters\n    Object.keys(segmentFilters).forEach(key => {\n      submitData.append(`filter_${key}`, segmentFilters[key])\n    })\n\n    // Add custom recipients if any\n    if (formData.customRecipients.length > 0) {\n      submitData.append(\n        'customRecipients',\n        JSON.stringify(formData.customRecipients),\n      )\n    }\n\n    // Add attachments\n    formData.attachments.forEach(file => {\n      submitData.append('attachments', file)\n    })\n\n    sendMessageMutation.mutate(submitData)\n  }\n\n  const handleTemplateSelect = templateId => {\n    const template = templates.find(t => t.id === templateId)\n    if (template) {\n      setFormData(prev => ({\n        ...prev,\n        template: templateId,\n        subject: template.subject || prev.subject,\n        message: template.content,\n      }))\n    }\n  }\n\n  const handlePreviewRecipients = () => {\n    previewRecipientsMutation.mutate({\n      recipients: formData.recipients,\n      filters: segmentFilters,\n    })\n  }\n\n  const getTabConfig = tab => {\n    const configs = {\n      whatsapp: {\n        title: 'WhatsApp',\n        icon: 'ðŸ“±',\n        color: 'bg-green-600',\n        maxLength: 1600,\n        supportsAttachments: true,\n        requiresSubject: false,\n      },\n      email: {\n        title: 'Email',\n        icon: 'ðŸ“§',\n        color: 'bg-blue-600',\n        maxLength: null,\n        supportsAttachments: true,\n        requiresSubject: true,\n      },\n      sms: {\n        title: 'SMS',\n        icon: 'ðŸ’¬',\n        color: 'bg-purple-600',\n        maxLength: 160,\n        supportsAttachments: false,\n        requiresSubject: false,\n      },\n    }\n    return configs[tab]\n  }\n\n  const currentConfig = getTabConfig(activeTab)\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 className=\"text-2xl font-bold mb-6\">Send Message</h2>\n\n        {/* Tabs */}\n        <div className=\"flex space-x-1 mb-6\">\n          {['whatsapp', 'email', 'sms'].map(tab => {\n            const config = getTabConfig(tab)\n            return (\n              <button\n                key={tab}\n                onClick={() => setActiveTab(tab)}\n                className={`px-4 py-2 rounded-t-lg font-medium ${\n                  activeTab === tab\n                    ? `${config.color} text-white`\n                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                }`}\n              >\n                {config.icon} {config.title}\n              </button>\n            )\n          })}\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Recipient Selection */}\n          <div className=\"bg-gray-50 p-4 rounded-md\">\n            <h3 className=\"text-lg font-semibold mb-4\">\n              Recipients & Segmentation\n            </h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Recipient Type\n                </label>\n                <select\n                  value={formData.recipients}\n                  onChange={e =>\n                    setFormData(prev => ({\n                      ...prev,\n                      recipients: e.target.value,\n                    }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                >\n                  <option value=\"all\">All Users</option>\n                  <option value=\"students\">Students</option>\n                  <option value=\"parents\">Parents</option>\n                  <option value=\"teachers\">Teachers</option>\n                  <option value=\"staff\">Staff</option>\n                  <option value=\"custom\">Custom Segment</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Role Filter\n                </label>\n                <select\n                  value={segmentFilters.role}\n                  onChange={e =>\n                    setSegmentFilters(prev => ({\n                      ...prev,\n                      role: e.target.value,\n                    }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                >\n                  <option value=\"all\">All Roles</option>\n                  <option value=\"student\">Student</option>\n                  <option value=\"parent\">Parent</option>\n                  <option value=\"teacher\">Teacher</option>\n                  <option value=\"admin\">Admin</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Class Filter\n                </label>\n                <select\n                  value={segmentFilters.class}\n                  onChange={e =>\n                    setSegmentFilters(prev => ({\n                      ...prev,\n                      class: e.target.value,\n                    }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                >\n                  <option value=\"all\">All Classes</option>\n                  {Array.isArray(classes) &&\n                    classes.map(cls => (\n                      <option key={cls.id} value={cls.id}>\n                        {cls.name}\n                      </option>\n                    ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Fee Status\n                </label>\n                <select\n                  value={segmentFilters.feeStatus}\n                  onChange={e =>\n                    setSegmentFilters(prev => ({\n                      ...prev,\n                      feeStatus: e.target.value,\n                    }))\n                  }\n                  className=\"w-full p-2 border rounded-md\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"paid\">Paid</option>\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"overdue\">Overdue</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"flex gap-4 mb-4\">\n              <Button\n                type=\"button\"\n                onClick={handlePreviewRecipients}\n                disabled={previewRecipientsMutation.isPending}\n                className=\"bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700\"\n              >\n                Preview Recipients ({formData.customRecipients.length})\n              </Button>\n            </div>\n\n            {formData.customRecipients.length > 0 && (\n              <div className=\"bg-white p-3 rounded border max-h-32 overflow-y-auto\">\n                <p className=\"text-sm font-medium mb-2\">Selected Recipients:</p>\n                <div className=\"text-xs text-gray-600\">\n                  {Array.isArray(formData.customRecipients) &&\n                    formData.customRecipients\n                      .slice(0, 10)\n                      .map((recipient, index) => (\n                        <span\n                          key={index}\n                          className=\"inline-block bg-gray-100 px-2 py-1 rounded mr-1 mb-1\"\n                        >\n                          {recipient.name} ({recipient.contact})\n                        </span>\n                      ))}\n                  {formData.customRecipients.length > 10 && (\n                    <span className=\"text-gray-500\">\n                      ... and {formData.customRecipients.length - 10} more\n                    </span>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Template Selection */}\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">\n              Template (Optional)\n            </label>\n            <select\n              value={formData.template}\n              onChange={e => handleTemplateSelect(e.target.value)}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"\">Select a template</option>\n              {Array.isArray(templates) &&\n                templates.map(template => (\n                  <option key={template.id} value={template.id}>\n                    {template.name}\n                  </option>\n                ))}\n            </select>\n          </div>\n\n          {/* Subject (Email only) */}\n          {currentConfig.requiresSubject && (\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">\n                Subject *\n              </label>\n              <input\n                type=\"text\"\n                value={formData.subject}\n                onChange={e =>\n                  setFormData(prev => ({ ...prev, subject: e.target.value }))\n                }\n                className=\"w-full p-2 border rounded-md\"\n                required={currentConfig.requiresSubject}\n              />\n            </div>\n          )}\n\n          {/* Message Content */}\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">\n              Message *\n              {currentConfig.maxLength && (\n                <span className=\"text-gray-500 ml-2\">\n                  ({formData.message.length}/{currentConfig.maxLength}{' '}\n                  characters)\n                </span>\n              )}\n            </label>\n            <textarea\n              value={formData.message}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, message: e.target.value }))\n              }\n              className=\"w-full p-2 border rounded-md\"\n              rows=\"6\"\n              maxLength={currentConfig.maxLength}\n              required\n              placeholder={`Enter your ${currentConfig.title.toLowerCase()} message here...`}\n            />\n          </div>\n\n          {/* Attachments */}\n          {currentConfig.supportsAttachments && (\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">\n                Attachments\n              </label>\n              <input\n                type=\"file\"\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    attachments: Array.from(e.target.files),\n                  }))\n                }\n                className=\"w-full p-2 border rounded-md\"\n                multiple\n                accept={\n                  activeTab === 'whatsapp'\n                    ? '.pdf,.jpg,.jpeg,.png'\n                    : '.pdf,.jpg,.jpeg,.png,.doc,.docx'\n                }\n              />\n            </div>\n          )}\n\n          {/* Scheduling */}\n          <div className=\"bg-gray-50 p-4 rounded-md\">\n            <div className=\"flex items-center mb-4\">\n              <input\n                type=\"checkbox\"\n                id=\"isScheduled\"\n                checked={formData.isScheduled}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    isScheduled: e.target.checked,\n                  }))\n                }\n                className=\"mr-2\"\n              />\n              <label htmlFor=\"isScheduled\" className=\"text-sm font-medium\">\n                Schedule for Later\n              </label>\n            </div>\n\n            {formData.isScheduled && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Schedule Date\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={formData.scheduleDate}\n                    onChange={e =>\n                      setFormData(prev => ({\n                        ...prev,\n                        scheduleDate: e.target.value,\n                      }))\n                    }\n                    className=\"w-full p-2 border rounded-md\"\n                    required={formData.isScheduled}\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Schedule Time\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={formData.scheduleTime}\n                    onChange={e =>\n                      setFormData(prev => ({\n                        ...prev,\n                        scheduleTime: e.target.value,\n                      }))\n                    }\n                    className=\"w-full p-2 border rounded-md\"\n                    required={formData.isScheduled}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Submit Buttons */}\n          <div className=\"flex gap-4\">\n            <Button\n              type=\"submit\"\n              disabled={sendMessageMutation.isPending}\n              className={`${currentConfig.color} text-white px-6 py-2 rounded-md hover:opacity-90`}\n            >\n              {sendMessageMutation.isPending\n                ? 'Sending...'\n                : `Send ${currentConfig.title}`}\n            </Button>\n            <Button\n              type=\"button\"\n              onClick={resetForm}\n              className=\"bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600\"\n            >\n              Reset\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n\nexport default SendMessage\n"
        }
    ]
}