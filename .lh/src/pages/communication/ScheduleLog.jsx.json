{
    "sourceFile": "src/pages/communication/ScheduleLog.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755984965394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755984965394,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\nimport { communicationApi } from '../../lib/api/communication'\nimport Button from '../../components/Button'\n\nconst ScheduleLog = () => {\n  const [filters, setFilters] = useState({\n    type: 'all',\n    status: 'all',\n    dateFrom: '',\n    dateTo: '',\n  })\n\n  const queryClient = useQueryClient()\n\n  const { data: scheduledMessagesData, isLoading } = useQuery({\n    queryKey: ['scheduledMessages', filters],\n    queryFn: () => communicationApi.getScheduledMessages(filters),\n  })\n\n  // Ensure scheduledMessages is always an array\n  const scheduledMessages = Array.isArray(scheduledMessagesData?.data)\n    ? scheduledMessagesData.data\n    : Array.isArray(scheduledMessagesData)\n      ? scheduledMessagesData\n      : []\n\n  const cancelScheduleMutation = useMutation({\n    mutationFn: communicationApi.cancelScheduledMessage,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['scheduledMessages'])\n      alert('Scheduled message cancelled successfully!')\n    },\n  })\n\n  const rescheduleMessageMutation = useMutation({\n    mutationFn: ({ id, newDateTime }) =>\n      communicationApi.rescheduleMessage(id, newDateTime),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['scheduledMessages'])\n      alert('Message rescheduled successfully!')\n    },\n  })\n\n  const handleFilterChange = e => {\n    const { name, value } = e.target\n    setFilters(prev => ({ ...prev, [name]: value }))\n  }\n\n  const handleCancelSchedule = id => {\n    if (\n      window.confirm('Are you sure you want to cancel this scheduled message?')\n    ) {\n      cancelScheduleMutation.mutate(id)\n    }\n  }\n\n  const handleReschedule = id => {\n    const newDate = prompt('Enter new date (YYYY-MM-DD):')\n    const newTime = prompt('Enter new time (HH:MM):')\n\n    if (newDate && newTime) {\n      const newDateTime = `${newDate} ${newTime}`\n      rescheduleMessageMutation.mutate({ id, newDateTime })\n    }\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'scheduled':\n        return 'bg-blue-100 text-blue-800'\n      case 'processing':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'sent':\n        return 'bg-green-100 text-green-800'\n      case 'failed':\n        return 'bg-red-100 text-red-800'\n      case 'cancelled':\n        return 'bg-gray-100 text-gray-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getTypeIcon = type => {\n    switch (type) {\n      case 'whatsapp':\n        return 'ðŸ“±'\n      case 'email':\n        return 'ðŸ“§'\n      case 'sms':\n        return 'ðŸ’¬'\n      default:\n        return 'ðŸ“„'\n    }\n  }\n\n  const isScheduleEditable = status => {\n    return ['scheduled'].includes(status)\n  }\n\n  const getTimeUntilExecution = scheduledAt => {\n    const now = new Date()\n    const scheduled = new Date(scheduledAt)\n    const diff = scheduled - now\n\n    if (diff <= 0) return 'Overdue'\n\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24))\n    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n\n    if (days > 0) return `${days}d ${hours}h`\n    if (hours > 0) return `${hours}h ${minutes}m`\n    return `${minutes}m`\n  }\n\n  const stats = {\n    total: scheduledMessages.length,\n    scheduled: scheduledMessages.filter(msg => msg.status === 'scheduled')\n      .length,\n    processing: scheduledMessages.filter(msg => msg.status === 'processing')\n      .length,\n    sent: scheduledMessages.filter(msg => msg.status === 'sent').length,\n    failed: scheduledMessages.filter(msg => msg.status === 'failed').length,\n    cancelled: scheduledMessages.filter(msg => msg.status === 'cancelled')\n      .length,\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 className=\"text-2xl font-bold mb-6\">ðŸ“… Scheduled Messages</h2>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4 mb-6\">\n          <div className=\"bg-gray-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-gray-700\">\n              {stats.total}\n            </div>\n            <div className=\"text-sm text-gray-600\">Total</div>\n          </div>\n          <div className=\"bg-blue-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-blue-700\">\n              {stats.scheduled}\n            </div>\n            <div className=\"text-sm text-blue-600\">Scheduled</div>\n          </div>\n          <div className=\"bg-yellow-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-yellow-700\">\n              {stats.processing}\n            </div>\n            <div className=\"text-sm text-yellow-600\">Processing</div>\n          </div>\n          <div className=\"bg-green-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-green-700\">\n              {stats.sent}\n            </div>\n            <div className=\"text-sm text-green-600\">Sent</div>\n          </div>\n          <div className=\"bg-red-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-red-700\">\n              {stats.failed}\n            </div>\n            <div className=\"text-sm text-red-600\">Failed</div>\n          </div>\n          <div className=\"bg-gray-50 p-4 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-gray-700\">\n              {stats.cancelled}\n            </div>\n            <div className=\"text-sm text-gray-600\">Cancelled</div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">\n              Message Type\n            </label>\n            <select\n              name=\"type\"\n              value={filters.type}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Types</option>\n              <option value=\"whatsapp\">WhatsApp</option>\n              <option value=\"email\">Email</option>\n              <option value=\"sms\">SMS</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Status</label>\n            <select\n              name=\"status\"\n              value={filters.status}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"scheduled\">Scheduled</option>\n              <option value=\"processing\">Processing</option>\n              <option value=\"sent\">Sent</option>\n              <option value=\"failed\">Failed</option>\n              <option value=\"cancelled\">Cancelled</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">From Date</label>\n            <input\n              type=\"date\"\n              name=\"dateFrom\"\n              value={filters.dateFrom}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">To Date</label>\n            <input\n              type=\"date\"\n              name=\"dateTo\"\n              value={filters.dateTo}\n              onChange={handleFilterChange}\n              className=\"w-full p-2 border rounded-md\"\n            />\n          </div>\n        </div>\n\n        {/* Scheduled Messages List */}\n        {isLoading ? (\n          <div className=\"text-center py-4\">Loading...</div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Array.isArray(scheduledMessages) &&\n              scheduledMessages.map(message => (\n                <div\n                  key={message.id}\n                  className=\"border rounded-lg p-4 hover:bg-gray-50\"\n                >\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-2xl\">\n                        {getTypeIcon(message.type)}\n                      </span>\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">\n                          {message.subject ||\n                            `${message.type.toUpperCase()} Message`}\n                        </h3>\n                        <div className=\"text-sm text-gray-600\">\n                          To: {message.recipientCount} recipient\n                          {message.recipientCount !== 1 ? 's' : ''}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span\n                        className={`px-3 py-1 rounded-full text-sm ${getStatusColor(message.status)}`}\n                      >\n                        {message.status.toUpperCase()}\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-3\">\n                    <div>\n                      <div className=\"text-sm text-gray-600\">Scheduled For</div>\n                      <div className=\"font-medium\">\n                        {new Date(message.scheduledAt).toLocaleString()}\n                      </div>\n                      {message.status === 'scheduled' && (\n                        <div className=\"text-xs text-blue-600\">\n                          In {getTimeUntilExecution(message.scheduledAt)}\n                        </div>\n                      )}\n                    </div>\n\n                    <div>\n                      <div className=\"text-sm text-gray-600\">Created</div>\n                      <div className=\"font-medium\">\n                        {new Date(message.createdAt).toLocaleString()}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        by {message.createdBy}\n                      </div>\n                    </div>\n\n                    <div>\n                      <div className=\"text-sm text-gray-600\">Job ID</div>\n                      <div className=\"font-mono text-sm\">{message.jobId}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"mb-3\">\n                    <div className=\"text-sm text-gray-600 mb-1\">\n                      Message Preview\n                    </div>\n                    <div className=\"bg-gray-50 p-3 rounded text-sm\">\n                      {message.content?.substring(0, 150)}\n                      {message.content?.length > 150 && '...'}\n                    </div>\n                  </div>\n\n                  {message.error && (\n                    <div className=\"mb-3\">\n                      <div className=\"text-sm text-gray-600 mb-1\">Error</div>\n                      <div className=\"bg-red-50 p-3 rounded text-sm text-red-800 border border-red-200\">\n                        {message.error}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex gap-2\">\n                    {isScheduleEditable(message.status) && (\n                      <>\n                        <Button\n                          onClick={() => handleReschedule(message.id)}\n                          disabled={rescheduleMessageMutation.isPending}\n                          className=\"bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600\"\n                        >\n                          Reschedule\n                        </Button>\n                        <Button\n                          onClick={() => handleCancelSchedule(message.id)}\n                          disabled={cancelScheduleMutation.isPending}\n                          className=\"bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600\"\n                        >\n                          Cancel\n                        </Button>\n                      </>\n                    )}\n\n                    {message.status === 'sent' && (\n                      <Button\n                        onClick={() =>\n                          window.open(\n                            `/communication/log?jobId=${message.jobId}`,\n                            '_blank',\n                          )\n                        }\n                        className=\"bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600\"\n                      >\n                        View Delivery Log\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n          </div>\n        )}\n\n        {scheduledMessages.length === 0 && !isLoading && (\n          <div className=\"text-center py-8 text-gray-500\">\n            <div className=\"text-6xl mb-4\">ðŸ“…</div>\n            <div className=\"text-xl mb-2\">No scheduled messages found</div>\n            <div className=\"text-sm\">\n              Messages you schedule will appear here\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default ScheduleLog\n"
        }
    ]
}