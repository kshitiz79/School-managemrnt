{
    "sourceFile": "src/pages/behaviour/AssignIncident.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1755985893077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755994518545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Upload,\n   Camera,\n } from 'lucide-react'\n import Input from '../../components/ui/Input'\n-import Dialog from '../../components/ui/Dialog'\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\n import LoadingSkeleton from '../../components/ui/LoadingSkeleton'\n import { behaviourApi } from '../../lib/api/behaviour'\n \n // Validation Schema\n@@ -125,9 +125,9 @@\n         </div>\n       )}\n     </div>\n   )\n-};\n+}\n \n const WitnessSelector = ({ witnesses, onWitnessesChange }) => {\n   const [searchTerm, setSearchTerm] = useState('')\n   const [showSearch, setShowSearch] = useState(false)\n@@ -143,13 +143,13 @@\n       onWitnessesChange([...witnesses, witness.id])\n     }\n     setSearchTerm('')\n     setShowSearch(false)\n-  };\n+  }\n \n   const removeWitness = witnessId => {\n     onWitnessesChange(witnesses.filter(id => id !== witnessId))\n-  };\n+  }\n \n   return (\n     <div className=\"space-y-2\">\n       <label className=\"block text-sm font-medium text-gray-700\">\n@@ -214,9 +214,9 @@\n         </div>\n       )}\n     </div>\n   )\n-};\n+}\n \n const AssignIncident = () => {\n   const [selectedStudent, setSelectedStudent] = useState(null)\n   const [witnesses, setWitnesses] = useState([])\n@@ -238,9 +238,9 @@\n       time: new Date().toTimeString().slice(0, 5),\n       severity: 'medium',\n       followUpRequired: false,\n       parentNotification: true,\n-    }\n+    },\n   })\n \n   const watchFollowUp = watch('followUpRequired')\n \n@@ -256,9 +256,9 @@\n       reset()\n       setSelectedStudent(null)\n       setWitnesses([])\n       setAttachments([])\n-    }\n+    },\n   })\n \n   const onSubmit = data => {\n     const incidentData = {\n@@ -269,12 +269,12 @@\n         ? attachments.map(att => att.name)\n         : [],\n       reportedBy: 'current-user', // In real app, get from auth\n       reportedAt: new Date().toISOString(),\n-    };\n+    }\n \n     createIncidentMutation.mutate(incidentData)\n-  };\n+  }\n \n   const getSeverityColor = severity => {\n     switch (severity) {\n       case 'low':\n@@ -292,13 +292,13 @@\n \n   const handleFileUpload = event => {\n     const files = Array.from(event.target.files)\n     setAttachments(prev => [...prev, ...files])\n-  };\n+  }\n \n   const removeAttachment = index => {\n     setAttachments(prev => prev.filter((_, i) => i !== index))\n-  };\n+  }\n \n   return (\n     <div className=\"space-y-6\">\n       <div className=\"flex justify-between items-center\">\n@@ -637,7 +637,7 @@\n         </div>\n       </form>\n     </div>\n   )\n-};\n+}\n \n\\ No newline at end of file\n-export default AssignIncident\n+export default AssignIncident\n"
                }
            ],
            "date": 1755985893077,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  AlertTriangle,\n  User,\n  Calendar,\n  Clock,\n  FileText,\n  Save,\n  Search,\n  Plus,\n  X,\n  Upload,\n  Camera,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport Dialog from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { behaviourApi } from '../../lib/api/behaviour'\n\n// Validation Schema\nconst incidentSchema = z.object({\n  studentId: z.string().min(1, 'Student is required'),\n  categoryId: z.string().min(1, 'Category is required'),\n  severity: z.enum(['low', 'medium', 'high', 'critical'], {\n    required_error: 'Severity is required',\n  }),\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().min(10, 'Description must be at least 10 characters'),\n  location: z.string().min(1, 'Location is required'),\n  date: z.string().min(1, 'Date is required'),\n  time: z.string().min(1, 'Time is required'),\n  witnesses: z.array(z.string()).optional(),\n  actionTaken: z.string().optional(),\n  followUpRequired: z.boolean().default(false),\n  followUpDate: z.string().optional(),\n  parentNotification: z.boolean().default(true),\n})\n\nconst StudentSelector = ({ onSelect, selectedStudent }) => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [showSearch, setShowSearch] = useState(false)\n\n  const { data: studentsData } = useQuery({\n    queryKey: ['students', 'search', searchTerm],\n    queryFn: () => behaviourApi.searchStudents(searchTerm),\n    enabled: searchTerm.length > 2,\n  })\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-700\">\n        Student *\n      </label>\n      {selectedStudent ? (\n        <div className=\"flex items-center justify-between p-3 border rounded-lg bg-blue-50\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center\">\n              <User className=\"w-5 h-5 text-gray-600\" />\n            </div>\n            <div>\n              <div className=\"font-medium\">{selectedStudent.name}</div>\n              <div className=\"text-sm text-gray-500\">\n                {selectedStudent.className} - {selectedStudent.section} | Roll:{' '}\n                {selectedStudent.rollNumber}\n              </div>\n            </div>\n          </div>\n          <button\n            onClick={() => onSelect(null)}\n            className=\"p-1 text-gray-400 hover:text-gray-600\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n      ) : (\n        <div>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search student by name, roll number...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              onFocus={() => setShowSearch(true)}\n              className=\"w-full pl-10 pr-4 py-2 border rounded-lg\"\n            />\n          </div>\n\n          {showSearch && searchTerm.length > 2 && (\n            <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n              {studentsData?.data?.length > 0 ? (\n                studentsData.data.map(student => (\n                  <button\n                    key={student.id}\n                    onClick={() => {\n                      onSelect(student)\n                      setShowSearch(false)\n                      setSearchTerm('')\n                    }}\n                    className=\"w-full p-3 text-left hover:bg-gray-50 flex items-center gap-3\"\n                  >\n                    <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n                      <User className=\"w-4 h-4 text-gray-600\" />\n                    </div>\n                    <div>\n                      <div className=\"font-medium\">{student.name}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        {student.className} - {student.section} | Roll:{' '}\n                        {student.rollNumber}\n                      </div>\n                    </div>\n                  </button>\n                ))\n              ) : (\n                <div className=\"p-3 text-gray-500 text-center\">\n                  No students found\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n};\n\nconst WitnessSelector = ({ witnesses, onWitnessesChange }) => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [showSearch, setShowSearch] = useState(false)\n\n  const { data: staffData } = useQuery({\n    queryKey: ['staff', 'search', searchTerm],\n    queryFn: () => behaviourApi.searchStaff(searchTerm),\n    enabled: searchTerm.length > 2,\n  })\n\n  const addWitness = witness => {\n    if (!witnesses.includes(witness.id)) {\n      onWitnessesChange([...witnesses, witness.id])\n    }\n    setSearchTerm('')\n    setShowSearch(false)\n  };\n\n  const removeWitness = witnessId => {\n    onWitnessesChange(witnesses.filter(id => id !== witnessId))\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"block text-sm font-medium text-gray-700\">\n        Witnesses\n      </label>\n\n      {witnesses.length > 0 && (\n        <div className=\"flex flex-wrap gap-2 mb-2\">\n          {Array.isArray(witnesses) &&\n            witnesses.map(witnessId => (\n              <span\n                key={witnessId}\n                className=\"inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm\"\n              >\n                Staff Member {witnessId}\n                <button\n                  onClick={() => removeWitness(witnessId)}\n                  className=\"text-blue-600 hover:text-blue-800\"\n                >\n                  <X className=\"w-3 h-3\" />\n                </button>\n              </span>\n            ))}\n        </div>\n      )}\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search staff members...\"\n          value={searchTerm}\n          onChange={e => setSearchTerm(e.target.value)}\n          onFocus={() => setShowSearch(true)}\n          className=\"w-full pl-10 pr-4 py-2 border rounded-lg\"\n        />\n      </div>\n\n      {showSearch && searchTerm.length > 2 && (\n        <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg max-h-40 overflow-y-auto\">\n          {staffData?.data?.length > 0 ? (\n            staffData.data.map(staff => (\n              <button\n                key={staff.id}\n                onClick={() => addWitness(staff)}\n                className=\"w-full p-2 text-left hover:bg-gray-50 flex items-center gap-2\"\n              >\n                <User className=\"w-4 h-4 text-gray-600\" />\n                <div>\n                  <div className=\"font-medium text-sm\">{staff.name}</div>\n                  <div className=\"text-xs text-gray-500\">\n                    {staff.department}\n                  </div>\n                </div>\n              </button>\n            ))\n          ) : (\n            <div className=\"p-2 text-gray-500 text-center text-sm\">\n              No staff found\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n};\n\nconst AssignIncident = () => {\n  const [selectedStudent, setSelectedStudent] = useState(null)\n  const [witnesses, setWitnesses] = useState([])\n  const [attachments, setAttachments] = useState([])\n  const [showPreview, setShowPreview] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const {\n    control,\n    handleSubmit,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: zodResolver(incidentSchema),\n    defaultValues: {\n      date: new Date().toISOString().split('T')[0],\n      time: new Date().toTimeString().slice(0, 5),\n      severity: 'medium',\n      followUpRequired: false,\n      parentNotification: true,\n    }\n  })\n\n  const watchFollowUp = watch('followUpRequired')\n\n  const { data: categoriesData } = useQuery({\n    queryKey: ['behaviour', 'categories'],\n    queryFn: () => behaviourApi.getCategories(),\n  })\n\n  const createIncidentMutation = useMutation({\n    mutationFn: behaviourApi.createIncident,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['behaviour', 'incidents'])\n      reset()\n      setSelectedStudent(null)\n      setWitnesses([])\n      setAttachments([])\n    }\n  })\n\n  const onSubmit = data => {\n    const incidentData = {\n      ...data,\n      studentId: selectedStudent?.id,\n      witnesses,\n      attachments: Array.isArray(attachments)\n        ? attachments.map(att => att.name)\n        : [],\n      reportedBy: 'current-user', // In real app, get from auth\n      reportedAt: new Date().toISOString(),\n    };\n\n    createIncidentMutation.mutate(incidentData)\n  };\n\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case 'low':\n        return 'text-green-600 bg-green-100'\n      case 'medium':\n        return 'text-yellow-600 bg-yellow-100'\n      case 'high':\n        return 'text-orange-600 bg-orange-100'\n      case 'critical':\n        return 'text-red-600 bg-red-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  const handleFileUpload = event => {\n    const files = Array.from(event.target.files)\n    setAttachments(prev => [...prev, ...files])\n  };\n\n  const removeAttachment = index => {\n    setAttachments(prev => prev.filter((_, i) => i !== index))\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Assign Incident</h1>\n        <button\n          onClick={() => setShowPreview(true)}\n          className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n        >\n          <FileText className=\"w-4 h-4\" />\n          Preview\n        </button>\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-lg font-medium mb-4\">Incident Details</h2>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <StudentSelector\n                onSelect={setSelectedStudent}\n                selectedStudent={selectedStudent}\n              />\n              {!selectedStudent && (\n                <p className=\"text-red-500 text-sm\">Please select a student</p>\n              )}\n\n              <Controller\n                name=\"categoryId\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Category *\n                    </label>\n                    <select\n                      {...field}\n                      className={`w-full border rounded-lg px-3 py-2 ${\n                        errors.categoryId ? 'border-red-500' : ''\n                      }`}\n                    >\n                      <option value=\"\">Select Category</option>\n                      {Array.isArray(categoriesData?.data) &&\n                        categoriesData.data.map(category => (\n                          <option key={category.id} value={category.id}>\n                            {category.name}\n                          </option>\n                        ))}\n                    </select>\n                    {errors.categoryId && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.categoryId.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n              />\n\n              <Controller\n                name=\"severity\"\n                control={control}\n                render={({ field }) => (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">\n                      Severity *\n                    </label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {['low', 'medium', 'high', 'critical'].map(severity => (\n                        <label\n                          key={severity}\n                          className={`flex items-center justify-center p-3 border rounded-lg cursor-pointer ${\n                            field.value === severity\n                              ? getSeverityColor(severity)\n                              : 'border-gray-300 hover:bg-gray-50'\n                          }`}\n                        >\n                          <input\n                            type=\"radio\"\n                            {...field}\n                            value={severity}\n                            className=\"sr-only\"\n                          />\n                          <span className=\"capitalize font-medium\">\n                            {severity}\n                          </span>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              />\n\n              <Controller\n                name=\"title\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Incident Title *\"\n                    {...field}\n                    error={errors.title?.message}\n                    placeholder=\"Brief title of the incident\"\n                  />\n                )}\n              />\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Controller\n                  name=\"date\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Date *\"\n                      type=\"date\"\n                      {...field}\n                      error={errors.date?.message}\n                    />\n                  )}\n                />\n                <Controller\n                  name=\"time\"\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      label=\"Time *\"\n                      type=\"time\"\n                      {...field}\n                      error={errors.time?.message}\n                    />\n                  )}\n                />\n              </div>\n\n              <Controller\n                name=\"location\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Location *\"\n                    {...field}\n                    error={errors.location?.message}\n                    placeholder=\"Where did the incident occur?\"\n                  />\n                )}\n              />\n\n              <WitnessSelector\n                witnesses={witnesses}\n                onWitnessesChange={setWitnesses}\n              />\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Attachments\n                </label>\n                <div className=\"space-y-2\">\n                  <div className=\"flex gap-2\">\n                    <label className=\"flex-1 border-2 border-dashed border-gray-300 rounded-lg p-4 text-center cursor-pointer hover:border-gray-400\">\n                      <Upload className=\"w-6 h-6 mx-auto mb-2 text-gray-400\" />\n                      <span className=\"text-sm text-gray-600\">\n                        Upload files\n                      </span>\n                      <input\n                        type=\"file\"\n                        multiple\n                        accept=\"image/*,.pdf,.doc,.docx\"\n                        onChange={handleFileUpload}\n                        className=\"hidden\"\n                      />\n                    </label>\n                    <button\n                      type=\"button\"\n                      className=\"px-4 py-2 border rounded-lg hover:bg-gray-50 flex items-center gap-2\"\n                    >\n                      <Camera className=\"w-4 h-4\" />\n                      Photo\n                    </button>\n                  </div>\n\n                  {attachments.length > 0 && (\n                    <div className=\"space-y-1\">\n                      {Array.isArray(attachments) &&\n                        attachments.map((file, index) => (\n                          <div\n                            key={index}\n                            className=\"flex items-center justify-between p-2 bg-gray-50 rounded\"\n                          >\n                            <span className=\"text-sm\">{file.name}</span>\n                            <button\n                              type=\"button\"\n                              onClick={() => removeAttachment(index)}\n                              className=\"text-red-500 hover:text-red-700\"\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </button>\n                          </div>\n                        ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-lg font-medium mb-4\">Description & Action</h2>\n\n          <div className=\"space-y-4\">\n            <Controller\n              name=\"description\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Detailed Description *\n                  </label>\n                  <textarea\n                    {...field}\n                    rows={4}\n                    className={`w-full border rounded-lg px-3 py-2 ${\n                      errors.description ? 'border-red-500' : ''\n                    }`}\n                    placeholder=\"Provide a detailed description of the incident...\"\n                  />\n                  {errors.description && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {errors.description.message}\n                    </p>\n                  )}\n                </div>\n              )}\n            />\n\n            <Controller\n              name=\"actionTaken\"\n              control={control}\n              render={({ field }) => (\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    Immediate Action Taken\n                  </label>\n                  <textarea\n                    {...field}\n                    rows={3}\n                    className=\"w-full border rounded-lg px-3 py-2\"\n                    placeholder=\"Describe any immediate actions taken...\"\n                  />\n                </div>\n              )}\n            />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-lg font-medium mb-4\">\n            Follow-up & Notifications\n          </h2>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-4\">\n              <Controller\n                name=\"followUpRequired\"\n                control={control}\n                render={({ field }) => (\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={field.value}\n                      onChange={field.onChange}\n                      className=\"rounded\"\n                    />\n                    <span className=\"text-sm font-medium\">\n                      Follow-up required\n                    </span>\n                  </label>\n                )}\n              />\n\n              <Controller\n                name=\"parentNotification\"\n                control={control}\n                render={({ field }) => (\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={field.value}\n                      onChange={field.onChange}\n                      className=\"rounded\"\n                    />\n                    <span className=\"text-sm font-medium\">Notify parents</span>\n                  </label>\n                )}\n              />\n            </div>\n\n            {watchFollowUp && (\n              <Controller\n                name=\"followUpDate\"\n                control={control}\n                render={({ field }) => (\n                  <Input\n                    label=\"Follow-up Date\"\n                    type=\"date\"\n                    {...field}\n                    className=\"max-w-xs\"\n                  />\n                )}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-4\">\n          <button\n            type=\"button\"\n            onClick={() => {\n              reset()\n              setSelectedStudent(null)\n              setWitnesses([])\n              setAttachments([])\n            }}\n            className=\"px-6 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Reset\n          </button>\n          <button\n            type=\"submit\"\n            disabled={createIncidentMutation.isPending || !selectedStudent}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            {createIncidentMutation.isPending ? 'Saving...' : 'Save Incident'}\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n};\n\nexport default AssignIncident"
        }
    ]
}