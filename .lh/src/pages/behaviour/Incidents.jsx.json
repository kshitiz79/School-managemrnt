{
    "sourceFile": "src/pages/behaviour/Incidents.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994523268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994523268,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  AlertTriangle,\n  User,\n  Calendar,\n  Clock,\n  MapPin,\n  Eye,\n  Edit,\n  MessageSquare,\n  CheckCircle,\n  XCircle,\n  Filter,\n  Search,\n  Download,\n  Bell,\n  BellOff,\n  FileText,\n  Users,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { behaviourApi } from '../../lib/api/behaviour'\n\nconst IncidentCard = ({ incident, onView, onEdit, onUpdateStatus }) => {\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case 'low':\n        return 'text-green-600 bg-green-100 border-green-200'\n      case 'medium':\n        return 'text-yellow-600 bg-yellow-100 border-yellow-200'\n      case 'high':\n        return 'text-orange-600 bg-orange-100 border-orange-200'\n      case 'critical':\n        return 'text-red-600 bg-red-100 border-red-200'\n      default:\n        return 'text-gray-600 bg-gray-100 border-gray-200'\n    }\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'open':\n        return 'text-blue-600 bg-blue-100'\n      case 'in-progress':\n        return 'text-yellow-600 bg-yellow-100'\n      case 'resolved':\n        return 'text-green-600 bg-green-100'\n      case 'closed':\n        return 'text-gray-600 bg-gray-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  return (\n    <div className=\"bg-white border rounded-lg p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-3\">\n        <div className=\"flex items-center gap-3\">\n          <div\n            className={`p-2 rounded-lg ${getSeverityColor(incident.severity)}`}\n          >\n            <AlertTriangle className=\"w-4 h-4\" />\n          </div>\n          <div>\n            <h3 className=\"font-medium\">{incident.title}</h3>\n            <p className=\"text-sm text-gray-500\">\n              {incident.studentName} • {incident.className} - {incident.section}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span\n            className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(incident.status)}`}\n          >\n            {incident.status.replace('-', ' ').toUpperCase()}\n          </span>\n          <span\n            className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(incident.severity)}`}\n          >\n            {incident.severity.toUpperCase()}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"space-y-2 mb-4\">\n        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n          <Calendar className=\"w-4 h-4\" />\n          <span>{new Date(incident.date).toLocaleDateString()}</span>\n          <Clock className=\"w-4 h-4 ml-2\" />\n          <span>{incident.time}</span>\n        </div>\n        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n          <MapPin className=\"w-4 h-4\" />\n          <span>{incident.location}</span>\n        </div>\n        <p className=\"text-sm text-gray-700 line-clamp-2\">\n          {incident.description}\n        </p>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2 text-sm text-gray-500\">\n          <User className=\"w-4 h-4\" />\n          <span>Reported by {incident.reportedByName}</span>\n        </div>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => onView(incident)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n            title=\"View Details\"\n          >\n            <Eye className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onEdit(incident)}\n            className=\"p-1 text-gray-400 hover:text-green-600\"\n            title=\"Edit\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          {incident.parentNotificationSent ? (\n            <BellOff\n              className=\"w-4 h-4 text-green-600\"\n              title=\"Parent Notified\"\n            />\n          ) : (\n            <Bell\n              className=\"w-4 h-4 text-orange-600\"\n              title=\"Parent Not Notified\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst IncidentTimeline = ({ incident }) => {\n  const timelineEvents = [\n    {\n      id: 1,\n      type: 'created',\n      title: 'Incident Reported',\n      description: `Incident reported by ${incident.reportedByName}`,\n      timestamp: incident.reportedAt,\n      user: incident.reportedByName,\n      icon: AlertTriangle,\n      color: 'text-red-600 bg-red-100',\n    },\n    {\n      id: 2,\n      type: 'action',\n      title: 'Immediate Action Taken',\n      description: incident.actionTaken || 'No immediate action recorded',\n      timestamp: incident.reportedAt,\n      user: incident.reportedByName,\n      icon: CheckCircle,\n      color: 'text-blue-600 bg-blue-100',\n    },\n    ...(incident.parentNotificationSent\n      ? [\n          {\n            id: 3,\n            type: 'notification',\n            title: 'Parent Notified',\n            description: 'Parent notification sent successfully',\n            timestamp: incident.parentNotifiedAt,\n            user: 'System',\n            icon: Bell,\n            color: 'text-green-600 bg-green-100',\n          },\n        ]\n      : []),\n    ...(incident.followUpActions?.map((action, index) => ({\n      id: 4 + index,\n      type: 'followup',\n      title: 'Follow-up Action',\n      description: action.description,\n      timestamp: action.timestamp,\n      user: action.user,\n      icon: MessageSquare,\n      color: 'text-purple-600 bg-purple-100',\n    })) || []),\n  ]\n\n  return (\n    <div className=\"space-y-4\">\n      {Array.isArray(timelineEvents) &&\n        timelineEvents.map((event, index) => {\n          const Icon = event.icon\n          return (\n            <div key={event.id} className=\"flex gap-4\">\n              <div className=\"flex flex-col items-center\">\n                <div className={`p-2 rounded-full ${event.color}`}>\n                  <Icon className=\"w-4 h-4\" />\n                </div>\n                {index < timelineEvents.length - 1 && (\n                  <div className=\"w-px h-8 bg-gray-200 mt-2\" />\n                )}\n              </div>\n              <div className=\"flex-1 pb-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <h4 className=\"font-medium\">{event.title}</h4>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {event.description}\n                    </p>\n                  </div>\n                  <div className=\"text-right text-sm text-gray-500\">\n                    <div>{new Date(event.timestamp).toLocaleDateString()}</div>\n                    <div>{new Date(event.timestamp).toLocaleTimeString()}</div>\n                  </div>\n                </div>\n                <div className=\"text-xs text-gray-500 mt-2\">\n                  by {event.user}\n                </div>\n              </div>\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n\nconst IncidentDetailsDialog = ({ incident, open, onClose, onUpdateStatus }) => {\n  const [newStatus, setNewStatus] = useState(incident?.status || 'open')\n  const [followUpNote, setFollowUpNote] = useState('')\n\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ id, status, note }) =>\n      behaviourApi.updateIncidentStatus(id, status, note),\n    onSuccess: () => {\n      onClose()\n    },\n  })\n\n  const handleStatusUpdate = () => {\n    updateStatusMutation.mutate({\n      id: incident.id,\n      status: newStatus,\n      note: followUpNote,\n    })\n  }\n\n  if (!incident) return null\n\n  return (\n    <Dialog open={open} onClose={onClose} title=\"Incident Details\" size=\"xl\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h2 className=\"text-xl font-semibold\">{incident.title}</h2>\n            <p className=\"text-gray-600\">\n              {incident.studentName} • {incident.className} - {incident.section}\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <span\n              className={`px-3 py-1 rounded-full text-sm font-medium ${\n                incident.severity === 'critical'\n                  ? 'text-red-600 bg-red-100'\n                  : incident.severity === 'high'\n                    ? 'text-orange-600 bg-orange-100'\n                    : incident.severity === 'medium'\n                      ? 'text-yellow-600 bg-yellow-100'\n                      : 'text-green-600 bg-green-100'\n              }`}\n            >\n              {incident.severity.toUpperCase()}\n            </span>\n          </div>\n        </div>\n\n        {/* Basic Info */}\n        <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Date & Time\n            </label>\n            <p className=\"text-sm\">\n              {new Date(incident.date).toLocaleDateString()} at {incident.time}\n            </p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Location\n            </label>\n            <p className=\"text-sm\">{incident.location}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Category\n            </label>\n            <p className=\"text-sm\">{incident.categoryName}</p>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Reported By\n            </label>\n            <p className=\"text-sm\">{incident.reportedByName}</p>\n          </div>\n        </div>\n\n        {/* Description */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Description\n          </label>\n          <p className=\"text-sm bg-gray-50 p-3 rounded\">\n            {incident.description}\n          </p>\n        </div>\n\n        {/* Witnesses */}\n        {incident.witnesses && incident.witnesses.length > 0 && (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Witnesses\n            </label>\n            <div className=\"flex flex-wrap gap-2\">\n              {Array.isArray(incident.witnesses) &&\n                incident.witnesses.map((witness, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm\"\n                  >\n                    {witness}\n                  </span>\n                ))}\n            </div>\n          </div>\n        )}\n\n        {/* Timeline */}\n        <div>\n          <h3 className=\"text-lg font-medium mb-4\">Timeline</h3>\n          <IncidentTimeline incident={incident} />\n        </div>\n\n        {/* Status Update */}\n        <div className=\"border-t pt-4\">\n          <h3 className=\"text-lg font-medium mb-4\">Update Status</h3>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Status\n              </label>\n              <select\n                value={newStatus}\n                onChange={e => setNewStatus(e.target.value)}\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"open\">Open</option>\n                <option value=\"in-progress\">In Progress</option>\n                <option value=\"resolved\">Resolved</option>\n                <option value=\"closed\">Closed</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Follow-up Note\n              </label>\n              <textarea\n                value={followUpNote}\n                onChange={e => setFollowUpNote(e.target.value)}\n                rows={3}\n                className=\"w-full border rounded-lg px-3 py-2\"\n                placeholder=\"Add any follow-up notes...\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Close\n          </button>\n          <button\n            onClick={handleStatusUpdate}\n            disabled={updateStatusMutation.isPending}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n          >\n            {updateStatusMutation.isPending ? 'Updating...' : 'Update Status'}\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst ParentAcknowledgmentDialog = ({ incident, open, onClose }) => {\n  const acknowledgmentMutation = useMutation({\n    mutationFn: data => behaviourApi.sendParentNotification(data),\n    onSuccess: () => {\n      onClose()\n    },\n  })\n\n  const handleSendNotification = () => {\n    acknowledgmentMutation.mutate({\n      incidentId: incident.id,\n      studentId: incident.studentId,\n      message: `Incident Report: ${incident.title}`,\n      requireAcknowledgment: true,\n    })\n  }\n\n  if (!incident) return null\n\n  return (\n    <Dialog open={open} onClose={onClose} title=\"Parent Notification\">\n      <div className=\"space-y-4\">\n        <div>\n          <h3 className=\"font-medium\">Send notification to parents of:</h3>\n          <p className=\"text-gray-600\">\n            {incident.studentName} ({incident.className} - {incident.section})\n          </p>\n        </div>\n\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h4 className=\"font-medium mb-2\">Notification Preview:</h4>\n          <div className=\"text-sm space-y-2\">\n            <p>\n              <strong>Subject:</strong> Incident Report - {incident.title}\n            </p>\n            <p>\n              <strong>Date:</strong>{' '}\n              {new Date(incident.date).toLocaleDateString()}\n            </p>\n            <p>\n              <strong>Severity:</strong> {incident.severity.toUpperCase()}\n            </p>\n            <p>\n              <strong>Description:</strong> {incident.description}\n            </p>\n            {incident.actionTaken && (\n              <p>\n                <strong>Action Taken:</strong> {incident.actionTaken}\n              </p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSendNotification}\n            disabled={acknowledgmentMutation.isPending}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Bell className=\"w-4 h-4\" />\n            {acknowledgmentMutation.isPending\n              ? 'Sending...'\n              : 'Send Notification'}\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst Incidents = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [statusFilter, setStatusFilter] = useState('all')\n  const [severityFilter, setSeverityFilter] = useState('all')\n  const [selectedIncident, setSelectedIncident] = useState(null)\n  const [showDetails, setShowDetails] = useState(false)\n  const [showParentNotification, setShowParentNotification] = useState(false)\n\n  const { data: incidentsData, isLoading } = useQuery({\n    queryKey: [\n      'behaviour',\n      'incidents',\n      searchTerm,\n      statusFilter,\n      severityFilter,\n    ],\n    queryFn: () =>\n      behaviourApi.getIncidents({\n        search: searchTerm,\n        status: statusFilter,\n        severity: severityFilter,\n      }),\n  })\n\n  const handleViewIncident = incident => {\n    setSelectedIncident(incident)\n    setShowDetails(true)\n  }\n\n  const handleEditIncident = incident => {\n    // Navigate to edit form\n    console.log('Edit incident:', incident.id)\n  }\n\n  const handleParentNotification = incident => {\n    setSelectedIncident(incident)\n    setShowParentNotification(true)\n  }\n\n  const filteredIncidents = incidentsData?.data || []\n\n  if (isLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Behavior Incidents</h1>\n        <div className=\"flex gap-2\">\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\">\n            <AlertTriangle className=\"w-4 h-4\" />\n            New Incident\n          </button>\n        </div>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{filteredIncidents.length}</p>\n              <p className=\"text-sm text-gray-600\">Total Incidents</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Clock className=\"w-8 h-8 text-yellow-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {filteredIncidents.filter(i => i.status === 'open').length}\n              </p>\n              <p className=\"text-sm text-gray-600\">Open</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {filteredIncidents.filter(i => i.status === 'resolved').length}\n              </p>\n              <p className=\"text-sm text-gray-600\">Resolved</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"flex items-center gap-3\">\n            <Bell className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <p className=\"text-2xl font-bold\">\n                {\n                  filteredIncidents.filter(i => !i.parentNotificationSent)\n                    .length\n                }\n              </p>\n              <p className=\"text-sm text-gray-600\">Pending Notifications</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search incidents...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border rounded-lg\"\n            />\n          </div>\n          <select\n            value={statusFilter}\n            onChange={e => setStatusFilter(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Status</option>\n            <option value=\"open\">Open</option>\n            <option value=\"in-progress\">In Progress</option>\n            <option value=\"resolved\">Resolved</option>\n            <option value=\"closed\">Closed</option>\n          </select>\n          <select\n            value={severityFilter}\n            onChange={e => setSeverityFilter(e.target.value)}\n            className=\"border rounded-lg px-3 py-2\"\n          >\n            <option value=\"all\">All Severity</option>\n            <option value=\"low\">Low</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"high\">High</option>\n            <option value=\"critical\">Critical</option>\n          </select>\n          <button className=\"border px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2\">\n            <Filter className=\"w-4 h-4\" />\n            More Filters\n          </button>\n        </div>\n      </div>\n\n      {/* Incidents List */}\n      <div className=\"space-y-4\">\n        {filteredIncidents.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n            <AlertTriangle className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              No Incidents Found\n            </h3>\n            <p className=\"text-gray-500\">\n              No incidents match your current filters.\n            </p>\n          </div>\n        ) : (\n          filteredIncidents.map(incident => (\n            <IncidentCard\n              key={incident.id}\n              incident={incident}\n              onView={handleViewIncident}\n              onEdit={handleEditIncident}\n              onUpdateStatus={() => {}}\n            />\n          ))\n        )}\n      </div>\n\n      {/* Incident Details Dialog */}\n      <IncidentDetailsDialog\n        incident={selectedIncident}\n        open={showDetails}\n        onClose={() => setShowDetails(false)}\n        onUpdateStatus={() => {}}\n      />\n\n      {/* Parent Notification Dialog */}\n      <ParentAcknowledgmentDialog\n        incident={selectedIncident}\n        open={showParentNotification}\n        onClose={() => setShowParentNotification(false)}\n      />\n    </div>\n  )\n}\n\nexport default Incidents\n"
        }
    ]
}