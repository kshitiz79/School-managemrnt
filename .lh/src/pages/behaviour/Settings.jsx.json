{
    "sourceFile": "src/pages/behaviour/Settings.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755994925597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755994925597,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  Settings as SettingsIcon,\n  Plus,\n  Edit,\n  Trash2,\n  Save,\n  X,\n  AlertTriangle,\n  Award,\n  Target,\n  Users,\n} from 'lucide-react'\nimport Input from '../../components/ui/Input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '../../components/ui/Dialog'\nimport LoadingSkeleton from '../../components/ui/LoadingSkeleton'\nimport { behaviourApi } from '../../lib/api/behaviour'\n\nconst CategoryCard = ({ category, onEdit, onDelete }) => {\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case 'low':\n        return 'text-green-600 bg-green-100 border-green-200'\n      case 'medium':\n        return 'text-yellow-600 bg-yellow-100 border-yellow-200'\n      case 'high':\n        return 'text-orange-600 bg-orange-100 border-orange-200'\n      case 'critical':\n        return 'text-red-600 bg-red-100 border-red-200'\n      default:\n        return 'text-gray-600 bg-gray-100 border-gray-200'\n    }\n  }\n\n  return (\n    <div className=\"bg-white border rounded-lg p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex justify-between items-start mb-3\">\n        <div>\n          <h3 className=\"font-medium\">{category.name}</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">{category.description}</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span\n            className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(category.defaultSeverity)}`}\n          >\n            {category.defaultSeverity.toUpperCase()}\n          </span>\n          <button\n            onClick={() => onEdit(category)}\n            className=\"p-1 text-gray-400 hover:text-blue-600\"\n          >\n            <Edit className=\"w-4 h-4\" />\n          </button>\n          <button\n            onClick={() => onDelete(category)}\n            className=\"p-1 text-gray-400 hover:text-red-600\"\n          >\n            <Trash2 className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-500\">Points:</span>\n          <span className=\"font-medium\">{category.points}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-500\">Auto Actions:</span>\n          <span className=\"text-xs text-gray-600\">\n            {category.autoActions?.length || 0} configured\n          </span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-500\">Status:</span>\n          <span\n            className={`text-xs px-2 py-1 rounded ${\n              category.isActive\n                ? 'bg-green-100 text-green-800'\n                : 'bg-gray-100 text-gray-800'\n            }`}\n          >\n            {category.isActive ? 'Active' : 'Inactive'}\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst CategoryDialog = ({ category, open, onClose, onSave }) => {\n  const [formData, setFormData] = useState({\n    name: category?.name || '',\n    description: category?.description || '',\n    defaultSeverity: category?.defaultSeverity || 'medium',\n    points: category?.points || 0,\n    isActive: category?.isActive ?? true,\n    autoActions: category?.autoActions || [],\n  })\n\n  const handleSave = () => {\n    onSave(category?.id, formData)\n    onClose()\n  }\n\n  const addAutoAction = () => {\n    setFormData(prev => ({\n      ...prev,\n      autoActions: [\n        ...prev.autoActions,\n        { threshold: 0, action: '', description: '' },\n      ],\n    }))\n  }\n\n  const updateAutoAction = (index, field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      autoActions: Array.isArray(prev.autoActions)\n        ? prev.autoActions.map((action, i) =>\n            i === index ? { ...action, [field]: value } : action\n          )\n        : [],\n    }))\n  }\n\n  const removeAutoAction = index => {\n    setFormData(prev => ({\n      ...prev,\n      autoActions: prev.autoActions.filter((_, i) => i !== index),\n    }))\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      title={category ? 'Edit Category' : 'Add Category'}\n      size=\"lg\"\n    >\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Category Name *\"\n            value={formData.name}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, name: e.target.value }))\n            }\n            placeholder=\"e.g., Disruptive Behavior\"\n          />\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Default Severity *\n            </label>\n            <select\n              value={formData.defaultSeverity}\n              onChange={e =>\n                setFormData(prev => ({\n                  ...prev,\n                  defaultSeverity: e.target.value,\n                }))\n              }\n              className=\"w-full border rounded-lg px-3 py-2\"\n            >\n              <option value=\"low\">Low</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"high\">High</option>\n              <option value=\"critical\">Critical</option>\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Description</label>\n          <textarea\n            value={formData.description}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, description: e.target.value }))\n            }\n            rows={3}\n            className=\"w-full border rounded-lg px-3 py-2\"\n            placeholder=\"Describe this category of behavior...\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Points\"\n            type=\"number\"\n            value={formData.points}\n            onChange={e =>\n              setFormData(prev => ({\n                ...prev,\n                points: parseInt(e.target.value) || 0,\n              }))\n            }\n            placeholder=\"0\"\n          />\n          <div className=\"flex items-center gap-2 mt-6\">\n            <input\n              type=\"checkbox\"\n              id=\"isActive\"\n              checked={formData.isActive}\n              onChange={e =>\n                setFormData(prev => ({ ...prev, isActive: e.target.checked }))\n              }\n              className=\"rounded\"\n            />\n            <label htmlFor=\"isActive\" className=\"text-sm font-medium\">\n              Active\n            </label>\n          </div>\n        </div>\n\n        <div>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"font-medium\">Auto Actions</h3>\n            <button\n              onClick={addAutoAction}\n              className=\"text-blue-600 hover:text-blue-800 flex items-center gap-1 text-sm\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Add Action\n            </button>\n          </div>\n\n          {formData.autoActions.length === 0 ? (\n            <p className=\"text-gray-500 text-sm\">No auto actions configured</p>\n          ) : (\n            <div className=\"space-y-3\">\n              {Array.isArray(formData.autoActions) &&\n                formData.autoActions.map((action, index) => (\n                  <div key={index} className=\"border rounded-lg p-3\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                      <Input\n                        label=\"Threshold\"\n                        type=\"number\"\n                        value={action.threshold}\n                        onChange={e =>\n                          updateAutoAction(\n                            index,\n                            'threshold',\n                            parseInt(e.target.value) || 0,\n                          )\n                        }\n                        placeholder=\"Points threshold\"\n                        size=\"sm\"\n                      />\n                      <div>\n                        <label className=\"block text-sm font-medium mb-1\">\n                          Action\n                        </label>\n                        <select\n                          value={action.action}\n                          onChange={e =>\n                            updateAutoAction(index, 'action', e.target.value)\n                          }\n                          className=\"w-full border rounded px-3 py-1 text-sm\"\n                        >\n                          <option value=\"\">Select Action</option>\n                          <option value=\"warning\">Send Warning</option>\n                          <option value=\"parent_notification\">\n                            Notify Parents\n                          </option>\n                          <option value=\"counselor_referral\">\n                            Counselor Referral\n                          </option>\n                          <option value=\"suspension\">Suspension</option>\n                        </select>\n                      </div>\n                      <div className=\"flex items-end\">\n                        <button\n                          onClick={() => removeAutoAction(index)}\n                          className=\"p-1 text-red-500 hover:text-red-700\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </div>\n                    <Input\n                      label=\"Description\"\n                      value={action.description}\n                      onChange={e =>\n                        updateAutoAction(index, 'description', e.target.value)\n                      }\n                      placeholder=\"Action description\"\n                      size=\"sm\"\n                      className=\"mt-2\"\n                    />\n                  </div>\n                ))}\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border rounded-lg hover:bg-gray-50\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={!formData.name.trim()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            Save Category\n          </button>\n        </div>\n      </div>\n    </Dialog>\n  )\n}\n\nconst PointsSystemSettings = ({ settings, onUpdate }) => {\n  const [formData, setFormData] = useState({\n    enablePoints: settings?.enablePoints ?? true,\n    resetPeriod: settings?.resetPeriod || 'semester',\n    warningThreshold: settings?.warningThreshold || 10,\n    parentNotificationThreshold: settings?.parentNotificationThreshold || 20,\n    counselorReferralThreshold: settings?.counselorReferralThreshold || 30,\n    suspensionThreshold: settings?.suspensionThreshold || 50,\n  })\n\n  const handleSave = () => {\n    onUpdate(formData)\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h2 className=\"text-lg font-medium mb-4\">Points System Settings</h2>\n\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"checkbox\"\n            id=\"enablePoints\"\n            checked={formData.enablePoints}\n            onChange={e =>\n              setFormData(prev => ({ ...prev, enablePoints: e.target.checked }))\n            }\n            className=\"rounded\"\n          />\n          <label htmlFor=\"enablePoints\" className=\"font-medium\">\n            Enable Points System\n          </label>\n        </div>\n\n        {formData.enablePoints && (\n          <>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Reset Period\n              </label>\n              <select\n                value={formData.resetPeriod}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    resetPeriod: e.target.value,\n                  }))\n                }\n                className=\"w-full border rounded-lg px-3 py-2\"\n              >\n                <option value=\"monthly\">Monthly</option>\n                <option value=\"quarterly\">Quarterly</option>\n                <option value=\"semester\">Semester</option>\n                <option value=\"yearly\">Yearly</option>\n                <option value=\"never\">Never</option>\n              </select>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Input\n                label=\"Warning Threshold\"\n                type=\"number\"\n                value={formData.warningThreshold}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    warningThreshold: parseInt(e.target.value) || 0,\n                  }))\n                }\n                placeholder=\"Points for warning\"\n              />\n              <Input\n                label=\"Parent Notification Threshold\"\n                type=\"number\"\n                value={formData.parentNotificationThreshold}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    parentNotificationThreshold: parseInt(e.target.value) || 0,\n                  }))\n                }\n                placeholder=\"Points for parent notification\"\n              />\n              <Input\n                label=\"Counselor Referral Threshold\"\n                type=\"number\"\n                value={formData.counselorReferralThreshold}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    counselorReferralThreshold: parseInt(e.target.value) || 0,\n                  }))\n                }\n                placeholder=\"Points for counselor referral\"\n              />\n              <Input\n                label=\"Suspension Threshold\"\n                type=\"number\"\n                value={formData.suspensionThreshold}\n                onChange={e =>\n                  setFormData(prev => ({\n                    ...prev,\n                    suspensionThreshold: parseInt(e.target.value) || 0,\n                  }))\n                }\n                placeholder=\"Points for suspension\"\n              />\n            </div>\n          </>\n        )}\n\n        <div className=\"flex justify-end\">\n          <button\n            onClick={handleSave}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            Save Settings\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Settings = () => {\n  const [activeTab, setActiveTab] = useState('categories')\n  const [selectedCategory, setSelectedCategory] = useState(null)\n  const [showCategoryDialog, setShowCategoryDialog] = useState(false)\n\n  const queryClient = useQueryClient()\n\n  const { data: categoriesData, isLoading: categoriesLoading } = useQuery({\n    queryKey: ['behaviour', 'categories'],\n    queryFn: () => behaviourApi.getCategories(),\n  })\n\n  const { data: settingsData, isLoading: settingsLoading } = useQuery({\n    queryKey: ['behaviour', 'settings'],\n    queryFn: () => behaviourApi.getSettings(),\n  })\n\n  const saveCategoryMutation = useMutation({\n    mutationFn: ({ id, data }) =>\n      id\n        ? behaviourApi.updateCategory(id, data)\n        : behaviourApi.createCategory(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['behaviour', 'categories'])\n      setShowCategoryDialog(false)\n      setSelectedCategory(null)\n    },\n  })\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: behaviourApi.deleteCategory,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['behaviour', 'categories'])\n    },\n  })\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: behaviourApi.updateSettings,\n    onSuccess: () => {\n      queryClient.invalidateQueries(['behaviour', 'settings'])\n    },\n  })\n\n  const handleEditCategory = category => {\n    setSelectedCategory(category)\n    setShowCategoryDialog(true)\n  }\n\n  const handleDeleteCategory = category => {\n    if (confirm(`Are you sure you want to delete \"${category.name}\"?`)) {\n      deleteCategoryMutation.mutate(category.id)\n    }\n  }\n\n  const handleSaveCategory = (id, data) => {\n    saveCategoryMutation.mutate({ id, data })\n  }\n\n  const handleAddCategory = () => {\n    setSelectedCategory(null)\n    setShowCategoryDialog(true)\n  }\n\n  const tabs = [\n    { id: 'categories', label: 'Categories', icon: AlertTriangle },\n    { id: 'points', label: 'Points System', icon: Award },\n    { id: 'thresholds', label: 'Thresholds', icon: Target },\n    { id: 'notifications', label: 'Notifications', icon: Users },\n  ]\n\n  if (categoriesLoading || settingsLoading) return <LoadingSkeleton />\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Behavior Settings</h1>\n        {activeTab === 'categories' && (\n          <button\n            onClick={handleAddCategory}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            Add Category\n          </button>\n        )}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"border-b\">\n          <nav className=\"flex\">\n            {Array.isArray(tabs) &&\n              tabs.map(tab => {\n                const Icon = tab.icon\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`flex items-center gap-2 px-6 py-4 font-medium ${\n                      activeTab === tab.id\n                        ? 'border-b-2 border-blue-500 text-blue-600'\n                        : 'text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {tab.label}\n                  </button>\n                )\n              })}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'categories' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-lg font-medium mb-4\">\n                  Behavior Categories\n                </h2>\n                <p className=\"text-gray-600 mb-6\">\n                  Configure different categories of behavior incidents with\n                  their default severity levels and point values.\n                </p>\n              </div>\n\n              {categoriesData?.data?.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <AlertTriangle className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    No Categories\n                  </h3>\n                  <p className=\"text-gray-500 mb-4\">\n                    Create your first behavior category to get started.\n                  </p>\n                  <button\n                    onClick={handleAddCategory}\n                    className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n                  >\n                    Add Category\n                  </button>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {Array.isArray(categoriesData?.data) &&\n                    categoriesData.data.map(category => (\n                      <CategoryCard\n                        key={category.id}\n                        category={category}\n                        onEdit={handleEditCategory}\n                        onDelete={handleDeleteCategory}\n                      />\n                    ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'points' && (\n            <PointsSystemSettings\n              settings={settingsData?.data?.pointsSystem}\n              onUpdate={data =>\n                updateSettingsMutation.mutate({ pointsSystem: data })\n              }\n            />\n          )}\n\n          {activeTab === 'thresholds' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-lg font-medium mb-4\">Action Thresholds</h2>\n                <p className=\"text-gray-600 mb-6\">\n                  Configure automatic actions based on accumulated behavior\n                  points.\n                </p>\n              </div>\n\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\n                  <span className=\"font-medium text-yellow-800\">\n                    Coming Soon\n                  </span>\n                </div>\n                <p className=\"text-yellow-700 mt-1\">\n                  Advanced threshold configuration will be available in the next\n                  update.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'notifications' && (\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-lg font-medium mb-4\">\n                  Notification Settings\n                </h2>\n                <p className=\"text-gray-600 mb-6\">\n                  Configure how and when notifications are sent to parents and\n                  staff.\n                </p>\n              </div>\n\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <SettingsIcon className=\"w-5 h-5 text-blue-600\" />\n                  <span className=\"font-medium text-blue-800\">\n                    Under Development\n                  </span>\n                </div>\n                <p className=\"text-blue-700 mt-1\">\n                  Notification settings panel is currently being developed.\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Category Dialog */}\n      <CategoryDialog\n        category={selectedCategory}\n        open={showCategoryDialog}\n        onClose={() => {\n          setShowCategoryDialog(false)\n          setSelectedCategory(null)\n        }}\n        onSave={handleSaveCategory}\n      />\n    </div>\n  )\n}\n\nexport default Settings\n"
        }
    ]
}